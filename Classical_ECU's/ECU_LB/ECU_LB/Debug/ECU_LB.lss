
ECU_LB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000070  00800200  000032f0  00003388  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000032f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003c2  00800270  00800270  000033f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000033f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003428  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000868  00000000  00000000  00003468  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000f123  00000000  00000000  00003cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000032ea  00000000  00000000  00012df3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000058ed  00000000  00000000  000160dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001ab0  00000000  00000000  0001b9cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004440  00000000  00000000  0001d47c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a75e  00000000  00000000  000218bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000810  00000000  00000000  0002c01a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	54 c2       	rjmp	.+1192   	; 0x4aa <__ctors_end>
       2:	00 00       	nop
       4:	82 c2       	rjmp	.+1284   	; 0x50a <__bad_interrupt>
       6:	00 00       	nop
       8:	80 c2       	rjmp	.+1280   	; 0x50a <__bad_interrupt>
       a:	00 00       	nop
       c:	7e c2       	rjmp	.+1276   	; 0x50a <__bad_interrupt>
       e:	00 00       	nop
      10:	7c c2       	rjmp	.+1272   	; 0x50a <__bad_interrupt>
      12:	00 00       	nop
      14:	7a c2       	rjmp	.+1268   	; 0x50a <__bad_interrupt>
      16:	00 00       	nop
      18:	78 c2       	rjmp	.+1264   	; 0x50a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	76 c2       	rjmp	.+1260   	; 0x50a <__bad_interrupt>
      1e:	00 00       	nop
      20:	74 c2       	rjmp	.+1256   	; 0x50a <__bad_interrupt>
      22:	00 00       	nop
      24:	72 c2       	rjmp	.+1252   	; 0x50a <__bad_interrupt>
      26:	00 00       	nop
      28:	70 c2       	rjmp	.+1248   	; 0x50a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	6e c2       	rjmp	.+1244   	; 0x50a <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 3b 18 	jmp	0x3076	; 0x3076 <__vector_12>
      34:	6a c2       	rjmp	.+1236   	; 0x50a <__bad_interrupt>
      36:	00 00       	nop
      38:	68 c2       	rjmp	.+1232   	; 0x50a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	66 c2       	rjmp	.+1228   	; 0x50a <__bad_interrupt>
      3e:	00 00       	nop
      40:	64 c2       	rjmp	.+1224   	; 0x50a <__bad_interrupt>
      42:	00 00       	nop
      44:	62 c2       	rjmp	.+1220   	; 0x50a <__bad_interrupt>
      46:	00 00       	nop
      48:	60 c2       	rjmp	.+1216   	; 0x50a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	5e c2       	rjmp	.+1212   	; 0x50a <__bad_interrupt>
      4e:	00 00       	nop
      50:	5c c2       	rjmp	.+1208   	; 0x50a <__bad_interrupt>
      52:	00 00       	nop
      54:	5a c2       	rjmp	.+1204   	; 0x50a <__bad_interrupt>
      56:	00 00       	nop
      58:	58 c2       	rjmp	.+1200   	; 0x50a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	ff c4       	rjmp	.+2558   	; 0xa5c <__vector_23>
      5e:	00 00       	nop
      60:	54 c2       	rjmp	.+1192   	; 0x50a <__bad_interrupt>
      62:	00 00       	nop
      64:	52 c2       	rjmp	.+1188   	; 0x50a <__bad_interrupt>
      66:	00 00       	nop
      68:	50 c2       	rjmp	.+1184   	; 0x50a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	4e c2       	rjmp	.+1180   	; 0x50a <__bad_interrupt>
      6e:	00 00       	nop
      70:	4c c2       	rjmp	.+1176   	; 0x50a <__bad_interrupt>
      72:	00 00       	nop
      74:	4a c2       	rjmp	.+1172   	; 0x50a <__bad_interrupt>
      76:	00 00       	nop
      78:	48 c2       	rjmp	.+1168   	; 0x50a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	46 c2       	rjmp	.+1164   	; 0x50a <__bad_interrupt>
      7e:	00 00       	nop
      80:	44 c2       	rjmp	.+1160   	; 0x50a <__bad_interrupt>
      82:	00 00       	nop
      84:	42 c2       	rjmp	.+1156   	; 0x50a <__bad_interrupt>
      86:	00 00       	nop
      88:	40 c2       	rjmp	.+1152   	; 0x50a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	3e c2       	rjmp	.+1148   	; 0x50a <__bad_interrupt>
      8e:	00 00       	nop
      90:	3c c2       	rjmp	.+1144   	; 0x50a <__bad_interrupt>
      92:	00 00       	nop
      94:	3a c2       	rjmp	.+1140   	; 0x50a <__bad_interrupt>
      96:	00 00       	nop
      98:	38 c2       	rjmp	.+1136   	; 0x50a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	36 c2       	rjmp	.+1132   	; 0x50a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	34 c2       	rjmp	.+1128   	; 0x50a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	32 c2       	rjmp	.+1124   	; 0x50a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	30 c2       	rjmp	.+1120   	; 0x50a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	2e c2       	rjmp	.+1116   	; 0x50a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	2c c2       	rjmp	.+1112   	; 0x50a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	2a c2       	rjmp	.+1108   	; 0x50a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	28 c2       	rjmp	.+1104   	; 0x50a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	26 c2       	rjmp	.+1100   	; 0x50a <__bad_interrupt>
      be:	00 00       	nop
      c0:	24 c2       	rjmp	.+1096   	; 0x50a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	22 c2       	rjmp	.+1092   	; 0x50a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	20 c2       	rjmp	.+1088   	; 0x50a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	1e c2       	rjmp	.+1084   	; 0x50a <__bad_interrupt>
      ce:	00 00       	nop
      d0:	1c c2       	rjmp	.+1080   	; 0x50a <__bad_interrupt>
      d2:	00 00       	nop
      d4:	1a c2       	rjmp	.+1076   	; 0x50a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	18 c2       	rjmp	.+1072   	; 0x50a <__bad_interrupt>
      da:	00 00       	nop
      dc:	16 c2       	rjmp	.+1068   	; 0x50a <__bad_interrupt>
      de:	00 00       	nop
      e0:	14 c2       	rjmp	.+1064   	; 0x50a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	60 06       	cpc	r6, r16
      e6:	63 06       	cpc	r6, r19
      e8:	52 06       	cpc	r5, r18
      ea:	56 06       	cpc	r5, r22
      ec:	5c 06       	cpc	r5, r28
      ee:	9a 06       	cpc	r9, r26
      f0:	67 06       	cpc	r6, r23
      f2:	6b 06       	cpc	r6, r27
      f4:	71 06       	cpc	r7, r17
      f6:	75 06       	cpc	r7, r21
      f8:	79 06       	cpc	r7, r25
      fa:	7f 06       	cpc	r7, r31
      fc:	83 06       	cpc	r8, r19
      fe:	87 06       	cpc	r8, r23
     100:	9a 06       	cpc	r9, r26
     102:	8d 06       	cpc	r8, r29
     104:	91 06       	cpc	r9, r17
     106:	95 06       	cpc	r9, r21
     108:	2b 09       	sbc	r18, r11
     10a:	9d 08       	sbc	r9, r13
     10c:	2f 09       	sbc	r18, r15
     10e:	a0 08       	sbc	r10, r0
     110:	a3 08       	sbc	r10, r3
     112:	a7 08       	sbc	r10, r7
     114:	aa 08       	sbc	r10, r10
     116:	ad 08       	sbc	r10, r13
     118:	29 09       	sbc	r18, r9
     11a:	29 09       	sbc	r18, r9
     11c:	b0 08       	sbc	r11, r0
     11e:	b3 08       	sbc	r11, r3
     120:	b6 08       	sbc	r11, r6
     122:	b9 08       	sbc	r11, r9
     124:	bc 08       	sbc	r11, r12
     126:	bf 08       	sbc	r11, r15
     128:	33 09       	sbc	r19, r3
     12a:	cf 08       	sbc	r12, r15
     12c:	d2 08       	sbc	r13, r2
     12e:	29 09       	sbc	r18, r9
     130:	d6 08       	sbc	r13, r6
     132:	da 08       	sbc	r13, r10
     134:	dd 08       	sbc	r13, r13
     136:	e0 08       	sbc	r14, r0
     138:	e3 08       	sbc	r14, r3
     13a:	e6 08       	sbc	r14, r6
     13c:	16 09       	sbc	r17, r6
     13e:	e9 08       	sbc	r14, r9
     140:	ec 08       	sbc	r14, r12
     142:	ef 08       	sbc	r14, r15
     144:	f2 08       	sbc	r15, r2
     146:	f5 08       	sbc	r15, r5
     148:	37 09       	sbc	r19, r7
     14a:	05 09       	sbc	r16, r5
     14c:	08 09       	sbc	r16, r8
     14e:	0c 09       	sbc	r16, r12
     150:	0f 09       	sbc	r16, r15
     152:	29 09       	sbc	r18, r9
     154:	13 09       	sbc	r17, r3
     156:	16 09       	sbc	r17, r6
     158:	1a 09       	sbc	r17, r10
     15a:	1e 09       	sbc	r17, r14
     15c:	22 09       	sbc	r18, r2
     15e:	26 09       	sbc	r18, r6
     160:	09 02       	muls	r16, r25
     162:	09 02       	muls	r16, r25
     164:	50 02       	muls	r21, r16
     166:	37 02       	muls	r19, r23
     168:	4a 02       	muls	r20, r26
     16a:	09 02       	muls	r16, r25
     16c:	09 02       	muls	r16, r25
     16e:	50 02       	muls	r21, r16
     170:	37 02       	muls	r19, r23

00000172 <__trampolines_end>:
     172:	00 00       	nop
     174:	0a 0b       	sbc	r16, r26
     176:	02 09       	sbc	r16, r2
     178:	0c 0d       	add	r16, r12
     17a:	0e 08       	sbc	r0, r14
     17c:	07 03       	mulsu	r16, r23
     17e:	04 01       	movw	r0, r8
	...
     19c:	00 00       	nop
     19e:	12 11       	cpse	r17, r2
     1a0:	10 00       	.word	0x0010	; ????
	...

000001b8 <digital_pin_to_bit_mask_PGM>:
     1b8:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     1c8:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     1d8:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     1e8:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     1f8:	04 08 10 20 40 80                                   ... @.

000001fe <digital_pin_to_port_PGM>:
     1fe:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     20e:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     21e:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     22e:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     23e:	0b 0b 0b 0b 0b 0b                                   ......

00000244 <port_to_input_PGM>:
     244:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     254:	00 01 00 00 03 01 06 01 09 01                       ..........

0000025e <port_to_output_PGM>:
     25e:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     26e:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000278 <port_to_mode_PGM>:
     278:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     288:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000292 <prvIdleTask>:
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
     292:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <uxDeletedTasksWaitingCleanUp>
     296:	88 23       	and	r24, r24
     298:	e9 f0       	breq	.+58     	; 0x2d4 <prvIdleTask+0x42>
     29a:	0f b6       	in	r0, 0x3f	; 63
     29c:	f8 94       	cli
     29e:	0f 92       	push	r0
     2a0:	e0 91 0b 04 	lds	r30, 0x040B	; 0x80040b <xTasksWaitingTermination+0x5>
     2a4:	f0 91 0c 04 	lds	r31, 0x040C	; 0x80040c <xTasksWaitingTermination+0x6>
     2a8:	c6 81       	ldd	r28, Z+6	; 0x06
     2aa:	d7 81       	ldd	r29, Z+7	; 0x07
     2ac:	ce 01       	movw	r24, r28
     2ae:	02 96       	adiw	r24, 0x02	; 2
     2b0:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <uxListRemove>
     2b4:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <uxCurrentNumberOfTasks>
     2b8:	81 50       	subi	r24, 0x01	; 1
     2ba:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <uxCurrentNumberOfTasks>
     2be:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <uxDeletedTasksWaitingCleanUp>
     2c2:	81 50       	subi	r24, 0x01	; 1
     2c4:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <uxDeletedTasksWaitingCleanUp>
     2c8:	0f 90       	pop	r0
     2ca:	0f be       	out	0x3f, r0	; 63
     2cc:	ce 01       	movw	r24, r28
     2ce:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <prvDeleteTCB>
     2d2:	df cf       	rjmp	.-66     	; 0x292 <prvIdleTask>
     2d4:	80 91 2e 04 	lds	r24, 0x042E	; 0x80042e <pxReadyTasksLists>
     2d8:	82 30       	cpi	r24, 0x02	; 2
     2da:	10 f0       	brcs	.+4      	; 0x2e0 <prvIdleTask+0x4e>
     2dc:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <vPortYield>
     2e0:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <vApplicationIdleHook>
     2e4:	d6 cf       	rjmp	.-84     	; 0x292 <prvIdleTask>

000002e6 <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     2e6:	cf 93       	push	r28
     2e8:	df 93       	push	r29
     2ea:	00 d0       	rcall	.+0      	; 0x2ec <prvTimerTask+0x6>
     2ec:	1f 92       	push	r1
     2ee:	1f 92       	push	r1
     2f0:	cd b7       	in	r28, 0x3d	; 61
     2f2:	de b7       	in	r29, 0x3e	; 62
     2f4:	e0 91 ae 04 	lds	r30, 0x04AE	; 0x8004ae <pxCurrentTimerList>
     2f8:	f0 91 af 04 	lds	r31, 0x04AF	; 0x8004af <pxCurrentTimerList+0x1>
     2fc:	d0 80       	ld	r13, Z
     2fe:	dd 20       	and	r13, r13
     300:	31 f0       	breq	.+12     	; 0x30e <prvTimerTask+0x28>
     302:	05 80       	ldd	r0, Z+5	; 0x05
     304:	f6 81       	ldd	r31, Z+6	; 0x06
     306:	e0 2d       	mov	r30, r0
     308:	00 81       	ld	r16, Z
     30a:	11 81       	ldd	r17, Z+1	; 0x01
     30c:	02 c0       	rjmp	.+4      	; 0x312 <prvTimerTask+0x2c>
     30e:	00 e0       	ldi	r16, 0x00	; 0
     310:	10 e0       	ldi	r17, 0x00	; 0
     312:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <vTaskSuspendAll>
     316:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <xTaskGetTickCount>
     31a:	7c 01       	movw	r14, r24
     31c:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <xLastTime.2516>
     320:	90 91 a7 04 	lds	r25, 0x04A7	; 0x8004a7 <xLastTime.2516+0x1>
     324:	e8 16       	cp	r14, r24
     326:	f9 06       	cpc	r15, r25
     328:	20 f4       	brcc	.+8      	; 0x332 <prvTimerTask+0x4c>
     32a:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <prvSwitchTimerLists>
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	01 c0       	rjmp	.+2      	; 0x334 <prvTimerTask+0x4e>
     332:	80 e0       	ldi	r24, 0x00	; 0
     334:	f0 92 a7 04 	sts	0x04A7, r15	; 0x8004a7 <xLastTime.2516+0x1>
     338:	e0 92 a6 04 	sts	0x04A6, r14	; 0x8004a6 <xLastTime.2516>
     33c:	81 11       	cpse	r24, r1
     33e:	24 c0       	rjmp	.+72     	; 0x388 <prvTimerTask+0xa2>
     340:	dd 20       	and	r13, r13
     342:	51 f0       	breq	.+20     	; 0x358 <prvTimerTask+0x72>
     344:	e0 16       	cp	r14, r16
     346:	f1 06       	cpc	r15, r17
     348:	70 f0       	brcs	.+28     	; 0x366 <prvTimerTask+0x80>
     34a:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <xTaskResumeAll>
     34e:	b7 01       	movw	r22, r14
     350:	c8 01       	movw	r24, r16
     352:	0e 94 29 15 	call	0x2a52	; 0x2a52 <prvProcessExpiredTimer>
     356:	1e c0       	rjmp	.+60     	; 0x394 <prvTimerTask+0xae>
     358:	e0 91 ac 04 	lds	r30, 0x04AC	; 0x8004ac <pxOverflowTimerList>
     35c:	f0 91 ad 04 	lds	r31, 0x04AD	; 0x8004ad <pxOverflowTimerList+0x1>
     360:	80 81       	ld	r24, Z
     362:	41 e0       	ldi	r20, 0x01	; 1
     364:	81 11       	cpse	r24, r1
     366:	40 e0       	ldi	r20, 0x00	; 0
     368:	b8 01       	movw	r22, r16
     36a:	6e 19       	sub	r22, r14
     36c:	7f 09       	sbc	r23, r15
     36e:	80 91 aa 04 	lds	r24, 0x04AA	; 0x8004aa <xTimerQueue>
     372:	90 91 ab 04 	lds	r25, 0x04AB	; 0x8004ab <xTimerQueue+0x1>
     376:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <vQueueWaitForMessageRestricted>
     37a:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <xTaskResumeAll>
     37e:	81 11       	cpse	r24, r1
     380:	09 c0       	rjmp	.+18     	; 0x394 <prvTimerTask+0xae>
     382:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <vPortYield>
     386:	06 c0       	rjmp	.+12     	; 0x394 <prvTimerTask+0xae>
     388:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <xTaskResumeAll>
     38c:	03 c0       	rjmp	.+6      	; 0x394 <prvTimerTask+0xae>
     38e:	89 81       	ldd	r24, Y+1	; 0x01
     390:	87 ff       	sbrs	r24, 7
     392:	0e c0       	rjmp	.+28     	; 0x3b0 <prvTimerTask+0xca>
     394:	40 e0       	ldi	r20, 0x00	; 0
     396:	50 e0       	ldi	r21, 0x00	; 0
     398:	be 01       	movw	r22, r28
     39a:	6f 5f       	subi	r22, 0xFF	; 255
     39c:	7f 4f       	sbci	r23, 0xFF	; 255
     39e:	80 91 aa 04 	lds	r24, 0x04AA	; 0x8004aa <xTimerQueue>
     3a2:	90 91 ab 04 	lds	r25, 0x04AB	; 0x8004ab <xTimerQueue+0x1>
     3a6:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <xQueueReceive>
     3aa:	81 11       	cpse	r24, r1
     3ac:	f0 cf       	rjmp	.-32     	; 0x38e <prvTimerTask+0xa8>
     3ae:	a2 cf       	rjmp	.-188    	; 0x2f4 <prvTimerTask+0xe>
     3b0:	0c 81       	ldd	r16, Y+4	; 0x04
     3b2:	1d 81       	ldd	r17, Y+5	; 0x05
     3b4:	d8 01       	movw	r26, r16
     3b6:	1a 96       	adiw	r26, 0x0a	; 10
     3b8:	8d 91       	ld	r24, X+
     3ba:	9c 91       	ld	r25, X
     3bc:	1b 97       	sbiw	r26, 0x0b	; 11
     3be:	89 2b       	or	r24, r25
     3c0:	21 f0       	breq	.+8      	; 0x3ca <prvTimerTask+0xe4>
     3c2:	c8 01       	movw	r24, r16
     3c4:	02 96       	adiw	r24, 0x02	; 2
     3c6:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <uxListRemove>
     3ca:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <xTaskGetTickCount>
     3ce:	7c 01       	movw	r14, r24
     3d0:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <xLastTime.2516>
     3d4:	90 91 a7 04 	lds	r25, 0x04A7	; 0x8004a7 <xLastTime.2516+0x1>
     3d8:	e8 16       	cp	r14, r24
     3da:	f9 06       	cpc	r15, r25
     3dc:	10 f4       	brcc	.+4      	; 0x3e2 <prvTimerTask+0xfc>
     3de:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <prvSwitchTimerLists>
     3e2:	f0 92 a7 04 	sts	0x04A7, r15	; 0x8004a7 <xLastTime.2516+0x1>
     3e6:	e0 92 a6 04 	sts	0x04A6, r14	; 0x8004a6 <xLastTime.2516>
     3ea:	e9 81       	ldd	r30, Y+1	; 0x01
     3ec:	8e 2f       	mov	r24, r30
     3ee:	ee 0f       	add	r30, r30
     3f0:	99 0b       	sbc	r25, r25
     3f2:	aa 0b       	sbc	r26, r26
     3f4:	bb 0b       	sbc	r27, r27
     3f6:	fc 01       	movw	r30, r24
     3f8:	31 97       	sbiw	r30, 0x01	; 1
     3fa:	e9 30       	cpi	r30, 0x09	; 9
     3fc:	f1 05       	cpc	r31, r1
     3fe:	50 f6       	brcc	.-108    	; 0x394 <prvTimerTask+0xae>
     400:	d8 01       	movw	r26, r16
     402:	52 96       	adiw	r26, 0x12	; 18
     404:	9c 91       	ld	r25, X
     406:	88 27       	eor	r24, r24
     408:	e0 55       	subi	r30, 0x50	; 80
     40a:	ff 4f       	sbci	r31, 0xFF	; 255
     40c:	8f 4f       	sbci	r24, 0xFF	; 255
     40e:	0c 94 3d 18 	jmp	0x307a	; 0x307a <__tablejump2__>
     412:	91 60       	ori	r25, 0x01	; 1
     414:	f8 01       	movw	r30, r16
     416:	92 8b       	std	Z+18, r25	; 0x12
     418:	2a 81       	ldd	r18, Y+2	; 0x02
     41a:	3b 81       	ldd	r19, Y+3	; 0x03
     41c:	64 85       	ldd	r22, Z+12	; 0x0c
     41e:	75 85       	ldd	r23, Z+13	; 0x0d
     420:	62 0f       	add	r22, r18
     422:	73 1f       	adc	r23, r19
     424:	a7 01       	movw	r20, r14
     426:	c8 01       	movw	r24, r16
     428:	0e 94 dd 14 	call	0x29ba	; 0x29ba <prvInsertTimerInActiveList>
     42c:	88 23       	and	r24, r24
     42e:	09 f4       	brne	.+2      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     430:	b1 cf       	rjmp	.-158    	; 0x394 <prvTimerTask+0xae>
     432:	d8 01       	movw	r26, r16
     434:	52 96       	adiw	r26, 0x12	; 18
     436:	8c 91       	ld	r24, X
     438:	52 97       	sbiw	r26, 0x12	; 18
     43a:	82 ff       	sbrs	r24, 2
     43c:	0d c0       	rjmp	.+26     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     43e:	6a 81       	ldd	r22, Y+2	; 0x02
     440:	7b 81       	ldd	r23, Y+3	; 0x03
     442:	1c 96       	adiw	r26, 0x0c	; 12
     444:	8d 91       	ld	r24, X+
     446:	9c 91       	ld	r25, X
     448:	1d 97       	sbiw	r26, 0x0d	; 13
     44a:	68 0f       	add	r22, r24
     44c:	79 1f       	adc	r23, r25
     44e:	a7 01       	movw	r20, r14
     450:	c8 01       	movw	r24, r16
     452:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <prvReloadTimer>
     456:	03 c0       	rjmp	.+6      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     458:	8e 7f       	andi	r24, 0xFE	; 254
     45a:	f8 01       	movw	r30, r16
     45c:	82 8b       	std	Z+18, r24	; 0x12
     45e:	d8 01       	movw	r26, r16
     460:	50 96       	adiw	r26, 0x10	; 16
     462:	ed 91       	ld	r30, X+
     464:	fc 91       	ld	r31, X
     466:	51 97       	sbiw	r26, 0x11	; 17
     468:	c8 01       	movw	r24, r16
     46a:	19 95       	eicall
     46c:	93 cf       	rjmp	.-218    	; 0x394 <prvTimerTask+0xae>
     46e:	91 60       	ori	r25, 0x01	; 1
     470:	d8 01       	movw	r26, r16
     472:	52 96       	adiw	r26, 0x12	; 18
     474:	9c 93       	st	X, r25
     476:	52 97       	sbiw	r26, 0x12	; 18
     478:	6a 81       	ldd	r22, Y+2	; 0x02
     47a:	7b 81       	ldd	r23, Y+3	; 0x03
     47c:	1d 96       	adiw	r26, 0x0d	; 13
     47e:	7c 93       	st	X, r23
     480:	6e 93       	st	-X, r22
     482:	1c 97       	sbiw	r26, 0x0c	; 12
     484:	6e 0d       	add	r22, r14
     486:	7f 1d       	adc	r23, r15
     488:	97 01       	movw	r18, r14
     48a:	a7 01       	movw	r20, r14
     48c:	c8 01       	movw	r24, r16
     48e:	0e 94 dd 14 	call	0x29ba	; 0x29ba <prvInsertTimerInActiveList>
     492:	80 cf       	rjmp	.-256    	; 0x394 <prvTimerTask+0xae>
     494:	91 fd       	sbrc	r25, 1
     496:	04 c0       	rjmp	.+8      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     498:	c8 01       	movw	r24, r16
     49a:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <vPortFree>
     49e:	7a cf       	rjmp	.-268    	; 0x394 <prvTimerTask+0xae>
     4a0:	9e 7f       	andi	r25, 0xFE	; 254
     4a2:	f8 01       	movw	r30, r16
     4a4:	92 8b       	std	Z+18, r25	; 0x12
     4a6:	76 cf       	rjmp	.-276    	; 0x394 <prvTimerTask+0xae>

000004a8 <__ctors_start>:
     4a8:	fd 02       	muls	r31, r29

000004aa <__ctors_end>:
     4aa:	11 24       	eor	r1, r1
     4ac:	1f be       	out	0x3f, r1	; 63
     4ae:	cf ef       	ldi	r28, 0xFF	; 255
     4b0:	d1 e2       	ldi	r29, 0x21	; 33
     4b2:	de bf       	out	0x3e, r29	; 62
     4b4:	cd bf       	out	0x3d, r28	; 61
     4b6:	00 e0       	ldi	r16, 0x00	; 0
     4b8:	0c bf       	out	0x3c, r16	; 60

000004ba <__do_copy_data>:
     4ba:	12 e0       	ldi	r17, 0x02	; 2
     4bc:	a0 e0       	ldi	r26, 0x00	; 0
     4be:	b2 e0       	ldi	r27, 0x02	; 2
     4c0:	e0 ef       	ldi	r30, 0xF0	; 240
     4c2:	f2 e3       	ldi	r31, 0x32	; 50
     4c4:	00 e0       	ldi	r16, 0x00	; 0
     4c6:	0b bf       	out	0x3b, r16	; 59
     4c8:	02 c0       	rjmp	.+4      	; 0x4ce <__do_copy_data+0x14>
     4ca:	07 90       	elpm	r0, Z+
     4cc:	0d 92       	st	X+, r0
     4ce:	a0 37       	cpi	r26, 0x70	; 112
     4d0:	b1 07       	cpc	r27, r17
     4d2:	d9 f7       	brne	.-10     	; 0x4ca <__do_copy_data+0x10>

000004d4 <__do_clear_bss>:
     4d4:	26 e0       	ldi	r18, 0x06	; 6
     4d6:	a0 e7       	ldi	r26, 0x70	; 112
     4d8:	b2 e0       	ldi	r27, 0x02	; 2
     4da:	01 c0       	rjmp	.+2      	; 0x4de <.do_clear_bss_start>

000004dc <.do_clear_bss_loop>:
     4dc:	1d 92       	st	X+, r1

000004de <.do_clear_bss_start>:
     4de:	a2 33       	cpi	r26, 0x32	; 50
     4e0:	b2 07       	cpc	r27, r18
     4e2:	e1 f7       	brne	.-8      	; 0x4dc <.do_clear_bss_loop>

000004e4 <__do_global_ctors>:
     4e4:	12 e0       	ldi	r17, 0x02	; 2
     4e6:	c5 e5       	ldi	r28, 0x55	; 85
     4e8:	d2 e0       	ldi	r29, 0x02	; 2
     4ea:	00 e0       	ldi	r16, 0x00	; 0
     4ec:	06 c0       	rjmp	.+12     	; 0x4fa <__do_global_ctors+0x16>
     4ee:	21 97       	sbiw	r28, 0x01	; 1
     4f0:	01 09       	sbc	r16, r1
     4f2:	80 2f       	mov	r24, r16
     4f4:	fe 01       	movw	r30, r28
     4f6:	0e 94 3d 18 	call	0x307a	; 0x307a <__tablejump2__>
     4fa:	c4 35       	cpi	r28, 0x54	; 84
     4fc:	d1 07       	cpc	r29, r17
     4fe:	80 e0       	ldi	r24, 0x00	; 0
     500:	08 07       	cpc	r16, r24
     502:	a9 f7       	brne	.-22     	; 0x4ee <__do_global_ctors+0xa>
     504:	9f d2       	rcall	.+1342   	; 0xa44 <main>
     506:	0c 94 76 19 	jmp	0x32ec	; 0x32ec <_exit>

0000050a <__bad_interrupt>:
     50a:	7a cd       	rjmp	.-1292   	; 0x0 <__vectors>

0000050c <_Z8BSP_initv>:
void BSP_buzzer_on(void){
	digitalWrite(PIN_BUZZER, HIGH);
}

void BSP_buzzer_off(void){
	digitalWrite(PIN_BUZZER, LOW);
     50c:	61 e0       	ldi	r22, 0x01	; 1
     50e:	89 e2       	ldi	r24, 0x29	; 41
     510:	12 d4       	rcall	.+2084   	; 0xd36 <pinMode>
     512:	61 e0       	ldi	r22, 0x01	; 1
     514:	8c e2       	ldi	r24, 0x2C	; 44
     516:	0f d4       	rcall	.+2078   	; 0xd36 <pinMode>
     518:	61 e0       	ldi	r22, 0x01	; 1
     51a:	8a e2       	ldi	r24, 0x2A	; 42
     51c:	0c d4       	rcall	.+2072   	; 0xd36 <pinMode>
     51e:	61 e0       	ldi	r22, 0x01	; 1
     520:	8d e2       	ldi	r24, 0x2D	; 45
     522:	09 d4       	rcall	.+2066   	; 0xd36 <pinMode>
     524:	62 e0       	ldi	r22, 0x02	; 2
     526:	80 e3       	ldi	r24, 0x30	; 48
     528:	06 d4       	rcall	.+2060   	; 0xd36 <pinMode>
     52a:	81 e7       	ldi	r24, 0x71	; 113
     52c:	92 e0       	ldi	r25, 0x02	; 2
     52e:	7d d7       	rcall	.+3834   	; 0x142a <_ZN7MCP25155resetEv>
     530:	42 e0       	ldi	r20, 0x02	; 2
     532:	6b e0       	ldi	r22, 0x0B	; 11
     534:	81 e7       	ldi	r24, 0x71	; 113
     536:	92 e0       	ldi	r25, 0x02	; 2
     538:	e2 d5       	rcall	.+3012   	; 0x10fe <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK>
     53a:	81 e7       	ldi	r24, 0x71	; 113
     53c:	92 e0       	ldi	r25, 0x02	; 2
     53e:	dd c5       	rjmp	.+3002   	; 0x10fa <_ZN7MCP251513setNormalModeEv>

00000540 <_Z14BSP_led_red_onv>:
     540:	61 e0       	ldi	r22, 0x01	; 1
     542:	8c e2       	ldi	r24, 0x2C	; 44
     544:	34 c4       	rjmp	.+2152   	; 0xdae <digitalWrite>

00000546 <_Z15BSP_led_red_offv>:
     546:	60 e0       	ldi	r22, 0x00	; 0
     548:	8c e2       	ldi	r24, 0x2C	; 44
     54a:	31 c4       	rjmp	.+2146   	; 0xdae <digitalWrite>

0000054c <_Z17BSP_led_yellow_onv>:
     54c:	61 e0       	ldi	r22, 0x01	; 1
     54e:	8a e2       	ldi	r24, 0x2A	; 42
     550:	2e c4       	rjmp	.+2140   	; 0xdae <digitalWrite>

00000552 <_Z18BSP_led_yellow_offv>:
     552:	60 e0       	ldi	r22, 0x00	; 0
     554:	8a e2       	ldi	r24, 0x2A	; 42
     556:	2b c4       	rjmp	.+2134   	; 0xdae <digitalWrite>

00000558 <_Z16BSP_led_green_onv>:
     558:	61 e0       	ldi	r22, 0x01	; 1
     55a:	89 e2       	ldi	r24, 0x29	; 41
     55c:	28 c4       	rjmp	.+2128   	; 0xdae <digitalWrite>

0000055e <_Z17BSP_led_green_offv>:
     55e:	60 e0       	ldi	r22, 0x00	; 0
     560:	89 e2       	ldi	r24, 0x29	; 41
     562:	25 c4       	rjmp	.+2122   	; 0xdae <digitalWrite>

00000564 <_Z14BSP_get_switchv>:
}


int BSP_get_switch(void){
	return digitalRead(PIN_SWITCH);
     564:	80 e3       	ldi	r24, 0x30	; 48
     566:	51 c4       	rjmp	.+2210   	; 0xe0a <digitalRead>

00000568 <_Z18BSP_send_can_frameP9can_frame>:
}

void BSP_send_can_frame(Can_frame_t * frame){
	mcp2515.sendMessage(frame);
     568:	bc 01       	movw	r22, r24
     56a:	81 e7       	ldi	r24, 0x71	; 113
     56c:	92 e0       	ldi	r25, 0x02	; 2
     56e:	0c 94 30 0b 	jmp	0x1660	; 0x1660 <_ZN7MCP251511sendMessageEPK9can_frame>

00000572 <_Z17BSP_get_can_frameP9can_frame>:
}

int BSP_get_can_frame(Can_frame_t *frame){
	int rtnValue = 0;
	if (mcp2515.readMessage(frame) == MCP2515::ERROR_OK){
     572:	bc 01       	movw	r22, r24
     574:	81 e7       	ldi	r24, 0x71	; 113
     576:	92 e0       	ldi	r25, 0x02	; 2
     578:	0e 94 1e 0c 	call	0x183c	; 0x183c <_ZN7MCP251511readMessageEP9can_frame>
		rtnValue = 1;
	}
	return rtnValue;
     57c:	21 e0       	ldi	r18, 0x01	; 1
     57e:	30 e0       	ldi	r19, 0x00	; 0
     580:	88 23       	and	r24, r24
     582:	11 f0       	breq	.+4      	; 0x588 <_Z17BSP_get_can_frameP9can_frame+0x16>
     584:	20 e0       	ldi	r18, 0x00	; 0
     586:	30 e0       	ldi	r19, 0x00	; 0
}
     588:	c9 01       	movw	r24, r18
     58a:	08 95       	ret

0000058c <vApplicationTickHook>:
		Active_postFromISR(AO_blinkyButton, &switchPressedEvt, xHigherPriorityTaskWoken);
		state_switch = STATE_SWITCH_PRESSED;
	}
}

void vApplicationTickHook(void) {
     58c:	cf 93       	push	r28
     58e:	df 93       	push	r29
     590:	1f 92       	push	r1
     592:	cd b7       	in	r28, 0x3d	; 61
     594:	de b7       	in	r29, 0x3e	; 62
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
     596:	19 82       	std	Y+1, r1	; 0x01
	int current = BSP_get_switch();
     598:	e5 df       	rcall	.-54     	; 0x564 <_Z14BSP_get_switchv>
	
	switch(state_switch){
     59a:	20 91 70 02 	lds	r18, 0x0270	; 0x800270 <__data_end>
     59e:	21 30       	cpi	r18, 0x01	; 1
     5a0:	19 f1       	breq	.+70     	; 0x5e8 <vApplicationTickHook+0x5c>
     5a2:	18 f0       	brcs	.+6      	; 0x5aa <vApplicationTickHook+0x1e>
     5a4:	22 30       	cpi	r18, 0x02	; 2
     5a6:	81 f0       	breq	.+32     	; 0x5c8 <vApplicationTickHook+0x3c>
     5a8:	21 c0       	rjmp	.+66     	; 0x5ec <vApplicationTickHook+0x60>

static State_switch_t state_switch = STATE_SWITCH_INIT;


static void state_switch_pressed_handler(const int * reading, BaseType_t * xHigherPriorityTaskWoken){
	if(*reading == SWITCH_NOT_PRESSED){
     5aa:	81 30       	cpi	r24, 0x01	; 1
     5ac:	91 05       	cpc	r25, r1
     5ae:	61 f4       	brne	.+24     	; 0x5c8 <vApplicationTickHook+0x3c>
		static Event const switchRelasedEvt = {SWITCH_RELEASED_SIG};
		Active_postFromISR(AO_blinkyButton, &switchRelasedEvt, xHigherPriorityTaskWoken);
     5b0:	ae 01       	movw	r20, r28
     5b2:	4f 5f       	subi	r20, 0xFF	; 255
     5b4:	5f 4f       	sbci	r21, 0xFF	; 255
     5b6:	66 e4       	ldi	r22, 0x46	; 70
     5b8:	72 e0       	ldi	r23, 0x02	; 2
     5ba:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <AO_blinkyButton>
     5be:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <AO_blinkyButton+0x1>
     5c2:	ee d0       	rcall	.+476    	; 0x7a0 <_Z18Active_postFromISRP6ActivePK5EventPa>
		state_switch = STATE_SWITCH_NOT_PRESSED;
     5c4:	82 e0       	ldi	r24, 0x02	; 2
     5c6:	0d c0       	rjmp	.+26     	; 0x5e2 <vApplicationTickHook+0x56>
	}
}
static void state_switch_not_pressed_handler(const int * reading, BaseType_t * xHigherPriorityTaskWoken){
	if(*reading == SWITCH_PRESSED){
     5c8:	89 2b       	or	r24, r25
     5ca:	81 f4       	brne	.+32     	; 0x5ec <vApplicationTickHook+0x60>
		static Event const switchPressedEvt = {SWITCH_PRESSED_SIG};
		Active_postFromISR(AO_blinkyButton, &switchPressedEvt, xHigherPriorityTaskWoken);
     5cc:	ae 01       	movw	r20, r28
     5ce:	4f 5f       	subi	r20, 0xFF	; 255
     5d0:	5f 4f       	sbci	r21, 0xFF	; 255
     5d2:	64 e4       	ldi	r22, 0x44	; 68
     5d4:	72 e0       	ldi	r23, 0x02	; 2
     5d6:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <AO_blinkyButton>
     5da:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <AO_blinkyButton+0x1>
     5de:	e0 d0       	rcall	.+448    	; 0x7a0 <_Z18Active_postFromISRP6ActivePK5EventPa>
		state_switch = STATE_SWITCH_PRESSED;
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <__data_end>
     5e6:	02 c0       	rjmp	.+4      	; 0x5ec <vApplicationTickHook+0x60>

static State_switch_t state_switch = STATE_SWITCH_INIT;


static void state_switch_pressed_handler(const int * reading, BaseType_t * xHigherPriorityTaskWoken){
	if(*reading == SWITCH_NOT_PRESSED){
     5e8:	01 97       	sbiw	r24, 0x01	; 1
			state_switch_not_pressed_handler(&current, &xHigherPriorityTaskWoken);
			break;
		}
	}
	
	CanFrameEvent_fromISR(&xHigherPriorityTaskWoken);
     5ea:	11 f3       	breq	.-60     	; 0x5b0 <vApplicationTickHook+0x24>
     5ec:	ce 01       	movw	r24, r28
     5ee:	01 96       	adiw	r24, 0x01	; 1
     5f0:	45 d1       	rcall	.+650    	; 0x87c <_Z21CanFrameEvent_fromISRPa>

}
     5f2:	0f 90       	pop	r0
     5f4:	df 91       	pop	r29
     5f6:	cf 91       	pop	r28
     5f8:	08 95       	ret

000005fa <_GLOBAL__sub_I__Z8BSP_initv>:
     5fa:	0f 93       	push	r16
     5fc:	1f 93       	push	r17
#define PIN_LED_RED						44
#define PIN_LED_YELLOW					42
#define PIN_LED_GREEN					41


static MCP2515 mcp2515(SS_PIN);
     5fe:	00 e0       	ldi	r16, 0x00	; 0
     600:	10 e0       	ldi	r17, 0x00	; 0
     602:	20 e8       	ldi	r18, 0x80	; 128
     604:	36 e9       	ldi	r19, 0x96	; 150
     606:	48 e9       	ldi	r20, 0x98	; 152
     608:	50 e0       	ldi	r21, 0x00	; 0
     60a:	61 e3       	ldi	r22, 0x31	; 49
     60c:	81 e7       	ldi	r24, 0x71	; 113
     60e:	92 e0       	ldi	r25, 0x02	; 2
     610:	79 d4       	rcall	.+2290   	; 0xf04 <_ZN7MCP2515C1EhmP8SPIClass>
		}
	}
	
	CanFrameEvent_fromISR(&xHigherPriorityTaskWoken);

}
     612:	1f 91       	pop	r17
     614:	0f 91       	pop	r16
     616:	08 95       	ret

00000618 <_Z14areFramesEqualP9can_frameS0_>:
		CAN_REQUEST_SEAT_BELT
	}
};


int areFramesEqual(can_frame * const frame1, can_frame * const frame2){
     618:	cf 92       	push	r12
     61a:	df 92       	push	r13
     61c:	ef 92       	push	r14
     61e:	ff 92       	push	r15
     620:	0f 93       	push	r16
     622:	1f 93       	push	r17
	int rtnValue = false;
	if( frame1->can_id == frame2->can_id &&
     624:	fc 01       	movw	r30, r24
     626:	c0 80       	ld	r12, Z
     628:	d1 80       	ldd	r13, Z+1	; 0x01
     62a:	e2 80       	ldd	r14, Z+2	; 0x02
     62c:	f3 80       	ldd	r15, Z+3	; 0x03
     62e:	fb 01       	movw	r30, r22
     630:	00 81       	ld	r16, Z
     632:	11 81       	ldd	r17, Z+1	; 0x01
     634:	22 81       	ldd	r18, Z+2	; 0x02
     636:	33 81       	ldd	r19, Z+3	; 0x03
     638:	c0 16       	cp	r12, r16
     63a:	d1 06       	cpc	r13, r17
     63c:	e2 06       	cpc	r14, r18
     63e:	f3 06       	cpc	r15, r19
     640:	f1 f4       	brne	.+60     	; 0x67e <_Z14areFramesEqualP9can_frameS0_+0x66>
	frame1->can_dlc == frame2->can_dlc)
     642:	fc 01       	movw	r30, r24
     644:	24 81       	ldd	r18, Z+4	; 0x04
};


int areFramesEqual(can_frame * const frame1, can_frame * const frame2){
	int rtnValue = false;
	if( frame1->can_id == frame2->can_id &&
     646:	fb 01       	movw	r30, r22
     648:	34 81       	ldd	r19, Z+4	; 0x04
     64a:	23 13       	cpse	r18, r19
     64c:	18 c0       	rjmp	.+48     	; 0x67e <_Z14areFramesEqualP9can_frameS0_+0x66>
     64e:	fc 01       	movw	r30, r24
     650:	38 96       	adiw	r30, 0x08	; 8
     652:	db 01       	movw	r26, r22
     654:	18 96       	adiw	r26, 0x08	; 8
     656:	40 e0       	ldi	r20, 0x00	; 0
     658:	50 e0       	ldi	r21, 0x00	; 0
	frame1->can_dlc == frame2->can_dlc)
	{
		int i;
		for(i=0; i< frame1->can_dlc; i++){
     65a:	30 e0       	ldi	r19, 0x00	; 0
     65c:	42 17       	cp	r20, r18
     65e:	53 07       	cpc	r21, r19
     660:	3c f4       	brge	.+14     	; 0x670 <_Z14areFramesEqualP9can_frameS0_+0x58>
			if(frame1->data[i] != frame2->data[i]){
     662:	91 91       	ld	r25, Z+
     664:	8d 91       	ld	r24, X+
     666:	98 13       	cpse	r25, r24
     668:	03 c0       	rjmp	.+6      	; 0x670 <_Z14areFramesEqualP9can_frameS0_+0x58>
	int rtnValue = false;
	if( frame1->can_id == frame2->can_id &&
	frame1->can_dlc == frame2->can_dlc)
	{
		int i;
		for(i=0; i< frame1->can_dlc; i++){
     66a:	4f 5f       	subi	r20, 0xFF	; 255
     66c:	5f 4f       	sbci	r21, 0xFF	; 255
     66e:	f6 cf       	rjmp	.-20     	; 0x65c <_Z14areFramesEqualP9can_frameS0_+0x44>
	}
};


int areFramesEqual(can_frame * const frame1, can_frame * const frame2){
	int rtnValue = false;
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	42 17       	cp	r20, r18
     676:	53 07       	cpc	r21, r19
     678:	21 f0       	breq	.+8      	; 0x682 <_Z14areFramesEqualP9can_frameS0_+0x6a>
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	02 c0       	rjmp	.+4      	; 0x682 <_Z14areFramesEqualP9can_frameS0_+0x6a>
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	90 e0       	ldi	r25, 0x00	; 0
			rtnValue = true;
		}
	}
	
	return rtnValue;
}
     682:	1f 91       	pop	r17
     684:	0f 91       	pop	r16
     686:	ff 90       	pop	r15
     688:	ef 90       	pop	r14
     68a:	df 90       	pop	r13
     68c:	cf 90       	pop	r12
     68e:	08 95       	ret

00000690 <_ZL16Active_eventLoopPv>:
    me->dispatch = dispatch; /* assign the dispatch handler */
}

/*..........................................................................*/
/* thread function for all Active Objects (FreeRTOS task signature) */
static void Active_eventLoop(void *pvParameters) {
     690:	cf 93       	push	r28
     692:	df 93       	push	r29
     694:	1f 92       	push	r1
     696:	1f 92       	push	r1
     698:	cd b7       	in	r28, 0x3d	; 61
     69a:	de b7       	in	r29, 0x3e	; 62
     69c:	8c 01       	movw	r16, r24
    static Event const initEvt = { INIT_SIG };

    configASSERT(me); /* Active object must be provided */

    /* initialize the AO */
    (*me->dispatch)(me, &initEvt);
     69e:	7c 01       	movw	r14, r24
     6a0:	8d e4       	ldi	r24, 0x4D	; 77
     6a2:	e8 0e       	add	r14, r24
     6a4:	f1 1c       	adc	r15, r1
     6a6:	d7 01       	movw	r26, r14
     6a8:	ed 91       	ld	r30, X+
     6aa:	fc 91       	ld	r31, X
     6ac:	6e e4       	ldi	r22, 0x4E	; 78
     6ae:	72 e0       	ldi	r23, 0x02	; 2
     6b0:	c8 01       	movw	r24, r16
     6b2:	19 95       	eicall

    for (;;) {   /* for-ever "superloop" */
        Event const *e; /* pointer to event object ("message") */

        /* wait for any event and receive it into object 'e' */
        xQueueReceive(me->queue, &e, portMAX_DELAY); /* BLOCKING! */
     6b4:	4f ef       	ldi	r20, 0xFF	; 255
     6b6:	5f ef       	ldi	r21, 0xFF	; 255
     6b8:	be 01       	movw	r22, r28
     6ba:	6f 5f       	subi	r22, 0xFF	; 255
     6bc:	7f 4f       	sbci	r23, 0xFF	; 255
     6be:	f8 01       	movw	r30, r16
     6c0:	83 a5       	ldd	r24, Z+43	; 0x2b
     6c2:	94 a5       	ldd	r25, Z+44	; 0x2c
     6c4:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <xQueueReceive>
        configASSERT(e != (Event const *)0);

        /* dispatch event to the active object 'me' */
        (*me->dispatch)(me, e); /* NO BLOCKING! */
     6c8:	69 81       	ldd	r22, Y+1	; 0x01
     6ca:	7a 81       	ldd	r23, Y+2	; 0x02
     6cc:	d7 01       	movw	r26, r14
     6ce:	ed 91       	ld	r30, X+
     6d0:	fc 91       	ld	r31, X
     6d2:	ee cf       	rjmp	.-36     	; 0x6b0 <_ZL16Active_eventLoopPv+0x20>

000006d4 <_Z11Active_ctorP6ActivePFvS0_PK5EventE>:



/*..........................................................................*/
void Active_ctor(Active * const me, DispatchHandler dispatch) {
    me->dispatch = dispatch; /* assign the dispatch handler */
     6d4:	83 5b       	subi	r24, 0xB3	; 179
     6d6:	9f 4f       	sbci	r25, 0xFF	; 255
     6d8:	fc 01       	movw	r30, r24
     6da:	71 83       	std	Z+1, r23	; 0x01
     6dc:	60 83       	st	Z, r22
     6de:	08 95       	ret

000006e0 <_Z12Active_startP6ActivehPP5EventmPvmj>:
                  Event **queueSto,
                  uint32_t queueLen,
                  void *stackSto,
                  uint32_t stackSize,
                  uint16_t opt)
{
     6e0:	4f 92       	push	r4
     6e2:	5f 92       	push	r5
     6e4:	6f 92       	push	r6
     6e6:	7f 92       	push	r7
     6e8:	8f 92       	push	r8
     6ea:	9f 92       	push	r9
     6ec:	af 92       	push	r10
     6ee:	bf 92       	push	r11
     6f0:	cf 92       	push	r12
     6f2:	df 92       	push	r13
     6f4:	ef 92       	push	r14
     6f6:	ff 92       	push	r15
     6f8:	0f 93       	push	r16
     6fa:	1f 93       	push	r17
     6fc:	cf 93       	push	r28
     6fe:	df 93       	push	r29
     700:	cd b7       	in	r28, 0x3d	; 61
     702:	de b7       	in	r29, 0x3e	; 62
     704:	4c 01       	movw	r8, r24
     706:	16 2f       	mov	r17, r22
     708:	80 2f       	mov	r24, r16
     70a:	25 01       	movw	r4, r10
     70c:	36 01       	movw	r6, r12
    StackType_t *stk_sto = (StackType_t *)stackSto;
    uint32_t stk_depth = (stackSize / sizeof(StackType_t));

    (void)opt; /* unused parameter */
    me->queue = xQueueCreateStatic(
     70e:	94 01       	movw	r18, r8
     710:	23 5d       	subi	r18, 0xD3	; 211
     712:	3f 4f       	sbci	r19, 0xFF	; 255
     714:	00 e0       	ldi	r16, 0x00	; 0
     716:	62 e0       	ldi	r22, 0x02	; 2
     718:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xQueueGenericCreateStatic>
                   queueLen,            /* queue length - provided by user */
                   sizeof(Event *),     /* item size */
                   (uint8_t *)queueSto, /* queue storage - provided by user */
                   &me->queue_cb);      /* queue control block */
     71c:	f4 01       	movw	r30, r8
     71e:	94 a7       	std	Z+44, r25	; 0x2c
     720:	83 a7       	std	Z+43, r24	; 0x2b
    configASSERT(me->queue);            /* queue must be created */

    me->thread = xTaskCreateStatic(
     722:	64 01       	movw	r12, r8
     724:	f2 e0       	ldi	r31, 0x02	; 2
     726:	cf 0e       	add	r12, r31
     728:	d1 1c       	adc	r13, r1
     72a:	01 2f       	mov	r16, r17
     72c:	94 01       	movw	r18, r8
     72e:	a2 01       	movw	r20, r4
     730:	68 e4       	ldi	r22, 0x48	; 72
     732:	72 e0       	ldi	r23, 0x02	; 2
     734:	88 e4       	ldi	r24, 0x48	; 72
     736:	93 e0       	ldi	r25, 0x03	; 3
     738:	0e 94 54 10 	call	0x20a8	; 0x20a8 <xTaskCreateStatic>
              "AO" ,                    /* the name of the task */
              stk_depth,                /* stack depth */
              me,                       /* the 'pvParameters' parameter */
              prio + tskIDLE_PRIORITY,  /* FreeRTOS priority */
              stk_sto,                  /* stack storage - provided by user */
              &me->thread_cb);          /* task control block */
     73c:	f4 01       	movw	r30, r8
     73e:	91 83       	std	Z+1, r25	; 0x01
     740:	80 83       	st	Z, r24
    configASSERT(me->thread);           /* thread must be created */
}
     742:	df 91       	pop	r29
     744:	cf 91       	pop	r28
     746:	1f 91       	pop	r17
     748:	0f 91       	pop	r16
     74a:	ff 90       	pop	r15
     74c:	ef 90       	pop	r14
     74e:	df 90       	pop	r13
     750:	cf 90       	pop	r12
     752:	bf 90       	pop	r11
     754:	af 90       	pop	r10
     756:	9f 90       	pop	r9
     758:	8f 90       	pop	r8
     75a:	7f 90       	pop	r7
     75c:	6f 90       	pop	r6
     75e:	5f 90       	pop	r5
     760:	4f 90       	pop	r4
     762:	08 95       	ret

00000764 <_Z11Active_postP6ActivePK5Event>:

/*..........................................................................*/
void Active_post(Active * const me, Event const * const e) {
     764:	cf 93       	push	r28
     766:	df 93       	push	r29
     768:	1f 92       	push	r1
     76a:	1f 92       	push	r1
     76c:	cd b7       	in	r28, 0x3d	; 61
     76e:	de b7       	in	r29, 0x3e	; 62
     770:	7a 83       	std	Y+2, r23	; 0x02
     772:	69 83       	std	Y+1, r22	; 0x01
    BaseType_t status = xQueueSend(me->queue, (void *)&e, (TickType_t)0);
     774:	20 e0       	ldi	r18, 0x00	; 0
     776:	40 e0       	ldi	r20, 0x00	; 0
     778:	50 e0       	ldi	r21, 0x00	; 0
     77a:	be 01       	movw	r22, r28
     77c:	6f 5f       	subi	r22, 0xFF	; 255
     77e:	7f 4f       	sbci	r23, 0xFF	; 255
     780:	fc 01       	movw	r30, r24
     782:	83 a5       	ldd	r24, Z+43	; 0x2b
     784:	94 a5       	ldd	r25, Z+44	; 0x2c
     786:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <xQueueGenericSend>
    configASSERT(status == pdTRUE);
}
     78a:	0f 90       	pop	r0
     78c:	0f 90       	pop	r0
     78e:	df 91       	pop	r29
     790:	cf 91       	pop	r28
     792:	08 95       	ret

00000794 <_ZL18TimeEvent_callbackP10TimerDef_t>:
#define GET_TIME_EVENT_HEAD(ptr) \
    (TimeEvent*)((uintptr_t)(ptr) - offsetof(TimeEvent, timer_cb))

static void TimeEvent_callback(TimerHandle_t xTimer) {
    /* Also can use pvTimerGetTimerID(xTimer) */
    TimeEvent * const t = GET_TIME_EVENT_HEAD(xTimer);
     794:	06 97       	sbiw	r24, 0x06	; 6

    /* Callback always called from non-interrupt context so no need
     * to check xPortIsInsideInterrupt
     */
    Active_post(t->act, &t->super);
     796:	bc 01       	movw	r22, r24
     798:	fc 01       	movw	r30, r24
     79a:	82 81       	ldd	r24, Z+2	; 0x02
     79c:	93 81       	ldd	r25, Z+3	; 0x03
     79e:	e2 cf       	rjmp	.-60     	; 0x764 <_Z11Active_postP6ActivePK5Event>

000007a0 <_Z18Active_postFromISRP6ActivePK5EventPa>:
}

/*..........................................................................*/
void Active_postFromISR(Active * const me, Event const * const e,
                        BaseType_t *pxHigherPriorityTaskWoken)
{
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	1f 92       	push	r1
     7a6:	1f 92       	push	r1
     7a8:	cd b7       	in	r28, 0x3d	; 61
     7aa:	de b7       	in	r29, 0x3e	; 62
     7ac:	7a 83       	std	Y+2, r23	; 0x02
     7ae:	69 83       	std	Y+1, r22	; 0x01
    BaseType_t status = xQueueSendFromISR(me->queue, (void *)&e,
     7b0:	20 e0       	ldi	r18, 0x00	; 0
     7b2:	be 01       	movw	r22, r28
     7b4:	6f 5f       	subi	r22, 0xFF	; 255
     7b6:	7f 4f       	sbci	r23, 0xFF	; 255
     7b8:	fc 01       	movw	r30, r24
     7ba:	83 a5       	ldd	r24, Z+43	; 0x2b
     7bc:	94 a5       	ldd	r25, Z+44	; 0x2c
     7be:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <xQueueGenericSendFromISR>
                                          pxHigherPriorityTaskWoken);
    configASSERT(status == pdTRUE);
}
     7c2:	0f 90       	pop	r0
     7c4:	0f 90       	pop	r0
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	08 95       	ret

000007cc <_Z14TimeEvent_ctorP9TimeEventjP6Active>:
/*--------------------------------------------------------------------------*/
/* Time Event services... */
static void TimeEvent_callback(TimerHandle_t xTimer);

/*..........................................................................*/
void TimeEvent_ctor(TimeEvent * const me, Signal sig, Active *act) {
     7cc:	ef 92       	push	r14
     7ce:	ff 92       	push	r15
     7d0:	0f 93       	push	r16
     7d2:	1f 93       	push	r17
     7d4:	cf 93       	push	r28
     7d6:	df 93       	push	r29
     7d8:	ec 01       	movw	r28, r24
    /* no critical section because it is presumed that all TimeEvents
     * are created *before* multitasking has started.
     */
    me->super.sig = sig;
     7da:	79 83       	std	Y+1, r23	; 0x01
     7dc:	68 83       	st	Y, r22
    me->act = act;
     7de:	5b 83       	std	Y+3, r21	; 0x03
     7e0:	4a 83       	std	Y+2, r20	; 0x02

    /* Create a timer object */
    me->timer = xTimerCreateStatic("TE", 1U, me->type, me,
     7e2:	7c 01       	movw	r14, r24
     7e4:	86 e0       	ldi	r24, 0x06	; 6
     7e6:	e8 0e       	add	r14, r24
     7e8:	f1 1c       	adc	r15, r1
     7ea:	0a ec       	ldi	r16, 0xCA	; 202
     7ec:	13 e0       	ldi	r17, 0x03	; 3
     7ee:	9e 01       	movw	r18, r28
     7f0:	49 8d       	ldd	r20, Y+25	; 0x19
     7f2:	61 e0       	ldi	r22, 0x01	; 1
     7f4:	70 e0       	ldi	r23, 0x00	; 0
     7f6:	8b e4       	ldi	r24, 0x4B	; 75
     7f8:	92 e0       	ldi	r25, 0x02	; 2
     7fa:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <xTimerCreateStatic>
                                   TimeEvent_callback, &me->timer_cb);
     7fe:	9d 83       	std	Y+5, r25	; 0x05
     800:	8c 83       	std	Y+4, r24	; 0x04
    configASSERT(me->timer);            /* timer must be created */
}
     802:	df 91       	pop	r29
     804:	cf 91       	pop	r28
     806:	1f 91       	pop	r17
     808:	0f 91       	pop	r16
     80a:	ff 90       	pop	r15
     80c:	ef 90       	pop	r14
     80e:	08 95       	ret

00000810 <_Z13TimeEvent_armP9TimeEventm>:

/*..........................................................................*/
void TimeEvent_arm(TimeEvent * const me, uint32_t millisec) {
     810:	0f 93       	push	r16
     812:	1f 93       	push	r17
    TickType_t ticks;
    BaseType_t status;
    BaseType_t xHigherPriorityTaskWoken;

    ticks = (millisec / portTICK_PERIOD_MS);
     814:	24 e0       	ldi	r18, 0x04	; 4
     816:	76 95       	lsr	r23
     818:	67 95       	ror	r22
     81a:	57 95       	ror	r21
     81c:	47 95       	ror	r20
     81e:	2a 95       	dec	r18
     820:	d1 f7       	brne	.-12     	; 0x816 <_Z13TimeEvent_armP9TimeEventm+0x6>
    if (ticks == 0U) {
     822:	41 15       	cp	r20, r1
     824:	51 05       	cpc	r21, r1
     826:	11 f4       	brne	.+4      	; 0x82c <_Z13TimeEvent_armP9TimeEventm+0x1c>
        ticks = 1U;
     828:	41 e0       	ldi	r20, 0x01	; 1
     82a:	50 e0       	ldi	r21, 0x00	; 0
    }

    
    status = xTimerChangePeriod(me->timer, ticks, 0);
     82c:	00 e0       	ldi	r16, 0x00	; 0
     82e:	10 e0       	ldi	r17, 0x00	; 0
     830:	20 e0       	ldi	r18, 0x00	; 0
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	64 e0       	ldi	r22, 0x04	; 4
     836:	fc 01       	movw	r30, r24
     838:	84 81       	ldd	r24, Z+4	; 0x04
     83a:	95 81       	ldd	r25, Z+5	; 0x05
     83c:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <xTimerGenericCommand>
    configASSERT(status == pdPASS);
    
}
     840:	1f 91       	pop	r17
     842:	0f 91       	pop	r16
     844:	08 95       	ret

00000846 <_Z16TimeEvent_disarmP9TimeEvent>:

/*..........................................................................*/
void TimeEvent_disarm(TimeEvent * const me) {
     846:	0f 93       	push	r16
     848:	1f 93       	push	r17
    BaseType_t xHigherPriorityTaskWoken;
    BaseType_t status;

   
    status = xTimerStop(me->timer, 0);
     84a:	00 e0       	ldi	r16, 0x00	; 0
     84c:	10 e0       	ldi	r17, 0x00	; 0
     84e:	20 e0       	ldi	r18, 0x00	; 0
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	40 e0       	ldi	r20, 0x00	; 0
     854:	50 e0       	ldi	r21, 0x00	; 0
     856:	63 e0       	ldi	r22, 0x03	; 3
     858:	fc 01       	movw	r30, r24
     85a:	84 81       	ldd	r24, Z+4	; 0x04
     85c:	95 81       	ldd	r25, Z+5	; 0x05
     85e:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <xTimerGenericCommand>
    configASSERT(status == pdPASS);
    
}
     862:	1f 91       	pop	r17
     864:	0f 91       	pop	r16
     866:	08 95       	ret

00000868 <_Z18CanFrameEvent_ctorP13CanFrameEventjP6Active>:


static CanFrameEvent * cfevt;

void CanFrameEvent_ctor(CanFrameEvent * const me, Signal sig, Active *act){
	me->super.sig = sig;
     868:	fc 01       	movw	r30, r24
     86a:	71 83       	std	Z+1, r23	; 0x01
     86c:	60 83       	st	Z, r22
	me->act = act;
     86e:	53 83       	std	Z+3, r21	; 0x03
     870:	42 83       	std	Z+2, r20	; 0x02
	cfevt = me;
     872:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <_ZL5cfevt+0x1>
     876:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <_ZL5cfevt>
     87a:	08 95       	ret

0000087c <_Z21CanFrameEvent_fromISRPa>:
}


void CanFrameEvent_fromISR(BaseType_t *pxHigherPriorityTaskWoken){
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	ec 01       	movw	r28, r24
	if(BSP_get_can_frame(&cfevt->frame) == true){
     882:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <_ZL5cfevt>
     886:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <_ZL5cfevt+0x1>
     88a:	04 96       	adiw	r24, 0x04	; 4
     88c:	72 de       	rcall	.-796    	; 0x572 <_Z17BSP_get_can_frameP9can_frame>
     88e:	01 97       	sbiw	r24, 0x01	; 1
     890:	59 f4       	brne	.+22     	; 0x8a8 <_Z21CanFrameEvent_fromISRPa+0x2c>
		Active_postFromISR(cfevt->act, &cfevt->super, pxHigherPriorityTaskWoken);
     892:	e0 91 78 02 	lds	r30, 0x0278	; 0x800278 <_ZL5cfevt>
     896:	f0 91 79 02 	lds	r31, 0x0279	; 0x800279 <_ZL5cfevt+0x1>
     89a:	ae 01       	movw	r20, r28
     89c:	bf 01       	movw	r22, r30
     89e:	82 81       	ldd	r24, Z+2	; 0x02
     8a0:	93 81       	ldd	r25, Z+3	; 0x03
	}
}
     8a2:	df 91       	pop	r29
}


void CanFrameEvent_fromISR(BaseType_t *pxHigherPriorityTaskWoken){
	if(BSP_get_can_frame(&cfevt->frame) == true){
		Active_postFromISR(cfevt->act, &cfevt->super, pxHigherPriorityTaskWoken);
     8a4:	cf 91       	pop	r28
     8a6:	7c cf       	rjmp	.-264    	; 0x7a0 <_Z18Active_postFromISRP6ActivePK5EventPa>
	}
}
     8a8:	df 91       	pop	r29
     8aa:	cf 91       	pop	r28
     8ac:	08 95       	ret

000008ae <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event>:

/* Function Prototype ============================================================*/
void BlinkyButton_ctor(BlinkyButton * const me);


static void BlinkyButton_dispatch(BlinkyButton * const me, Event const * const e) {
     8ae:	0f 93       	push	r16
     8b0:	1f 93       	push	r17
     8b2:	cf 93       	push	r28
     8b4:	df 93       	push	r29
     8b6:	ec 01       	movw	r28, r24
	switch (e->sig) {
     8b8:	fb 01       	movw	r30, r22
     8ba:	80 81       	ld	r24, Z
     8bc:	91 81       	ldd	r25, Z+1	; 0x01
     8be:	83 30       	cpi	r24, 0x03	; 3
     8c0:	91 05       	cpc	r25, r1
     8c2:	f1 f0       	breq	.+60     	; 0x900 <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0x52>
     8c4:	b0 f4       	brcc	.+44     	; 0x8f2 <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0x44>
     8c6:	81 30       	cpi	r24, 0x01	; 1
     8c8:	91 05       	cpc	r25, r1
     8ca:	31 f1       	breq	.+76     	; 0x918 <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0x6a>
     8cc:	02 97       	sbiw	r24, 0x02	; 2
     8ce:	09 f0       	breq	.+2      	; 0x8d2 <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0x24>
     8d0:	5d c0       	rjmp	.+186    	; 0x98c <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0xde>
		case INIT_SIG:{
			break;
		}
		
		case SWITCH_PRESSED_SIG:{
			BSP_led_red_off();
     8d2:	39 de       	rcall	.-910    	; 0x546 <_Z15BSP_led_red_offv>
			TimeEvent_disarm(&me->te);
     8d4:	ce 01       	movw	r24, r28
     8d6:	81 5b       	subi	r24, 0xB1	; 177
     8d8:	9f 4f       	sbci	r25, 0xFF	; 255
     8da:	b5 df       	rcall	.-150    	; 0x846 <_Z16TimeEvent_disarmP9TimeEvent>
			me->isLedOn = false;
     8dc:	c9 56       	subi	r28, 0x69	; 105
     8de:	df 4f       	sbci	r29, 0xFF	; 255
			
			BSP_led_green_on();
     8e0:	18 82       	st	Y, r1
     8e2:	3a de       	rcall	.-908    	; 0x558 <_Z16BSP_led_green_onv>
			BSP_send_can_frame(&frame_left_seatbelt_hoocked);
     8e4:	88 e2       	ldi	r24, 0x28	; 40
     8e6:	92 e0       	ldi	r25, 0x02	; 2
		
		default: {
			break;
		}
	}
}
     8e8:	df 91       	pop	r29
     8ea:	cf 91       	pop	r28
     8ec:	1f 91       	pop	r17
			BSP_led_red_off();
			TimeEvent_disarm(&me->te);
			me->isLedOn = false;
			
			BSP_led_green_on();
			BSP_send_can_frame(&frame_left_seatbelt_hoocked);
     8ee:	0f 91       	pop	r16
     8f0:	3b ce       	rjmp	.-906    	; 0x568 <_Z18BSP_send_can_frameP9can_frame>
/* Function Prototype ============================================================*/
void BlinkyButton_ctor(BlinkyButton * const me);


static void BlinkyButton_dispatch(BlinkyButton * const me, Event const * const e) {
	switch (e->sig) {
     8f2:	85 30       	cpi	r24, 0x05	; 5
     8f4:	91 05       	cpc	r25, r1
     8f6:	39 f1       	breq	.+78     	; 0x946 <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0x98>
     8f8:	58 f1       	brcs	.+86     	; 0x950 <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0xa2>
     8fa:	06 97       	sbiw	r24, 0x06	; 6
     8fc:	69 f0       	breq	.+26     	; 0x918 <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0x6a>
			break;
		}
		
		
		case SWITCH_RELEASED_SIG: {
			BSP_send_can_frame(&frame_left_seatbelt_unhoocked);
     8fe:	46 c0       	rjmp	.+140    	; 0x98c <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0xde>
     900:	88 e1       	ldi	r24, 0x18	; 24
     902:	92 e0       	ldi	r25, 0x02	; 2
     904:	31 de       	rcall	.-926    	; 0x568 <_Z18BSP_send_can_frameP9can_frame>
			BSP_led_green_off();
     906:	2b de       	rcall	.-938    	; 0x55e <_Z17BSP_led_green_offv>
     908:	60 e5       	ldi	r22, 0x50	; 80
			
			static Event const initLedRedBlinkEvt = {INIT_LED_RED_BLINK_SIG};
			Active_post(&me->super, &initLedRedBlinkEvt);
     90a:	72 e0       	ldi	r23, 0x02	; 2
     90c:	ce 01       	movw	r24, r28
		
		default: {
			break;
		}
	}
}
     90e:	df 91       	pop	r29
     910:	cf 91       	pop	r28
     912:	1f 91       	pop	r17
     914:	0f 91       	pop	r16
		case SWITCH_RELEASED_SIG: {
			BSP_send_can_frame(&frame_left_seatbelt_unhoocked);
			BSP_led_green_off();
			
			static Event const initLedRedBlinkEvt = {INIT_LED_RED_BLINK_SIG};
			Active_post(&me->super, &initLedRedBlinkEvt);
     916:	26 cf       	rjmp	.-436    	; 0x764 <_Z11Active_postP6ActivePK5Event>
     918:	8e 01       	movw	r16, r28
		}
		
		
		case INIT_LED_RED_BLINK_SIG:
		case TIMEOUT_LED_RED_SIG: {
			if (!me->isLedOn) { /* LED not on */
     91a:	09 56       	subi	r16, 0x69	; 105
     91c:	1f 4f       	sbci	r17, 0xFF	; 255
     91e:	f8 01       	movw	r30, r16
     920:	80 81       	ld	r24, Z
     922:	c1 5b       	subi	r28, 0xB1	; 177
     924:	df 4f       	sbci	r29, 0xFF	; 255
     926:	81 11       	cpse	r24, r1
				BSP_led_red_on();
     928:	05 c0       	rjmp	.+10     	; 0x934 <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0x86>
     92a:	0a de       	rcall	.-1004   	; 0x540 <_Z14BSP_led_red_onv>
				me->isLedOn = true;
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	f8 01       	movw	r30, r16
     930:	80 83       	st	Z, r24
     932:	03 c0       	rjmp	.+6      	; 0x93a <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0x8c>
				TimeEvent_arm(&me->te, 1000);
			}
			else {  /* LED is on */
				BSP_led_red_off();
     934:	08 de       	rcall	.-1008   	; 0x546 <_Z15BSP_led_red_offv>
     936:	f8 01       	movw	r30, r16
				me->isLedOn = false;
     938:	10 82       	st	Z, r1
     93a:	48 ee       	ldi	r20, 0xE8	; 232
				TimeEvent_arm(&me->te, 1000);
     93c:	53 e0       	ldi	r21, 0x03	; 3
     93e:	60 e0       	ldi	r22, 0x00	; 0
     940:	70 e0       	ldi	r23, 0x00	; 0
     942:	ce 01       	movw	r24, r28
     944:	1e c0       	rjmp	.+60     	; 0x982 <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0xd4>
		
		default: {
			break;
		}
	}
}
     946:	df 91       	pop	r29
     948:	cf 91       	pop	r28
     94a:	1f 91       	pop	r17
		}
		
		
		
		case TIMEOUT_LED_YELLOW_SIG: {
			BSP_led_yellow_off();
     94c:	0f 91       	pop	r16
			break;
		}
		
		case CAN_FRAME_RECIVED_SIG:{
			if(areFramesEqual(&me->cfe.frame, &frame_request_seatbelt) == true){
     94e:	01 ce       	rjmp	.-1022   	; 0x552 <_Z18BSP_led_yellow_offv>
     950:	68 e0       	ldi	r22, 0x08	; 8
     952:	72 e0       	ldi	r23, 0x02	; 2
     954:	ce 01       	movw	r24, r28
     956:	89 57       	subi	r24, 0x79	; 121
     958:	9f 4f       	sbci	r25, 0xFF	; 255
     95a:	5e de       	rcall	.-836    	; 0x618 <_Z14areFramesEqualP9can_frameS0_>
     95c:	01 97       	sbiw	r24, 0x01	; 1
				BSP_led_yellow_on();
     95e:	b1 f4       	brne	.+44     	; 0x98c <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0xde>
     960:	f5 dd       	rcall	.-1046   	; 0x54c <_Z17BSP_led_yellow_onv>
				
				if(BSP_get_switch() == SWITCH_PRESSED){
     962:	00 de       	rcall	.-1024   	; 0x564 <_Z14BSP_get_switchv>
     964:	89 2b       	or	r24, r25
     966:	19 f4       	brne	.+6      	; 0x96e <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0xc0>
     968:	88 e2       	ldi	r24, 0x28	; 40
					BSP_send_can_frame(&frame_left_seatbelt_hoocked);
     96a:	92 e0       	ldi	r25, 0x02	; 2
     96c:	02 c0       	rjmp	.+4      	; 0x972 <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0xc4>
     96e:	88 e1       	ldi	r24, 0x18	; 24
				} else {
					BSP_send_can_frame(&frame_left_seatbelt_unhoocked);
     970:	92 e0       	ldi	r25, 0x02	; 2
     972:	fa dd       	rcall	.-1036   	; 0x568 <_Z18BSP_send_can_frameP9can_frame>
     974:	48 ee       	ldi	r20, 0xE8	; 232
				}
				
				TimeEvent_arm(&me->te2, 1000);
     976:	53 e0       	ldi	r21, 0x03	; 3
     978:	60 e0       	ldi	r22, 0x00	; 0
     97a:	70 e0       	ldi	r23, 0x00	; 0
     97c:	ce 01       	movw	r24, r28
     97e:	87 59       	subi	r24, 0x97	; 151
     980:	9f 4f       	sbci	r25, 0xFF	; 255
     982:	df 91       	pop	r29
		
		default: {
			break;
		}
	}
}
     984:	cf 91       	pop	r28
     986:	1f 91       	pop	r17
     988:	0f 91       	pop	r16
     98a:	42 cf       	rjmp	.-380    	; 0x810 <_Z13TimeEvent_armP9TimeEventm>
					BSP_send_can_frame(&frame_left_seatbelt_hoocked);
				} else {
					BSP_send_can_frame(&frame_left_seatbelt_unhoocked);
				}
				
				TimeEvent_arm(&me->te2, 1000);
     98c:	df 91       	pop	r29
     98e:	cf 91       	pop	r28
		
		default: {
			break;
		}
	}
}
     990:	1f 91       	pop	r17
     992:	0f 91       	pop	r16
     994:	08 95       	ret

00000996 <_Z17BlinkyButton_ctorP12BlinkyButton>:
     996:	cf 93       	push	r28
     998:	df 93       	push	r29
void BlinkyButton_ctor(BlinkyButton * const me) {
     99a:	ec 01       	movw	r28, r24
	Active_ctor(&me->super, (DispatchHandler)&BlinkyButton_dispatch);
     99c:	67 e5       	ldi	r22, 0x57	; 87
     99e:	74 e0       	ldi	r23, 0x04	; 4
     9a0:	99 de       	rcall	.-718    	; 0x6d4 <_Z11Active_ctorP6ActivePFvS0_PK5EventE>
	me->te.type = TYPE_ONE_SHOT;
     9a2:	fe 01       	movw	r30, r28
     9a4:	e8 59       	subi	r30, 0x98	; 152
     9a6:	ff 4f       	sbci	r31, 0xFF	; 255
     9a8:	10 82       	st	Z, r1
	TimeEvent_ctor(&me->te, TIMEOUT_LED_RED_SIG, &me->super);
     9aa:	ae 01       	movw	r20, r28
     9ac:	61 e0       	ldi	r22, 0x01	; 1
     9ae:	70 e0       	ldi	r23, 0x00	; 0
     9b0:	ce 01       	movw	r24, r28
     9b2:	81 5b       	subi	r24, 0xB1	; 177
     9b4:	9f 4f       	sbci	r25, 0xFF	; 255
     9b6:	0a df       	rcall	.-492    	; 0x7cc <_Z14TimeEvent_ctorP9TimeEventjP6Active>
	TimeEvent_ctor(&me->te2, TIMEOUT_LED_YELLOW_SIG, &me->super);
     9b8:	ae 01       	movw	r20, r28
     9ba:	65 e0       	ldi	r22, 0x05	; 5
     9bc:	70 e0       	ldi	r23, 0x00	; 0
     9be:	ce 01       	movw	r24, r28
     9c0:	87 59       	subi	r24, 0x97	; 151
     9c2:	9f 4f       	sbci	r25, 0xFF	; 255
     9c4:	03 df       	rcall	.-506    	; 0x7cc <_Z14TimeEvent_ctorP9TimeEventjP6Active>
	me->isLedOn = false;
     9c6:	fe 01       	movw	r30, r28
     9c8:	e9 56       	subi	r30, 0x69	; 105
     9ca:	ff 4f       	sbci	r31, 0xFF	; 255
     9cc:	10 82       	st	Z, r1
	
	CanFrameEvent_ctor(&me->cfe, CAN_FRAME_RECIVED_SIG, &me->super);
     9ce:	ae 01       	movw	r20, r28
     9d0:	64 e0       	ldi	r22, 0x04	; 4
     9d2:	70 e0       	ldi	r23, 0x00	; 0
     9d4:	ce 01       	movw	r24, r28
     9d6:	8d 57       	subi	r24, 0x7D	; 125
}
     9d8:	9f 4f       	sbci	r25, 0xFF	; 255
     9da:	df 91       	pop	r29
	me->te.type = TYPE_ONE_SHOT;
	TimeEvent_ctor(&me->te, TIMEOUT_LED_RED_SIG, &me->super);
	TimeEvent_ctor(&me->te2, TIMEOUT_LED_YELLOW_SIG, &me->super);
	me->isLedOn = false;
	
	CanFrameEvent_ctor(&me->cfe, CAN_FRAME_RECIVED_SIG, &me->super);
     9dc:	cf 91       	pop	r28
     9de:	44 cf       	rjmp	.-376    	; 0x868 <_Z18CanFrameEvent_ctorP13CanFrameEventjP6Active>

000009e0 <setup>:
static StackType_t blinkyButton_stack[configMINIMAL_STACK_SIZE]; /* task stack */
static Event *blinkyButton_queue[10];
static BlinkyButton blinkyButton;
Active *AO_blinkyButton = &blinkyButton.super;

void setup() {
     9e0:	8f 92       	push	r8
     9e2:	9f 92       	push	r9
     9e4:	af 92       	push	r10
     9e6:	bf 92       	push	r11
     9e8:	cf 92       	push	r12
     9ea:	df 92       	push	r13
     9ec:	ef 92       	push	r14
     9ee:	ff 92       	push	r15
     9f0:	0f 93       	push	r16
     9f2:	1f 93       	push	r17
	BSP_init();
     9f4:	8b dd       	rcall	.-1258   	; 0x50c <_Z8BSP_initv>
	
	   /* create and start the BlinkyButton AO */
	   BlinkyButton_ctor(&blinkyButton);
     9f6:	8a e7       	ldi	r24, 0x7A	; 122
     9f8:	92 e0       	ldi	r25, 0x02	; 2
     9fa:	cd df       	rcall	.-102    	; 0x996 <_Z17BlinkyButton_ctorP12BlinkyButton>
					1U,
					blinkyButton_queue,
					sizeof(blinkyButton_queue)/sizeof(blinkyButton_queue[0]),
					blinkyButton_stack,
					sizeof(blinkyButton_stack),
					0U);
     9fc:	81 2c       	mov	r8, r1
     9fe:	91 2c       	mov	r9, r1
     a00:	80 ec       	ldi	r24, 0xC0	; 192
     a02:	a8 2e       	mov	r10, r24
     a04:	b1 2c       	mov	r11, r1
     a06:	c1 2c       	mov	r12, r1
     a08:	d1 2c       	mov	r13, r1
     a0a:	96 e2       	ldi	r25, 0x26	; 38
     a0c:	e9 2e       	mov	r14, r25
     a0e:	93 e0       	ldi	r25, 0x03	; 3
     a10:	f9 2e       	mov	r15, r25
     a12:	0a e0       	ldi	r16, 0x0A	; 10
     a14:	10 e0       	ldi	r17, 0x00	; 0
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	42 e1       	ldi	r20, 0x12	; 18
     a1c:	53 e0       	ldi	r21, 0x03	; 3
     a1e:	61 e0       	ldi	r22, 0x01	; 1
     a20:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <AO_blinkyButton>
     a24:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <AO_blinkyButton+0x1>
     a28:	5b de       	rcall	.-842    	; 0x6e0 <_Z12Active_startP6ActivehPP5EventmPvmj>
	   
	vTaskStartScheduler();
}
     a2a:	1f 91       	pop	r17
     a2c:	0f 91       	pop	r16
     a2e:	ff 90       	pop	r15
     a30:	ef 90       	pop	r14
     a32:	df 90       	pop	r13
     a34:	cf 90       	pop	r12
     a36:	bf 90       	pop	r11
     a38:	af 90       	pop	r10
     a3a:	9f 90       	pop	r9
     a3c:	8f 90       	pop	r8
					sizeof(blinkyButton_queue)/sizeof(blinkyButton_queue[0]),
					blinkyButton_stack,
					sizeof(blinkyButton_stack),
					0U);
	   
	vTaskStartScheduler();
     a3e:	0c 94 8a 10 	jmp	0x2114	; 0x2114 <vTaskStartScheduler>

00000a42 <loop>:
}

void loop() {
     a42:	08 95       	ret

00000a44 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     a44:	c0 d0       	rcall	.+384    	; 0xbc6 <init>

	initVariant();
     a46:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     a4a:	ca df       	rcall	.-108    	; 0x9e0 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     a4c:	c0 e0       	ldi	r28, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
     a4e:	d0 e0       	ldi	r29, 0x00	; 0
     a50:	f8 df       	rcall	.-16     	; 0xa42 <loop>
		if (serialEventRun) serialEventRun();
     a52:	20 97       	sbiw	r28, 0x00	; 0
     a54:	e9 f3       	breq	.-6      	; 0xa50 <main+0xc>
     a56:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     a5a:	fa cf       	rjmp	.-12     	; 0xa50 <main+0xc>

00000a5c <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     a5c:	1f 92       	push	r1
     a5e:	0f 92       	push	r0
     a60:	0f b6       	in	r0, 0x3f	; 63
     a62:	0f 92       	push	r0
     a64:	11 24       	eor	r1, r1
     a66:	2f 93       	push	r18
     a68:	3f 93       	push	r19
     a6a:	8f 93       	push	r24
     a6c:	9f 93       	push	r25
     a6e:	af 93       	push	r26
     a70:	bf 93       	push	r27
     a72:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <timer0_millis>
     a76:	90 91 e8 03 	lds	r25, 0x03E8	; 0x8003e8 <timer0_millis+0x1>
     a7a:	a0 91 e9 03 	lds	r26, 0x03E9	; 0x8003e9 <timer0_millis+0x2>
     a7e:	b0 91 ea 03 	lds	r27, 0x03EA	; 0x8003ea <timer0_millis+0x3>
     a82:	30 91 e6 03 	lds	r19, 0x03E6	; 0x8003e6 <timer0_fract>
     a86:	23 e0       	ldi	r18, 0x03	; 3
     a88:	23 0f       	add	r18, r19
     a8a:	2d 37       	cpi	r18, 0x7D	; 125
     a8c:	20 f4       	brcc	.+8      	; 0xa96 <__vector_23+0x3a>
     a8e:	01 96       	adiw	r24, 0x01	; 1
     a90:	a1 1d       	adc	r26, r1
     a92:	b1 1d       	adc	r27, r1
     a94:	05 c0       	rjmp	.+10     	; 0xaa0 <__vector_23+0x44>
     a96:	26 e8       	ldi	r18, 0x86	; 134
     a98:	23 0f       	add	r18, r19
     a9a:	02 96       	adiw	r24, 0x02	; 2
     a9c:	a1 1d       	adc	r26, r1
     a9e:	b1 1d       	adc	r27, r1
     aa0:	20 93 e6 03 	sts	0x03E6, r18	; 0x8003e6 <timer0_fract>
     aa4:	80 93 e7 03 	sts	0x03E7, r24	; 0x8003e7 <timer0_millis>
     aa8:	90 93 e8 03 	sts	0x03E8, r25	; 0x8003e8 <timer0_millis+0x1>
     aac:	a0 93 e9 03 	sts	0x03E9, r26	; 0x8003e9 <timer0_millis+0x2>
     ab0:	b0 93 ea 03 	sts	0x03EA, r27	; 0x8003ea <timer0_millis+0x3>
     ab4:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <timer0_overflow_count>
     ab8:	90 91 ec 03 	lds	r25, 0x03EC	; 0x8003ec <timer0_overflow_count+0x1>
     abc:	a0 91 ed 03 	lds	r26, 0x03ED	; 0x8003ed <timer0_overflow_count+0x2>
     ac0:	b0 91 ee 03 	lds	r27, 0x03EE	; 0x8003ee <timer0_overflow_count+0x3>
     ac4:	01 96       	adiw	r24, 0x01	; 1
     ac6:	a1 1d       	adc	r26, r1
     ac8:	b1 1d       	adc	r27, r1
     aca:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <timer0_overflow_count>
     ace:	90 93 ec 03 	sts	0x03EC, r25	; 0x8003ec <timer0_overflow_count+0x1>
     ad2:	a0 93 ed 03 	sts	0x03ED, r26	; 0x8003ed <timer0_overflow_count+0x2>
     ad6:	b0 93 ee 03 	sts	0x03EE, r27	; 0x8003ee <timer0_overflow_count+0x3>
     ada:	bf 91       	pop	r27
     adc:	af 91       	pop	r26
     ade:	9f 91       	pop	r25
     ae0:	8f 91       	pop	r24
     ae2:	3f 91       	pop	r19
     ae4:	2f 91       	pop	r18
     ae6:	0f 90       	pop	r0
     ae8:	0f be       	out	0x3f, r0	; 63
     aea:	0f 90       	pop	r0
     aec:	1f 90       	pop	r1
     aee:	18 95       	reti

00000af0 <millis>:
     af0:	2f b7       	in	r18, 0x3f	; 63
     af2:	f8 94       	cli
     af4:	60 91 e7 03 	lds	r22, 0x03E7	; 0x8003e7 <timer0_millis>
     af8:	70 91 e8 03 	lds	r23, 0x03E8	; 0x8003e8 <timer0_millis+0x1>
     afc:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <timer0_millis+0x2>
     b00:	90 91 ea 03 	lds	r25, 0x03EA	; 0x8003ea <timer0_millis+0x3>
     b04:	2f bf       	out	0x3f, r18	; 63
     b06:	08 95       	ret

00000b08 <micros>:
     b08:	3f b7       	in	r19, 0x3f	; 63
     b0a:	f8 94       	cli
     b0c:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <timer0_overflow_count>
     b10:	90 91 ec 03 	lds	r25, 0x03EC	; 0x8003ec <timer0_overflow_count+0x1>
     b14:	a0 91 ed 03 	lds	r26, 0x03ED	; 0x8003ed <timer0_overflow_count+0x2>
     b18:	b0 91 ee 03 	lds	r27, 0x03EE	; 0x8003ee <timer0_overflow_count+0x3>
     b1c:	26 b5       	in	r18, 0x26	; 38
     b1e:	a8 9b       	sbis	0x15, 0	; 21
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <micros+0x24>
     b22:	2f 3f       	cpi	r18, 0xFF	; 255
     b24:	19 f0       	breq	.+6      	; 0xb2c <micros+0x24>
     b26:	01 96       	adiw	r24, 0x01	; 1
     b28:	a1 1d       	adc	r26, r1
     b2a:	b1 1d       	adc	r27, r1
     b2c:	3f bf       	out	0x3f, r19	; 63
     b2e:	ba 2f       	mov	r27, r26
     b30:	a9 2f       	mov	r26, r25
     b32:	98 2f       	mov	r25, r24
     b34:	88 27       	eor	r24, r24
     b36:	82 0f       	add	r24, r18
     b38:	91 1d       	adc	r25, r1
     b3a:	a1 1d       	adc	r26, r1
     b3c:	b1 1d       	adc	r27, r1
     b3e:	bc 01       	movw	r22, r24
     b40:	cd 01       	movw	r24, r26
     b42:	42 e0       	ldi	r20, 0x02	; 2
     b44:	66 0f       	add	r22, r22
     b46:	77 1f       	adc	r23, r23
     b48:	88 1f       	adc	r24, r24
     b4a:	99 1f       	adc	r25, r25
     b4c:	4a 95       	dec	r20
     b4e:	d1 f7       	brne	.-12     	; 0xb44 <micros+0x3c>
     b50:	08 95       	ret

00000b52 <delay>:
     b52:	8f 92       	push	r8
     b54:	9f 92       	push	r9
     b56:	af 92       	push	r10
     b58:	bf 92       	push	r11
     b5a:	cf 92       	push	r12
     b5c:	df 92       	push	r13
     b5e:	ef 92       	push	r14
     b60:	ff 92       	push	r15
     b62:	6b 01       	movw	r12, r22
     b64:	7c 01       	movw	r14, r24
     b66:	d0 df       	rcall	.-96     	; 0xb08 <micros>
     b68:	4b 01       	movw	r8, r22
     b6a:	5c 01       	movw	r10, r24
     b6c:	c1 14       	cp	r12, r1
     b6e:	d1 04       	cpc	r13, r1
     b70:	e1 04       	cpc	r14, r1
     b72:	f1 04       	cpc	r15, r1
     b74:	f9 f0       	breq	.+62     	; 0xbb4 <delay+0x62>
     b76:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <yield>
     b7a:	c6 df       	rcall	.-116    	; 0xb08 <micros>
     b7c:	dc 01       	movw	r26, r24
     b7e:	cb 01       	movw	r24, r22
     b80:	88 19       	sub	r24, r8
     b82:	99 09       	sbc	r25, r9
     b84:	aa 09       	sbc	r26, r10
     b86:	bb 09       	sbc	r27, r11
     b88:	88 3e       	cpi	r24, 0xE8	; 232
     b8a:	93 40       	sbci	r25, 0x03	; 3
     b8c:	a1 05       	cpc	r26, r1
     b8e:	b1 05       	cpc	r27, r1
     b90:	68 f3       	brcs	.-38     	; 0xb6c <delay+0x1a>
     b92:	21 e0       	ldi	r18, 0x01	; 1
     b94:	c2 1a       	sub	r12, r18
     b96:	d1 08       	sbc	r13, r1
     b98:	e1 08       	sbc	r14, r1
     b9a:	f1 08       	sbc	r15, r1
     b9c:	88 ee       	ldi	r24, 0xE8	; 232
     b9e:	88 0e       	add	r8, r24
     ba0:	83 e0       	ldi	r24, 0x03	; 3
     ba2:	98 1e       	adc	r9, r24
     ba4:	a1 1c       	adc	r10, r1
     ba6:	b1 1c       	adc	r11, r1
     ba8:	c1 14       	cp	r12, r1
     baa:	d1 04       	cpc	r13, r1
     bac:	e1 04       	cpc	r14, r1
     bae:	f1 04       	cpc	r15, r1
     bb0:	21 f7       	brne	.-56     	; 0xb7a <delay+0x28>
     bb2:	dc cf       	rjmp	.-72     	; 0xb6c <delay+0x1a>
     bb4:	ff 90       	pop	r15
     bb6:	ef 90       	pop	r14
     bb8:	df 90       	pop	r13
     bba:	cf 90       	pop	r12
     bbc:	bf 90       	pop	r11
     bbe:	af 90       	pop	r10
     bc0:	9f 90       	pop	r9
     bc2:	8f 90       	pop	r8
     bc4:	08 95       	ret

00000bc6 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     bc6:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     bc8:	84 b5       	in	r24, 0x24	; 36
     bca:	82 60       	ori	r24, 0x02	; 2
     bcc:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     bce:	84 b5       	in	r24, 0x24	; 36
     bd0:	81 60       	ori	r24, 0x01	; 1
     bd2:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     bd4:	85 b5       	in	r24, 0x25	; 37
     bd6:	82 60       	ori	r24, 0x02	; 2
     bd8:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     bda:	85 b5       	in	r24, 0x25	; 37
     bdc:	81 60       	ori	r24, 0x01	; 1
     bde:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     be0:	ee e6       	ldi	r30, 0x6E	; 110
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	81 60       	ori	r24, 0x01	; 1
     be8:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     bea:	e1 e8       	ldi	r30, 0x81	; 129
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     bf0:	80 81       	ld	r24, Z
     bf2:	82 60       	ori	r24, 0x02	; 2
     bf4:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     bf6:	80 81       	ld	r24, Z
     bf8:	81 60       	ori	r24, 0x01	; 1
     bfa:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     bfc:	e0 e8       	ldi	r30, 0x80	; 128
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	80 81       	ld	r24, Z
     c02:	81 60       	ori	r24, 0x01	; 1
     c04:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     c06:	e1 eb       	ldi	r30, 0xB1	; 177
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	80 81       	ld	r24, Z
     c0c:	84 60       	ori	r24, 0x04	; 4
     c0e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     c10:	e0 eb       	ldi	r30, 0xB0	; 176
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	81 60       	ori	r24, 0x01	; 1
     c18:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
     c1a:	e1 e9       	ldi	r30, 0x91	; 145
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	80 81       	ld	r24, Z
     c20:	82 60       	ori	r24, 0x02	; 2
     c22:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
     c24:	80 81       	ld	r24, Z
     c26:	81 60       	ori	r24, 0x01	; 1
     c28:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
     c2a:	e0 e9       	ldi	r30, 0x90	; 144
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	81 60       	ori	r24, 0x01	; 1
     c32:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
     c34:	e1 ea       	ldi	r30, 0xA1	; 161
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	82 60       	ori	r24, 0x02	; 2
     c3c:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
     c3e:	80 81       	ld	r24, Z
     c40:	81 60       	ori	r24, 0x01	; 1
     c42:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
     c44:	e0 ea       	ldi	r30, 0xA0	; 160
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	80 81       	ld	r24, Z
     c4a:	81 60       	ori	r24, 0x01	; 1
     c4c:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
     c4e:	e1 e2       	ldi	r30, 0x21	; 33
     c50:	f1 e0       	ldi	r31, 0x01	; 1
     c52:	80 81       	ld	r24, Z
     c54:	82 60       	ori	r24, 0x02	; 2
     c56:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
     c58:	80 81       	ld	r24, Z
     c5a:	81 60       	ori	r24, 0x01	; 1
     c5c:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
     c5e:	e0 e2       	ldi	r30, 0x20	; 32
     c60:	f1 e0       	ldi	r31, 0x01	; 1
     c62:	80 81       	ld	r24, Z
     c64:	81 60       	ori	r24, 0x01	; 1
     c66:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     c68:	ea e7       	ldi	r30, 0x7A	; 122
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	84 60       	ori	r24, 0x04	; 4
     c70:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     c72:	80 81       	ld	r24, Z
     c74:	82 60       	ori	r24, 0x02	; 2
     c76:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     c78:	80 81       	ld	r24, Z
     c7a:	81 60       	ori	r24, 0x01	; 1
     c7c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     c7e:	80 81       	ld	r24, Z
     c80:	80 68       	ori	r24, 0x80	; 128
     c82:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     c84:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
     c88:	08 95       	ret

00000c8a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	fc 01       	movw	r30, r24
     c8e:	31 97       	sbiw	r30, 0x01	; 1
     c90:	e2 31       	cpi	r30, 0x12	; 18
     c92:	f1 05       	cpc	r31, r1
     c94:	08 f0       	brcs	.+2      	; 0xc98 <turnOffPWM+0xe>
     c96:	4e c0       	rjmp	.+156    	; 0xd34 <turnOffPWM+0xaa>
     c98:	88 27       	eor	r24, r24
     c9a:	ee 58       	subi	r30, 0x8E	; 142
     c9c:	ff 4f       	sbci	r31, 0xFF	; 255
     c9e:	8f 4f       	sbci	r24, 0xFF	; 255
     ca0:	0c 94 3d 18 	jmp	0x307a	; 0x307a <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     ca4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
     ca8:	8f 77       	andi	r24, 0x7F	; 127
     caa:	03 c0       	rjmp	.+6      	; 0xcb2 <turnOffPWM+0x28>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     cac:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
     cb0:	8f 7d       	andi	r24, 0xDF	; 223
     cb2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
     cb6:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
     cb8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
     cbc:	87 7f       	andi	r24, 0xF7	; 247
     cbe:	f9 cf       	rjmp	.-14     	; 0xcb2 <turnOffPWM+0x28>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     cc0:	84 b5       	in	r24, 0x24	; 36
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <turnOffPWM+0x40>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     cc6:	84 b5       	in	r24, 0x24	; 36
     cc8:	8f 7d       	andi	r24, 0xDF	; 223
     cca:	84 bd       	out	0x24, r24	; 36
     ccc:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     cce:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
     cd2:	8f 77       	andi	r24, 0x7F	; 127
     cd4:	03 c0       	rjmp	.+6      	; 0xcdc <turnOffPWM+0x52>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     cd6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
     cda:	8f 7d       	andi	r24, 0xDF	; 223
     cdc:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
     ce0:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
     ce2:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
     ce6:	8f 77       	andi	r24, 0x7F	; 127
     ce8:	07 c0       	rjmp	.+14     	; 0xcf8 <turnOffPWM+0x6e>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
     cea:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
     cee:	8f 7d       	andi	r24, 0xDF	; 223
     cf0:	03 c0       	rjmp	.+6      	; 0xcf8 <turnOffPWM+0x6e>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
     cf2:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
     cf6:	87 7f       	andi	r24, 0xF7	; 247
     cf8:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
     cfc:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
     cfe:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
     d02:	8f 77       	andi	r24, 0x7F	; 127
     d04:	07 c0       	rjmp	.+14     	; 0xd14 <turnOffPWM+0x8a>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
     d06:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
     d0a:	8f 7d       	andi	r24, 0xDF	; 223
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <turnOffPWM+0x8a>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
     d0e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
     d12:	87 7f       	andi	r24, 0xF7	; 247
     d14:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
     d18:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
     d1a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
     d1e:	8f 77       	andi	r24, 0x7F	; 127
     d20:	07 c0       	rjmp	.+14     	; 0xd30 <turnOffPWM+0xa6>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
     d22:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
     d26:	8f 7d       	andi	r24, 0xDF	; 223
     d28:	03 c0       	rjmp	.+6      	; 0xd30 <turnOffPWM+0xa6>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
     d2a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
     d2e:	87 7f       	andi	r24, 0xF7	; 247
     d30:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
     d34:	08 95       	ret

00000d36 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     d36:	cf 93       	push	r28
     d38:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	fc 01       	movw	r30, r24
     d3e:	e8 54       	subi	r30, 0x48	; 72
     d40:	fe 4f       	sbci	r31, 0xFE	; 254
     d42:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     d44:	fc 01       	movw	r30, r24
     d46:	e2 50       	subi	r30, 0x02	; 2
     d48:	fe 4f       	sbci	r31, 0xFE	; 254
     d4a:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     d4c:	88 23       	and	r24, r24
     d4e:	61 f1       	breq	.+88     	; 0xda8 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	88 0f       	add	r24, r24
     d54:	99 1f       	adc	r25, r25
     d56:	fc 01       	movw	r30, r24
     d58:	e8 58       	subi	r30, 0x88	; 136
     d5a:	fd 4f       	sbci	r31, 0xFD	; 253
     d5c:	c5 91       	lpm	r28, Z+
     d5e:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
     d60:	fc 01       	movw	r30, r24
     d62:	e2 5a       	subi	r30, 0xA2	; 162
     d64:	fd 4f       	sbci	r31, 0xFD	; 253
     d66:	a5 91       	lpm	r26, Z+
     d68:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
     d6a:	61 11       	cpse	r22, r1
     d6c:	09 c0       	rjmp	.+18     	; 0xd80 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
     d6e:	9f b7       	in	r25, 0x3f	; 63
                cli();
     d70:	f8 94       	cli
		*reg &= ~bit;
     d72:	88 81       	ld	r24, Y
     d74:	20 95       	com	r18
     d76:	82 23       	and	r24, r18
     d78:	88 83       	st	Y, r24
		*out &= ~bit;
     d7a:	ec 91       	ld	r30, X
     d7c:	2e 23       	and	r18, r30
     d7e:	0b c0       	rjmp	.+22     	; 0xd96 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     d80:	62 30       	cpi	r22, 0x02	; 2
     d82:	61 f4       	brne	.+24     	; 0xd9c <pinMode+0x66>
		uint8_t oldSREG = SREG;
     d84:	9f b7       	in	r25, 0x3f	; 63
                cli();
     d86:	f8 94       	cli
		*reg &= ~bit;
     d88:	88 81       	ld	r24, Y
     d8a:	32 2f       	mov	r19, r18
     d8c:	30 95       	com	r19
     d8e:	83 23       	and	r24, r19
     d90:	88 83       	st	Y, r24
		*out |= bit;
     d92:	ec 91       	ld	r30, X
     d94:	2e 2b       	or	r18, r30
     d96:	2c 93       	st	X, r18
		SREG = oldSREG;
     d98:	9f bf       	out	0x3f, r25	; 63
     d9a:	06 c0       	rjmp	.+12     	; 0xda8 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
     d9c:	8f b7       	in	r24, 0x3f	; 63
                cli();
     d9e:	f8 94       	cli
		*reg |= bit;
     da0:	e8 81       	ld	r30, Y
     da2:	2e 2b       	or	r18, r30
     da4:	28 83       	st	Y, r18
		SREG = oldSREG;
     da6:	8f bf       	out	0x3f, r24	; 63
	}
}
     da8:	df 91       	pop	r29
     daa:	cf 91       	pop	r28
     dac:	08 95       	ret

00000dae <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     dae:	1f 93       	push	r17
     db0:	cf 93       	push	r28
     db2:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     db4:	28 2f       	mov	r18, r24
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	f9 01       	movw	r30, r18
     dba:	ee 58       	subi	r30, 0x8E	; 142
     dbc:	fe 4f       	sbci	r31, 0xFE	; 254
     dbe:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     dc0:	f9 01       	movw	r30, r18
     dc2:	e8 54       	subi	r30, 0x48	; 72
     dc4:	fe 4f       	sbci	r31, 0xFE	; 254
     dc6:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     dc8:	f9 01       	movw	r30, r18
     dca:	e2 50       	subi	r30, 0x02	; 2
     dcc:	fe 4f       	sbci	r31, 0xFE	; 254
     dce:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     dd0:	cc 23       	and	r28, r28
     dd2:	b9 f0       	breq	.+46     	; 0xe02 <digitalWrite+0x54>
     dd4:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     dd6:	81 11       	cpse	r24, r1
     dd8:	58 df       	rcall	.-336    	; 0xc8a <turnOffPWM>

	out = portOutputRegister(port);
     dda:	ec 2f       	mov	r30, r28
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	ee 0f       	add	r30, r30
     de0:	ff 1f       	adc	r31, r31
     de2:	e2 5a       	subi	r30, 0xA2	; 162
     de4:	fd 4f       	sbci	r31, 0xFD	; 253
     de6:	a5 91       	lpm	r26, Z+
     de8:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     dea:	9f b7       	in	r25, 0x3f	; 63
	cli();
     dec:	f8 94       	cli

	if (val == LOW) {
     dee:	11 11       	cpse	r17, r1
     df0:	04 c0       	rjmp	.+8      	; 0xdfa <digitalWrite+0x4c>
		*out &= ~bit;
     df2:	8c 91       	ld	r24, X
     df4:	d0 95       	com	r29
     df6:	d8 23       	and	r29, r24
     df8:	02 c0       	rjmp	.+4      	; 0xdfe <digitalWrite+0x50>
	} else {
		*out |= bit;
     dfa:	ec 91       	ld	r30, X
     dfc:	de 2b       	or	r29, r30
     dfe:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
     e00:	9f bf       	out	0x3f, r25	; 63
}
     e02:	df 91       	pop	r29
     e04:	cf 91       	pop	r28
     e06:	1f 91       	pop	r17
     e08:	08 95       	ret

00000e0a <digitalRead>:

int digitalRead(uint8_t pin)
{
     e0a:	cf 93       	push	r28
     e0c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     e0e:	28 2f       	mov	r18, r24
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	f9 01       	movw	r30, r18
     e14:	ee 58       	subi	r30, 0x8E	; 142
     e16:	fe 4f       	sbci	r31, 0xFE	; 254
     e18:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     e1a:	f9 01       	movw	r30, r18
     e1c:	e8 54       	subi	r30, 0x48	; 72
     e1e:	fe 4f       	sbci	r31, 0xFE	; 254
     e20:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     e22:	f9 01       	movw	r30, r18
     e24:	e2 50       	subi	r30, 0x02	; 2
     e26:	fe 4f       	sbci	r31, 0xFE	; 254
     e28:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
     e2a:	cc 23       	and	r28, r28
     e2c:	89 f0       	breq	.+34     	; 0xe50 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     e2e:	81 11       	cpse	r24, r1
     e30:	2c df       	rcall	.-424    	; 0xc8a <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
     e32:	ec 2f       	mov	r30, r28
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	ee 0f       	add	r30, r30
     e38:	ff 1f       	adc	r31, r31
     e3a:	ec 5b       	subi	r30, 0xBC	; 188
     e3c:	fd 4f       	sbci	r31, 0xFD	; 253
     e3e:	a5 91       	lpm	r26, Z+
     e40:	b4 91       	lpm	r27, Z
     e42:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
     e44:	ed 23       	and	r30, r29
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	21 f4       	brne	.+8      	; 0xe54 <digitalRead+0x4a>
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <digitalRead+0x4a>
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
     e54:	df 91       	pop	r29
     e56:	cf 91       	pop	r28
     e58:	08 95       	ret

00000e5a <_ZN8SPIClass8transferEh>:
    modifyRegister(MCP_CANCTRL, CANCTRL_CLKEN, CANCTRL_CLKEN);

    /* Turn off CLKOUT for SOF */
    modifyRegister(MCP_CNF3, CNF3_SOF, 0x00);
    return ERROR_OK;
}
     e5a:	8e bd       	out	0x2e, r24	; 46
     e5c:	00 00       	nop
     e5e:	0d b4       	in	r0, 0x2d	; 45
     e60:	07 fe       	sbrs	r0, 7
     e62:	fd cf       	rjmp	.-6      	; 0xe5e <_ZN8SPIClass8transferEh+0x4>
     e64:	8e b5       	in	r24, 0x2e	; 46
     e66:	08 95       	ret

00000e68 <_ZN7MCP25158startSPIEv>:
     e68:	fc 01       	movw	r30, r24
     e6a:	41 81       	ldd	r20, Z+1	; 0x01
     e6c:	52 81       	ldd	r21, Z+2	; 0x02
     e6e:	63 81       	ldd	r22, Z+3	; 0x03
     e70:	74 81       	ldd	r23, Z+4	; 0x04
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	92 e1       	ldi	r25, 0x12	; 18
     e76:	aa e7       	ldi	r26, 0x7A	; 122
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	20 e0       	ldi	r18, 0x00	; 0
     e7c:	48 17       	cp	r20, r24
     e7e:	59 07       	cpc	r21, r25
     e80:	6a 07       	cpc	r22, r26
     e82:	7b 07       	cpc	r23, r27
     e84:	40 f4       	brcc	.+16     	; 0xe96 <_ZN7MCP25158startSPIEv+0x2e>
     e86:	b6 95       	lsr	r27
     e88:	a7 95       	ror	r26
     e8a:	97 95       	ror	r25
     e8c:	87 95       	ror	r24
     e8e:	2f 5f       	subi	r18, 0xFF	; 255
     e90:	26 30       	cpi	r18, 0x06	; 6
     e92:	a1 f7       	brne	.-24     	; 0xe7c <_ZN7MCP25158startSPIEv+0x14>
     e94:	27 e0       	ldi	r18, 0x07	; 7
     e96:	91 e0       	ldi	r25, 0x01	; 1
     e98:	92 27       	eor	r25, r18
     e9a:	29 2f       	mov	r18, r25
     e9c:	20 6a       	ori	r18, 0xA0	; 160
     e9e:	26 95       	lsr	r18
     ea0:	91 70       	andi	r25, 0x01	; 1
     ea2:	80 91 2b 06 	lds	r24, 0x062B	; 0x80062b <_ZN8SPIClass13interruptModeE>
     ea6:	88 23       	and	r24, r24
     ea8:	99 f0       	breq	.+38     	; 0xed0 <_ZN7MCP25158startSPIEv+0x68>
     eaa:	8f b7       	in	r24, 0x3f	; 63
     eac:	f8 94       	cli
     eae:	30 91 2b 06 	lds	r19, 0x062B	; 0x80062b <_ZN8SPIClass13interruptModeE>
     eb2:	31 30       	cpi	r19, 0x01	; 1
     eb4:	59 f4       	brne	.+22     	; 0xecc <_ZN7MCP25158startSPIEv+0x64>
     eb6:	3d b3       	in	r19, 0x1d	; 29
     eb8:	30 93 29 06 	sts	0x0629, r19	; 0x800629 <_ZN8SPIClass13interruptSaveE>
     ebc:	4d b3       	in	r20, 0x1d	; 29
     ebe:	30 91 2a 06 	lds	r19, 0x062A	; 0x80062a <_ZN8SPIClass13interruptMaskE>
     ec2:	30 95       	com	r19
     ec4:	34 23       	and	r19, r20
     ec6:	3d bb       	out	0x1d, r19	; 29
     ec8:	8f bf       	out	0x3f, r24	; 63
     eca:	02 c0       	rjmp	.+4      	; 0xed0 <_ZN7MCP25158startSPIEv+0x68>
     ecc:	80 93 29 06 	sts	0x0629, r24	; 0x800629 <_ZN8SPIClass13interruptSaveE>
     ed0:	2c bd       	out	0x2c, r18	; 44
     ed2:	9d bd       	out	0x2d, r25	; 45
     ed4:	60 e0       	ldi	r22, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	6a cf       	rjmp	.-300    	; 0xdae <digitalWrite>

00000eda <_ZN7MCP25156endSPIEv>:
     eda:	61 e0       	ldi	r22, 0x01	; 1
     edc:	fc 01       	movw	r30, r24
     ede:	80 81       	ld	r24, Z
     ee0:	66 df       	rcall	.-308    	; 0xdae <digitalWrite>
     ee2:	80 91 2b 06 	lds	r24, 0x062B	; 0x80062b <_ZN8SPIClass13interruptModeE>
     ee6:	88 23       	and	r24, r24
     ee8:	61 f0       	breq	.+24     	; 0xf02 <_ZN7MCP25156endSPIEv+0x28>
     eea:	9f b7       	in	r25, 0x3f	; 63
     eec:	f8 94       	cli
     eee:	20 91 2b 06 	lds	r18, 0x062B	; 0x80062b <_ZN8SPIClass13interruptModeE>
     ef2:	80 91 29 06 	lds	r24, 0x0629	; 0x800629 <_ZN8SPIClass13interruptSaveE>
     ef6:	21 30       	cpi	r18, 0x01	; 1
     ef8:	19 f4       	brne	.+6      	; 0xf00 <_ZN7MCP25156endSPIEv+0x26>
     efa:	8d bb       	out	0x1d, r24	; 29
     efc:	9f bf       	out	0x3f, r25	; 63
     efe:	08 95       	ret
     f00:	8f bf       	out	0x3f, r24	; 63
     f02:	08 95       	ret

00000f04 <_ZN7MCP2515C1EhmP8SPIClass>:
     f04:	8f 92       	push	r8
     f06:	9f 92       	push	r9
     f08:	af 92       	push	r10
     f0a:	bf 92       	push	r11
     f0c:	ff 92       	push	r15
     f0e:	0f 93       	push	r16
     f10:	1f 93       	push	r17
     f12:	cf 93       	push	r28
     f14:	df 93       	push	r29
     f16:	ec 01       	movw	r28, r24
     f18:	f6 2e       	mov	r15, r22
     f1a:	49 01       	movw	r8, r18
     f1c:	5a 01       	movw	r10, r20
     f1e:	01 15       	cp	r16, r1
     f20:	11 05       	cpc	r17, r1
     f22:	19 f0       	breq	.+6      	; 0xf2a <_ZN7MCP2515C1EhmP8SPIClass+0x26>
     f24:	1e 83       	std	Y+6, r17	; 0x06
     f26:	0d 83       	std	Y+5, r16	; 0x05
     f28:	06 c0       	rjmp	.+12     	; 0xf36 <_ZN7MCP2515C1EhmP8SPIClass+0x32>
     f2a:	8d e2       	ldi	r24, 0x2D	; 45
     f2c:	96 e0       	ldi	r25, 0x06	; 6
     f2e:	9e 83       	std	Y+6, r25	; 0x06
     f30:	8d 83       	std	Y+5, r24	; 0x05
     f32:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <_ZN8SPIClass5beginEv>
     f36:	f8 82       	st	Y, r15
     f38:	89 82       	std	Y+1, r8	; 0x01
     f3a:	9a 82       	std	Y+2, r9	; 0x02
     f3c:	ab 82       	std	Y+3, r10	; 0x03
     f3e:	bc 82       	std	Y+4, r11	; 0x04
     f40:	61 e0       	ldi	r22, 0x01	; 1
     f42:	8f 2d       	mov	r24, r15
     f44:	f8 de       	rcall	.-528    	; 0xd36 <pinMode>
     f46:	ce 01       	movw	r24, r28
     f48:	df 91       	pop	r29
     f4a:	cf 91       	pop	r28
     f4c:	1f 91       	pop	r17
     f4e:	0f 91       	pop	r16
     f50:	ff 90       	pop	r15
     f52:	bf 90       	pop	r11
     f54:	af 90       	pop	r10
     f56:	9f 90       	pop	r9
     f58:	8f 90       	pop	r8
     f5a:	bf cf       	rjmp	.-130    	; 0xeda <_ZN7MCP25156endSPIEv>

00000f5c <_ZN7MCP251512readRegisterENS_8REGISTERE>:
     f5c:	1f 93       	push	r17
     f5e:	cf 93       	push	r28
     f60:	df 93       	push	r29
     f62:	ec 01       	movw	r28, r24
     f64:	16 2f       	mov	r17, r22
     f66:	80 df       	rcall	.-256    	; 0xe68 <_ZN7MCP25158startSPIEv>
     f68:	83 e0       	ldi	r24, 0x03	; 3
     f6a:	77 df       	rcall	.-274    	; 0xe5a <_ZN8SPIClass8transferEh>
     f6c:	81 2f       	mov	r24, r17
     f6e:	75 df       	rcall	.-278    	; 0xe5a <_ZN8SPIClass8transferEh>
     f70:	80 e0       	ldi	r24, 0x00	; 0
     f72:	73 df       	rcall	.-282    	; 0xe5a <_ZN8SPIClass8transferEh>
     f74:	18 2f       	mov	r17, r24
     f76:	ce 01       	movw	r24, r28
     f78:	b0 df       	rcall	.-160    	; 0xeda <_ZN7MCP25156endSPIEv>
     f7a:	81 2f       	mov	r24, r17
     f7c:	df 91       	pop	r29
     f7e:	cf 91       	pop	r28
     f80:	1f 91       	pop	r17
     f82:	08 95       	ret

00000f84 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>:
     f84:	df 92       	push	r13
     f86:	ef 92       	push	r14
     f88:	ff 92       	push	r15
     f8a:	0f 93       	push	r16
     f8c:	1f 93       	push	r17
     f8e:	cf 93       	push	r28
     f90:	df 93       	push	r29
     f92:	8c 01       	movw	r16, r24
     f94:	c6 2f       	mov	r28, r22
     f96:	d4 2e       	mov	r13, r20
     f98:	e5 2e       	mov	r14, r21
     f9a:	f2 2e       	mov	r15, r18
     f9c:	65 df       	rcall	.-310    	; 0xe68 <_ZN7MCP25158startSPIEv>
     f9e:	83 e0       	ldi	r24, 0x03	; 3
     fa0:	5c df       	rcall	.-328    	; 0xe5a <_ZN8SPIClass8transferEh>
     fa2:	8c 2f       	mov	r24, r28
     fa4:	5a df       	rcall	.-332    	; 0xe5a <_ZN8SPIClass8transferEh>
     fa6:	cd 2d       	mov	r28, r13
     fa8:	de 2d       	mov	r29, r14
     faa:	ce 01       	movw	r24, r28
     fac:	8f 0d       	add	r24, r15
     fae:	91 1d       	adc	r25, r1
     fb0:	7c 01       	movw	r14, r24
     fb2:	ce 15       	cp	r28, r14
     fb4:	df 05       	cpc	r29, r15
     fb6:	21 f0       	breq	.+8      	; 0xfc0 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh+0x3c>
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	4f df       	rcall	.-354    	; 0xe5a <_ZN8SPIClass8transferEh>
     fbc:	89 93       	st	Y+, r24
     fbe:	f9 cf       	rjmp	.-14     	; 0xfb2 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh+0x2e>
     fc0:	c8 01       	movw	r24, r16
     fc2:	df 91       	pop	r29
     fc4:	cf 91       	pop	r28
     fc6:	1f 91       	pop	r17
     fc8:	0f 91       	pop	r16
     fca:	ff 90       	pop	r15
     fcc:	ef 90       	pop	r14
     fce:	df 90       	pop	r13
     fd0:	84 cf       	rjmp	.-248    	; 0xeda <_ZN7MCP25156endSPIEv>

00000fd2 <_ZN7MCP251511setRegisterENS_8REGISTEREh>:
     fd2:	0f 93       	push	r16
     fd4:	1f 93       	push	r17
     fd6:	cf 93       	push	r28
     fd8:	df 93       	push	r29
     fda:	ec 01       	movw	r28, r24
     fdc:	06 2f       	mov	r16, r22
     fde:	14 2f       	mov	r17, r20
     fe0:	43 df       	rcall	.-378    	; 0xe68 <_ZN7MCP25158startSPIEv>
     fe2:	82 e0       	ldi	r24, 0x02	; 2
     fe4:	3a df       	rcall	.-396    	; 0xe5a <_ZN8SPIClass8transferEh>
     fe6:	80 2f       	mov	r24, r16
     fe8:	38 df       	rcall	.-400    	; 0xe5a <_ZN8SPIClass8transferEh>
     fea:	81 2f       	mov	r24, r17
     fec:	36 df       	rcall	.-404    	; 0xe5a <_ZN8SPIClass8transferEh>
     fee:	ce 01       	movw	r24, r28
     ff0:	df 91       	pop	r29
     ff2:	cf 91       	pop	r28
     ff4:	1f 91       	pop	r17
     ff6:	0f 91       	pop	r16
     ff8:	70 cf       	rjmp	.-288    	; 0xeda <_ZN7MCP25156endSPIEv>

00000ffa <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>:
     ffa:	df 92       	push	r13
     ffc:	ef 92       	push	r14
     ffe:	ff 92       	push	r15
    1000:	0f 93       	push	r16
    1002:	1f 93       	push	r17
    1004:	cf 93       	push	r28
    1006:	df 93       	push	r29
    1008:	8c 01       	movw	r16, r24
    100a:	c6 2f       	mov	r28, r22
    100c:	d4 2e       	mov	r13, r20
    100e:	e5 2e       	mov	r14, r21
    1010:	f2 2e       	mov	r15, r18
    1012:	2a df       	rcall	.-428    	; 0xe68 <_ZN7MCP25158startSPIEv>
    1014:	82 e0       	ldi	r24, 0x02	; 2
    1016:	21 df       	rcall	.-446    	; 0xe5a <_ZN8SPIClass8transferEh>
    1018:	8c 2f       	mov	r24, r28
    101a:	1f df       	rcall	.-450    	; 0xe5a <_ZN8SPIClass8transferEh>
    101c:	cd 2d       	mov	r28, r13
    101e:	de 2d       	mov	r29, r14
    1020:	ce 01       	movw	r24, r28
    1022:	8f 0d       	add	r24, r15
    1024:	91 1d       	adc	r25, r1
    1026:	7c 01       	movw	r14, r24
    1028:	ce 15       	cp	r28, r14
    102a:	df 05       	cpc	r29, r15
    102c:	19 f0       	breq	.+6      	; 0x1034 <__EEPROM_REGION_LENGTH__+0x34>
    102e:	89 91       	ld	r24, Y+
    1030:	14 df       	rcall	.-472    	; 0xe5a <_ZN8SPIClass8transferEh>
    1032:	fa cf       	rjmp	.-12     	; 0x1028 <__EEPROM_REGION_LENGTH__+0x28>
    1034:	c8 01       	movw	r24, r16
    1036:	df 91       	pop	r29
    1038:	cf 91       	pop	r28
    103a:	1f 91       	pop	r17
    103c:	0f 91       	pop	r16
    103e:	ff 90       	pop	r15
    1040:	ef 90       	pop	r14
    1042:	df 90       	pop	r13
    1044:	4a cf       	rjmp	.-364    	; 0xeda <_ZN7MCP25156endSPIEv>

00001046 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>:
    1046:	ff 92       	push	r15
    1048:	0f 93       	push	r16
    104a:	1f 93       	push	r17
    104c:	cf 93       	push	r28
    104e:	df 93       	push	r29
    1050:	ec 01       	movw	r28, r24
    1052:	f6 2e       	mov	r15, r22
    1054:	04 2f       	mov	r16, r20
    1056:	12 2f       	mov	r17, r18
    1058:	07 df       	rcall	.-498    	; 0xe68 <_ZN7MCP25158startSPIEv>
    105a:	85 e0       	ldi	r24, 0x05	; 5
    105c:	fe de       	rcall	.-516    	; 0xe5a <_ZN8SPIClass8transferEh>
    105e:	8f 2d       	mov	r24, r15
    1060:	fc de       	rcall	.-520    	; 0xe5a <_ZN8SPIClass8transferEh>
    1062:	80 2f       	mov	r24, r16
    1064:	fa de       	rcall	.-524    	; 0xe5a <_ZN8SPIClass8transferEh>
    1066:	81 2f       	mov	r24, r17
    1068:	f8 de       	rcall	.-528    	; 0xe5a <_ZN8SPIClass8transferEh>
    106a:	ce 01       	movw	r24, r28
    106c:	df 91       	pop	r29
    106e:	cf 91       	pop	r28
    1070:	1f 91       	pop	r17
    1072:	0f 91       	pop	r16
    1074:	ff 90       	pop	r15
    1076:	31 cf       	rjmp	.-414    	; 0xeda <_ZN7MCP25156endSPIEv>

00001078 <_ZN7MCP25159getStatusEv>:
    1078:	1f 93       	push	r17
    107a:	cf 93       	push	r28
    107c:	df 93       	push	r29
    107e:	ec 01       	movw	r28, r24
    1080:	f3 de       	rcall	.-538    	; 0xe68 <_ZN7MCP25158startSPIEv>
    1082:	80 ea       	ldi	r24, 0xA0	; 160
    1084:	ea de       	rcall	.-556    	; 0xe5a <_ZN8SPIClass8transferEh>
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	e8 de       	rcall	.-560    	; 0xe5a <_ZN8SPIClass8transferEh>
    108a:	18 2f       	mov	r17, r24
    108c:	ce 01       	movw	r24, r28
    108e:	25 df       	rcall	.-438    	; 0xeda <_ZN7MCP25156endSPIEv>
    1090:	81 2f       	mov	r24, r17
    1092:	df 91       	pop	r29
    1094:	cf 91       	pop	r28
    1096:	1f 91       	pop	r17
    1098:	08 95       	ret

0000109a <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>:
    109a:	cf 92       	push	r12
    109c:	df 92       	push	r13
    109e:	ef 92       	push	r14
    10a0:	ff 92       	push	r15
    10a2:	1f 93       	push	r17
    10a4:	cf 93       	push	r28
    10a6:	df 93       	push	r29
    10a8:	ec 01       	movw	r28, r24
    10aa:	16 2f       	mov	r17, r22
    10ac:	26 2f       	mov	r18, r22
    10ae:	40 ee       	ldi	r20, 0xE0	; 224
    10b0:	6f e0       	ldi	r22, 0x0F	; 15
    10b2:	c9 df       	rcall	.-110    	; 0x1046 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
    10b4:	1d dd       	rcall	.-1478   	; 0xaf0 <millis>
    10b6:	6b 01       	movw	r12, r22
    10b8:	7c 01       	movw	r14, r24
    10ba:	2a e0       	ldi	r18, 0x0A	; 10
    10bc:	c2 0e       	add	r12, r18
    10be:	d1 1c       	adc	r13, r1
    10c0:	e1 1c       	adc	r14, r1
    10c2:	f1 1c       	adc	r15, r1
    10c4:	15 dd       	rcall	.-1494   	; 0xaf0 <millis>
    10c6:	6c 15       	cp	r22, r12
    10c8:	7d 05       	cpc	r23, r13
    10ca:	8e 05       	cpc	r24, r14
    10cc:	9f 05       	cpc	r25, r15
    10ce:	40 f4       	brcc	.+16     	; 0x10e0 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x46>
    10d0:	6e e0       	ldi	r22, 0x0E	; 14
    10d2:	ce 01       	movw	r24, r28
    10d4:	43 df       	rcall	.-378    	; 0xf5c <_ZN7MCP251512readRegisterENS_8REGISTERE>
    10d6:	80 7e       	andi	r24, 0xE0	; 224
    10d8:	18 13       	cpse	r17, r24
    10da:	f4 cf       	rjmp	.-24     	; 0x10c4 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x2a>
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	01 c0       	rjmp	.+2      	; 0x10e2 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x48>
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	91 e0       	ldi	r25, 0x01	; 1
    10e4:	89 27       	eor	r24, r25
    10e6:	df 91       	pop	r29
    10e8:	cf 91       	pop	r28
    10ea:	1f 91       	pop	r17
    10ec:	ff 90       	pop	r15
    10ee:	ef 90       	pop	r14
    10f0:	df 90       	pop	r13
    10f2:	cf 90       	pop	r12
    10f4:	08 95       	ret

000010f6 <_ZN7MCP251513setConfigModeEv>:
    10f6:	60 e8       	ldi	r22, 0x80	; 128
    10f8:	d0 cf       	rjmp	.-96     	; 0x109a <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>

000010fa <_ZN7MCP251513setNormalModeEv>:
    10fa:	60 e0       	ldi	r22, 0x00	; 0
    10fc:	ce cf       	rjmp	.-100    	; 0x109a <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>

000010fe <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK>:
    10fe:	0f 93       	push	r16
    1100:	1f 93       	push	r17
    1102:	cf 93       	push	r28
    1104:	df 93       	push	r29
    1106:	8c 01       	movw	r16, r24
    1108:	c6 2f       	mov	r28, r22
    110a:	d4 2f       	mov	r29, r20
    110c:	f4 df       	rcall	.-24     	; 0x10f6 <_ZN7MCP251513setConfigModeEv>
    110e:	81 11       	cpse	r24, r1
    1110:	bd c0       	rjmp	.+378    	; 0x128c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x18e>
    1112:	d1 30       	cpi	r29, 0x01	; 1
    1114:	b9 f1       	breq	.+110    	; 0x1184 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x86>
    1116:	08 f4       	brcc	.+2      	; 0x111a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x1c>
    1118:	6b c0       	rjmp	.+214    	; 0x11f0 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0xf2>
    111a:	d2 30       	cpi	r29, 0x02	; 2
    111c:	09 f0       	breq	.+2      	; 0x1120 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x22>
    111e:	99 c0       	rjmp	.+306    	; 0x1252 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x154>
    1120:	8c 2f       	mov	r24, r28
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	80 31       	cpi	r24, 0x10	; 16
    1126:	91 05       	cpc	r25, r1
    1128:	08 f0       	brcs	.+2      	; 0x112c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x2e>
    112a:	93 c0       	rjmp	.+294    	; 0x1252 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x154>
    112c:	fc 01       	movw	r30, r24
    112e:	88 27       	eor	r24, r24
    1130:	ec 57       	subi	r30, 0x7C	; 124
    1132:	ff 4f       	sbci	r31, 0xFF	; 255
    1134:	8f 4f       	sbci	r24, 0xFF	; 255
    1136:	0c 94 3d 18 	jmp	0x307a	; 0x307a <__tablejump2__>
    113a:	c7 e8       	ldi	r28, 0x87	; 135
    113c:	df eb       	ldi	r29, 0xBF	; 191
    113e:	34 c0       	rjmp	.+104    	; 0x11a8 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0xaa>
    1140:	c4 e8       	ldi	r28, 0x84	; 132
    1142:	d4 ea       	ldi	r29, 0xA4	; 164
    1144:	8e c0       	rjmp	.+284    	; 0x1262 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x164>
    1146:	c5 e8       	ldi	r28, 0x85	; 133
    1148:	d2 ee       	ldi	r29, 0xE2	; 226
    114a:	47 e4       	ldi	r20, 0x47	; 71
    114c:	93 c0       	rjmp	.+294    	; 0x1274 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x176>
    114e:	c7 e8       	ldi	r28, 0x87	; 135
    1150:	df eb       	ldi	r29, 0xBF	; 191
    1152:	6e c0       	rjmp	.+220    	; 0x1230 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x132>
    1154:	c6 e8       	ldi	r28, 0x86	; 134
    1156:	d4 eb       	ldi	r29, 0xB4	; 180
    1158:	6b c0       	rjmp	.+214    	; 0x1230 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x132>
    115a:	c7 e8       	ldi	r28, 0x87	; 135
    115c:	df eb       	ldi	r29, 0xBF	; 191
    115e:	6c c0       	rjmp	.+216    	; 0x1238 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x13a>
    1160:	c6 e8       	ldi	r28, 0x86	; 134
    1162:	d4 eb       	ldi	r29, 0xB4	; 180
    1164:	69 c0       	rjmp	.+210    	; 0x1238 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x13a>
    1166:	c5 e8       	ldi	r28, 0x85	; 133
    1168:	d1 eb       	ldi	r29, 0xB1	; 177
    116a:	66 c0       	rjmp	.+204    	; 0x1238 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x13a>
    116c:	c6 e8       	ldi	r28, 0x86	; 134
    116e:	d4 eb       	ldi	r29, 0xB4	; 180
    1170:	6b c0       	rjmp	.+214    	; 0x1248 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x14a>
    1172:	c5 e8       	ldi	r28, 0x85	; 133
    1174:	d1 eb       	ldi	r29, 0xB1	; 177
    1176:	68 c0       	rjmp	.+208    	; 0x1248 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x14a>
    1178:	c2 e8       	ldi	r28, 0x82	; 130
    117a:	d0 e9       	ldi	r29, 0x90	; 144
    117c:	65 c0       	rjmp	.+202    	; 0x1248 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x14a>
    117e:	c0 e8       	ldi	r28, 0x80	; 128
    1180:	d0 e8       	ldi	r29, 0x80	; 128
    1182:	62 c0       	rjmp	.+196    	; 0x1248 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x14a>
    1184:	8c 2f       	mov	r24, r28
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	80 31       	cpi	r24, 0x10	; 16
    118a:	91 05       	cpc	r25, r1
    118c:	08 f0       	brcs	.+2      	; 0x1190 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x92>
    118e:	61 c0       	rjmp	.+194    	; 0x1252 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x154>
    1190:	fc 01       	movw	r30, r24
    1192:	88 27       	eor	r24, r24
    1194:	ec 56       	subi	r30, 0x6C	; 108
    1196:	ff 4f       	sbci	r31, 0xFF	; 255
    1198:	8f 4f       	sbci	r24, 0xFF	; 255
    119a:	0c 94 3d 18 	jmp	0x307a	; 0x307a <__tablejump2__>
    119e:	c7 e8       	ldi	r28, 0x87	; 135
    11a0:	df ef       	ldi	r29, 0xFF	; 255
    11a2:	5b c0       	rjmp	.+182    	; 0x125a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15c>
    11a4:	c7 e8       	ldi	r28, 0x87	; 135
    11a6:	df ef       	ldi	r29, 0xFF	; 255
    11a8:	4f e0       	ldi	r20, 0x0F	; 15
    11aa:	64 c0       	rjmp	.+200    	; 0x1274 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x176>
    11ac:	c5 e8       	ldi	r28, 0x85	; 133
    11ae:	d1 ef       	ldi	r29, 0xF1	; 241
    11b0:	4e e4       	ldi	r20, 0x4E	; 78
    11b2:	60 c0       	rjmp	.+192    	; 0x1274 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x176>
    11b4:	c7 e8       	ldi	r28, 0x87	; 135
    11b6:	df ef       	ldi	r29, 0xFF	; 255
    11b8:	54 c0       	rjmp	.+168    	; 0x1262 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x164>
    11ba:	c7 e8       	ldi	r28, 0x87	; 135
    11bc:	da ef       	ldi	r29, 0xFA	; 250
    11be:	51 c0       	rjmp	.+162    	; 0x1262 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x164>
    11c0:	c7 e8       	ldi	r28, 0x87	; 135
    11c2:	df ef       	ldi	r29, 0xFF	; 255
    11c4:	35 c0       	rjmp	.+106    	; 0x1230 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x132>
    11c6:	c7 e0       	ldi	r28, 0x07	; 7
    11c8:	de eb       	ldi	r29, 0xBE	; 190
    11ca:	32 c0       	rjmp	.+100    	; 0x1230 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x132>
    11cc:	c7 e0       	ldi	r28, 0x07	; 7
    11ce:	dd ea       	ldi	r29, 0xAD	; 173
    11d0:	2f c0       	rjmp	.+94     	; 0x1230 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x132>
    11d2:	c6 e8       	ldi	r28, 0x86	; 134
    11d4:	d0 ef       	ldi	r29, 0xF0	; 240
    11d6:	2c c0       	rjmp	.+88     	; 0x1230 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x132>
    11d8:	c7 e8       	ldi	r28, 0x87	; 135
    11da:	da ef       	ldi	r29, 0xFA	; 250
    11dc:	2d c0       	rjmp	.+90     	; 0x1238 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x13a>
    11de:	c5 e8       	ldi	r28, 0x85	; 133
    11e0:	d1 ef       	ldi	r29, 0xF1	; 241
    11e2:	2e c0       	rjmp	.+92     	; 0x1240 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x142>
    11e4:	c6 e8       	ldi	r28, 0x86	; 134
    11e6:	d0 ef       	ldi	r29, 0xF0	; 240
    11e8:	2f c0       	rjmp	.+94     	; 0x1248 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x14a>
    11ea:	c2 e8       	ldi	r28, 0x82	; 130
    11ec:	d0 ed       	ldi	r29, 0xD0	; 208
    11ee:	2c c0       	rjmp	.+88     	; 0x1248 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x14a>
    11f0:	8c 2f       	mov	r24, r28
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	fc 01       	movw	r30, r24
    11f6:	34 97       	sbiw	r30, 0x04	; 4
    11f8:	ec 30       	cpi	r30, 0x0C	; 12
    11fa:	f1 05       	cpc	r31, r1
    11fc:	50 f5       	brcc	.+84     	; 0x1252 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x154>
    11fe:	88 27       	eor	r24, r24
    1200:	ec 55       	subi	r30, 0x5C	; 92
    1202:	ff 4f       	sbci	r31, 0xFF	; 255
    1204:	8f 4f       	sbci	r24, 0xFF	; 255
    1206:	0c 94 3d 18 	jmp	0x307a	; 0x307a <__tablejump2__>
    120a:	c7 e8       	ldi	r28, 0x87	; 135
    120c:	df ef       	ldi	r29, 0xFF	; 255
    120e:	02 c0       	rjmp	.+4      	; 0x1214 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x116>
    1210:	c7 e8       	ldi	r28, 0x87	; 135
    1212:	da ef       	ldi	r29, 0xFA	; 250
    1214:	49 e0       	ldi	r20, 0x09	; 9
    1216:	2e c0       	rjmp	.+92     	; 0x1274 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x176>
    1218:	c7 e8       	ldi	r28, 0x87	; 135
    121a:	df ef       	ldi	r29, 0xFF	; 255
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x124>
    121e:	c7 e8       	ldi	r28, 0x87	; 135
    1220:	de ef       	ldi	r29, 0xFE	; 254
    1222:	44 e0       	ldi	r20, 0x04	; 4
    1224:	27 c0       	rjmp	.+78     	; 0x1274 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x176>
    1226:	c7 e8       	ldi	r28, 0x87	; 135
    1228:	da ef       	ldi	r29, 0xFA	; 250
    122a:	fb cf       	rjmp	.-10     	; 0x1222 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x124>
    122c:	c7 e8       	ldi	r28, 0x87	; 135
    122e:	da ef       	ldi	r29, 0xFA	; 250
    1230:	43 e0       	ldi	r20, 0x03	; 3
    1232:	20 c0       	rjmp	.+64     	; 0x1274 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x176>
    1234:	c7 e8       	ldi	r28, 0x87	; 135
    1236:	df ef       	ldi	r29, 0xFF	; 255
    1238:	41 e0       	ldi	r20, 0x01	; 1
    123a:	1c c0       	rjmp	.+56     	; 0x1274 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x176>
    123c:	c6 e8       	ldi	r28, 0x86	; 134
    123e:	db ef       	ldi	r29, 0xFB	; 251
    1240:	41 e4       	ldi	r20, 0x41	; 65
    1242:	18 c0       	rjmp	.+48     	; 0x1274 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x176>
    1244:	c7 e8       	ldi	r28, 0x87	; 135
    1246:	da ef       	ldi	r29, 0xFA	; 250
    1248:	40 e0       	ldi	r20, 0x00	; 0
    124a:	14 c0       	rjmp	.+40     	; 0x1274 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x176>
    124c:	c2 e8       	ldi	r28, 0x82	; 130
    124e:	d9 ed       	ldi	r29, 0xD9	; 217
    1250:	fb cf       	rjmp	.-10     	; 0x1248 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x14a>
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	1b c0       	rjmp	.+54     	; 0x128c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x18e>
    1256:	c7 e8       	ldi	r28, 0x87	; 135
    1258:	df eb       	ldi	r29, 0xBF	; 191
    125a:	4f e1       	ldi	r20, 0x1F	; 31
    125c:	0b c0       	rjmp	.+22     	; 0x1274 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x176>
    125e:	c7 e8       	ldi	r28, 0x87	; 135
    1260:	df eb       	ldi	r29, 0xBF	; 191
    1262:	47 e0       	ldi	r20, 0x07	; 7
    1264:	07 c0       	rjmp	.+14     	; 0x1274 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x176>
    1266:	c7 e8       	ldi	r28, 0x87	; 135
    1268:	df ef       	ldi	r29, 0xFF	; 255
    126a:	4f e3       	ldi	r20, 0x3F	; 63
    126c:	03 c0       	rjmp	.+6      	; 0x1274 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x176>
    126e:	c7 e8       	ldi	r28, 0x87	; 135
    1270:	df ef       	ldi	r29, 0xFF	; 255
    1272:	4b e0       	ldi	r20, 0x0B	; 11
    1274:	6a e2       	ldi	r22, 0x2A	; 42
    1276:	c8 01       	movw	r24, r16
    1278:	ac de       	rcall	.-680    	; 0xfd2 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    127a:	4d 2f       	mov	r20, r29
    127c:	69 e2       	ldi	r22, 0x29	; 41
    127e:	c8 01       	movw	r24, r16
    1280:	a8 de       	rcall	.-688    	; 0xfd2 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    1282:	4c 2f       	mov	r20, r28
    1284:	68 e2       	ldi	r22, 0x28	; 40
    1286:	c8 01       	movw	r24, r16
    1288:	a4 de       	rcall	.-696    	; 0xfd2 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    128a:	80 e0       	ldi	r24, 0x00	; 0
    128c:	df 91       	pop	r29
    128e:	cf 91       	pop	r28
    1290:	1f 91       	pop	r17
    1292:	0f 91       	pop	r16
    1294:	08 95       	ret

00001296 <_ZN7MCP25159prepareIdEPhbm>:

void MCP2515::prepareId(uint8_t *buffer, const bool ext, const uint32_t id)
{
    1296:	0f 93       	push	r16
    1298:	1f 93       	push	r17
    129a:	fb 01       	movw	r30, r22
    uint16_t canid = (uint16_t)(id & 0x0FFFF);

    if (ext) {
    129c:	44 23       	and	r20, r20
    129e:	b1 f0       	breq	.+44     	; 0x12cc <_ZN7MCP25159prepareIdEPhbm+0x36>
        buffer[MCP_EID0] = (uint8_t) (canid & 0xFF);
    12a0:	03 83       	std	Z+3, r16	; 0x03
        buffer[MCP_EID8] = (uint8_t) (canid >> 8);
    12a2:	12 83       	std	Z+2, r17	; 0x02
        canid = (uint16_t)(id >> 16);
    12a4:	89 01       	movw	r16, r18
    12a6:	22 27       	eor	r18, r18
    12a8:	33 27       	eor	r19, r19
        buffer[MCP_SIDL] = (uint8_t) (canid & 0x03);
        buffer[MCP_SIDL] += (uint8_t) ((canid & 0x1C) << 3);
        buffer[MCP_SIDL] |= TXB_EXIDE_MASK;
    12aa:	90 2f       	mov	r25, r16
    12ac:	9c 71       	andi	r25, 0x1C	; 28
    12ae:	80 2f       	mov	r24, r16
    12b0:	83 70       	andi	r24, 0x03	; 3
    12b2:	48 e0       	ldi	r20, 0x08	; 8
    12b4:	94 9f       	mul	r25, r20
    12b6:	80 0d       	add	r24, r0
    12b8:	11 24       	eor	r1, r1
    12ba:	88 60       	ori	r24, 0x08	; 8
    12bc:	81 83       	std	Z+1, r24	; 0x01
        buffer[MCP_SIDH] = (uint8_t) (canid >> 5);
    12be:	55 e0       	ldi	r21, 0x05	; 5
    12c0:	16 95       	lsr	r17
    12c2:	07 95       	ror	r16
    12c4:	5a 95       	dec	r21
    12c6:	e1 f7       	brne	.-8      	; 0x12c0 <_ZN7MCP25159prepareIdEPhbm+0x2a>
    12c8:	00 83       	st	Z, r16
    12ca:	0d c0       	rjmp	.+26     	; 0x12e6 <_ZN7MCP25159prepareIdEPhbm+0x50>
    } else {
        buffer[MCP_SIDH] = (uint8_t) (canid >> 3);
    12cc:	c8 01       	movw	r24, r16
    12ce:	23 e0       	ldi	r18, 0x03	; 3
    12d0:	96 95       	lsr	r25
    12d2:	87 95       	ror	r24
    12d4:	2a 95       	dec	r18
    12d6:	e1 f7       	brne	.-8      	; 0x12d0 <_ZN7MCP25159prepareIdEPhbm+0x3a>
    12d8:	80 83       	st	Z, r24
        buffer[MCP_SIDL] = (uint8_t) ((canid & 0x07 ) << 5);
    12da:	02 95       	swap	r16
    12dc:	00 0f       	add	r16, r16
    12de:	00 7e       	andi	r16, 0xE0	; 224
    12e0:	01 83       	std	Z+1, r16	; 0x01
        buffer[MCP_EID0] = 0;
    12e2:	13 82       	std	Z+3, r1	; 0x03
        buffer[MCP_EID8] = 0;
    12e4:	12 82       	std	Z+2, r1	; 0x02
    }
}
    12e6:	1f 91       	pop	r17
    12e8:	0f 91       	pop	r16
    12ea:	08 95       	ret

000012ec <_ZN7MCP251513setFilterMaskENS_4MASKEbm>:

MCP2515::ERROR MCP2515::setFilterMask(const MASK mask, const bool ext, const uint32_t ulData)
{
    12ec:	8f 92       	push	r8
    12ee:	9f 92       	push	r9
    12f0:	af 92       	push	r10
    12f2:	bf 92       	push	r11
    12f4:	cf 92       	push	r12
    12f6:	df 92       	push	r13
    12f8:	ef 92       	push	r14
    12fa:	ff 92       	push	r15
    12fc:	0f 93       	push	r16
    12fe:	1f 93       	push	r17
    1300:	cf 93       	push	r28
    1302:	df 93       	push	r29
    1304:	00 d0       	rcall	.+0      	; 0x1306 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x1a>
    1306:	1f 92       	push	r1
    1308:	cd b7       	in	r28, 0x3d	; 61
    130a:	de b7       	in	r29, 0x3e	; 62
    130c:	7c 01       	movw	r14, r24
    130e:	d6 2e       	mov	r13, r22
    1310:	c4 2e       	mov	r12, r20
    1312:	48 01       	movw	r8, r16
    1314:	59 01       	movw	r10, r18
    ERROR res = setConfigMode();
    1316:	ef de       	rcall	.-546    	; 0x10f6 <_ZN7MCP251513setConfigModeEv>
    if (res != ERROR_OK) {
    1318:	81 11       	cpse	r24, r1
    131a:	19 c0       	rjmp	.+50     	; 0x134e <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x62>
        return res;
    }
    
    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
    131c:	95 01       	movw	r18, r10
    131e:	84 01       	movw	r16, r8
    1320:	4c 2d       	mov	r20, r12
    1322:	be 01       	movw	r22, r28
    1324:	6f 5f       	subi	r22, 0xFF	; 255
    1326:	7f 4f       	sbci	r23, 0xFF	; 255
    1328:	c7 01       	movw	r24, r14
    132a:	b5 df       	rcall	.-150    	; 0x1296 <_ZN7MCP25159prepareIdEPhbm>

    REGISTER reg;
    switch (mask) {
    132c:	dd 20       	and	r13, r13
    132e:	29 f0       	breq	.+10     	; 0x133a <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x4e>
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	d8 12       	cpse	r13, r24
    1334:	0b c0       	rjmp	.+22     	; 0x134c <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x60>
        case MASK0: reg = MCP_RXM0SIDH; break;
        case MASK1: reg = MCP_RXM1SIDH; break;
    1336:	64 e2       	ldi	r22, 0x24	; 36
    1338:	01 c0       	rjmp	.+2      	; 0x133c <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x50>
    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);

    REGISTER reg;
    switch (mask) {
        case MASK0: reg = MCP_RXM0SIDH; break;
    133a:	60 e2       	ldi	r22, 0x20	; 32
        case MASK1: reg = MCP_RXM1SIDH; break;
        default:
            return ERROR_FAIL;
    }

    setRegisters(reg, tbufdata, 4);
    133c:	24 e0       	ldi	r18, 0x04	; 4
    133e:	ae 01       	movw	r20, r28
    1340:	4f 5f       	subi	r20, 0xFF	; 255
    1342:	5f 4f       	sbci	r21, 0xFF	; 255
    1344:	c7 01       	movw	r24, r14
    1346:	59 de       	rcall	.-846    	; 0xffa <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    
    return ERROR_OK;
    1348:	80 e0       	ldi	r24, 0x00	; 0
    134a:	01 c0       	rjmp	.+2      	; 0x134e <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x62>
    REGISTER reg;
    switch (mask) {
        case MASK0: reg = MCP_RXM0SIDH; break;
        case MASK1: reg = MCP_RXM1SIDH; break;
        default:
            return ERROR_FAIL;
    134c:	81 e0       	ldi	r24, 0x01	; 1
    }

    setRegisters(reg, tbufdata, 4);
    
    return ERROR_OK;
}
    134e:	0f 90       	pop	r0
    1350:	0f 90       	pop	r0
    1352:	0f 90       	pop	r0
    1354:	0f 90       	pop	r0
    1356:	df 91       	pop	r29
    1358:	cf 91       	pop	r28
    135a:	1f 91       	pop	r17
    135c:	0f 91       	pop	r16
    135e:	ff 90       	pop	r15
    1360:	ef 90       	pop	r14
    1362:	df 90       	pop	r13
    1364:	cf 90       	pop	r12
    1366:	bf 90       	pop	r11
    1368:	af 90       	pop	r10
    136a:	9f 90       	pop	r9
    136c:	8f 90       	pop	r8
    136e:	08 95       	ret

00001370 <_ZN7MCP25159setFilterENS_3RXFEbm>:

MCP2515::ERROR MCP2515::setFilter(const RXF num, const bool ext, const uint32_t ulData)
{
    1370:	8f 92       	push	r8
    1372:	9f 92       	push	r9
    1374:	af 92       	push	r10
    1376:	bf 92       	push	r11
    1378:	cf 92       	push	r12
    137a:	df 92       	push	r13
    137c:	ef 92       	push	r14
    137e:	ff 92       	push	r15
    1380:	0f 93       	push	r16
    1382:	1f 93       	push	r17
    1384:	cf 93       	push	r28
    1386:	df 93       	push	r29
    1388:	00 d0       	rcall	.+0      	; 0x138a <_ZN7MCP25159setFilterENS_3RXFEbm+0x1a>
    138a:	1f 92       	push	r1
    138c:	cd b7       	in	r28, 0x3d	; 61
    138e:	de b7       	in	r29, 0x3e	; 62
    1390:	6c 01       	movw	r12, r24
    1392:	f6 2e       	mov	r15, r22
    1394:	e4 2e       	mov	r14, r20
    1396:	48 01       	movw	r8, r16
    1398:	59 01       	movw	r10, r18
    ERROR res = setConfigMode();
    139a:	ad de       	rcall	.-678    	; 0x10f6 <_ZN7MCP251513setConfigModeEv>
    if (res != ERROR_OK) {
    139c:	81 11       	cpse	r24, r1
    139e:	34 c0       	rjmp	.+104    	; 0x1408 <_ZN7MCP25159setFilterENS_3RXFEbm+0x98>
        return res;
    }

    REGISTER reg;

    switch (num) {
    13a0:	82 e0       	ldi	r24, 0x02	; 2
    13a2:	f8 16       	cp	r15, r24
    13a4:	a9 f0       	breq	.+42     	; 0x13d0 <_ZN7MCP25159setFilterENS_3RXFEbm+0x60>
    13a6:	8f 15       	cp	r24, r15
    13a8:	40 f0       	brcs	.+16     	; 0x13ba <_ZN7MCP25159setFilterENS_3RXFEbm+0x4a>
    13aa:	ff 20       	and	r15, r15
    13ac:	d1 f0       	breq	.+52     	; 0x13e2 <_ZN7MCP25159setFilterENS_3RXFEbm+0x72>
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	f8 12       	cpse	r15, r24
    13b2:	29 c0       	rjmp	.+82     	; 0x1406 <_ZN7MCP25159setFilterENS_3RXFEbm+0x96>
        case RXF0: reg = MCP_RXF0SIDH; break;
        case RXF1: reg = MCP_RXF1SIDH; break;
    13b4:	44 e0       	ldi	r20, 0x04	; 4
    13b6:	f4 2e       	mov	r15, r20
    13b8:	15 c0       	rjmp	.+42     	; 0x13e4 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        return res;
    }

    REGISTER reg;

    switch (num) {
    13ba:	84 e0       	ldi	r24, 0x04	; 4
    13bc:	f8 16       	cp	r15, r24
    13be:	71 f0       	breq	.+28     	; 0x13dc <_ZN7MCP25159setFilterENS_3RXFEbm+0x6c>
    13c0:	f8 16       	cp	r15, r24
    13c2:	48 f0       	brcs	.+18     	; 0x13d6 <_ZN7MCP25159setFilterENS_3RXFEbm+0x66>
    13c4:	85 e0       	ldi	r24, 0x05	; 5
    13c6:	f8 12       	cpse	r15, r24
    13c8:	1e c0       	rjmp	.+60     	; 0x1406 <_ZN7MCP25159setFilterENS_3RXFEbm+0x96>
        case RXF0: reg = MCP_RXF0SIDH; break;
        case RXF1: reg = MCP_RXF1SIDH; break;
        case RXF2: reg = MCP_RXF2SIDH; break;
        case RXF3: reg = MCP_RXF3SIDH; break;
        case RXF4: reg = MCP_RXF4SIDH; break;
        case RXF5: reg = MCP_RXF5SIDH; break;
    13ca:	88 e1       	ldi	r24, 0x18	; 24
    13cc:	f8 2e       	mov	r15, r24
    13ce:	0a c0       	rjmp	.+20     	; 0x13e4 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
    REGISTER reg;

    switch (num) {
        case RXF0: reg = MCP_RXF0SIDH; break;
        case RXF1: reg = MCP_RXF1SIDH; break;
        case RXF2: reg = MCP_RXF2SIDH; break;
    13d0:	38 e0       	ldi	r19, 0x08	; 8
    13d2:	f3 2e       	mov	r15, r19
    13d4:	07 c0       	rjmp	.+14     	; 0x13e4 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF3: reg = MCP_RXF3SIDH; break;
    13d6:	20 e1       	ldi	r18, 0x10	; 16
    13d8:	f2 2e       	mov	r15, r18
    13da:	04 c0       	rjmp	.+8      	; 0x13e4 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF4: reg = MCP_RXF4SIDH; break;
    13dc:	94 e1       	ldi	r25, 0x14	; 20
    13de:	f9 2e       	mov	r15, r25
    13e0:	01 c0       	rjmp	.+2      	; 0x13e4 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
    }

    REGISTER reg;

    switch (num) {
        case RXF0: reg = MCP_RXF0SIDH; break;
    13e2:	f1 2c       	mov	r15, r1
        default:
            return ERROR_FAIL;
    }

    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
    13e4:	95 01       	movw	r18, r10
    13e6:	84 01       	movw	r16, r8
    13e8:	4e 2d       	mov	r20, r14
    13ea:	be 01       	movw	r22, r28
    13ec:	6f 5f       	subi	r22, 0xFF	; 255
    13ee:	7f 4f       	sbci	r23, 0xFF	; 255
    13f0:	c6 01       	movw	r24, r12
    13f2:	51 df       	rcall	.-350    	; 0x1296 <_ZN7MCP25159prepareIdEPhbm>
    setRegisters(reg, tbufdata, 4);
    13f4:	24 e0       	ldi	r18, 0x04	; 4
    13f6:	ae 01       	movw	r20, r28
    13f8:	4f 5f       	subi	r20, 0xFF	; 255
    13fa:	5f 4f       	sbci	r21, 0xFF	; 255
    13fc:	6f 2d       	mov	r22, r15
    13fe:	c6 01       	movw	r24, r12
    1400:	fc dd       	rcall	.-1032   	; 0xffa <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    return ERROR_OK;
    1402:	80 e0       	ldi	r24, 0x00	; 0
    1404:	01 c0       	rjmp	.+2      	; 0x1408 <_ZN7MCP25159setFilterENS_3RXFEbm+0x98>
        case RXF2: reg = MCP_RXF2SIDH; break;
        case RXF3: reg = MCP_RXF3SIDH; break;
        case RXF4: reg = MCP_RXF4SIDH; break;
        case RXF5: reg = MCP_RXF5SIDH; break;
        default:
            return ERROR_FAIL;
    1406:	81 e0       	ldi	r24, 0x01	; 1
    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
    setRegisters(reg, tbufdata, 4);

    return ERROR_OK;
}
    1408:	0f 90       	pop	r0
    140a:	0f 90       	pop	r0
    140c:	0f 90       	pop	r0
    140e:	0f 90       	pop	r0
    1410:	df 91       	pop	r29
    1412:	cf 91       	pop	r28
    1414:	1f 91       	pop	r17
    1416:	0f 91       	pop	r16
    1418:	ff 90       	pop	r15
    141a:	ef 90       	pop	r14
    141c:	df 90       	pop	r13
    141e:	cf 90       	pop	r12
    1420:	bf 90       	pop	r11
    1422:	af 90       	pop	r10
    1424:	9f 90       	pop	r9
    1426:	8f 90       	pop	r8
    1428:	08 95       	ret

0000142a <_ZN7MCP25155resetEv>:
    digitalWrite(SPICS, HIGH);
    SPIn->endTransaction();
}

MCP2515::ERROR MCP2515::reset(void)
{
    142a:	af 92       	push	r10
    142c:	bf 92       	push	r11
    142e:	cf 92       	push	r12
    1430:	df 92       	push	r13
    1432:	ef 92       	push	r14
    1434:	ff 92       	push	r15
    1436:	0f 93       	push	r16
    1438:	1f 93       	push	r17
    143a:	cf 93       	push	r28
    143c:	df 93       	push	r29
    143e:	cd b7       	in	r28, 0x3d	; 61
    1440:	de b7       	in	r29, 0x3e	; 62
    1442:	64 97       	sbiw	r28, 0x14	; 20
    1444:	0f b6       	in	r0, 0x3f	; 63
    1446:	f8 94       	cli
    1448:	de bf       	out	0x3e, r29	; 62
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	cd bf       	out	0x3d, r28	; 61
    144e:	7c 01       	movw	r14, r24
    startSPI();
    1450:	0b dd       	rcall	.-1514   	; 0xe68 <_ZN7MCP25158startSPIEv>
    SPIn->transfer(INSTRUCTION_RESET);
    1452:	80 ec       	ldi	r24, 0xC0	; 192
    1454:	02 dd       	rcall	.-1532   	; 0xe5a <_ZN8SPIClass8transferEh>
    endSPI();
    1456:	c7 01       	movw	r24, r14
    1458:	40 dd       	rcall	.-1408   	; 0xeda <_ZN7MCP25156endSPIEv>
    145a:	6a e0       	ldi	r22, 0x0A	; 10

    delay(10);
    145c:	70 e0       	ldi	r23, 0x00	; 0
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	77 db       	rcall	.-2322   	; 0xb52 <delay>
    1464:	8e 01       	movw	r16, r28

    uint8_t zeros[14];
    memset(zeros, 0, sizeof(zeros));
    1466:	0f 5f       	subi	r16, 0xFF	; 255
    1468:	1f 4f       	sbci	r17, 0xFF	; 255
    146a:	8e e0       	ldi	r24, 0x0E	; 14
    146c:	f8 01       	movw	r30, r16
    146e:	11 92       	st	Z+, r1
    1470:	8a 95       	dec	r24
    1472:	e9 f7       	brne	.-6      	; 0x146e <_ZN7MCP25155resetEv+0x44>
    1474:	2e e0       	ldi	r18, 0x0E	; 14
    setRegisters(MCP_TXB0CTRL, zeros, 14);
    1476:	a8 01       	movw	r20, r16
    1478:	60 e3       	ldi	r22, 0x30	; 48
    147a:	c7 01       	movw	r24, r14
    147c:	be dd       	rcall	.-1156   	; 0xffa <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    147e:	2e e0       	ldi	r18, 0x0E	; 14
    setRegisters(MCP_TXB1CTRL, zeros, 14);
    1480:	a8 01       	movw	r20, r16
    1482:	60 e4       	ldi	r22, 0x40	; 64
    1484:	c7 01       	movw	r24, r14
    1486:	b9 dd       	rcall	.-1166   	; 0xffa <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    1488:	2e e0       	ldi	r18, 0x0E	; 14
    setRegisters(MCP_TXB2CTRL, zeros, 14);
    148a:	a8 01       	movw	r20, r16
    148c:	60 e5       	ldi	r22, 0x50	; 80
    148e:	c7 01       	movw	r24, r14
    1490:	b4 dd       	rcall	.-1176   	; 0xffa <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    1492:	40 e0       	ldi	r20, 0x00	; 0

    setRegister(MCP_RXB0CTRL, 0);
    1494:	60 e6       	ldi	r22, 0x60	; 96
    1496:	c7 01       	movw	r24, r14
    1498:	9c dd       	rcall	.-1224   	; 0xfd2 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    149a:	40 e0       	ldi	r20, 0x00	; 0
    setRegister(MCP_RXB1CTRL, 0);
    149c:	60 e7       	ldi	r22, 0x70	; 112
    149e:	c7 01       	movw	r24, r14
    14a0:	98 dd       	rcall	.-1232   	; 0xfd2 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    14a2:	43 ea       	ldi	r20, 0xA3	; 163

    setRegister(MCP_CANINTE, CANINTF_RX0IF | CANINTF_RX1IF | CANINTF_ERRIF | CANINTF_MERRF);
    14a4:	6b e2       	ldi	r22, 0x2B	; 43
    14a6:	c7 01       	movw	r24, r14
    14a8:	94 dd       	rcall	.-1240   	; 0xfd2 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    14aa:	24 e0       	ldi	r18, 0x04	; 4

    // receives all valid messages using either Standard or Extended Identifiers that
    // meet filter criteria. RXF0 is applied for RXB0, RXF1 is applied for RXB1
    modifyRegister(MCP_RXB0CTRL,
                   RXBnCTRL_RXM_MASK | RXB0CTRL_BUKT | RXB0CTRL_FILHIT_MASK,
                   RXBnCTRL_RXM_STDEXT | RXB0CTRL_BUKT | RXB0CTRL_FILHIT);
    14ac:	47 e6       	ldi	r20, 0x67	; 103
    14ae:	60 e6       	ldi	r22, 0x60	; 96
    14b0:	c7 01       	movw	r24, r14
    14b2:	c9 dd       	rcall	.-1134   	; 0x1046 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
    14b4:	21 e0       	ldi	r18, 0x01	; 1
    14b6:	47 e6       	ldi	r20, 0x67	; 103
    modifyRegister(MCP_RXB1CTRL,
                   RXBnCTRL_RXM_MASK | RXB1CTRL_FILHIT_MASK,
                   RXBnCTRL_RXM_STDEXT | RXB1CTRL_FILHIT);
    14b8:	60 e7       	ldi	r22, 0x70	; 112
    14ba:	c7 01       	movw	r24, r14
    14bc:	c4 dd       	rcall	.-1144   	; 0x1046 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
    14be:	86 e0       	ldi	r24, 0x06	; 6
    14c0:	eb e3       	ldi	r30, 0x3B	; 59
    14c2:	f2 e0       	ldi	r31, 0x02	; 2

    // clear filters and masks
    // do not filter any standard frames for RXF0 used by RXB0
    // do not filter any extended frames for RXF1 used by RXB1
    RXF filters[] = {RXF0, RXF1, RXF2, RXF3, RXF4, RXF5};
    14c4:	de 01       	movw	r26, r28
    14c6:	1f 96       	adiw	r26, 0x0f	; 15
    14c8:	01 90       	ld	r0, Z+
    14ca:	0d 92       	st	X+, r0
    14cc:	8a 95       	dec	r24
    14ce:	e1 f7       	brne	.-8      	; 0x14c8 <_ZN7MCP25155resetEv+0x9e>
    14d0:	5e 01       	movw	r10, r28
    14d2:	ff e0       	ldi	r31, 0x0F	; 15
    14d4:	af 0e       	add	r10, r31
    14d6:	b1 1c       	adc	r11, r1
    14d8:	c1 2c       	mov	r12, r1
    14da:	d1 2c       	mov	r13, r1
    14dc:	f5 01       	movw	r30, r10
    for (int i=0; i<6; i++) {
    14de:	61 91       	ld	r22, Z+
    14e0:	5f 01       	movw	r10, r30
        bool ext = (i == 1);
        ERROR result = setFilter(filters[i], ext, 0);
    14e2:	41 e0       	ldi	r20, 0x01	; 1
    14e4:	f1 e0       	ldi	r31, 0x01	; 1
    14e6:	cf 16       	cp	r12, r31
    14e8:	d1 04       	cpc	r13, r1
    14ea:	09 f0       	breq	.+2      	; 0x14ee <_ZN7MCP25155resetEv+0xc4>
    14ec:	40 e0       	ldi	r20, 0x00	; 0
    14ee:	00 e0       	ldi	r16, 0x00	; 0
    14f0:	10 e0       	ldi	r17, 0x00	; 0
    14f2:	98 01       	movw	r18, r16
    14f4:	c7 01       	movw	r24, r14
    14f6:	3c df       	rcall	.-392    	; 0x1370 <_ZN7MCP25159setFilterENS_3RXFEbm>
    14f8:	81 11       	cpse	r24, r1
    14fa:	17 c0       	rjmp	.+46     	; 0x152a <_ZN7MCP25155resetEv+0x100>
    14fc:	8f ef       	ldi	r24, 0xFF	; 255
        if (result != ERROR_OK) {
    14fe:	c8 1a       	sub	r12, r24
    1500:	d8 0a       	sbc	r13, r24

    // clear filters and masks
    // do not filter any standard frames for RXF0 used by RXB0
    // do not filter any extended frames for RXF1 used by RXB1
    RXF filters[] = {RXF0, RXF1, RXF2, RXF3, RXF4, RXF5};
    for (int i=0; i<6; i++) {
    1502:	e6 e0       	ldi	r30, 0x06	; 6
    1504:	ce 16       	cp	r12, r30
    1506:	d1 04       	cpc	r13, r1
    1508:	49 f7       	brne	.-46     	; 0x14dc <_ZN7MCP25155resetEv+0xb2>
    150a:	00 e0       	ldi	r16, 0x00	; 0
    150c:	10 e0       	ldi	r17, 0x00	; 0
        }
    }

    MASK masks[] = {MASK0, MASK1};
    for (int i=0; i<2; i++) {
        ERROR result = setFilterMask(masks[i], true, 0);
    150e:	98 01       	movw	r18, r16
    1510:	41 e0       	ldi	r20, 0x01	; 1
    1512:	60 e0       	ldi	r22, 0x00	; 0
    1514:	c7 01       	movw	r24, r14
    1516:	ea de       	rcall	.-556    	; 0x12ec <_ZN7MCP251513setFilterMaskENS_4MASKEbm>
    1518:	81 11       	cpse	r24, r1
    151a:	07 c0       	rjmp	.+14     	; 0x152a <_ZN7MCP25155resetEv+0x100>
        if (result != ERROR_OK) {
    151c:	00 e0       	ldi	r16, 0x00	; 0
    151e:	10 e0       	ldi	r17, 0x00	; 0
        }
    }

    MASK masks[] = {MASK0, MASK1};
    for (int i=0; i<2; i++) {
        ERROR result = setFilterMask(masks[i], true, 0);
    1520:	98 01       	movw	r18, r16
    1522:	41 e0       	ldi	r20, 0x01	; 1
    1524:	61 e0       	ldi	r22, 0x01	; 1
    1526:	c7 01       	movw	r24, r14
    1528:	e1 de       	rcall	.-574    	; 0x12ec <_ZN7MCP251513setFilterMaskENS_4MASKEbm>
    152a:	64 96       	adiw	r28, 0x14	; 20
    152c:	0f b6       	in	r0, 0x3f	; 63
    152e:	f8 94       	cli
            return result;
        }
    }

    return ERROR_OK;
}
    1530:	de bf       	out	0x3e, r29	; 62
    1532:	0f be       	out	0x3f, r0	; 63
    1534:	cd bf       	out	0x3d, r28	; 61
    1536:	df 91       	pop	r29
    1538:	cf 91       	pop	r28
    153a:	1f 91       	pop	r17
    153c:	0f 91       	pop	r16
    153e:	ff 90       	pop	r15
    1540:	ef 90       	pop	r14
    1542:	df 90       	pop	r13
    1544:	cf 90       	pop	r12
    1546:	bf 90       	pop	r11
    1548:	af 90       	pop	r10
    154a:	08 95       	ret

0000154c <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame>:
    154c:	4f 92       	push	r4
    154e:	5f 92       	push	r5
    1550:	6f 92       	push	r6

    return ERROR_OK;
}

MCP2515::ERROR MCP2515::sendMessage(const TXBn txbn, const struct can_frame *frame)
{
    1552:	7f 92       	push	r7
    1554:	af 92       	push	r10
    1556:	bf 92       	push	r11
    1558:	cf 92       	push	r12
    155a:	df 92       	push	r13
    155c:	ef 92       	push	r14
    155e:	ff 92       	push	r15
    1560:	0f 93       	push	r16
    1562:	1f 93       	push	r17
    1564:	cf 93       	push	r28
    1566:	df 93       	push	r29
    1568:	cd b7       	in	r28, 0x3d	; 61
    156a:	de b7       	in	r29, 0x3e	; 62
    156c:	2d 97       	sbiw	r28, 0x0d	; 13
    156e:	0f b6       	in	r0, 0x3f	; 63
    1570:	f8 94       	cli
    1572:	de bf       	out	0x3e, r29	; 62
    1574:	0f be       	out	0x3f, r0	; 63
    1576:	cd bf       	out	0x3d, r28	; 61
    1578:	5c 01       	movw	r10, r24
    157a:	fa 01       	movw	r30, r20
    if (frame->can_dlc > CAN_MAX_DLEN) {
    157c:	24 81       	ldd	r18, Z+4	; 0x04
    157e:	29 30       	cpi	r18, 0x09	; 9
    1580:	08 f0       	brcs	.+2      	; 0x1584 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0x38>
    1582:	58 c0       	rjmp	.+176    	; 0x1634 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0xe8>
        return ERROR_FAILTX;
    }

    const struct TXBn_REGS *txbuf = &TXB[txbn];
    1584:	e6 2e       	mov	r14, r22
    1586:	f1 2c       	mov	r15, r1

    uint8_t data[13];

    bool ext = (frame->can_id & CAN_EFF_FLAG);
    1588:	80 81       	ld	r24, Z
    158a:	91 81       	ldd	r25, Z+1	; 0x01
    158c:	a2 81       	ldd	r26, Z+2	; 0x02
    158e:	b3 81       	ldd	r27, Z+3	; 0x03
    1590:	ac 01       	movw	r20, r24
    1592:	bd 01       	movw	r22, r26
    1594:	44 27       	eor	r20, r20
    1596:	77 fd       	sbrc	r23, 7
    1598:	43 95       	inc	r20
    159a:	55 27       	eor	r21, r21
    159c:	66 27       	eor	r22, r22
    159e:	77 27       	eor	r23, r23
    bool rtr = (frame->can_id & CAN_RTR_FLAG);
    15a0:	2c 01       	movw	r4, r24
    15a2:	3d 01       	movw	r6, r26
    15a4:	44 24       	eor	r4, r4
    15a6:	55 24       	eor	r5, r5
    15a8:	66 24       	eor	r6, r6
    15aa:	20 e4       	ldi	r18, 0x40	; 64
    15ac:	72 22       	and	r7, r18
    uint32_t id = (frame->can_id & (ext ? CAN_EFF_MASK : CAN_SFF_MASK));
    15ae:	b7 fd       	sbrc	r27, 7
    15b0:	05 c0       	rjmp	.+10     	; 0x15bc <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0x70>
    15b2:	0f ef       	ldi	r16, 0xFF	; 255
    15b4:	17 e0       	ldi	r17, 0x07	; 7
    15b6:	20 e0       	ldi	r18, 0x00	; 0
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	04 c0       	rjmp	.+8      	; 0x15c4 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0x78>
    15bc:	0f ef       	ldi	r16, 0xFF	; 255
    15be:	1f ef       	ldi	r17, 0xFF	; 255
    15c0:	2f ef       	ldi	r18, 0xFF	; 255
    15c2:	3f e1       	ldi	r19, 0x1F	; 31
    15c4:	6f 01       	movw	r12, r30

    prepareId(data, ext, id);
    15c6:	08 23       	and	r16, r24
    15c8:	19 23       	and	r17, r25
    15ca:	2a 23       	and	r18, r26
    15cc:	3b 23       	and	r19, r27
    15ce:	be 01       	movw	r22, r28
    15d0:	6f 5f       	subi	r22, 0xFF	; 255
    15d2:	7f 4f       	sbci	r23, 0xFF	; 255
    15d4:	c5 01       	movw	r24, r10
    15d6:	5f de       	rcall	.-834    	; 0x1296 <_ZN7MCP25159prepareIdEPhbm>
    15d8:	f6 01       	movw	r30, r12
    15da:	14 81       	ldd	r17, Z+4	; 0x04

    data[MCP_DLC] = rtr ? (frame->can_dlc | RTR_MASK) : frame->can_dlc;
    15dc:	81 2f       	mov	r24, r17
    15de:	45 28       	or	r4, r5
    15e0:	46 28       	or	r4, r6
    15e2:	47 28       	or	r4, r7
    15e4:	09 f0       	breq	.+2      	; 0x15e8 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0x9c>
    15e6:	80 64       	ori	r24, 0x40	; 64
    15e8:	8d 83       	std	Y+5, r24	; 0x05

    memcpy(&data[MCP_DATA], frame->data, frame->can_dlc);
    15ea:	41 2f       	mov	r20, r17
    15ec:	50 e0       	ldi	r21, 0x00	; 0
    15ee:	b6 01       	movw	r22, r12
    15f0:	68 5f       	subi	r22, 0xF8	; 248
    15f2:	7f 4f       	sbci	r23, 0xFF	; 255
    15f4:	ce 01       	movw	r24, r28
    15f6:	06 96       	adiw	r24, 0x06	; 6
    15f8:	0e 94 66 19 	call	0x32cc	; 0x32cc <memcpy>

    setRegisters(txbuf->SIDH, data, 5 + frame->can_dlc);
    15fc:	25 e0       	ldi	r18, 0x05	; 5
    15fe:	21 0f       	add	r18, r17
    1600:	87 01       	movw	r16, r14
    1602:	00 0f       	add	r16, r16
    1604:	11 1f       	adc	r17, r17
    1606:	0e 0d       	add	r16, r14
    1608:	1f 1d       	adc	r17, r15
    160a:	06 5a       	subi	r16, 0xA6	; 166
    160c:	1d 4f       	sbci	r17, 0xFD	; 253
    160e:	ae 01       	movw	r20, r28
    1610:	4f 5f       	subi	r20, 0xFF	; 255
    1612:	5f 4f       	sbci	r21, 0xFF	; 255
    1614:	f8 01       	movw	r30, r16
    1616:	61 81       	ldd	r22, Z+1	; 0x01
    1618:	c5 01       	movw	r24, r10
    161a:	ef dc       	rcall	.-1570   	; 0xffa <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    modifyRegister(txbuf->CTRL, TXB_TXREQ, TXB_TXREQ);
    161c:	f8 01       	movw	r30, r16
    161e:	10 81       	ld	r17, Z
    1620:	28 e0       	ldi	r18, 0x08	; 8
    1622:	48 e0       	ldi	r20, 0x08	; 8
    1624:	61 2f       	mov	r22, r17
    1626:	c5 01       	movw	r24, r10
    1628:	0e dd       	rcall	.-1508   	; 0x1046 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>

    uint8_t ctrl = readRegister(txbuf->CTRL);
    162a:	61 2f       	mov	r22, r17
    162c:	c5 01       	movw	r24, r10
    162e:	96 dc       	rcall	.-1748   	; 0xf5c <_ZN7MCP251512readRegisterENS_8REGISTERE>
    1630:	80 77       	andi	r24, 0x70	; 112
    if ((ctrl & (TXB_ABTF | TXB_MLOA | TXB_TXERR)) != 0) {
    1632:	09 f0       	breq	.+2      	; 0x1636 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0xea>
    1634:	84 e0       	ldi	r24, 0x04	; 4
}

MCP2515::ERROR MCP2515::sendMessage(const TXBn txbn, const struct can_frame *frame)
{
    if (frame->can_dlc > CAN_MAX_DLEN) {
        return ERROR_FAILTX;
    1636:	2d 96       	adiw	r28, 0x0d	; 13
    uint8_t ctrl = readRegister(txbuf->CTRL);
    if ((ctrl & (TXB_ABTF | TXB_MLOA | TXB_TXERR)) != 0) {
        return ERROR_FAILTX;
    }
    return ERROR_OK;
}
    1638:	0f b6       	in	r0, 0x3f	; 63
    163a:	f8 94       	cli
    163c:	de bf       	out	0x3e, r29	; 62
    163e:	0f be       	out	0x3f, r0	; 63
    1640:	cd bf       	out	0x3d, r28	; 61
    1642:	df 91       	pop	r29
    1644:	cf 91       	pop	r28
    1646:	1f 91       	pop	r17
    1648:	0f 91       	pop	r16
    164a:	ff 90       	pop	r15
    164c:	ef 90       	pop	r14
    164e:	df 90       	pop	r13
    1650:	cf 90       	pop	r12
    1652:	bf 90       	pop	r11
    1654:	af 90       	pop	r10
    1656:	7f 90       	pop	r7
    1658:	6f 90       	pop	r6
    165a:	5f 90       	pop	r5
    165c:	4f 90       	pop	r4
    165e:	08 95       	ret

00001660 <_ZN7MCP251511sendMessageEPK9can_frame>:
    1660:	9f 92       	push	r9

MCP2515::ERROR MCP2515::sendMessage(const struct can_frame *frame)
{
    1662:	af 92       	push	r10
    1664:	bf 92       	push	r11
    1666:	cf 92       	push	r12
    1668:	df 92       	push	r13
    166a:	ef 92       	push	r14
    166c:	ff 92       	push	r15
    166e:	0f 93       	push	r16
    1670:	1f 93       	push	r17
    1672:	cf 93       	push	r28
    1674:	df 93       	push	r29
    1676:	00 d0       	rcall	.+0      	; 0x1678 <_ZN7MCP251511sendMessageEPK9can_frame+0x18>
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62
    if (frame->can_dlc > CAN_MAX_DLEN) {
    167c:	fb 01       	movw	r30, r22
    167e:	24 81       	ldd	r18, Z+4	; 0x04
    1680:	29 30       	cpi	r18, 0x09	; 9
    1682:	d8 f5       	brcc	.+118    	; 0x16fa <_ZN7MCP251511sendMessageEPK9can_frame+0x9a>
    1684:	7b 01       	movw	r14, r22
    1686:	8c 01       	movw	r16, r24
        return ERROR_FAILTX;
    }

    TXBn txBuffers[N_TXBUFFERS] = {TXB0, TXB1, TXB2};
    1688:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <uxTopUsedPriority+0x7>
    168c:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <uxTopUsedPriority+0x8>
    1690:	a0 91 43 02 	lds	r26, 0x0243	; 0x800243 <uxTopUsedPriority+0x9>
    1694:	89 83       	std	Y+1, r24	; 0x01
    1696:	9a 83       	std	Y+2, r25	; 0x02
    1698:	ab 83       	std	Y+3, r26	; 0x03
    169a:	ce 01       	movw	r24, r28
    169c:	01 96       	adiw	r24, 0x01	; 1
    169e:	6c 01       	movw	r12, r24
    16a0:	5e 01       	movw	r10, r28
    16a2:	94 e0       	ldi	r25, 0x04	; 4
    16a4:	a9 0e       	add	r10, r25
    16a6:	b1 1c       	adc	r11, r1

    for (int i=0; i<N_TXBUFFERS; i++) {
        const struct TXBn_REGS *txbuf = &TXB[txBuffers[i]];
    16a8:	f6 01       	movw	r30, r12
    16aa:	91 90       	ld	r9, Z+
    16ac:	6f 01       	movw	r12, r30
        uint8_t ctrlval = readRegister(txbuf->CTRL);
    16ae:	29 2d       	mov	r18, r9
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	f9 01       	movw	r30, r18
    16b4:	ee 0f       	add	r30, r30
    16b6:	ff 1f       	adc	r31, r31
    16b8:	2e 0f       	add	r18, r30
    16ba:	3f 1f       	adc	r19, r31
    16bc:	f9 01       	movw	r30, r18
    16be:	e6 5a       	subi	r30, 0xA6	; 166
    16c0:	fd 4f       	sbci	r31, 0xFD	; 253
    16c2:	60 81       	ld	r22, Z
    16c4:	c8 01       	movw	r24, r16
    16c6:	4a dc       	rcall	.-1900   	; 0xf5c <_ZN7MCP251512readRegisterENS_8REGISTERE>
        if ( (ctrlval & TXB_TXREQ) == 0 ) {
    16c8:	83 fd       	sbrc	r24, 3
    16ca:	12 c0       	rjmp	.+36     	; 0x16f0 <_ZN7MCP251511sendMessageEPK9can_frame+0x90>
            return sendMessage(txBuffers[i], frame);
    16cc:	a7 01       	movw	r20, r14
    16ce:	69 2d       	mov	r22, r9
    16d0:	c8 01       	movw	r24, r16
        }
    }

    return ERROR_ALLTXBUSY;
}
    16d2:	0f 90       	pop	r0
    16d4:	0f 90       	pop	r0
    16d6:	0f 90       	pop	r0
    16d8:	df 91       	pop	r29
    16da:	cf 91       	pop	r28
    16dc:	1f 91       	pop	r17
    16de:	0f 91       	pop	r16
    16e0:	ff 90       	pop	r15
    16e2:	ef 90       	pop	r14
    16e4:	df 90       	pop	r13
    16e6:	cf 90       	pop	r12
    16e8:	bf 90       	pop	r11
    16ea:	af 90       	pop	r10

    for (int i=0; i<N_TXBUFFERS; i++) {
        const struct TXBn_REGS *txbuf = &TXB[txBuffers[i]];
        uint8_t ctrlval = readRegister(txbuf->CTRL);
        if ( (ctrlval & TXB_TXREQ) == 0 ) {
            return sendMessage(txBuffers[i], frame);
    16ec:	9f 90       	pop	r9
    16ee:	2e cf       	rjmp	.-420    	; 0x154c <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame>
        return ERROR_FAILTX;
    }

    TXBn txBuffers[N_TXBUFFERS] = {TXB0, TXB1, TXB2};

    for (int i=0; i<N_TXBUFFERS; i++) {
    16f0:	ca 14       	cp	r12, r10
    16f2:	db 04       	cpc	r13, r11
    16f4:	c9 f6       	brne	.-78     	; 0x16a8 <_ZN7MCP251511sendMessageEPK9can_frame+0x48>
        if ( (ctrlval & TXB_TXREQ) == 0 ) {
            return sendMessage(txBuffers[i], frame);
        }
    }

    return ERROR_ALLTXBUSY;
    16f6:	82 e0       	ldi	r24, 0x02	; 2
    16f8:	01 c0       	rjmp	.+2      	; 0x16fc <_ZN7MCP251511sendMessageEPK9can_frame+0x9c>
}

MCP2515::ERROR MCP2515::sendMessage(const struct can_frame *frame)
{
    if (frame->can_dlc > CAN_MAX_DLEN) {
        return ERROR_FAILTX;
    16fa:	84 e0       	ldi	r24, 0x04	; 4
            return sendMessage(txBuffers[i], frame);
        }
    }

    return ERROR_ALLTXBUSY;
}
    16fc:	0f 90       	pop	r0
    16fe:	0f 90       	pop	r0
    1700:	0f 90       	pop	r0
    1702:	df 91       	pop	r29
    1704:	cf 91       	pop	r28
    1706:	1f 91       	pop	r17
    1708:	0f 91       	pop	r16
    170a:	ff 90       	pop	r15
    170c:	ef 90       	pop	r14
    170e:	df 90       	pop	r13
    1710:	cf 90       	pop	r12
    1712:	bf 90       	pop	r11
    1714:	af 90       	pop	r10
    1716:	9f 90       	pop	r9
    1718:	08 95       	ret

0000171a <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>:

MCP2515::ERROR MCP2515::readMessage(const RXBn rxbn, struct can_frame *frame)
{
    171a:	7f 92       	push	r7
    171c:	8f 92       	push	r8
    171e:	9f 92       	push	r9
    1720:	af 92       	push	r10
    1722:	bf 92       	push	r11
    1724:	cf 92       	push	r12
    1726:	df 92       	push	r13
    1728:	ef 92       	push	r14
    172a:	ff 92       	push	r15
    172c:	0f 93       	push	r16
    172e:	1f 93       	push	r17
    1730:	cf 93       	push	r28
    1732:	df 93       	push	r29
    1734:	00 d0       	rcall	.+0      	; 0x1736 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x1c>
    1736:	1f 92       	push	r1
    1738:	1f 92       	push	r1
    173a:	cd b7       	in	r28, 0x3d	; 61
    173c:	de b7       	in	r29, 0x3e	; 62
    173e:	4c 01       	movw	r8, r24
    1740:	5a 01       	movw	r10, r20
    const struct RXBn_REGS *rxb = &RXB[rxbn];

    uint8_t tbufdata[5];

    readRegisters(rxb->SIDH, tbufdata, 5);
    1742:	24 e0       	ldi	r18, 0x04	; 4
    1744:	62 9f       	mul	r22, r18
    1746:	80 01       	movw	r16, r0
    1748:	11 24       	eor	r1, r1
    174a:	f8 01       	movw	r30, r16
    174c:	ee 5a       	subi	r30, 0xAE	; 174
    174e:	fd 4f       	sbci	r31, 0xFD	; 253
    1750:	25 e0       	ldi	r18, 0x05	; 5
    1752:	ae 01       	movw	r20, r28
    1754:	4f 5f       	subi	r20, 0xFF	; 255
    1756:	5f 4f       	sbci	r21, 0xFF	; 255
    1758:	61 81       	ldd	r22, Z+1	; 0x01
    175a:	14 dc       	rcall	.-2008   	; 0xf84 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>

    uint32_t id = (tbufdata[MCP_SIDH]<<3) + (tbufdata[MCP_SIDL]>>5);
    175c:	8a 81       	ldd	r24, Y+2	; 0x02
    175e:	99 81       	ldd	r25, Y+1	; 0x01
    1760:	c8 2e       	mov	r12, r24
    1762:	d1 2c       	mov	r13, r1
    1764:	45 e0       	ldi	r20, 0x05	; 5
    1766:	d5 94       	asr	r13
    1768:	c7 94       	ror	r12
    176a:	4a 95       	dec	r20
    176c:	e1 f7       	brne	.-8      	; 0x1766 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x4c>
    176e:	e8 e0       	ldi	r30, 0x08	; 8
    1770:	9e 9f       	mul	r25, r30
    1772:	c0 0c       	add	r12, r0
    1774:	d1 1c       	adc	r13, r1
    1776:	11 24       	eor	r1, r1
    1778:	0d 2c       	mov	r0, r13
    177a:	00 0c       	add	r0, r0
    177c:	ee 08       	sbc	r14, r14
    177e:	ff 08       	sbc	r15, r15

    if ( (tbufdata[MCP_SIDL] & TXB_EXIDE_MASK) ==  TXB_EXIDE_MASK ) {
    1780:	83 ff       	sbrs	r24, 3
    1782:	20 c0       	rjmp	.+64     	; 0x17c4 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xaa>
        id = (id<<2) + (tbufdata[MCP_SIDL] & 0x03);
    1784:	92 e0       	ldi	r25, 0x02	; 2
    1786:	cc 0c       	add	r12, r12
    1788:	dd 1c       	adc	r13, r13
    178a:	ee 1c       	adc	r14, r14
    178c:	ff 1c       	adc	r15, r15
    178e:	9a 95       	dec	r25
    1790:	d1 f7       	brne	.-12     	; 0x1786 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x6c>
        id = (id<<8) + tbufdata[MCP_EID8];
    1792:	83 70       	andi	r24, 0x03	; 3
    1794:	c8 0e       	add	r12, r24
    1796:	d1 1c       	adc	r13, r1
    1798:	e1 1c       	adc	r14, r1
    179a:	f1 1c       	adc	r15, r1
    179c:	fe 2c       	mov	r15, r14
    179e:	ed 2c       	mov	r14, r13
    17a0:	dc 2c       	mov	r13, r12
    17a2:	cc 24       	eor	r12, r12
        id = (id<<8) + tbufdata[MCP_EID0];
    17a4:	8b 81       	ldd	r24, Y+3	; 0x03
    17a6:	c8 0e       	add	r12, r24
    17a8:	d1 1c       	adc	r13, r1
    17aa:	e1 1c       	adc	r14, r1
    17ac:	f1 1c       	adc	r15, r1
    17ae:	fe 2c       	mov	r15, r14
    17b0:	ed 2c       	mov	r14, r13
    17b2:	dc 2c       	mov	r13, r12
    17b4:	cc 24       	eor	r12, r12
    17b6:	8c 81       	ldd	r24, Y+4	; 0x04
    17b8:	c8 0e       	add	r12, r24
    17ba:	d1 1c       	adc	r13, r1
    17bc:	e1 1c       	adc	r14, r1
    17be:	f1 1c       	adc	r15, r1
        id |= CAN_EFF_FLAG;
    17c0:	68 94       	set
    17c2:	f7 f8       	bld	r15, 7
    }

    uint8_t dlc = (tbufdata[MCP_DLC] & DLC_MASK);
    17c4:	8d 81       	ldd	r24, Y+5	; 0x05
    17c6:	8f 70       	andi	r24, 0x0F	; 15
    17c8:	78 2e       	mov	r7, r24
    if (dlc > CAN_MAX_DLEN) {
    17ca:	f8 e0       	ldi	r31, 0x08	; 8
    17cc:	f8 17       	cp	r31, r24
    17ce:	10 f1       	brcs	.+68     	; 0x1814 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xfa>
        return ERROR_FAIL;
    }

    uint8_t ctrl = readRegister(rxb->CTRL);
    17d0:	f8 01       	movw	r30, r16
    17d2:	ee 5a       	subi	r30, 0xAE	; 174
    17d4:	fd 4f       	sbci	r31, 0xFD	; 253
    17d6:	60 81       	ld	r22, Z
    17d8:	c4 01       	movw	r24, r8
    17da:	c0 db       	rcall	.-2176   	; 0xf5c <_ZN7MCP251512readRegisterENS_8REGISTERE>
    if (ctrl & RXBnCTRL_RTR) {
    17dc:	83 ff       	sbrs	r24, 3
    17de:	02 c0       	rjmp	.+4      	; 0x17e4 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xca>
        id |= CAN_RTR_FLAG;
    17e0:	68 94       	set
    17e2:	f6 f8       	bld	r15, 6
    }

    frame->can_id = id;
    17e4:	f5 01       	movw	r30, r10
    17e6:	c0 82       	st	Z, r12
    17e8:	d1 82       	std	Z+1, r13	; 0x01
    17ea:	e2 82       	std	Z+2, r14	; 0x02
    17ec:	f3 82       	std	Z+3, r15	; 0x03
    frame->can_dlc = dlc;
    17ee:	74 82       	std	Z+4, r7	; 0x04

    readRegisters(rxb->DATA, frame->data, dlc);
    17f0:	a5 01       	movw	r20, r10
    17f2:	48 5f       	subi	r20, 0xF8	; 248
    17f4:	5f 4f       	sbci	r21, 0xFF	; 255
    17f6:	0e 5a       	subi	r16, 0xAE	; 174
    17f8:	1d 4f       	sbci	r17, 0xFD	; 253
    17fa:	27 2d       	mov	r18, r7
    17fc:	f8 01       	movw	r30, r16
    17fe:	62 81       	ldd	r22, Z+2	; 0x02
    1800:	c4 01       	movw	r24, r8
    1802:	c0 db       	rcall	.-2176   	; 0xf84 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>

    modifyRegister(MCP_CANINTF, rxb->CANINTF_RXnIF, 0);
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	f8 01       	movw	r30, r16
    1808:	43 81       	ldd	r20, Z+3	; 0x03
    180a:	6c e2       	ldi	r22, 0x2C	; 44
    180c:	c4 01       	movw	r24, r8
    180e:	1b dc       	rcall	.-1994   	; 0x1046 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>

    return ERROR_OK;
    1810:	80 e0       	ldi	r24, 0x00	; 0
    1812:	01 c0       	rjmp	.+2      	; 0x1816 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xfc>
        id |= CAN_EFF_FLAG;
    }

    uint8_t dlc = (tbufdata[MCP_DLC] & DLC_MASK);
    if (dlc > CAN_MAX_DLEN) {
        return ERROR_FAIL;
    1814:	81 e0       	ldi	r24, 0x01	; 1
    readRegisters(rxb->DATA, frame->data, dlc);

    modifyRegister(MCP_CANINTF, rxb->CANINTF_RXnIF, 0);

    return ERROR_OK;
}
    1816:	0f 90       	pop	r0
    1818:	0f 90       	pop	r0
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	0f 90       	pop	r0
    1820:	df 91       	pop	r29
    1822:	cf 91       	pop	r28
    1824:	1f 91       	pop	r17
    1826:	0f 91       	pop	r16
    1828:	ff 90       	pop	r15
    182a:	ef 90       	pop	r14
    182c:	df 90       	pop	r13
    182e:	cf 90       	pop	r12
    1830:	bf 90       	pop	r11
    1832:	af 90       	pop	r10
    1834:	9f 90       	pop	r9
    1836:	8f 90       	pop	r8
    1838:	7f 90       	pop	r7
    183a:	08 95       	ret

0000183c <_ZN7MCP251511readMessageEP9can_frame>:

MCP2515::ERROR MCP2515::readMessage(struct can_frame *frame)
{
    183c:	0f 93       	push	r16
    183e:	1f 93       	push	r17
    1840:	cf 93       	push	r28
    1842:	df 93       	push	r29
    1844:	ec 01       	movw	r28, r24
    1846:	8b 01       	movw	r16, r22
    ERROR rc;
    uint8_t stat = getStatus();
    1848:	17 dc       	rcall	.-2002   	; 0x1078 <_ZN7MCP25159getStatusEv>

    if ( stat & STAT_RX0IF ) {
    184a:	80 ff       	sbrs	r24, 0
    184c:	03 c0       	rjmp	.+6      	; 0x1854 <_ZN7MCP251511readMessageEP9can_frame+0x18>
        rc = readMessage(RXB0, frame);
    184e:	a8 01       	movw	r20, r16
    1850:	60 e0       	ldi	r22, 0x00	; 0
    1852:	04 c0       	rjmp	.+8      	; 0x185c <_ZN7MCP251511readMessageEP9can_frame+0x20>
    } else if ( stat & STAT_RX1IF ) {
    1854:	81 ff       	sbrs	r24, 1
    1856:	08 c0       	rjmp	.+16     	; 0x1868 <_ZN7MCP251511readMessageEP9can_frame+0x2c>
        rc = readMessage(RXB1, frame);
    1858:	a8 01       	movw	r20, r16
    185a:	61 e0       	ldi	r22, 0x01	; 1
    185c:	ce 01       	movw	r24, r28
    } else {
        rc = ERROR_NOMSG;
    }

    return rc;
}
    185e:	df 91       	pop	r29
    1860:	cf 91       	pop	r28
    1862:	1f 91       	pop	r17
    uint8_t stat = getStatus();

    if ( stat & STAT_RX0IF ) {
        rc = readMessage(RXB0, frame);
    } else if ( stat & STAT_RX1IF ) {
        rc = readMessage(RXB1, frame);
    1864:	0f 91       	pop	r16
    1866:	59 cf       	rjmp	.-334    	; 0x171a <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>
    } else {
        rc = ERROR_NOMSG;
    }

    return rc;
}
    1868:	85 e0       	ldi	r24, 0x05	; 5
    186a:	df 91       	pop	r29
    186c:	cf 91       	pop	r28
    186e:	1f 91       	pop	r17
    1870:	0f 91       	pop	r16
    1872:	08 95       	ret

00001874 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1874:	0f b6       	in	r0, 0x3f	; 63
    1876:	f8 94       	cli
    1878:	0f 92       	push	r0
    187a:	fc 01       	movw	r30, r24
    187c:	92 8d       	ldd	r25, Z+26	; 0x1a
    187e:	0f 90       	pop	r0
    1880:	0f be       	out	0x3f, r0	; 63
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	91 11       	cpse	r25, r1
    1886:	80 e0       	ldi	r24, 0x00	; 0
    1888:	08 95       	ret

0000188a <prvCopyDataToQueue>:
    188a:	0f 93       	push	r16
    188c:	1f 93       	push	r17
    188e:	cf 93       	push	r28
    1890:	df 93       	push	r29
    1892:	ec 01       	movw	r28, r24
    1894:	04 2f       	mov	r16, r20
    1896:	1a 8d       	ldd	r17, Y+26	; 0x1a
    1898:	4c 8d       	ldd	r20, Y+28	; 0x1c
    189a:	41 11       	cpse	r20, r1
    189c:	0b c0       	rjmp	.+22     	; 0x18b4 <prvCopyDataToQueue+0x2a>
    189e:	88 81       	ld	r24, Y
    18a0:	99 81       	ldd	r25, Y+1	; 0x01
    18a2:	89 2b       	or	r24, r25
    18a4:	e9 f5       	brne	.+122    	; 0x1920 <prvCopyDataToQueue+0x96>
    18a6:	8c 81       	ldd	r24, Y+4	; 0x04
    18a8:	9d 81       	ldd	r25, Y+5	; 0x05
    18aa:	0e 94 60 14 	call	0x28c0	; 0x28c0 <xTaskPriorityDisinherit>
    18ae:	1d 82       	std	Y+5, r1	; 0x05
    18b0:	1c 82       	std	Y+4, r1	; 0x04
    18b2:	37 c0       	rjmp	.+110    	; 0x1922 <prvCopyDataToQueue+0x98>
    18b4:	50 e0       	ldi	r21, 0x00	; 0
    18b6:	01 11       	cpse	r16, r1
    18b8:	15 c0       	rjmp	.+42     	; 0x18e4 <prvCopyDataToQueue+0x5a>
    18ba:	8a 81       	ldd	r24, Y+2	; 0x02
    18bc:	9b 81       	ldd	r25, Y+3	; 0x03
    18be:	0e 94 66 19 	call	0x32cc	; 0x32cc <memcpy>
    18c2:	2c 8d       	ldd	r18, Y+28	; 0x1c
    18c4:	8a 81       	ldd	r24, Y+2	; 0x02
    18c6:	9b 81       	ldd	r25, Y+3	; 0x03
    18c8:	82 0f       	add	r24, r18
    18ca:	91 1d       	adc	r25, r1
    18cc:	9b 83       	std	Y+3, r25	; 0x03
    18ce:	8a 83       	std	Y+2, r24	; 0x02
    18d0:	2c 81       	ldd	r18, Y+4	; 0x04
    18d2:	3d 81       	ldd	r19, Y+5	; 0x05
    18d4:	82 17       	cp	r24, r18
    18d6:	93 07       	cpc	r25, r19
    18d8:	18 f1       	brcs	.+70     	; 0x1920 <prvCopyDataToQueue+0x96>
    18da:	88 81       	ld	r24, Y
    18dc:	99 81       	ldd	r25, Y+1	; 0x01
    18de:	9b 83       	std	Y+3, r25	; 0x03
    18e0:	8a 83       	std	Y+2, r24	; 0x02
    18e2:	1e c0       	rjmp	.+60     	; 0x1920 <prvCopyDataToQueue+0x96>
    18e4:	8e 81       	ldd	r24, Y+6	; 0x06
    18e6:	9f 81       	ldd	r25, Y+7	; 0x07
    18e8:	0e 94 66 19 	call	0x32cc	; 0x32cc <memcpy>
    18ec:	8c 8d       	ldd	r24, Y+28	; 0x1c
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	91 95       	neg	r25
    18f2:	81 95       	neg	r24
    18f4:	91 09       	sbc	r25, r1
    18f6:	2e 81       	ldd	r18, Y+6	; 0x06
    18f8:	3f 81       	ldd	r19, Y+7	; 0x07
    18fa:	28 0f       	add	r18, r24
    18fc:	39 1f       	adc	r19, r25
    18fe:	3f 83       	std	Y+7, r19	; 0x07
    1900:	2e 83       	std	Y+6, r18	; 0x06
    1902:	48 81       	ld	r20, Y
    1904:	59 81       	ldd	r21, Y+1	; 0x01
    1906:	24 17       	cp	r18, r20
    1908:	35 07       	cpc	r19, r21
    190a:	30 f4       	brcc	.+12     	; 0x1918 <prvCopyDataToQueue+0x8e>
    190c:	2c 81       	ldd	r18, Y+4	; 0x04
    190e:	3d 81       	ldd	r19, Y+5	; 0x05
    1910:	82 0f       	add	r24, r18
    1912:	93 1f       	adc	r25, r19
    1914:	9f 83       	std	Y+7, r25	; 0x07
    1916:	8e 83       	std	Y+6, r24	; 0x06
    1918:	02 30       	cpi	r16, 0x02	; 2
    191a:	11 f4       	brne	.+4      	; 0x1920 <prvCopyDataToQueue+0x96>
    191c:	11 11       	cpse	r17, r1
    191e:	11 50       	subi	r17, 0x01	; 1
    1920:	80 e0       	ldi	r24, 0x00	; 0
    1922:	1f 5f       	subi	r17, 0xFF	; 255
    1924:	1a 8f       	std	Y+26, r17	; 0x1a
    1926:	df 91       	pop	r29
    1928:	cf 91       	pop	r28
    192a:	1f 91       	pop	r17
    192c:	0f 91       	pop	r16
    192e:	08 95       	ret

00001930 <prvCopyDataFromQueue>:
    1930:	fc 01       	movw	r30, r24
    1932:	cb 01       	movw	r24, r22
    1934:	44 8d       	ldd	r20, Z+28	; 0x1c
    1936:	44 23       	and	r20, r20
    1938:	a1 f0       	breq	.+40     	; 0x1962 <prvCopyDataFromQueue+0x32>
    193a:	50 e0       	ldi	r21, 0x00	; 0
    193c:	26 81       	ldd	r18, Z+6	; 0x06
    193e:	37 81       	ldd	r19, Z+7	; 0x07
    1940:	24 0f       	add	r18, r20
    1942:	35 1f       	adc	r19, r21
    1944:	37 83       	std	Z+7, r19	; 0x07
    1946:	26 83       	std	Z+6, r18	; 0x06
    1948:	64 81       	ldd	r22, Z+4	; 0x04
    194a:	75 81       	ldd	r23, Z+5	; 0x05
    194c:	26 17       	cp	r18, r22
    194e:	37 07       	cpc	r19, r23
    1950:	20 f0       	brcs	.+8      	; 0x195a <prvCopyDataFromQueue+0x2a>
    1952:	20 81       	ld	r18, Z
    1954:	31 81       	ldd	r19, Z+1	; 0x01
    1956:	37 83       	std	Z+7, r19	; 0x07
    1958:	26 83       	std	Z+6, r18	; 0x06
    195a:	66 81       	ldd	r22, Z+6	; 0x06
    195c:	77 81       	ldd	r23, Z+7	; 0x07
    195e:	0c 94 66 19 	jmp	0x32cc	; 0x32cc <memcpy>
    1962:	08 95       	ret

00001964 <prvUnlockQueue>:
    1964:	ef 92       	push	r14
    1966:	ff 92       	push	r15
    1968:	1f 93       	push	r17
    196a:	cf 93       	push	r28
    196c:	df 93       	push	r29
    196e:	ec 01       	movw	r28, r24
    1970:	0f b6       	in	r0, 0x3f	; 63
    1972:	f8 94       	cli
    1974:	0f 92       	push	r0
    1976:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1978:	7c 01       	movw	r14, r24
    197a:	81 e1       	ldi	r24, 0x11	; 17
    197c:	e8 0e       	add	r14, r24
    197e:	f1 1c       	adc	r15, r1
    1980:	11 16       	cp	r1, r17
    1982:	4c f4       	brge	.+18     	; 0x1996 <prvUnlockQueue+0x32>
    1984:	89 89       	ldd	r24, Y+17	; 0x11
    1986:	88 23       	and	r24, r24
    1988:	31 f0       	breq	.+12     	; 0x1996 <prvUnlockQueue+0x32>
    198a:	c7 01       	movw	r24, r14
    198c:	9f d6       	rcall	.+3390   	; 0x26cc <xTaskRemoveFromEventList>
    198e:	81 11       	cpse	r24, r1
    1990:	85 d7       	rcall	.+3850   	; 0x289c <vTaskMissedYield>
    1992:	11 50       	subi	r17, 0x01	; 1
    1994:	f5 cf       	rjmp	.-22     	; 0x1980 <prvUnlockQueue+0x1c>
    1996:	8f ef       	ldi	r24, 0xFF	; 255
    1998:	8e 8f       	std	Y+30, r24	; 0x1e
    199a:	0f 90       	pop	r0
    199c:	0f be       	out	0x3f, r0	; 63
    199e:	0f b6       	in	r0, 0x3f	; 63
    19a0:	f8 94       	cli
    19a2:	0f 92       	push	r0
    19a4:	1d 8d       	ldd	r17, Y+29	; 0x1d
    19a6:	7e 01       	movw	r14, r28
    19a8:	88 e0       	ldi	r24, 0x08	; 8
    19aa:	e8 0e       	add	r14, r24
    19ac:	f1 1c       	adc	r15, r1
    19ae:	11 16       	cp	r1, r17
    19b0:	4c f4       	brge	.+18     	; 0x19c4 <prvUnlockQueue+0x60>
    19b2:	88 85       	ldd	r24, Y+8	; 0x08
    19b4:	88 23       	and	r24, r24
    19b6:	31 f0       	breq	.+12     	; 0x19c4 <prvUnlockQueue+0x60>
    19b8:	c7 01       	movw	r24, r14
    19ba:	88 d6       	rcall	.+3344   	; 0x26cc <xTaskRemoveFromEventList>
    19bc:	81 11       	cpse	r24, r1
    19be:	6e d7       	rcall	.+3804   	; 0x289c <vTaskMissedYield>
    19c0:	11 50       	subi	r17, 0x01	; 1
    19c2:	f5 cf       	rjmp	.-22     	; 0x19ae <prvUnlockQueue+0x4a>
    19c4:	8f ef       	ldi	r24, 0xFF	; 255
    19c6:	8d 8f       	std	Y+29, r24	; 0x1d
    19c8:	0f 90       	pop	r0
    19ca:	0f be       	out	0x3f, r0	; 63
    19cc:	df 91       	pop	r29
    19ce:	cf 91       	pop	r28
    19d0:	1f 91       	pop	r17
    19d2:	ff 90       	pop	r15
    19d4:	ef 90       	pop	r14
    19d6:	08 95       	ret

000019d8 <xQueueGenericReset>:
    19d8:	cf 93       	push	r28
    19da:	df 93       	push	r29
    19dc:	00 97       	sbiw	r24, 0x00	; 0
    19de:	09 f4       	brne	.+2      	; 0x19e2 <xQueueGenericReset+0xa>
    19e0:	3f c0       	rjmp	.+126    	; 0x1a60 <xQueueGenericReset+0x88>
    19e2:	fc 01       	movw	r30, r24
    19e4:	23 8d       	ldd	r18, Z+27	; 0x1b
    19e6:	22 23       	and	r18, r18
    19e8:	09 f4       	brne	.+2      	; 0x19ec <xQueueGenericReset+0x14>
    19ea:	3a c0       	rjmp	.+116    	; 0x1a60 <xQueueGenericReset+0x88>
    19ec:	ec 01       	movw	r28, r24
    19ee:	0f b6       	in	r0, 0x3f	; 63
    19f0:	f8 94       	cli
    19f2:	0f 92       	push	r0
    19f4:	40 81       	ld	r20, Z
    19f6:	51 81       	ldd	r21, Z+1	; 0x01
    19f8:	83 8d       	ldd	r24, Z+27	; 0x1b
    19fa:	74 8d       	ldd	r23, Z+28	; 0x1c
    19fc:	9a 01       	movw	r18, r20
    19fe:	87 9f       	mul	r24, r23
    1a00:	20 0d       	add	r18, r0
    1a02:	31 1d       	adc	r19, r1
    1a04:	11 24       	eor	r1, r1
    1a06:	35 83       	std	Z+5, r19	; 0x05
    1a08:	24 83       	std	Z+4, r18	; 0x04
    1a0a:	12 8e       	std	Z+26, r1	; 0x1a
    1a0c:	53 83       	std	Z+3, r21	; 0x03
    1a0e:	42 83       	std	Z+2, r20	; 0x02
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	01 97       	sbiw	r24, 0x01	; 1
    1a14:	78 9f       	mul	r23, r24
    1a16:	90 01       	movw	r18, r0
    1a18:	79 9f       	mul	r23, r25
    1a1a:	30 0d       	add	r19, r0
    1a1c:	11 24       	eor	r1, r1
    1a1e:	ca 01       	movw	r24, r20
    1a20:	82 0f       	add	r24, r18
    1a22:	93 1f       	adc	r25, r19
    1a24:	97 83       	std	Z+7, r25	; 0x07
    1a26:	86 83       	std	Z+6, r24	; 0x06
    1a28:	8f ef       	ldi	r24, 0xFF	; 255
    1a2a:	85 8f       	std	Z+29, r24	; 0x1d
    1a2c:	86 8f       	std	Z+30, r24	; 0x1e
    1a2e:	61 11       	cpse	r22, r1
    1a30:	0b c0       	rjmp	.+22     	; 0x1a48 <xQueueGenericReset+0x70>
    1a32:	80 85       	ldd	r24, Z+8	; 0x08
    1a34:	88 23       	and	r24, r24
    1a36:	81 f0       	breq	.+32     	; 0x1a58 <xQueueGenericReset+0x80>
    1a38:	cf 01       	movw	r24, r30
    1a3a:	08 96       	adiw	r24, 0x08	; 8
    1a3c:	47 d6       	rcall	.+3214   	; 0x26cc <xTaskRemoveFromEventList>
    1a3e:	88 23       	and	r24, r24
    1a40:	59 f0       	breq	.+22     	; 0x1a58 <xQueueGenericReset+0x80>
    1a42:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <vPortYield>
    1a46:	08 c0       	rjmp	.+16     	; 0x1a58 <xQueueGenericReset+0x80>
    1a48:	cf 01       	movw	r24, r30
    1a4a:	08 96       	adiw	r24, 0x08	; 8
    1a4c:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <vListInitialise>
    1a50:	ce 01       	movw	r24, r28
    1a52:	41 96       	adiw	r24, 0x11	; 17
    1a54:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <vListInitialise>
    1a58:	0f 90       	pop	r0
    1a5a:	0f be       	out	0x3f, r0	; 63
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	01 c0       	rjmp	.+2      	; 0x1a62 <xQueueGenericReset+0x8a>
    1a60:	80 e0       	ldi	r24, 0x00	; 0
    1a62:	df 91       	pop	r29
    1a64:	cf 91       	pop	r28
    1a66:	08 95       	ret

00001a68 <xQueueGenericCreateStatic>:
    1a68:	cf 93       	push	r28
    1a6a:	df 93       	push	r29
    1a6c:	e9 01       	movw	r28, r18
    1a6e:	88 23       	and	r24, r24
    1a70:	c9 f0       	breq	.+50     	; 0x1aa4 <xQueueGenericCreateStatic+0x3c>
    1a72:	20 97       	sbiw	r28, 0x00	; 0
    1a74:	c9 f0       	breq	.+50     	; 0x1aa8 <xQueueGenericCreateStatic+0x40>
    1a76:	41 15       	cp	r20, r1
    1a78:	51 05       	cpc	r21, r1
    1a7a:	19 f0       	breq	.+6      	; 0x1a82 <xQueueGenericCreateStatic+0x1a>
    1a7c:	61 11       	cpse	r22, r1
    1a7e:	03 c0       	rjmp	.+6      	; 0x1a86 <xQueueGenericCreateStatic+0x1e>
    1a80:	11 c0       	rjmp	.+34     	; 0x1aa4 <xQueueGenericCreateStatic+0x3c>
    1a82:	61 11       	cpse	r22, r1
    1a84:	0f c0       	rjmp	.+30     	; 0x1aa4 <xQueueGenericCreateStatic+0x3c>
    1a86:	91 e0       	ldi	r25, 0x01	; 1
    1a88:	9f 8f       	std	Y+31, r25	; 0x1f
    1a8a:	61 11       	cpse	r22, r1
    1a8c:	03 c0       	rjmp	.+6      	; 0x1a94 <xQueueGenericCreateStatic+0x2c>
    1a8e:	d9 83       	std	Y+1, r29	; 0x01
    1a90:	c8 83       	st	Y, r28
    1a92:	02 c0       	rjmp	.+4      	; 0x1a98 <xQueueGenericCreateStatic+0x30>
    1a94:	59 83       	std	Y+1, r21	; 0x01
    1a96:	48 83       	st	Y, r20
    1a98:	8b 8f       	std	Y+27, r24	; 0x1b
    1a9a:	6c 8f       	std	Y+28, r22	; 0x1c
    1a9c:	61 e0       	ldi	r22, 0x01	; 1
    1a9e:	ce 01       	movw	r24, r28
    1aa0:	9b df       	rcall	.-202    	; 0x19d8 <xQueueGenericReset>
    1aa2:	02 c0       	rjmp	.+4      	; 0x1aa8 <xQueueGenericCreateStatic+0x40>
    1aa4:	c0 e0       	ldi	r28, 0x00	; 0
    1aa6:	d0 e0       	ldi	r29, 0x00	; 0
    1aa8:	ce 01       	movw	r24, r28
    1aaa:	df 91       	pop	r29
    1aac:	cf 91       	pop	r28
    1aae:	08 95       	ret

00001ab0 <xQueueGenericSend>:
    1ab0:	af 92       	push	r10
    1ab2:	bf 92       	push	r11
    1ab4:	cf 92       	push	r12
    1ab6:	df 92       	push	r13
    1ab8:	ff 92       	push	r15
    1aba:	0f 93       	push	r16
    1abc:	1f 93       	push	r17
    1abe:	cf 93       	push	r28
    1ac0:	df 93       	push	r29
    1ac2:	00 d0       	rcall	.+0      	; 0x1ac4 <xQueueGenericSend+0x14>
    1ac4:	1f 92       	push	r1
    1ac6:	1f 92       	push	r1
    1ac8:	cd b7       	in	r28, 0x3d	; 61
    1aca:	de b7       	in	r29, 0x3e	; 62
    1acc:	8c 01       	movw	r16, r24
    1ace:	6b 01       	movw	r12, r22
    1ad0:	5d 83       	std	Y+5, r21	; 0x05
    1ad2:	4c 83       	std	Y+4, r20	; 0x04
    1ad4:	f2 2e       	mov	r15, r18
    1ad6:	80 e0       	ldi	r24, 0x00	; 0
    1ad8:	58 01       	movw	r10, r16
    1ada:	98 e0       	ldi	r25, 0x08	; 8
    1adc:	a9 0e       	add	r10, r25
    1ade:	b1 1c       	adc	r11, r1
    1ae0:	0f b6       	in	r0, 0x3f	; 63
    1ae2:	f8 94       	cli
    1ae4:	0f 92       	push	r0
    1ae6:	f8 01       	movw	r30, r16
    1ae8:	22 8d       	ldd	r18, Z+26	; 0x1a
    1aea:	93 8d       	ldd	r25, Z+27	; 0x1b
    1aec:	29 17       	cp	r18, r25
    1aee:	18 f0       	brcs	.+6      	; 0x1af6 <xQueueGenericSend+0x46>
    1af0:	f2 e0       	ldi	r31, 0x02	; 2
    1af2:	ff 12       	cpse	r15, r31
    1af4:	12 c0       	rjmp	.+36     	; 0x1b1a <xQueueGenericSend+0x6a>
    1af6:	4f 2d       	mov	r20, r15
    1af8:	b6 01       	movw	r22, r12
    1afa:	c8 01       	movw	r24, r16
    1afc:	c6 de       	rcall	.-628    	; 0x188a <prvCopyDataToQueue>
    1afe:	f8 01       	movw	r30, r16
    1b00:	91 89       	ldd	r25, Z+17	; 0x11
    1b02:	99 23       	and	r25, r25
    1b04:	19 f0       	breq	.+6      	; 0x1b0c <xQueueGenericSend+0x5c>
    1b06:	c8 01       	movw	r24, r16
    1b08:	41 96       	adiw	r24, 0x11	; 17
    1b0a:	e0 d5       	rcall	.+3008   	; 0x26cc <xTaskRemoveFromEventList>
    1b0c:	81 11       	cpse	r24, r1
    1b0e:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <vPortYield>
    1b12:	0f 90       	pop	r0
    1b14:	0f be       	out	0x3f, r0	; 63
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	46 c0       	rjmp	.+140    	; 0x1ba6 <xQueueGenericSend+0xf6>
    1b1a:	2c 81       	ldd	r18, Y+4	; 0x04
    1b1c:	3d 81       	ldd	r19, Y+5	; 0x05
    1b1e:	23 2b       	or	r18, r19
    1b20:	19 f4       	brne	.+6      	; 0x1b28 <xQueueGenericSend+0x78>
    1b22:	0f 90       	pop	r0
    1b24:	0f be       	out	0x3f, r0	; 63
    1b26:	3e c0       	rjmp	.+124    	; 0x1ba4 <xQueueGenericSend+0xf4>
    1b28:	81 11       	cpse	r24, r1
    1b2a:	03 c0       	rjmp	.+6      	; 0x1b32 <xQueueGenericSend+0x82>
    1b2c:	ce 01       	movw	r24, r28
    1b2e:	01 96       	adiw	r24, 0x01	; 1
    1b30:	79 d6       	rcall	.+3314   	; 0x2824 <vTaskInternalSetTimeOutState>
    1b32:	0f 90       	pop	r0
    1b34:	0f be       	out	0x3f, r0	; 63
    1b36:	37 d3       	rcall	.+1646   	; 0x21a6 <vTaskSuspendAll>
    1b38:	0f b6       	in	r0, 0x3f	; 63
    1b3a:	f8 94       	cli
    1b3c:	0f 92       	push	r0
    1b3e:	f8 01       	movw	r30, r16
    1b40:	85 8d       	ldd	r24, Z+29	; 0x1d
    1b42:	8f 3f       	cpi	r24, 0xFF	; 255
    1b44:	09 f4       	brne	.+2      	; 0x1b48 <xQueueGenericSend+0x98>
    1b46:	15 8e       	std	Z+29, r1	; 0x1d
    1b48:	f8 01       	movw	r30, r16
    1b4a:	86 8d       	ldd	r24, Z+30	; 0x1e
    1b4c:	8f 3f       	cpi	r24, 0xFF	; 255
    1b4e:	09 f4       	brne	.+2      	; 0x1b52 <xQueueGenericSend+0xa2>
    1b50:	16 8e       	std	Z+30, r1	; 0x1e
    1b52:	0f 90       	pop	r0
    1b54:	0f be       	out	0x3f, r0	; 63
    1b56:	be 01       	movw	r22, r28
    1b58:	6c 5f       	subi	r22, 0xFC	; 252
    1b5a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b5c:	ce 01       	movw	r24, r28
    1b5e:	01 96       	adiw	r24, 0x01	; 1
    1b60:	6c d6       	rcall	.+3288   	; 0x283a <xTaskCheckForTimeOut>
    1b62:	81 11       	cpse	r24, r1
    1b64:	1c c0       	rjmp	.+56     	; 0x1b9e <xQueueGenericSend+0xee>
    1b66:	0f b6       	in	r0, 0x3f	; 63
    1b68:	f8 94       	cli
    1b6a:	0f 92       	push	r0
    1b6c:	f8 01       	movw	r30, r16
    1b6e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1b70:	83 8d       	ldd	r24, Z+27	; 0x1b
    1b72:	0f 90       	pop	r0
    1b74:	0f be       	out	0x3f, r0	; 63
    1b76:	98 13       	cpse	r25, r24
    1b78:	0e c0       	rjmp	.+28     	; 0x1b96 <xQueueGenericSend+0xe6>
    1b7a:	6c 81       	ldd	r22, Y+4	; 0x04
    1b7c:	7d 81       	ldd	r23, Y+5	; 0x05
    1b7e:	c5 01       	movw	r24, r10
    1b80:	4f d5       	rcall	.+2718   	; 0x2620 <vTaskPlaceOnEventList>
    1b82:	c8 01       	movw	r24, r16
    1b84:	ef de       	rcall	.-546    	; 0x1964 <prvUnlockQueue>
    1b86:	28 d4       	rcall	.+2128   	; 0x23d8 <xTaskResumeAll>
    1b88:	88 23       	and	r24, r24
    1b8a:	11 f0       	breq	.+4      	; 0x1b90 <xQueueGenericSend+0xe0>
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	a8 cf       	rjmp	.-176    	; 0x1ae0 <xQueueGenericSend+0x30>
    1b90:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <vPortYield>
    1b94:	fb cf       	rjmp	.-10     	; 0x1b8c <xQueueGenericSend+0xdc>
    1b96:	c8 01       	movw	r24, r16
    1b98:	e5 de       	rcall	.-566    	; 0x1964 <prvUnlockQueue>
    1b9a:	1e d4       	rcall	.+2108   	; 0x23d8 <xTaskResumeAll>
    1b9c:	f7 cf       	rjmp	.-18     	; 0x1b8c <xQueueGenericSend+0xdc>
    1b9e:	c8 01       	movw	r24, r16
    1ba0:	e1 de       	rcall	.-574    	; 0x1964 <prvUnlockQueue>
    1ba2:	1a d4       	rcall	.+2100   	; 0x23d8 <xTaskResumeAll>
    1ba4:	80 e0       	ldi	r24, 0x00	; 0
    1ba6:	0f 90       	pop	r0
    1ba8:	0f 90       	pop	r0
    1baa:	0f 90       	pop	r0
    1bac:	0f 90       	pop	r0
    1bae:	0f 90       	pop	r0
    1bb0:	df 91       	pop	r29
    1bb2:	cf 91       	pop	r28
    1bb4:	1f 91       	pop	r17
    1bb6:	0f 91       	pop	r16
    1bb8:	ff 90       	pop	r15
    1bba:	df 90       	pop	r13
    1bbc:	cf 90       	pop	r12
    1bbe:	bf 90       	pop	r11
    1bc0:	af 90       	pop	r10
    1bc2:	08 95       	ret

00001bc4 <xQueueGenericSendFromISR>:
    1bc4:	ef 92       	push	r14
    1bc6:	ff 92       	push	r15
    1bc8:	1f 93       	push	r17
    1bca:	cf 93       	push	r28
    1bcc:	df 93       	push	r29
    1bce:	ec 01       	movw	r28, r24
    1bd0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1bd2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bd4:	98 17       	cp	r25, r24
    1bd6:	10 f0       	brcs	.+4      	; 0x1bdc <xQueueGenericSendFromISR+0x18>
    1bd8:	22 30       	cpi	r18, 0x02	; 2
    1bda:	f1 f4       	brne	.+60     	; 0x1c18 <xQueueGenericSendFromISR+0x54>
    1bdc:	7a 01       	movw	r14, r20
    1bde:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1be0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1be2:	42 2f       	mov	r20, r18
    1be4:	ce 01       	movw	r24, r28
    1be6:	51 de       	rcall	.-862    	; 0x188a <prvCopyDataToQueue>
    1be8:	1f 3f       	cpi	r17, 0xFF	; 255
    1bea:	79 f4       	brne	.+30     	; 0x1c0a <xQueueGenericSendFromISR+0x46>
    1bec:	89 89       	ldd	r24, Y+17	; 0x11
    1bee:	88 23       	and	r24, r24
    1bf0:	89 f0       	breq	.+34     	; 0x1c14 <xQueueGenericSendFromISR+0x50>
    1bf2:	ce 01       	movw	r24, r28
    1bf4:	41 96       	adiw	r24, 0x11	; 17
    1bf6:	6a d5       	rcall	.+2772   	; 0x26cc <xTaskRemoveFromEventList>
    1bf8:	88 23       	and	r24, r24
    1bfa:	61 f0       	breq	.+24     	; 0x1c14 <xQueueGenericSendFromISR+0x50>
    1bfc:	e1 14       	cp	r14, r1
    1bfe:	f1 04       	cpc	r15, r1
    1c00:	49 f0       	breq	.+18     	; 0x1c14 <xQueueGenericSendFromISR+0x50>
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	f7 01       	movw	r30, r14
    1c06:	80 83       	st	Z, r24
    1c08:	08 c0       	rjmp	.+16     	; 0x1c1a <xQueueGenericSendFromISR+0x56>
    1c0a:	dd d2       	rcall	.+1466   	; 0x21c6 <uxTaskGetNumberOfTasks>
    1c0c:	18 17       	cp	r17, r24
    1c0e:	10 f4       	brcc	.+4      	; 0x1c14 <xQueueGenericSendFromISR+0x50>
    1c10:	1f 5f       	subi	r17, 0xFF	; 255
    1c12:	1e 8f       	std	Y+30, r17	; 0x1e
    1c14:	81 e0       	ldi	r24, 0x01	; 1
    1c16:	01 c0       	rjmp	.+2      	; 0x1c1a <xQueueGenericSendFromISR+0x56>
    1c18:	80 e0       	ldi	r24, 0x00	; 0
    1c1a:	df 91       	pop	r29
    1c1c:	cf 91       	pop	r28
    1c1e:	1f 91       	pop	r17
    1c20:	ff 90       	pop	r15
    1c22:	ef 90       	pop	r14
    1c24:	08 95       	ret

00001c26 <xQueueReceive>:
    1c26:	af 92       	push	r10
    1c28:	bf 92       	push	r11
    1c2a:	cf 92       	push	r12
    1c2c:	df 92       	push	r13
    1c2e:	ff 92       	push	r15
    1c30:	0f 93       	push	r16
    1c32:	1f 93       	push	r17
    1c34:	cf 93       	push	r28
    1c36:	df 93       	push	r29
    1c38:	00 d0       	rcall	.+0      	; 0x1c3a <xQueueReceive+0x14>
    1c3a:	1f 92       	push	r1
    1c3c:	1f 92       	push	r1
    1c3e:	cd b7       	in	r28, 0x3d	; 61
    1c40:	de b7       	in	r29, 0x3e	; 62
    1c42:	8c 01       	movw	r16, r24
    1c44:	6b 01       	movw	r12, r22
    1c46:	5d 83       	std	Y+5, r21	; 0x05
    1c48:	4c 83       	std	Y+4, r20	; 0x04
    1c4a:	80 e0       	ldi	r24, 0x00	; 0
    1c4c:	58 01       	movw	r10, r16
    1c4e:	91 e1       	ldi	r25, 0x11	; 17
    1c50:	a9 0e       	add	r10, r25
    1c52:	b1 1c       	adc	r11, r1
    1c54:	0f b6       	in	r0, 0x3f	; 63
    1c56:	f8 94       	cli
    1c58:	0f 92       	push	r0
    1c5a:	f8 01       	movw	r30, r16
    1c5c:	f2 8c       	ldd	r15, Z+26	; 0x1a
    1c5e:	ff 20       	and	r15, r15
    1c60:	99 f0       	breq	.+38     	; 0x1c88 <xQueueReceive+0x62>
    1c62:	b6 01       	movw	r22, r12
    1c64:	c8 01       	movw	r24, r16
    1c66:	64 de       	rcall	.-824    	; 0x1930 <prvCopyDataFromQueue>
    1c68:	fa 94       	dec	r15
    1c6a:	f8 01       	movw	r30, r16
    1c6c:	f2 8e       	std	Z+26, r15	; 0x1a
    1c6e:	80 85       	ldd	r24, Z+8	; 0x08
    1c70:	88 23       	and	r24, r24
    1c72:	31 f0       	breq	.+12     	; 0x1c80 <xQueueReceive+0x5a>
    1c74:	c8 01       	movw	r24, r16
    1c76:	08 96       	adiw	r24, 0x08	; 8
    1c78:	29 d5       	rcall	.+2642   	; 0x26cc <xTaskRemoveFromEventList>
    1c7a:	81 11       	cpse	r24, r1
    1c7c:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <vPortYield>
    1c80:	0f 90       	pop	r0
    1c82:	0f be       	out	0x3f, r0	; 63
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	44 c0       	rjmp	.+136    	; 0x1d10 <xQueueReceive+0xea>
    1c88:	2c 81       	ldd	r18, Y+4	; 0x04
    1c8a:	3d 81       	ldd	r19, Y+5	; 0x05
    1c8c:	23 2b       	or	r18, r19
    1c8e:	19 f4       	brne	.+6      	; 0x1c96 <xQueueReceive+0x70>
    1c90:	0f 90       	pop	r0
    1c92:	0f be       	out	0x3f, r0	; 63
    1c94:	3c c0       	rjmp	.+120    	; 0x1d0e <xQueueReceive+0xe8>
    1c96:	81 11       	cpse	r24, r1
    1c98:	03 c0       	rjmp	.+6      	; 0x1ca0 <xQueueReceive+0x7a>
    1c9a:	ce 01       	movw	r24, r28
    1c9c:	01 96       	adiw	r24, 0x01	; 1
    1c9e:	c2 d5       	rcall	.+2948   	; 0x2824 <vTaskInternalSetTimeOutState>
    1ca0:	0f 90       	pop	r0
    1ca2:	0f be       	out	0x3f, r0	; 63
    1ca4:	80 d2       	rcall	.+1280   	; 0x21a6 <vTaskSuspendAll>
    1ca6:	0f b6       	in	r0, 0x3f	; 63
    1ca8:	f8 94       	cli
    1caa:	0f 92       	push	r0
    1cac:	f8 01       	movw	r30, r16
    1cae:	85 8d       	ldd	r24, Z+29	; 0x1d
    1cb0:	8f 3f       	cpi	r24, 0xFF	; 255
    1cb2:	09 f4       	brne	.+2      	; 0x1cb6 <xQueueReceive+0x90>
    1cb4:	15 8e       	std	Z+29, r1	; 0x1d
    1cb6:	f8 01       	movw	r30, r16
    1cb8:	86 8d       	ldd	r24, Z+30	; 0x1e
    1cba:	8f 3f       	cpi	r24, 0xFF	; 255
    1cbc:	09 f4       	brne	.+2      	; 0x1cc0 <xQueueReceive+0x9a>
    1cbe:	16 8e       	std	Z+30, r1	; 0x1e
    1cc0:	0f 90       	pop	r0
    1cc2:	0f be       	out	0x3f, r0	; 63
    1cc4:	be 01       	movw	r22, r28
    1cc6:	6c 5f       	subi	r22, 0xFC	; 252
    1cc8:	7f 4f       	sbci	r23, 0xFF	; 255
    1cca:	ce 01       	movw	r24, r28
    1ccc:	01 96       	adiw	r24, 0x01	; 1
    1cce:	b5 d5       	rcall	.+2922   	; 0x283a <xTaskCheckForTimeOut>
    1cd0:	81 11       	cpse	r24, r1
    1cd2:	16 c0       	rjmp	.+44     	; 0x1d00 <xQueueReceive+0xda>
    1cd4:	c8 01       	movw	r24, r16
    1cd6:	ce dd       	rcall	.-1124   	; 0x1874 <prvIsQueueEmpty>
    1cd8:	88 23       	and	r24, r24
    1cda:	71 f0       	breq	.+28     	; 0x1cf8 <xQueueReceive+0xd2>
    1cdc:	6c 81       	ldd	r22, Y+4	; 0x04
    1cde:	7d 81       	ldd	r23, Y+5	; 0x05
    1ce0:	c5 01       	movw	r24, r10
    1ce2:	9e d4       	rcall	.+2364   	; 0x2620 <vTaskPlaceOnEventList>
    1ce4:	c8 01       	movw	r24, r16
    1ce6:	3e de       	rcall	.-900    	; 0x1964 <prvUnlockQueue>
    1ce8:	77 d3       	rcall	.+1774   	; 0x23d8 <xTaskResumeAll>
    1cea:	88 23       	and	r24, r24
    1cec:	11 f0       	breq	.+4      	; 0x1cf2 <xQueueReceive+0xcc>
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	b1 cf       	rjmp	.-158    	; 0x1c54 <xQueueReceive+0x2e>
    1cf2:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <vPortYield>
    1cf6:	fb cf       	rjmp	.-10     	; 0x1cee <xQueueReceive+0xc8>
    1cf8:	c8 01       	movw	r24, r16
    1cfa:	34 de       	rcall	.-920    	; 0x1964 <prvUnlockQueue>
    1cfc:	6d d3       	rcall	.+1754   	; 0x23d8 <xTaskResumeAll>
    1cfe:	f7 cf       	rjmp	.-18     	; 0x1cee <xQueueReceive+0xc8>
    1d00:	c8 01       	movw	r24, r16
    1d02:	30 de       	rcall	.-928    	; 0x1964 <prvUnlockQueue>
    1d04:	69 d3       	rcall	.+1746   	; 0x23d8 <xTaskResumeAll>
    1d06:	c8 01       	movw	r24, r16
    1d08:	b5 dd       	rcall	.-1174   	; 0x1874 <prvIsQueueEmpty>
    1d0a:	88 23       	and	r24, r24
    1d0c:	81 f3       	breq	.-32     	; 0x1cee <xQueueReceive+0xc8>
    1d0e:	80 e0       	ldi	r24, 0x00	; 0
    1d10:	0f 90       	pop	r0
    1d12:	0f 90       	pop	r0
    1d14:	0f 90       	pop	r0
    1d16:	0f 90       	pop	r0
    1d18:	0f 90       	pop	r0
    1d1a:	df 91       	pop	r29
    1d1c:	cf 91       	pop	r28
    1d1e:	1f 91       	pop	r17
    1d20:	0f 91       	pop	r16
    1d22:	ff 90       	pop	r15
    1d24:	df 90       	pop	r13
    1d26:	cf 90       	pop	r12
    1d28:	bf 90       	pop	r11
    1d2a:	af 90       	pop	r10
    1d2c:	08 95       	ret

00001d2e <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    1d2e:	cf 93       	push	r28
    1d30:	df 93       	push	r29
    1d32:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1d34:	0f b6       	in	r0, 0x3f	; 63
    1d36:	f8 94       	cli
    1d38:	0f 92       	push	r0
    1d3a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d3c:	8f 3f       	cpi	r24, 0xFF	; 255
    1d3e:	09 f4       	brne	.+2      	; 0x1d42 <vQueueWaitForMessageRestricted+0x14>
    1d40:	1d 8e       	std	Y+29, r1	; 0x1d
    1d42:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d44:	8f 3f       	cpi	r24, 0xFF	; 255
    1d46:	09 f4       	brne	.+2      	; 0x1d4a <vQueueWaitForMessageRestricted+0x1c>
    1d48:	1e 8e       	std	Y+30, r1	; 0x1e
    1d4a:	0f 90       	pop	r0
    1d4c:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1d4e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1d50:	81 11       	cpse	r24, r1
    1d52:	03 c0       	rjmp	.+6      	; 0x1d5a <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1d54:	ce 01       	movw	r24, r28
    1d56:	41 96       	adiw	r24, 0x11	; 17
    1d58:	72 d4       	rcall	.+2276   	; 0x263e <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    1d5a:	ce 01       	movw	r24, r28
    }
    1d5c:	df 91       	pop	r29
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    1d5e:	cf 91       	pop	r28
    1d60:	01 ce       	rjmp	.-1022   	; 0x1964 <prvUnlockQueue>

00001d62 <prvAddNewTaskToReadyList>:
    1d62:	cf 93       	push	r28
    1d64:	df 93       	push	r29
    1d66:	ec 01       	movw	r28, r24
    1d68:	0f b6       	in	r0, 0x3f	; 63
    1d6a:	f8 94       	cli
    1d6c:	0f 92       	push	r0
    1d6e:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <uxCurrentNumberOfTasks>
    1d72:	8f 5f       	subi	r24, 0xFF	; 255
    1d74:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <uxCurrentNumberOfTasks>
    1d78:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <pxCurrentTCB>
    1d7c:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <pxCurrentTCB+0x1>
    1d80:	89 2b       	or	r24, r25
    1d82:	89 f5       	brne	.+98     	; 0x1de6 <prvAddNewTaskToReadyList+0x84>
    1d84:	d0 93 53 04 	sts	0x0453, r29	; 0x800453 <pxCurrentTCB+0x1>
    1d88:	c0 93 52 04 	sts	0x0452, r28	; 0x800452 <pxCurrentTCB>
    1d8c:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <uxCurrentNumberOfTasks>
    1d90:	81 30       	cpi	r24, 0x01	; 1
    1d92:	09 f0       	breq	.+2      	; 0x1d96 <prvAddNewTaskToReadyList+0x34>
    1d94:	38 c0       	rjmp	.+112    	; 0x1e06 <prvAddNewTaskToReadyList+0xa4>
    1d96:	8e e2       	ldi	r24, 0x2E	; 46
    1d98:	94 e0       	ldi	r25, 0x04	; 4
    1d9a:	e7 d7       	rcall	.+4046   	; 0x2d6a <vListInitialise>
    1d9c:	87 e3       	ldi	r24, 0x37	; 55
    1d9e:	94 e0       	ldi	r25, 0x04	; 4
    1da0:	e4 d7       	rcall	.+4040   	; 0x2d6a <vListInitialise>
    1da2:	80 e4       	ldi	r24, 0x40	; 64
    1da4:	94 e0       	ldi	r25, 0x04	; 4
    1da6:	e1 d7       	rcall	.+4034   	; 0x2d6a <vListInitialise>
    1da8:	89 e4       	ldi	r24, 0x49	; 73
    1daa:	94 e0       	ldi	r25, 0x04	; 4
    1dac:	de d7       	rcall	.+4028   	; 0x2d6a <vListInitialise>
    1dae:	85 e2       	ldi	r24, 0x25	; 37
    1db0:	94 e0       	ldi	r25, 0x04	; 4
    1db2:	db d7       	rcall	.+4022   	; 0x2d6a <vListInitialise>
    1db4:	8c e1       	ldi	r24, 0x1C	; 28
    1db6:	94 e0       	ldi	r25, 0x04	; 4
    1db8:	d8 d7       	rcall	.+4016   	; 0x2d6a <vListInitialise>
    1dba:	8f e0       	ldi	r24, 0x0F	; 15
    1dbc:	94 e0       	ldi	r25, 0x04	; 4
    1dbe:	d5 d7       	rcall	.+4010   	; 0x2d6a <vListInitialise>
    1dc0:	86 e0       	ldi	r24, 0x06	; 6
    1dc2:	94 e0       	ldi	r25, 0x04	; 4
    1dc4:	d2 d7       	rcall	.+4004   	; 0x2d6a <vListInitialise>
    1dc6:	8c ef       	ldi	r24, 0xFC	; 252
    1dc8:	93 e0       	ldi	r25, 0x03	; 3
    1dca:	cf d7       	rcall	.+3998   	; 0x2d6a <vListInitialise>
    1dcc:	85 e2       	ldi	r24, 0x25	; 37
    1dce:	94 e0       	ldi	r25, 0x04	; 4
    1dd0:	90 93 1b 04 	sts	0x041B, r25	; 0x80041b <pxDelayedTaskList+0x1>
    1dd4:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <pxDelayedTaskList>
    1dd8:	8c e1       	ldi	r24, 0x1C	; 28
    1dda:	94 e0       	ldi	r25, 0x04	; 4
    1ddc:	90 93 19 04 	sts	0x0419, r25	; 0x800419 <pxOverflowDelayedTaskList+0x1>
    1de0:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <pxOverflowDelayedTaskList>
    1de4:	10 c0       	rjmp	.+32     	; 0x1e06 <prvAddNewTaskToReadyList+0xa4>
    1de6:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <xSchedulerRunning>
    1dea:	81 11       	cpse	r24, r1
    1dec:	0c c0       	rjmp	.+24     	; 0x1e06 <prvAddNewTaskToReadyList+0xa4>
    1dee:	e0 91 52 04 	lds	r30, 0x0452	; 0x800452 <pxCurrentTCB>
    1df2:	f0 91 53 04 	lds	r31, 0x0453	; 0x800453 <pxCurrentTCB+0x1>
    1df6:	96 89       	ldd	r25, Z+22	; 0x16
    1df8:	8e 89       	ldd	r24, Y+22	; 0x16
    1dfa:	89 17       	cp	r24, r25
    1dfc:	20 f0       	brcs	.+8      	; 0x1e06 <prvAddNewTaskToReadyList+0xa4>
    1dfe:	d0 93 53 04 	sts	0x0453, r29	; 0x800453 <pxCurrentTCB+0x1>
    1e02:	c0 93 52 04 	sts	0x0452, r28	; 0x800452 <pxCurrentTCB>
    1e06:	80 91 f2 03 	lds	r24, 0x03F2	; 0x8003f2 <uxTaskNumber>
    1e0a:	8f 5f       	subi	r24, 0xFF	; 255
    1e0c:	80 93 f2 03 	sts	0x03F2, r24	; 0x8003f2 <uxTaskNumber>
    1e10:	ee 89       	ldd	r30, Y+22	; 0x16
    1e12:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <uxTopReadyPriority>
    1e16:	8e 17       	cp	r24, r30
    1e18:	10 f4       	brcc	.+4      	; 0x1e1e <prvAddNewTaskToReadyList+0xbc>
    1e1a:	e0 93 f8 03 	sts	0x03F8, r30	; 0x8003f8 <uxTopReadyPriority>
    1e1e:	89 e0       	ldi	r24, 0x09	; 9
    1e20:	8e 9f       	mul	r24, r30
    1e22:	f0 01       	movw	r30, r0
    1e24:	11 24       	eor	r1, r1
    1e26:	e2 5d       	subi	r30, 0xD2	; 210
    1e28:	fb 4f       	sbci	r31, 0xFB	; 251
    1e2a:	01 80       	ldd	r0, Z+1	; 0x01
    1e2c:	f2 81       	ldd	r31, Z+2	; 0x02
    1e2e:	e0 2d       	mov	r30, r0
    1e30:	fd 83       	std	Y+5, r31	; 0x05
    1e32:	ec 83       	std	Y+4, r30	; 0x04
    1e34:	24 81       	ldd	r18, Z+4	; 0x04
    1e36:	35 81       	ldd	r19, Z+5	; 0x05
    1e38:	3f 83       	std	Y+7, r19	; 0x07
    1e3a:	2e 83       	std	Y+6, r18	; 0x06
    1e3c:	a4 81       	ldd	r26, Z+4	; 0x04
    1e3e:	b5 81       	ldd	r27, Z+5	; 0x05
    1e40:	9e 01       	movw	r18, r28
    1e42:	2e 5f       	subi	r18, 0xFE	; 254
    1e44:	3f 4f       	sbci	r19, 0xFF	; 255
    1e46:	13 96       	adiw	r26, 0x03	; 3
    1e48:	3c 93       	st	X, r19
    1e4a:	2e 93       	st	-X, r18
    1e4c:	12 97       	sbiw	r26, 0x02	; 2
    1e4e:	35 83       	std	Z+5, r19	; 0x05
    1e50:	24 83       	std	Z+4, r18	; 0x04
    1e52:	ee 89       	ldd	r30, Y+22	; 0x16
    1e54:	8e 9f       	mul	r24, r30
    1e56:	f0 01       	movw	r30, r0
    1e58:	11 24       	eor	r1, r1
    1e5a:	e2 5d       	subi	r30, 0xD2	; 210
    1e5c:	fb 4f       	sbci	r31, 0xFB	; 251
    1e5e:	fb 87       	std	Y+11, r31	; 0x0b
    1e60:	ea 87       	std	Y+10, r30	; 0x0a
    1e62:	80 81       	ld	r24, Z
    1e64:	8f 5f       	subi	r24, 0xFF	; 255
    1e66:	80 83       	st	Z, r24
    1e68:	0f 90       	pop	r0
    1e6a:	0f be       	out	0x3f, r0	; 63
    1e6c:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <xSchedulerRunning>
    1e70:	88 23       	and	r24, r24
    1e72:	49 f0       	breq	.+18     	; 0x1e86 <prvAddNewTaskToReadyList+0x124>
    1e74:	e0 91 52 04 	lds	r30, 0x0452	; 0x800452 <pxCurrentTCB>
    1e78:	f0 91 53 04 	lds	r31, 0x0453	; 0x800453 <pxCurrentTCB+0x1>
    1e7c:	96 89       	ldd	r25, Z+22	; 0x16
    1e7e:	8e 89       	ldd	r24, Y+22	; 0x16
    1e80:	98 17       	cp	r25, r24
    1e82:	08 f4       	brcc	.+2      	; 0x1e86 <prvAddNewTaskToReadyList+0x124>
    1e84:	f7 d7       	rcall	.+4078   	; 0x2e74 <vPortYield>
    1e86:	df 91       	pop	r29
    1e88:	cf 91       	pop	r28
    1e8a:	08 95       	ret

00001e8c <prvResetNextTaskUnblockTime>:
    1e8c:	e0 91 1a 04 	lds	r30, 0x041A	; 0x80041a <pxDelayedTaskList>
    1e90:	f0 91 1b 04 	lds	r31, 0x041B	; 0x80041b <pxDelayedTaskList+0x1>
    1e94:	80 81       	ld	r24, Z
    1e96:	81 11       	cpse	r24, r1
    1e98:	03 c0       	rjmp	.+6      	; 0x1ea0 <prvResetNextTaskUnblockTime+0x14>
    1e9a:	8f ef       	ldi	r24, 0xFF	; 255
    1e9c:	9f ef       	ldi	r25, 0xFF	; 255
    1e9e:	09 c0       	rjmp	.+18     	; 0x1eb2 <prvResetNextTaskUnblockTime+0x26>
    1ea0:	e0 91 1a 04 	lds	r30, 0x041A	; 0x80041a <pxDelayedTaskList>
    1ea4:	f0 91 1b 04 	lds	r31, 0x041B	; 0x80041b <pxDelayedTaskList+0x1>
    1ea8:	05 80       	ldd	r0, Z+5	; 0x05
    1eaa:	f6 81       	ldd	r31, Z+6	; 0x06
    1eac:	e0 2d       	mov	r30, r0
    1eae:	80 81       	ld	r24, Z
    1eb0:	91 81       	ldd	r25, Z+1	; 0x01
    1eb2:	90 93 f1 03 	sts	0x03F1, r25	; 0x8003f1 <xNextTaskUnblockTime+0x1>
    1eb6:	80 93 f0 03 	sts	0x03F0, r24	; 0x8003f0 <xNextTaskUnblockTime>
    1eba:	08 95       	ret

00001ebc <prvInitialiseNewTask.isra.2>:
    1ebc:	6f 92       	push	r6
    1ebe:	7f 92       	push	r7
    1ec0:	8f 92       	push	r8
    1ec2:	9f 92       	push	r9
    1ec4:	af 92       	push	r10
    1ec6:	bf 92       	push	r11
    1ec8:	cf 92       	push	r12
    1eca:	df 92       	push	r13
    1ecc:	ef 92       	push	r14
    1ece:	ff 92       	push	r15
    1ed0:	0f 93       	push	r16
    1ed2:	cf 93       	push	r28
    1ed4:	df 93       	push	r29
    1ed6:	4c 01       	movw	r8, r24
    1ed8:	eb 01       	movw	r28, r22
    1eda:	5a 01       	movw	r10, r20
    1edc:	39 01       	movw	r6, r18
    1ede:	65 ea       	ldi	r22, 0xA5	; 165
    1ee0:	70 e0       	ldi	r23, 0x00	; 0
    1ee2:	f6 01       	movw	r30, r12
    1ee4:	87 89       	ldd	r24, Z+23	; 0x17
    1ee6:	90 8d       	ldd	r25, Z+24	; 0x18
    1ee8:	0e 94 6f 19 	call	0x32de	; 0x32de <memset>
    1eec:	f1 e0       	ldi	r31, 0x01	; 1
    1eee:	af 1a       	sub	r10, r31
    1ef0:	b1 08       	sbc	r11, r1
    1ef2:	f6 01       	movw	r30, r12
    1ef4:	87 89       	ldd	r24, Z+23	; 0x17
    1ef6:	90 8d       	ldd	r25, Z+24	; 0x18
    1ef8:	a8 0e       	add	r10, r24
    1efa:	b9 1e       	adc	r11, r25
    1efc:	20 97       	sbiw	r28, 0x00	; 0
    1efe:	71 f0       	breq	.+28     	; 0x1f1c <prvInitialiseNewTask.isra.2+0x60>
    1f00:	79 96       	adiw	r30, 0x19	; 25
    1f02:	ce 01       	movw	r24, r28
    1f04:	08 96       	adiw	r24, 0x08	; 8
    1f06:	de 01       	movw	r26, r28
    1f08:	29 91       	ld	r18, Y+
    1f0a:	21 93       	st	Z+, r18
    1f0c:	2c 91       	ld	r18, X
    1f0e:	22 23       	and	r18, r18
    1f10:	19 f0       	breq	.+6      	; 0x1f18 <prvInitialiseNewTask.isra.2+0x5c>
    1f12:	c8 17       	cp	r28, r24
    1f14:	d9 07       	cpc	r29, r25
    1f16:	b9 f7       	brne	.-18     	; 0x1f06 <prvInitialiseNewTask.isra.2+0x4a>
    1f18:	f6 01       	movw	r30, r12
    1f1a:	10 a2       	std	Z+32, r1	; 0x20
    1f1c:	04 30       	cpi	r16, 0x04	; 4
    1f1e:	08 f0       	brcs	.+2      	; 0x1f22 <prvInitialiseNewTask.isra.2+0x66>
    1f20:	03 e0       	ldi	r16, 0x03	; 3
    1f22:	f6 01       	movw	r30, r12
    1f24:	06 8b       	std	Z+22, r16	; 0x16
    1f26:	01 a3       	std	Z+33, r16	; 0x21
    1f28:	c6 01       	movw	r24, r12
    1f2a:	02 96       	adiw	r24, 0x02	; 2
    1f2c:	2c d7       	rcall	.+3672   	; 0x2d86 <vListInitialiseItem>
    1f2e:	c6 01       	movw	r24, r12
    1f30:	0c 96       	adiw	r24, 0x0c	; 12
    1f32:	29 d7       	rcall	.+3666   	; 0x2d86 <vListInitialiseItem>
    1f34:	f6 01       	movw	r30, r12
    1f36:	d1 86       	std	Z+9, r13	; 0x09
    1f38:	c0 86       	std	Z+8, r12	; 0x08
    1f3a:	84 e0       	ldi	r24, 0x04	; 4
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	80 1b       	sub	r24, r16
    1f40:	91 09       	sbc	r25, r1
    1f42:	95 87       	std	Z+13, r25	; 0x0d
    1f44:	84 87       	std	Z+12, r24	; 0x0c
    1f46:	d3 8a       	std	Z+19, r13	; 0x13
    1f48:	c2 8a       	std	Z+18, r12	; 0x12
    1f4a:	a3 01       	movw	r20, r6
    1f4c:	b4 01       	movw	r22, r8
    1f4e:	c5 01       	movw	r24, r10
    1f50:	7a d7       	rcall	.+3828   	; 0x2e46 <pxPortInitialiseStack>
    1f52:	f6 01       	movw	r30, r12
    1f54:	91 83       	std	Z+1, r25	; 0x01
    1f56:	80 83       	st	Z, r24
    1f58:	e1 14       	cp	r14, r1
    1f5a:	f1 04       	cpc	r15, r1
    1f5c:	19 f0       	breq	.+6      	; 0x1f64 <prvInitialiseNewTask.isra.2+0xa8>
    1f5e:	f7 01       	movw	r30, r14
    1f60:	d1 82       	std	Z+1, r13	; 0x01
    1f62:	c0 82       	st	Z, r12
    1f64:	df 91       	pop	r29
    1f66:	cf 91       	pop	r28
    1f68:	0f 91       	pop	r16
    1f6a:	ff 90       	pop	r15
    1f6c:	ef 90       	pop	r14
    1f6e:	df 90       	pop	r13
    1f70:	cf 90       	pop	r12
    1f72:	bf 90       	pop	r11
    1f74:	af 90       	pop	r10
    1f76:	9f 90       	pop	r9
    1f78:	8f 90       	pop	r8
    1f7a:	7f 90       	pop	r7
    1f7c:	6f 90       	pop	r6
    1f7e:	08 95       	ret

00001f80 <prvDeleteTCB>:
    1f80:	cf 93       	push	r28
    1f82:	df 93       	push	r29
    1f84:	fc 01       	movw	r30, r24
    1f86:	20 a5       	ldd	r18, Z+40	; 0x28
    1f88:	21 11       	cpse	r18, r1
    1f8a:	06 c0       	rjmp	.+12     	; 0x1f98 <prvDeleteTCB+0x18>
    1f8c:	ec 01       	movw	r28, r24
    1f8e:	87 89       	ldd	r24, Z+23	; 0x17
    1f90:	90 8d       	ldd	r25, Z+24	; 0x18
    1f92:	dd d6       	rcall	.+3514   	; 0x2d4e <vPortFree>
    1f94:	ce 01       	movw	r24, r28
    1f96:	02 c0       	rjmp	.+4      	; 0x1f9c <prvDeleteTCB+0x1c>
    1f98:	21 30       	cpi	r18, 0x01	; 1
    1f9a:	19 f4       	brne	.+6      	; 0x1fa2 <prvDeleteTCB+0x22>
    1f9c:	df 91       	pop	r29
    1f9e:	cf 91       	pop	r28
    1fa0:	d6 c6       	rjmp	.+3500   	; 0x2d4e <vPortFree>
    1fa2:	df 91       	pop	r29
    1fa4:	cf 91       	pop	r28
    1fa6:	08 95       	ret

00001fa8 <prvAddCurrentTaskToDelayedList>:
    1fa8:	ff 92       	push	r15
    1faa:	0f 93       	push	r16
    1fac:	1f 93       	push	r17
    1fae:	cf 93       	push	r28
    1fb0:	df 93       	push	r29
    1fb2:	ec 01       	movw	r28, r24
    1fb4:	f6 2e       	mov	r15, r22
    1fb6:	00 91 f9 03 	lds	r16, 0x03F9	; 0x8003f9 <xTickCount>
    1fba:	10 91 fa 03 	lds	r17, 0x03FA	; 0x8003fa <xTickCount+0x1>
    1fbe:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <pxCurrentTCB>
    1fc2:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <pxCurrentTCB+0x1>
    1fc6:	02 96       	adiw	r24, 0x02	; 2
    1fc8:	1a d7       	rcall	.+3636   	; 0x2dfe <uxListRemove>
    1fca:	cf 3f       	cpi	r28, 0xFF	; 255
    1fcc:	8f ef       	ldi	r24, 0xFF	; 255
    1fce:	d8 07       	cpc	r29, r24
    1fd0:	c1 f5       	brne	.+112    	; 0x2042 <__DATA_REGION_LENGTH__+0x42>
    1fd2:	ff 20       	and	r15, r15
    1fd4:	b1 f1       	breq	.+108    	; 0x2042 <__DATA_REGION_LENGTH__+0x42>
    1fd6:	e0 91 fd 03 	lds	r30, 0x03FD	; 0x8003fd <xSuspendedTaskList+0x1>
    1fda:	f0 91 fe 03 	lds	r31, 0x03FE	; 0x8003fe <xSuspendedTaskList+0x2>
    1fde:	a0 91 52 04 	lds	r26, 0x0452	; 0x800452 <pxCurrentTCB>
    1fe2:	b0 91 53 04 	lds	r27, 0x0453	; 0x800453 <pxCurrentTCB+0x1>
    1fe6:	15 96       	adiw	r26, 0x05	; 5
    1fe8:	fc 93       	st	X, r31
    1fea:	ee 93       	st	-X, r30
    1fec:	14 97       	sbiw	r26, 0x04	; 4
    1fee:	a0 91 52 04 	lds	r26, 0x0452	; 0x800452 <pxCurrentTCB>
    1ff2:	b0 91 53 04 	lds	r27, 0x0453	; 0x800453 <pxCurrentTCB+0x1>
    1ff6:	84 81       	ldd	r24, Z+4	; 0x04
    1ff8:	95 81       	ldd	r25, Z+5	; 0x05
    1ffa:	17 96       	adiw	r26, 0x07	; 7
    1ffc:	9c 93       	st	X, r25
    1ffe:	8e 93       	st	-X, r24
    2000:	16 97       	sbiw	r26, 0x06	; 6
    2002:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <pxCurrentTCB>
    2006:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <pxCurrentTCB+0x1>
    200a:	a4 81       	ldd	r26, Z+4	; 0x04
    200c:	b5 81       	ldd	r27, Z+5	; 0x05
    200e:	02 96       	adiw	r24, 0x02	; 2
    2010:	13 96       	adiw	r26, 0x03	; 3
    2012:	9c 93       	st	X, r25
    2014:	8e 93       	st	-X, r24
    2016:	12 97       	sbiw	r26, 0x02	; 2
    2018:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <pxCurrentTCB>
    201c:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <pxCurrentTCB+0x1>
    2020:	02 96       	adiw	r24, 0x02	; 2
    2022:	95 83       	std	Z+5, r25	; 0x05
    2024:	84 83       	std	Z+4, r24	; 0x04
    2026:	e0 91 52 04 	lds	r30, 0x0452	; 0x800452 <pxCurrentTCB>
    202a:	f0 91 53 04 	lds	r31, 0x0453	; 0x800453 <pxCurrentTCB+0x1>
    202e:	8c ef       	ldi	r24, 0xFC	; 252
    2030:	93 e0       	ldi	r25, 0x03	; 3
    2032:	93 87       	std	Z+11, r25	; 0x0b
    2034:	82 87       	std	Z+10, r24	; 0x0a
    2036:	80 91 fc 03 	lds	r24, 0x03FC	; 0x8003fc <xSuspendedTaskList>
    203a:	8f 5f       	subi	r24, 0xFF	; 255
    203c:	80 93 fc 03 	sts	0x03FC, r24	; 0x8003fc <xSuspendedTaskList>
    2040:	2d c0       	rjmp	.+90     	; 0x209c <__DATA_REGION_LENGTH__+0x9c>
    2042:	c0 0f       	add	r28, r16
    2044:	d1 1f       	adc	r29, r17
    2046:	e0 91 52 04 	lds	r30, 0x0452	; 0x800452 <pxCurrentTCB>
    204a:	f0 91 53 04 	lds	r31, 0x0453	; 0x800453 <pxCurrentTCB+0x1>
    204e:	d3 83       	std	Z+3, r29	; 0x03
    2050:	c2 83       	std	Z+2, r28	; 0x02
    2052:	60 91 52 04 	lds	r22, 0x0452	; 0x800452 <pxCurrentTCB>
    2056:	70 91 53 04 	lds	r23, 0x0453	; 0x800453 <pxCurrentTCB+0x1>
    205a:	c0 17       	cp	r28, r16
    205c:	d1 07       	cpc	r29, r17
    205e:	60 f4       	brcc	.+24     	; 0x2078 <__DATA_REGION_LENGTH__+0x78>
    2060:	80 91 18 04 	lds	r24, 0x0418	; 0x800418 <pxOverflowDelayedTaskList>
    2064:	90 91 19 04 	lds	r25, 0x0419	; 0x800419 <pxOverflowDelayedTaskList+0x1>
    2068:	6e 5f       	subi	r22, 0xFE	; 254
    206a:	7f 4f       	sbci	r23, 0xFF	; 255
    206c:	df 91       	pop	r29
    206e:	cf 91       	pop	r28
    2070:	1f 91       	pop	r17
    2072:	0f 91       	pop	r16
    2074:	ff 90       	pop	r15
    2076:	8b c6       	rjmp	.+3350   	; 0x2d8e <vListInsert>
    2078:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <pxDelayedTaskList>
    207c:	90 91 1b 04 	lds	r25, 0x041B	; 0x80041b <pxDelayedTaskList+0x1>
    2080:	6e 5f       	subi	r22, 0xFE	; 254
    2082:	7f 4f       	sbci	r23, 0xFF	; 255
    2084:	84 d6       	rcall	.+3336   	; 0x2d8e <vListInsert>
    2086:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <xNextTaskUnblockTime>
    208a:	90 91 f1 03 	lds	r25, 0x03F1	; 0x8003f1 <xNextTaskUnblockTime+0x1>
    208e:	c8 17       	cp	r28, r24
    2090:	d9 07       	cpc	r29, r25
    2092:	20 f4       	brcc	.+8      	; 0x209c <__DATA_REGION_LENGTH__+0x9c>
    2094:	d0 93 f1 03 	sts	0x03F1, r29	; 0x8003f1 <xNextTaskUnblockTime+0x1>
    2098:	c0 93 f0 03 	sts	0x03F0, r28	; 0x8003f0 <xNextTaskUnblockTime>
    209c:	df 91       	pop	r29
    209e:	cf 91       	pop	r28
    20a0:	1f 91       	pop	r17
    20a2:	0f 91       	pop	r16
    20a4:	ff 90       	pop	r15
    20a6:	08 95       	ret

000020a8 <xTaskCreateStatic>:
    20a8:	af 92       	push	r10
    20aa:	bf 92       	push	r11
    20ac:	cf 92       	push	r12
    20ae:	df 92       	push	r13
    20b0:	ef 92       	push	r14
    20b2:	ff 92       	push	r15
    20b4:	0f 93       	push	r16
    20b6:	cf 93       	push	r28
    20b8:	df 93       	push	r29
    20ba:	1f 92       	push	r1
    20bc:	1f 92       	push	r1
    20be:	cd b7       	in	r28, 0x3d	; 61
    20c0:	de b7       	in	r29, 0x3e	; 62
    20c2:	c1 14       	cp	r12, r1
    20c4:	d1 04       	cpc	r13, r1
    20c6:	c1 f0       	breq	.+48     	; 0x20f8 <xTaskCreateStatic+0x50>
    20c8:	e1 14       	cp	r14, r1
    20ca:	f1 04       	cpc	r15, r1
    20cc:	a9 f0       	breq	.+42     	; 0x20f8 <xTaskCreateStatic+0x50>
    20ce:	e9 e2       	ldi	r30, 0x29	; 41
    20d0:	d6 01       	movw	r26, r12
    20d2:	1d 92       	st	X+, r1
    20d4:	ea 95       	dec	r30
    20d6:	e9 f7       	brne	.-6      	; 0x20d2 <xTaskCreateStatic+0x2a>
    20d8:	f6 01       	movw	r30, r12
    20da:	f0 8e       	std	Z+24, r15	; 0x18
    20dc:	e7 8a       	std	Z+23, r14	; 0x17
    20de:	e2 e0       	ldi	r30, 0x02	; 2
    20e0:	d6 01       	movw	r26, r12
    20e2:	98 96       	adiw	r26, 0x28	; 40
    20e4:	ec 93       	st	X, r30
    20e6:	fe 01       	movw	r30, r28
    20e8:	31 96       	adiw	r30, 0x01	; 1
    20ea:	7f 01       	movw	r14, r30
    20ec:	e7 de       	rcall	.-562    	; 0x1ebc <prvInitialiseNewTask.isra.2>
    20ee:	c6 01       	movw	r24, r12
    20f0:	38 de       	rcall	.-912    	; 0x1d62 <prvAddNewTaskToReadyList>
    20f2:	89 81       	ldd	r24, Y+1	; 0x01
    20f4:	9a 81       	ldd	r25, Y+2	; 0x02
    20f6:	02 c0       	rjmp	.+4      	; 0x20fc <xTaskCreateStatic+0x54>
    20f8:	80 e0       	ldi	r24, 0x00	; 0
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	0f 90       	pop	r0
    20fe:	0f 90       	pop	r0
    2100:	df 91       	pop	r29
    2102:	cf 91       	pop	r28
    2104:	0f 91       	pop	r16
    2106:	ff 90       	pop	r15
    2108:	ef 90       	pop	r14
    210a:	df 90       	pop	r13
    210c:	cf 90       	pop	r12
    210e:	bf 90       	pop	r11
    2110:	af 90       	pop	r10
    2112:	08 95       	ret

00002114 <vTaskStartScheduler>:
    2114:	cf 92       	push	r12
    2116:	df 92       	push	r13
    2118:	ef 92       	push	r14
    211a:	ff 92       	push	r15
    211c:	0f 93       	push	r16
    211e:	cf 93       	push	r28
    2120:	df 93       	push	r29
    2122:	00 d0       	rcall	.+0      	; 0x2124 <vTaskStartScheduler+0x10>
    2124:	00 d0       	rcall	.+0      	; 0x2126 <vTaskStartScheduler+0x12>
    2126:	cd b7       	in	r28, 0x3d	; 61
    2128:	de b7       	in	r29, 0x3e	; 62
    212a:	1e 82       	std	Y+6, r1	; 0x06
    212c:	1d 82       	std	Y+5, r1	; 0x05
    212e:	1c 82       	std	Y+4, r1	; 0x04
    2130:	1b 82       	std	Y+3, r1	; 0x03
    2132:	ae 01       	movw	r20, r28
    2134:	4f 5f       	subi	r20, 0xFF	; 255
    2136:	5f 4f       	sbci	r21, 0xFF	; 255
    2138:	be 01       	movw	r22, r28
    213a:	6d 5f       	subi	r22, 0xFD	; 253
    213c:	7f 4f       	sbci	r23, 0xFF	; 255
    213e:	ce 01       	movw	r24, r28
    2140:	05 96       	adiw	r24, 0x05	; 5
    2142:	ae d5       	rcall	.+2908   	; 0x2ca0 <vApplicationGetIdleTaskMemory>
    2144:	cd 80       	ldd	r12, Y+5	; 0x05
    2146:	de 80       	ldd	r13, Y+6	; 0x06
    2148:	eb 80       	ldd	r14, Y+3	; 0x03
    214a:	fc 80       	ldd	r15, Y+4	; 0x04
    214c:	49 81       	ldd	r20, Y+1	; 0x01
    214e:	5a 81       	ldd	r21, Y+2	; 0x02
    2150:	00 e0       	ldi	r16, 0x00	; 0
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	63 e6       	ldi	r22, 0x63	; 99
    2158:	72 e0       	ldi	r23, 0x02	; 2
    215a:	89 e4       	ldi	r24, 0x49	; 73
    215c:	91 e0       	ldi	r25, 0x01	; 1
    215e:	a4 df       	rcall	.-184    	; 0x20a8 <xTaskCreateStatic>
    2160:	89 2b       	or	r24, r25
    2162:	89 f0       	breq	.+34     	; 0x2186 <vTaskStartScheduler+0x72>
    2164:	bb d4       	rcall	.+2422   	; 0x2adc <xTimerCreateTimerTask>
    2166:	81 30       	cpi	r24, 0x01	; 1
    2168:	71 f4       	brne	.+28     	; 0x2186 <vTaskStartScheduler+0x72>
    216a:	f8 94       	cli
    216c:	2f ef       	ldi	r18, 0xFF	; 255
    216e:	3f ef       	ldi	r19, 0xFF	; 255
    2170:	30 93 f1 03 	sts	0x03F1, r19	; 0x8003f1 <xNextTaskUnblockTime+0x1>
    2174:	20 93 f0 03 	sts	0x03F0, r18	; 0x8003f0 <xNextTaskUnblockTime>
    2178:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <xSchedulerRunning>
    217c:	10 92 fa 03 	sts	0x03FA, r1	; 0x8003fa <xTickCount+0x1>
    2180:	10 92 f9 03 	sts	0x03F9, r1	; 0x8003f9 <xTickCount>
    2184:	46 d7       	rcall	.+3724   	; 0x3012 <xPortStartScheduler>
    2186:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <uxTopUsedPriority>
    218a:	26 96       	adiw	r28, 0x06	; 6
    218c:	0f b6       	in	r0, 0x3f	; 63
    218e:	f8 94       	cli
    2190:	de bf       	out	0x3e, r29	; 62
    2192:	0f be       	out	0x3f, r0	; 63
    2194:	cd bf       	out	0x3d, r28	; 61
    2196:	df 91       	pop	r29
    2198:	cf 91       	pop	r28
    219a:	0f 91       	pop	r16
    219c:	ff 90       	pop	r15
    219e:	ef 90       	pop	r14
    21a0:	df 90       	pop	r13
    21a2:	cf 90       	pop	r12
    21a4:	08 95       	ret

000021a6 <vTaskSuspendAll>:
    21a6:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <uxSchedulerSuspended>
    21aa:	8f 5f       	subi	r24, 0xFF	; 255
    21ac:	80 93 ef 03 	sts	0x03EF, r24	; 0x8003ef <uxSchedulerSuspended>
    21b0:	08 95       	ret

000021b2 <xTaskGetTickCount>:
    21b2:	0f b6       	in	r0, 0x3f	; 63
    21b4:	f8 94       	cli
    21b6:	0f 92       	push	r0
    21b8:	80 91 f9 03 	lds	r24, 0x03F9	; 0x8003f9 <xTickCount>
    21bc:	90 91 fa 03 	lds	r25, 0x03FA	; 0x8003fa <xTickCount+0x1>
    21c0:	0f 90       	pop	r0
    21c2:	0f be       	out	0x3f, r0	; 63
    21c4:	08 95       	ret

000021c6 <uxTaskGetNumberOfTasks>:
    21c6:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <uxCurrentNumberOfTasks>
    21ca:	08 95       	ret

000021cc <xTaskIncrementTick>:
    21cc:	df 92       	push	r13
    21ce:	ef 92       	push	r14
    21d0:	ff 92       	push	r15
    21d2:	0f 93       	push	r16
    21d4:	1f 93       	push	r17
    21d6:	cf 93       	push	r28
    21d8:	df 93       	push	r29
    21da:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <uxSchedulerSuspended>
    21de:	81 11       	cpse	r24, r1
    21e0:	e6 c0       	rjmp	.+460    	; 0x23ae <__stack+0x1af>
    21e2:	00 91 f9 03 	lds	r16, 0x03F9	; 0x8003f9 <xTickCount>
    21e6:	10 91 fa 03 	lds	r17, 0x03FA	; 0x8003fa <xTickCount+0x1>
    21ea:	0f 5f       	subi	r16, 0xFF	; 255
    21ec:	1f 4f       	sbci	r17, 0xFF	; 255
    21ee:	10 93 fa 03 	sts	0x03FA, r17	; 0x8003fa <xTickCount+0x1>
    21f2:	00 93 f9 03 	sts	0x03F9, r16	; 0x8003f9 <xTickCount>
    21f6:	01 15       	cp	r16, r1
    21f8:	11 05       	cpc	r17, r1
    21fa:	b1 f4       	brne	.+44     	; 0x2228 <__stack+0x29>
    21fc:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <pxDelayedTaskList>
    2200:	90 91 1b 04 	lds	r25, 0x041B	; 0x80041b <pxDelayedTaskList+0x1>
    2204:	20 91 18 04 	lds	r18, 0x0418	; 0x800418 <pxOverflowDelayedTaskList>
    2208:	30 91 19 04 	lds	r19, 0x0419	; 0x800419 <pxOverflowDelayedTaskList+0x1>
    220c:	30 93 1b 04 	sts	0x041B, r19	; 0x80041b <pxDelayedTaskList+0x1>
    2210:	20 93 1a 04 	sts	0x041A, r18	; 0x80041a <pxDelayedTaskList>
    2214:	90 93 19 04 	sts	0x0419, r25	; 0x800419 <pxOverflowDelayedTaskList+0x1>
    2218:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <pxOverflowDelayedTaskList>
    221c:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <xNumOfOverflows>
    2220:	8f 5f       	subi	r24, 0xFF	; 255
    2222:	80 93 f3 03 	sts	0x03F3, r24	; 0x8003f3 <xNumOfOverflows>
    2226:	32 de       	rcall	.-924    	; 0x1e8c <prvResetNextTaskUnblockTime>
    2228:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <xNextTaskUnblockTime>
    222c:	90 91 f1 03 	lds	r25, 0x03F1	; 0x8003f1 <xNextTaskUnblockTime+0x1>
    2230:	d1 2c       	mov	r13, r1
    2232:	08 17       	cp	r16, r24
    2234:	19 07       	cpc	r17, r25
    2236:	08 f4       	brcc	.+2      	; 0x223a <__stack+0x3b>
    2238:	9b c0       	rjmp	.+310    	; 0x2370 <__stack+0x171>
    223a:	49 e0       	ldi	r20, 0x09	; 9
    223c:	e0 91 1a 04 	lds	r30, 0x041A	; 0x80041a <pxDelayedTaskList>
    2240:	f0 91 1b 04 	lds	r31, 0x041B	; 0x80041b <pxDelayedTaskList+0x1>
    2244:	80 81       	ld	r24, Z
    2246:	81 11       	cpse	r24, r1
    2248:	03 c0       	rjmp	.+6      	; 0x2250 <__stack+0x51>
    224a:	8f ef       	ldi	r24, 0xFF	; 255
    224c:	9f ef       	ldi	r25, 0xFF	; 255
    224e:	0f c0       	rjmp	.+30     	; 0x226e <__stack+0x6f>
    2250:	e0 91 1a 04 	lds	r30, 0x041A	; 0x80041a <pxDelayedTaskList>
    2254:	f0 91 1b 04 	lds	r31, 0x041B	; 0x80041b <pxDelayedTaskList+0x1>
    2258:	05 80       	ldd	r0, Z+5	; 0x05
    225a:	f6 81       	ldd	r31, Z+6	; 0x06
    225c:	e0 2d       	mov	r30, r0
    225e:	06 80       	ldd	r0, Z+6	; 0x06
    2260:	f7 81       	ldd	r31, Z+7	; 0x07
    2262:	e0 2d       	mov	r30, r0
    2264:	82 81       	ldd	r24, Z+2	; 0x02
    2266:	93 81       	ldd	r25, Z+3	; 0x03
    2268:	08 17       	cp	r16, r24
    226a:	19 07       	cpc	r17, r25
    226c:	28 f4       	brcc	.+10     	; 0x2278 <__stack+0x79>
    226e:	90 93 f1 03 	sts	0x03F1, r25	; 0x8003f1 <xNextTaskUnblockTime+0x1>
    2272:	80 93 f0 03 	sts	0x03F0, r24	; 0x8003f0 <xNextTaskUnblockTime>
    2276:	7c c0       	rjmp	.+248    	; 0x2370 <__stack+0x171>
    2278:	a2 85       	ldd	r26, Z+10	; 0x0a
    227a:	b3 85       	ldd	r27, Z+11	; 0x0b
    227c:	84 81       	ldd	r24, Z+4	; 0x04
    227e:	95 81       	ldd	r25, Z+5	; 0x05
    2280:	26 81       	ldd	r18, Z+6	; 0x06
    2282:	37 81       	ldd	r19, Z+7	; 0x07
    2284:	ec 01       	movw	r28, r24
    2286:	3d 83       	std	Y+5, r19	; 0x05
    2288:	2c 83       	std	Y+4, r18	; 0x04
    228a:	26 81       	ldd	r18, Z+6	; 0x06
    228c:	37 81       	ldd	r19, Z+7	; 0x07
    228e:	e9 01       	movw	r28, r18
    2290:	9b 83       	std	Y+3, r25	; 0x03
    2292:	8a 83       	std	Y+2, r24	; 0x02
    2294:	cf 01       	movw	r24, r30
    2296:	02 96       	adiw	r24, 0x02	; 2
    2298:	11 96       	adiw	r26, 0x01	; 1
    229a:	6d 91       	ld	r22, X+
    229c:	7c 91       	ld	r23, X
    229e:	12 97       	sbiw	r26, 0x02	; 2
    22a0:	68 17       	cp	r22, r24
    22a2:	79 07       	cpc	r23, r25
    22a4:	21 f4       	brne	.+8      	; 0x22ae <__stack+0xaf>
    22a6:	12 96       	adiw	r26, 0x02	; 2
    22a8:	3c 93       	st	X, r19
    22aa:	2e 93       	st	-X, r18
    22ac:	11 97       	sbiw	r26, 0x01	; 1
    22ae:	13 86       	std	Z+11, r1	; 0x0b
    22b0:	12 86       	std	Z+10, r1	; 0x0a
    22b2:	2c 91       	ld	r18, X
    22b4:	21 50       	subi	r18, 0x01	; 1
    22b6:	2c 93       	st	X, r18
    22b8:	a4 89       	ldd	r26, Z+20	; 0x14
    22ba:	b5 89       	ldd	r27, Z+21	; 0x15
    22bc:	10 97       	sbiw	r26, 0x00	; 0
    22be:	f9 f0       	breq	.+62     	; 0x22fe <__stack+0xff>
    22c0:	26 85       	ldd	r18, Z+14	; 0x0e
    22c2:	37 85       	ldd	r19, Z+15	; 0x0f
    22c4:	60 89       	ldd	r22, Z+16	; 0x10
    22c6:	71 89       	ldd	r23, Z+17	; 0x11
    22c8:	e9 01       	movw	r28, r18
    22ca:	7d 83       	std	Y+5, r23	; 0x05
    22cc:	6c 83       	std	Y+4, r22	; 0x04
    22ce:	60 89       	ldd	r22, Z+16	; 0x10
    22d0:	71 89       	ldd	r23, Z+17	; 0x11
    22d2:	eb 01       	movw	r28, r22
    22d4:	3b 83       	std	Y+3, r19	; 0x03
    22d6:	2a 83       	std	Y+2, r18	; 0x02
    22d8:	11 96       	adiw	r26, 0x01	; 1
    22da:	ed 90       	ld	r14, X+
    22dc:	fc 90       	ld	r15, X
    22de:	12 97       	sbiw	r26, 0x02	; 2
    22e0:	9f 01       	movw	r18, r30
    22e2:	24 5f       	subi	r18, 0xF4	; 244
    22e4:	3f 4f       	sbci	r19, 0xFF	; 255
    22e6:	e2 16       	cp	r14, r18
    22e8:	f3 06       	cpc	r15, r19
    22ea:	21 f4       	brne	.+8      	; 0x22f4 <__stack+0xf5>
    22ec:	12 96       	adiw	r26, 0x02	; 2
    22ee:	7c 93       	st	X, r23
    22f0:	6e 93       	st	-X, r22
    22f2:	11 97       	sbiw	r26, 0x01	; 1
    22f4:	15 8a       	std	Z+21, r1	; 0x15
    22f6:	14 8a       	std	Z+20, r1	; 0x14
    22f8:	2c 91       	ld	r18, X
    22fa:	21 50       	subi	r18, 0x01	; 1
    22fc:	2c 93       	st	X, r18
    22fe:	a6 89       	ldd	r26, Z+22	; 0x16
    2300:	20 91 f8 03 	lds	r18, 0x03F8	; 0x8003f8 <uxTopReadyPriority>
    2304:	2a 17       	cp	r18, r26
    2306:	10 f4       	brcc	.+4      	; 0x230c <__stack+0x10d>
    2308:	a0 93 f8 03 	sts	0x03F8, r26	; 0x8003f8 <uxTopReadyPriority>
    230c:	4a 9f       	mul	r20, r26
    230e:	d0 01       	movw	r26, r0
    2310:	11 24       	eor	r1, r1
    2312:	a2 5d       	subi	r26, 0xD2	; 210
    2314:	bb 4f       	sbci	r27, 0xFB	; 251
    2316:	11 96       	adiw	r26, 0x01	; 1
    2318:	0d 90       	ld	r0, X+
    231a:	bc 91       	ld	r27, X
    231c:	a0 2d       	mov	r26, r0
    231e:	b5 83       	std	Z+5, r27	; 0x05
    2320:	a4 83       	std	Z+4, r26	; 0x04
    2322:	14 96       	adiw	r26, 0x04	; 4
    2324:	2d 91       	ld	r18, X+
    2326:	3c 91       	ld	r19, X
    2328:	15 97       	sbiw	r26, 0x05	; 5
    232a:	37 83       	std	Z+7, r19	; 0x07
    232c:	26 83       	std	Z+6, r18	; 0x06
    232e:	14 96       	adiw	r26, 0x04	; 4
    2330:	2d 91       	ld	r18, X+
    2332:	3c 91       	ld	r19, X
    2334:	15 97       	sbiw	r26, 0x05	; 5
    2336:	e9 01       	movw	r28, r18
    2338:	9b 83       	std	Y+3, r25	; 0x03
    233a:	8a 83       	std	Y+2, r24	; 0x02
    233c:	15 96       	adiw	r26, 0x05	; 5
    233e:	9c 93       	st	X, r25
    2340:	8e 93       	st	-X, r24
    2342:	14 97       	sbiw	r26, 0x04	; 4
    2344:	96 89       	ldd	r25, Z+22	; 0x16
    2346:	49 9f       	mul	r20, r25
    2348:	d0 01       	movw	r26, r0
    234a:	11 24       	eor	r1, r1
    234c:	a2 5d       	subi	r26, 0xD2	; 210
    234e:	bb 4f       	sbci	r27, 0xFB	; 251
    2350:	b3 87       	std	Z+11, r27	; 0x0b
    2352:	a2 87       	std	Z+10, r26	; 0x0a
    2354:	8c 91       	ld	r24, X
    2356:	8f 5f       	subi	r24, 0xFF	; 255
    2358:	8c 93       	st	X, r24
    235a:	e0 91 52 04 	lds	r30, 0x0452	; 0x800452 <pxCurrentTCB>
    235e:	f0 91 53 04 	lds	r31, 0x0453	; 0x800453 <pxCurrentTCB+0x1>
    2362:	86 89       	ldd	r24, Z+22	; 0x16
    2364:	89 17       	cp	r24, r25
    2366:	08 f0       	brcs	.+2      	; 0x236a <__stack+0x16b>
    2368:	69 cf       	rjmp	.-302    	; 0x223c <__stack+0x3d>
    236a:	dd 24       	eor	r13, r13
    236c:	d3 94       	inc	r13
    236e:	66 cf       	rjmp	.-308    	; 0x223c <__stack+0x3d>
    2370:	e0 91 52 04 	lds	r30, 0x0452	; 0x800452 <pxCurrentTCB>
    2374:	f0 91 53 04 	lds	r31, 0x0453	; 0x800453 <pxCurrentTCB+0x1>
    2378:	e6 89       	ldd	r30, Z+22	; 0x16
    237a:	d9 e0       	ldi	r29, 0x09	; 9
    237c:	ed 9f       	mul	r30, r29
    237e:	f0 01       	movw	r30, r0
    2380:	11 24       	eor	r1, r1
    2382:	e2 5d       	subi	r30, 0xD2	; 210
    2384:	fb 4f       	sbci	r31, 0xFB	; 251
    2386:	80 81       	ld	r24, Z
    2388:	82 30       	cpi	r24, 0x02	; 2
    238a:	10 f0       	brcs	.+4      	; 0x2390 <__stack+0x191>
    238c:	dd 24       	eor	r13, r13
    238e:	d3 94       	inc	r13
    2390:	80 91 f5 03 	lds	r24, 0x03F5	; 0x8003f5 <xPendedTicks>
    2394:	90 91 f6 03 	lds	r25, 0x03F6	; 0x8003f6 <xPendedTicks+0x1>
    2398:	89 2b       	or	r24, r25
    239a:	11 f4       	brne	.+4      	; 0x23a0 <__stack+0x1a1>
    239c:	0e 94 c6 02 	call	0x58c	; 0x58c <vApplicationTickHook>
    23a0:	80 91 f4 03 	lds	r24, 0x03F4	; 0x8003f4 <xYieldPending>
    23a4:	88 23       	and	r24, r24
    23a6:	79 f0       	breq	.+30     	; 0x23c6 <__stack+0x1c7>
    23a8:	dd 24       	eor	r13, r13
    23aa:	d3 94       	inc	r13
    23ac:	0c c0       	rjmp	.+24     	; 0x23c6 <__stack+0x1c7>
    23ae:	80 91 f5 03 	lds	r24, 0x03F5	; 0x8003f5 <xPendedTicks>
    23b2:	90 91 f6 03 	lds	r25, 0x03F6	; 0x8003f6 <xPendedTicks+0x1>
    23b6:	01 96       	adiw	r24, 0x01	; 1
    23b8:	90 93 f6 03 	sts	0x03F6, r25	; 0x8003f6 <xPendedTicks+0x1>
    23bc:	80 93 f5 03 	sts	0x03F5, r24	; 0x8003f5 <xPendedTicks>
    23c0:	0e 94 c6 02 	call	0x58c	; 0x58c <vApplicationTickHook>
    23c4:	d1 2c       	mov	r13, r1
    23c6:	8d 2d       	mov	r24, r13
    23c8:	df 91       	pop	r29
    23ca:	cf 91       	pop	r28
    23cc:	1f 91       	pop	r17
    23ce:	0f 91       	pop	r16
    23d0:	ff 90       	pop	r15
    23d2:	ef 90       	pop	r14
    23d4:	df 90       	pop	r13
    23d6:	08 95       	ret

000023d8 <xTaskResumeAll>:
    23d8:	ef 92       	push	r14
    23da:	ff 92       	push	r15
    23dc:	0f 93       	push	r16
    23de:	1f 93       	push	r17
    23e0:	cf 93       	push	r28
    23e2:	df 93       	push	r29
    23e4:	0f b6       	in	r0, 0x3f	; 63
    23e6:	f8 94       	cli
    23e8:	0f 92       	push	r0
    23ea:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <uxSchedulerSuspended>
    23ee:	81 50       	subi	r24, 0x01	; 1
    23f0:	80 93 ef 03 	sts	0x03EF, r24	; 0x8003ef <uxSchedulerSuspended>
    23f4:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <uxSchedulerSuspended>
    23f8:	88 23       	and	r24, r24
    23fa:	11 f0       	breq	.+4      	; 0x2400 <xTaskResumeAll+0x28>
    23fc:	80 e0       	ldi	r24, 0x00	; 0
    23fe:	ac c0       	rjmp	.+344    	; 0x2558 <xTaskResumeAll+0x180>
    2400:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <uxCurrentNumberOfTasks>
    2404:	88 23       	and	r24, r24
    2406:	d1 f3       	breq	.-12     	; 0x23fc <xTaskResumeAll+0x24>
    2408:	e0 90 14 04 	lds	r14, 0x0414	; 0x800414 <xPendingReadyList+0x5>
    240c:	f0 90 15 04 	lds	r15, 0x0415	; 0x800415 <xPendingReadyList+0x6>
    2410:	e0 e0       	ldi	r30, 0x00	; 0
    2412:	f0 e0       	ldi	r31, 0x00	; 0
    2414:	39 e0       	ldi	r19, 0x09	; 9
    2416:	41 e0       	ldi	r20, 0x01	; 1
    2418:	80 91 0f 04 	lds	r24, 0x040F	; 0x80040f <xPendingReadyList>
    241c:	88 23       	and	r24, r24
    241e:	09 f4       	brne	.+2      	; 0x2422 <xTaskResumeAll+0x4a>
    2420:	80 c0       	rjmp	.+256    	; 0x2522 <xTaskResumeAll+0x14a>
    2422:	d7 01       	movw	r26, r14
    2424:	16 96       	adiw	r26, 0x06	; 6
    2426:	ed 91       	ld	r30, X+
    2428:	fc 91       	ld	r31, X
    242a:	17 97       	sbiw	r26, 0x07	; 7
    242c:	a4 89       	ldd	r26, Z+20	; 0x14
    242e:	b5 89       	ldd	r27, Z+21	; 0x15
    2430:	66 85       	ldd	r22, Z+14	; 0x0e
    2432:	77 85       	ldd	r23, Z+15	; 0x0f
    2434:	80 89       	ldd	r24, Z+16	; 0x10
    2436:	91 89       	ldd	r25, Z+17	; 0x11
    2438:	eb 01       	movw	r28, r22
    243a:	9d 83       	std	Y+5, r25	; 0x05
    243c:	8c 83       	std	Y+4, r24	; 0x04
    243e:	80 89       	ldd	r24, Z+16	; 0x10
    2440:	91 89       	ldd	r25, Z+17	; 0x11
    2442:	ec 01       	movw	r28, r24
    2444:	7b 83       	std	Y+3, r23	; 0x03
    2446:	6a 83       	std	Y+2, r22	; 0x02
    2448:	bf 01       	movw	r22, r30
    244a:	64 5f       	subi	r22, 0xF4	; 244
    244c:	7f 4f       	sbci	r23, 0xFF	; 255
    244e:	11 96       	adiw	r26, 0x01	; 1
    2450:	0d 91       	ld	r16, X+
    2452:	1c 91       	ld	r17, X
    2454:	12 97       	sbiw	r26, 0x02	; 2
    2456:	06 17       	cp	r16, r22
    2458:	17 07       	cpc	r17, r23
    245a:	21 f4       	brne	.+8      	; 0x2464 <xTaskResumeAll+0x8c>
    245c:	12 96       	adiw	r26, 0x02	; 2
    245e:	9c 93       	st	X, r25
    2460:	8e 93       	st	-X, r24
    2462:	11 97       	sbiw	r26, 0x01	; 1
    2464:	15 8a       	std	Z+21, r1	; 0x15
    2466:	14 8a       	std	Z+20, r1	; 0x14
    2468:	8c 91       	ld	r24, X
    246a:	81 50       	subi	r24, 0x01	; 1
    246c:	8c 93       	st	X, r24
    246e:	a2 85       	ldd	r26, Z+10	; 0x0a
    2470:	b3 85       	ldd	r27, Z+11	; 0x0b
    2472:	84 81       	ldd	r24, Z+4	; 0x04
    2474:	95 81       	ldd	r25, Z+5	; 0x05
    2476:	66 81       	ldd	r22, Z+6	; 0x06
    2478:	77 81       	ldd	r23, Z+7	; 0x07
    247a:	ec 01       	movw	r28, r24
    247c:	7d 83       	std	Y+5, r23	; 0x05
    247e:	6c 83       	std	Y+4, r22	; 0x04
    2480:	66 81       	ldd	r22, Z+6	; 0x06
    2482:	77 81       	ldd	r23, Z+7	; 0x07
    2484:	eb 01       	movw	r28, r22
    2486:	9b 83       	std	Y+3, r25	; 0x03
    2488:	8a 83       	std	Y+2, r24	; 0x02
    248a:	cf 01       	movw	r24, r30
    248c:	02 96       	adiw	r24, 0x02	; 2
    248e:	11 96       	adiw	r26, 0x01	; 1
    2490:	0d 91       	ld	r16, X+
    2492:	1c 91       	ld	r17, X
    2494:	12 97       	sbiw	r26, 0x02	; 2
    2496:	08 17       	cp	r16, r24
    2498:	19 07       	cpc	r17, r25
    249a:	21 f4       	brne	.+8      	; 0x24a4 <xTaskResumeAll+0xcc>
    249c:	12 96       	adiw	r26, 0x02	; 2
    249e:	7c 93       	st	X, r23
    24a0:	6e 93       	st	-X, r22
    24a2:	11 97       	sbiw	r26, 0x01	; 1
    24a4:	13 86       	std	Z+11, r1	; 0x0b
    24a6:	12 86       	std	Z+10, r1	; 0x0a
    24a8:	2c 91       	ld	r18, X
    24aa:	21 50       	subi	r18, 0x01	; 1
    24ac:	2c 93       	st	X, r18
    24ae:	a6 89       	ldd	r26, Z+22	; 0x16
    24b0:	20 91 f8 03 	lds	r18, 0x03F8	; 0x8003f8 <uxTopReadyPriority>
    24b4:	2a 17       	cp	r18, r26
    24b6:	10 f4       	brcc	.+4      	; 0x24bc <xTaskResumeAll+0xe4>
    24b8:	a0 93 f8 03 	sts	0x03F8, r26	; 0x8003f8 <uxTopReadyPriority>
    24bc:	3a 9f       	mul	r19, r26
    24be:	d0 01       	movw	r26, r0
    24c0:	11 24       	eor	r1, r1
    24c2:	a2 5d       	subi	r26, 0xD2	; 210
    24c4:	bb 4f       	sbci	r27, 0xFB	; 251
    24c6:	11 96       	adiw	r26, 0x01	; 1
    24c8:	0d 90       	ld	r0, X+
    24ca:	bc 91       	ld	r27, X
    24cc:	a0 2d       	mov	r26, r0
    24ce:	b5 83       	std	Z+5, r27	; 0x05
    24d0:	a4 83       	std	Z+4, r26	; 0x04
    24d2:	14 96       	adiw	r26, 0x04	; 4
    24d4:	6d 91       	ld	r22, X+
    24d6:	7c 91       	ld	r23, X
    24d8:	15 97       	sbiw	r26, 0x05	; 5
    24da:	77 83       	std	Z+7, r23	; 0x07
    24dc:	66 83       	std	Z+6, r22	; 0x06
    24de:	14 96       	adiw	r26, 0x04	; 4
    24e0:	6d 91       	ld	r22, X+
    24e2:	7c 91       	ld	r23, X
    24e4:	15 97       	sbiw	r26, 0x05	; 5
    24e6:	eb 01       	movw	r28, r22
    24e8:	9b 83       	std	Y+3, r25	; 0x03
    24ea:	8a 83       	std	Y+2, r24	; 0x02
    24ec:	15 96       	adiw	r26, 0x05	; 5
    24ee:	9c 93       	st	X, r25
    24f0:	8e 93       	st	-X, r24
    24f2:	14 97       	sbiw	r26, 0x04	; 4
    24f4:	96 89       	ldd	r25, Z+22	; 0x16
    24f6:	39 9f       	mul	r19, r25
    24f8:	d0 01       	movw	r26, r0
    24fa:	11 24       	eor	r1, r1
    24fc:	a2 5d       	subi	r26, 0xD2	; 210
    24fe:	bb 4f       	sbci	r27, 0xFB	; 251
    2500:	b3 87       	std	Z+11, r27	; 0x0b
    2502:	a2 87       	std	Z+10, r26	; 0x0a
    2504:	8c 91       	ld	r24, X
    2506:	8f 5f       	subi	r24, 0xFF	; 255
    2508:	8c 93       	st	X, r24
    250a:	a0 91 52 04 	lds	r26, 0x0452	; 0x800452 <pxCurrentTCB>
    250e:	b0 91 53 04 	lds	r27, 0x0453	; 0x800453 <pxCurrentTCB+0x1>
    2512:	56 96       	adiw	r26, 0x16	; 22
    2514:	8c 91       	ld	r24, X
    2516:	89 17       	cp	r24, r25
    2518:	08 f0       	brcs	.+2      	; 0x251c <xTaskResumeAll+0x144>
    251a:	7e cf       	rjmp	.-260    	; 0x2418 <xTaskResumeAll+0x40>
    251c:	40 93 f4 03 	sts	0x03F4, r20	; 0x8003f4 <xYieldPending>
    2520:	7b cf       	rjmp	.-266    	; 0x2418 <xTaskResumeAll+0x40>
    2522:	ef 2b       	or	r30, r31
    2524:	09 f0       	breq	.+2      	; 0x2528 <xTaskResumeAll+0x150>
    2526:	b2 dc       	rcall	.-1692   	; 0x1e8c <prvResetNextTaskUnblockTime>
    2528:	c0 91 f5 03 	lds	r28, 0x03F5	; 0x8003f5 <xPendedTicks>
    252c:	d0 91 f6 03 	lds	r29, 0x03F6	; 0x8003f6 <xPendedTicks+0x1>
    2530:	20 97       	sbiw	r28, 0x00	; 0
    2532:	59 f0       	breq	.+22     	; 0x254a <xTaskResumeAll+0x172>
    2534:	11 e0       	ldi	r17, 0x01	; 1
    2536:	4a de       	rcall	.-876    	; 0x21cc <xTaskIncrementTick>
    2538:	81 11       	cpse	r24, r1
    253a:	10 93 f4 03 	sts	0x03F4, r17	; 0x8003f4 <xYieldPending>
    253e:	21 97       	sbiw	r28, 0x01	; 1
    2540:	d1 f7       	brne	.-12     	; 0x2536 <xTaskResumeAll+0x15e>
    2542:	10 92 f6 03 	sts	0x03F6, r1	; 0x8003f6 <xPendedTicks+0x1>
    2546:	10 92 f5 03 	sts	0x03F5, r1	; 0x8003f5 <xPendedTicks>
    254a:	80 91 f4 03 	lds	r24, 0x03F4	; 0x8003f4 <xYieldPending>
    254e:	88 23       	and	r24, r24
    2550:	09 f4       	brne	.+2      	; 0x2554 <xTaskResumeAll+0x17c>
    2552:	54 cf       	rjmp	.-344    	; 0x23fc <xTaskResumeAll+0x24>
    2554:	8f d4       	rcall	.+2334   	; 0x2e74 <vPortYield>
    2556:	81 e0       	ldi	r24, 0x01	; 1
    2558:	0f 90       	pop	r0
    255a:	0f be       	out	0x3f, r0	; 63
    255c:	df 91       	pop	r29
    255e:	cf 91       	pop	r28
    2560:	1f 91       	pop	r17
    2562:	0f 91       	pop	r16
    2564:	ff 90       	pop	r15
    2566:	ef 90       	pop	r14
    2568:	08 95       	ret

0000256a <vTaskSwitchContext>:
    256a:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <uxSchedulerSuspended>
    256e:	88 23       	and	r24, r24
    2570:	21 f0       	breq	.+8      	; 0x257a <vTaskSwitchContext+0x10>
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	80 93 f4 03 	sts	0x03F4, r24	; 0x8003f4 <xYieldPending>
    2578:	08 95       	ret
    257a:	10 92 f4 03 	sts	0x03F4, r1	; 0x8003f4 <xYieldPending>
    257e:	a0 91 52 04 	lds	r26, 0x0452	; 0x800452 <pxCurrentTCB>
    2582:	b0 91 53 04 	lds	r27, 0x0453	; 0x800453 <pxCurrentTCB+0x1>
    2586:	e0 91 52 04 	lds	r30, 0x0452	; 0x800452 <pxCurrentTCB>
    258a:	f0 91 53 04 	lds	r31, 0x0453	; 0x800453 <pxCurrentTCB+0x1>
    258e:	2d 91       	ld	r18, X+
    2590:	3c 91       	ld	r19, X
    2592:	87 89       	ldd	r24, Z+23	; 0x17
    2594:	90 8d       	ldd	r25, Z+24	; 0x18
    2596:	82 17       	cp	r24, r18
    2598:	93 07       	cpc	r25, r19
    259a:	58 f0       	brcs	.+22     	; 0x25b2 <vTaskSwitchContext+0x48>
    259c:	60 91 52 04 	lds	r22, 0x0452	; 0x800452 <pxCurrentTCB>
    25a0:	70 91 53 04 	lds	r23, 0x0453	; 0x800453 <pxCurrentTCB+0x1>
    25a4:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <pxCurrentTCB>
    25a8:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <pxCurrentTCB+0x1>
    25ac:	67 5e       	subi	r22, 0xE7	; 231
    25ae:	7f 4f       	sbci	r23, 0xFF	; 255
    25b0:	6b d3       	rcall	.+1750   	; 0x2c88 <vApplicationStackOverflowHook>
    25b2:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <uxTopReadyPriority>
    25b6:	69 e0       	ldi	r22, 0x09	; 9
    25b8:	48 2f       	mov	r20, r24
    25ba:	50 e0       	ldi	r21, 0x00	; 0
    25bc:	64 9f       	mul	r22, r20
    25be:	90 01       	movw	r18, r0
    25c0:	65 9f       	mul	r22, r21
    25c2:	30 0d       	add	r19, r0
    25c4:	11 24       	eor	r1, r1
    25c6:	f9 01       	movw	r30, r18
    25c8:	e2 5d       	subi	r30, 0xD2	; 210
    25ca:	fb 4f       	sbci	r31, 0xFB	; 251
    25cc:	90 81       	ld	r25, Z
    25ce:	91 11       	cpse	r25, r1
    25d0:	02 c0       	rjmp	.+4      	; 0x25d6 <vTaskSwitchContext+0x6c>
    25d2:	81 50       	subi	r24, 0x01	; 1
    25d4:	f1 cf       	rjmp	.-30     	; 0x25b8 <vTaskSwitchContext+0x4e>
    25d6:	a1 81       	ldd	r26, Z+1	; 0x01
    25d8:	b2 81       	ldd	r27, Z+2	; 0x02
    25da:	12 96       	adiw	r26, 0x02	; 2
    25dc:	6d 91       	ld	r22, X+
    25de:	7c 91       	ld	r23, X
    25e0:	13 97       	sbiw	r26, 0x03	; 3
    25e2:	72 83       	std	Z+2, r23	; 0x02
    25e4:	61 83       	std	Z+1, r22	; 0x01
    25e6:	2f 5c       	subi	r18, 0xCF	; 207
    25e8:	3b 4f       	sbci	r19, 0xFB	; 251
    25ea:	62 17       	cp	r22, r18
    25ec:	73 07       	cpc	r23, r19
    25ee:	21 f4       	brne	.+8      	; 0x25f8 <vTaskSwitchContext+0x8e>
    25f0:	25 81       	ldd	r18, Z+5	; 0x05
    25f2:	36 81       	ldd	r19, Z+6	; 0x06
    25f4:	32 83       	std	Z+2, r19	; 0x02
    25f6:	21 83       	std	Z+1, r18	; 0x01
    25f8:	99 e0       	ldi	r25, 0x09	; 9
    25fa:	94 9f       	mul	r25, r20
    25fc:	f0 01       	movw	r30, r0
    25fe:	95 9f       	mul	r25, r21
    2600:	f0 0d       	add	r31, r0
    2602:	11 24       	eor	r1, r1
    2604:	e2 5d       	subi	r30, 0xD2	; 210
    2606:	fb 4f       	sbci	r31, 0xFB	; 251
    2608:	01 80       	ldd	r0, Z+1	; 0x01
    260a:	f2 81       	ldd	r31, Z+2	; 0x02
    260c:	e0 2d       	mov	r30, r0
    260e:	26 81       	ldd	r18, Z+6	; 0x06
    2610:	37 81       	ldd	r19, Z+7	; 0x07
    2612:	30 93 53 04 	sts	0x0453, r19	; 0x800453 <pxCurrentTCB+0x1>
    2616:	20 93 52 04 	sts	0x0452, r18	; 0x800452 <pxCurrentTCB>
    261a:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <uxTopReadyPriority>
    261e:	08 95       	ret

00002620 <vTaskPlaceOnEventList>:
    2620:	cf 93       	push	r28
    2622:	df 93       	push	r29
    2624:	eb 01       	movw	r28, r22
    2626:	60 91 52 04 	lds	r22, 0x0452	; 0x800452 <pxCurrentTCB>
    262a:	70 91 53 04 	lds	r23, 0x0453	; 0x800453 <pxCurrentTCB+0x1>
    262e:	64 5f       	subi	r22, 0xF4	; 244
    2630:	7f 4f       	sbci	r23, 0xFF	; 255
    2632:	ad d3       	rcall	.+1882   	; 0x2d8e <vListInsert>
    2634:	61 e0       	ldi	r22, 0x01	; 1
    2636:	ce 01       	movw	r24, r28
    2638:	df 91       	pop	r29
    263a:	cf 91       	pop	r28
    263c:	b5 cc       	rjmp	.-1686   	; 0x1fa8 <prvAddCurrentTaskToDelayedList>

0000263e <vTaskPlaceOnEventListRestricted>:
    263e:	0f 93       	push	r16
    2640:	1f 93       	push	r17
    2642:	cf 93       	push	r28
    2644:	df 93       	push	r29
    2646:	fc 01       	movw	r30, r24
    2648:	8b 01       	movw	r16, r22
    264a:	a1 81       	ldd	r26, Z+1	; 0x01
    264c:	b2 81       	ldd	r27, Z+2	; 0x02
    264e:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <pxCurrentTCB>
    2652:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <pxCurrentTCB+0x1>
    2656:	ec 01       	movw	r28, r24
    2658:	bf 87       	std	Y+15, r27	; 0x0f
    265a:	ae 87       	std	Y+14, r26	; 0x0e
    265c:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <pxCurrentTCB>
    2660:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <pxCurrentTCB+0x1>
    2664:	14 96       	adiw	r26, 0x04	; 4
    2666:	2d 91       	ld	r18, X+
    2668:	3c 91       	ld	r19, X
    266a:	15 97       	sbiw	r26, 0x05	; 5
    266c:	ec 01       	movw	r28, r24
    266e:	39 8b       	std	Y+17, r19	; 0x11
    2670:	28 8b       	std	Y+16, r18	; 0x10
    2672:	20 91 52 04 	lds	r18, 0x0452	; 0x800452 <pxCurrentTCB>
    2676:	30 91 53 04 	lds	r19, 0x0453	; 0x800453 <pxCurrentTCB+0x1>
    267a:	14 96       	adiw	r26, 0x04	; 4
    267c:	8d 91       	ld	r24, X+
    267e:	9c 91       	ld	r25, X
    2680:	15 97       	sbiw	r26, 0x05	; 5
    2682:	24 5f       	subi	r18, 0xF4	; 244
    2684:	3f 4f       	sbci	r19, 0xFF	; 255
    2686:	ec 01       	movw	r28, r24
    2688:	3b 83       	std	Y+3, r19	; 0x03
    268a:	2a 83       	std	Y+2, r18	; 0x02
    268c:	20 91 52 04 	lds	r18, 0x0452	; 0x800452 <pxCurrentTCB>
    2690:	30 91 53 04 	lds	r19, 0x0453	; 0x800453 <pxCurrentTCB+0x1>
    2694:	24 5f       	subi	r18, 0xF4	; 244
    2696:	3f 4f       	sbci	r19, 0xFF	; 255
    2698:	15 96       	adiw	r26, 0x05	; 5
    269a:	3c 93       	st	X, r19
    269c:	2e 93       	st	-X, r18
    269e:	14 97       	sbiw	r26, 0x04	; 4
    26a0:	a0 91 52 04 	lds	r26, 0x0452	; 0x800452 <pxCurrentTCB>
    26a4:	b0 91 53 04 	lds	r27, 0x0453	; 0x800453 <pxCurrentTCB+0x1>
    26a8:	55 96       	adiw	r26, 0x15	; 21
    26aa:	fc 93       	st	X, r31
    26ac:	ee 93       	st	-X, r30
    26ae:	54 97       	sbiw	r26, 0x14	; 20
    26b0:	90 81       	ld	r25, Z
    26b2:	9f 5f       	subi	r25, 0xFF	; 255
    26b4:	90 83       	st	Z, r25
    26b6:	44 23       	and	r20, r20
    26b8:	11 f0       	breq	.+4      	; 0x26be <vTaskPlaceOnEventListRestricted+0x80>
    26ba:	0f ef       	ldi	r16, 0xFF	; 255
    26bc:	1f ef       	ldi	r17, 0xFF	; 255
    26be:	64 2f       	mov	r22, r20
    26c0:	c8 01       	movw	r24, r16
    26c2:	df 91       	pop	r29
    26c4:	cf 91       	pop	r28
    26c6:	1f 91       	pop	r17
    26c8:	0f 91       	pop	r16
    26ca:	6e cc       	rjmp	.-1828   	; 0x1fa8 <prvAddCurrentTaskToDelayedList>

000026cc <xTaskRemoveFromEventList>:
    26cc:	cf 93       	push	r28
    26ce:	df 93       	push	r29
    26d0:	dc 01       	movw	r26, r24
    26d2:	15 96       	adiw	r26, 0x05	; 5
    26d4:	ed 91       	ld	r30, X+
    26d6:	fc 91       	ld	r31, X
    26d8:	16 97       	sbiw	r26, 0x06	; 6
    26da:	06 80       	ldd	r0, Z+6	; 0x06
    26dc:	f7 81       	ldd	r31, Z+7	; 0x07
    26de:	e0 2d       	mov	r30, r0
    26e0:	a4 89       	ldd	r26, Z+20	; 0x14
    26e2:	b5 89       	ldd	r27, Z+21	; 0x15
    26e4:	86 85       	ldd	r24, Z+14	; 0x0e
    26e6:	97 85       	ldd	r25, Z+15	; 0x0f
    26e8:	20 89       	ldd	r18, Z+16	; 0x10
    26ea:	31 89       	ldd	r19, Z+17	; 0x11
    26ec:	ec 01       	movw	r28, r24
    26ee:	3d 83       	std	Y+5, r19	; 0x05
    26f0:	2c 83       	std	Y+4, r18	; 0x04
    26f2:	c0 89       	ldd	r28, Z+16	; 0x10
    26f4:	d1 89       	ldd	r29, Z+17	; 0x11
    26f6:	9b 83       	std	Y+3, r25	; 0x03
    26f8:	8a 83       	std	Y+2, r24	; 0x02
    26fa:	cf 01       	movw	r24, r30
    26fc:	0c 96       	adiw	r24, 0x0c	; 12
    26fe:	11 96       	adiw	r26, 0x01	; 1
    2700:	2d 91       	ld	r18, X+
    2702:	3c 91       	ld	r19, X
    2704:	12 97       	sbiw	r26, 0x02	; 2
    2706:	28 17       	cp	r18, r24
    2708:	39 07       	cpc	r19, r25
    270a:	21 f4       	brne	.+8      	; 0x2714 <xTaskRemoveFromEventList+0x48>
    270c:	12 96       	adiw	r26, 0x02	; 2
    270e:	dc 93       	st	X, r29
    2710:	ce 93       	st	-X, r28
    2712:	11 97       	sbiw	r26, 0x01	; 1
    2714:	15 8a       	std	Z+21, r1	; 0x15
    2716:	14 8a       	std	Z+20, r1	; 0x14
    2718:	2c 91       	ld	r18, X
    271a:	21 50       	subi	r18, 0x01	; 1
    271c:	2c 93       	st	X, r18
    271e:	20 91 ef 03 	lds	r18, 0x03EF	; 0x8003ef <uxSchedulerSuspended>
    2722:	21 11       	cpse	r18, r1
    2724:	4f c0       	rjmp	.+158    	; 0x27c4 <xTaskRemoveFromEventList+0xf8>
    2726:	a2 85       	ldd	r26, Z+10	; 0x0a
    2728:	b3 85       	ldd	r27, Z+11	; 0x0b
    272a:	84 81       	ldd	r24, Z+4	; 0x04
    272c:	95 81       	ldd	r25, Z+5	; 0x05
    272e:	26 81       	ldd	r18, Z+6	; 0x06
    2730:	37 81       	ldd	r19, Z+7	; 0x07
    2732:	ec 01       	movw	r28, r24
    2734:	3d 83       	std	Y+5, r19	; 0x05
    2736:	2c 83       	std	Y+4, r18	; 0x04
    2738:	c6 81       	ldd	r28, Z+6	; 0x06
    273a:	d7 81       	ldd	r29, Z+7	; 0x07
    273c:	9b 83       	std	Y+3, r25	; 0x03
    273e:	8a 83       	std	Y+2, r24	; 0x02
    2740:	9f 01       	movw	r18, r30
    2742:	2e 5f       	subi	r18, 0xFE	; 254
    2744:	3f 4f       	sbci	r19, 0xFF	; 255
    2746:	11 96       	adiw	r26, 0x01	; 1
    2748:	8d 91       	ld	r24, X+
    274a:	9c 91       	ld	r25, X
    274c:	12 97       	sbiw	r26, 0x02	; 2
    274e:	82 17       	cp	r24, r18
    2750:	93 07       	cpc	r25, r19
    2752:	21 f4       	brne	.+8      	; 0x275c <xTaskRemoveFromEventList+0x90>
    2754:	12 96       	adiw	r26, 0x02	; 2
    2756:	dc 93       	st	X, r29
    2758:	ce 93       	st	-X, r28
    275a:	11 97       	sbiw	r26, 0x01	; 1
    275c:	13 86       	std	Z+11, r1	; 0x0b
    275e:	12 86       	std	Z+10, r1	; 0x0a
    2760:	8c 91       	ld	r24, X
    2762:	81 50       	subi	r24, 0x01	; 1
    2764:	8c 93       	st	X, r24
    2766:	a6 89       	ldd	r26, Z+22	; 0x16
    2768:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <uxTopReadyPriority>
    276c:	8a 17       	cp	r24, r26
    276e:	10 f4       	brcc	.+4      	; 0x2774 <xTaskRemoveFromEventList+0xa8>
    2770:	a0 93 f8 03 	sts	0x03F8, r26	; 0x8003f8 <uxTopReadyPriority>
    2774:	89 e0       	ldi	r24, 0x09	; 9
    2776:	8a 9f       	mul	r24, r26
    2778:	d0 01       	movw	r26, r0
    277a:	11 24       	eor	r1, r1
    277c:	a2 5d       	subi	r26, 0xD2	; 210
    277e:	bb 4f       	sbci	r27, 0xFB	; 251
    2780:	11 96       	adiw	r26, 0x01	; 1
    2782:	0d 90       	ld	r0, X+
    2784:	bc 91       	ld	r27, X
    2786:	a0 2d       	mov	r26, r0
    2788:	b5 83       	std	Z+5, r27	; 0x05
    278a:	a4 83       	std	Z+4, r26	; 0x04
    278c:	14 96       	adiw	r26, 0x04	; 4
    278e:	4d 91       	ld	r20, X+
    2790:	5c 91       	ld	r21, X
    2792:	15 97       	sbiw	r26, 0x05	; 5
    2794:	57 83       	std	Z+7, r21	; 0x07
    2796:	46 83       	std	Z+6, r20	; 0x06
    2798:	14 96       	adiw	r26, 0x04	; 4
    279a:	cd 91       	ld	r28, X+
    279c:	dc 91       	ld	r29, X
    279e:	15 97       	sbiw	r26, 0x05	; 5
    27a0:	3b 83       	std	Y+3, r19	; 0x03
    27a2:	2a 83       	std	Y+2, r18	; 0x02
    27a4:	15 96       	adiw	r26, 0x05	; 5
    27a6:	3c 93       	st	X, r19
    27a8:	2e 93       	st	-X, r18
    27aa:	14 97       	sbiw	r26, 0x04	; 4
    27ac:	a6 89       	ldd	r26, Z+22	; 0x16
    27ae:	8a 9f       	mul	r24, r26
    27b0:	d0 01       	movw	r26, r0
    27b2:	11 24       	eor	r1, r1
    27b4:	a2 5d       	subi	r26, 0xD2	; 210
    27b6:	bb 4f       	sbci	r27, 0xFB	; 251
    27b8:	b3 87       	std	Z+11, r27	; 0x0b
    27ba:	a2 87       	std	Z+10, r26	; 0x0a
    27bc:	8c 91       	ld	r24, X
    27be:	8f 5f       	subi	r24, 0xFF	; 255
    27c0:	8c 93       	st	X, r24
    27c2:	1f c0       	rjmp	.+62     	; 0x2802 <xTaskRemoveFromEventList+0x136>
    27c4:	a0 91 10 04 	lds	r26, 0x0410	; 0x800410 <xPendingReadyList+0x1>
    27c8:	b0 91 11 04 	lds	r27, 0x0411	; 0x800411 <xPendingReadyList+0x2>
    27cc:	b7 87       	std	Z+15, r27	; 0x0f
    27ce:	a6 87       	std	Z+14, r26	; 0x0e
    27d0:	14 96       	adiw	r26, 0x04	; 4
    27d2:	2d 91       	ld	r18, X+
    27d4:	3c 91       	ld	r19, X
    27d6:	15 97       	sbiw	r26, 0x05	; 5
    27d8:	31 8b       	std	Z+17, r19	; 0x11
    27da:	20 8b       	std	Z+16, r18	; 0x10
    27dc:	14 96       	adiw	r26, 0x04	; 4
    27de:	cd 91       	ld	r28, X+
    27e0:	dc 91       	ld	r29, X
    27e2:	15 97       	sbiw	r26, 0x05	; 5
    27e4:	9b 83       	std	Y+3, r25	; 0x03
    27e6:	8a 83       	std	Y+2, r24	; 0x02
    27e8:	15 96       	adiw	r26, 0x05	; 5
    27ea:	9c 93       	st	X, r25
    27ec:	8e 93       	st	-X, r24
    27ee:	14 97       	sbiw	r26, 0x04	; 4
    27f0:	8f e0       	ldi	r24, 0x0F	; 15
    27f2:	94 e0       	ldi	r25, 0x04	; 4
    27f4:	95 8b       	std	Z+21, r25	; 0x15
    27f6:	84 8b       	std	Z+20, r24	; 0x14
    27f8:	80 91 0f 04 	lds	r24, 0x040F	; 0x80040f <xPendingReadyList>
    27fc:	8f 5f       	subi	r24, 0xFF	; 255
    27fe:	80 93 0f 04 	sts	0x040F, r24	; 0x80040f <xPendingReadyList>
    2802:	a0 91 52 04 	lds	r26, 0x0452	; 0x800452 <pxCurrentTCB>
    2806:	b0 91 53 04 	lds	r27, 0x0453	; 0x800453 <pxCurrentTCB+0x1>
    280a:	96 89       	ldd	r25, Z+22	; 0x16
    280c:	56 96       	adiw	r26, 0x16	; 22
    280e:	8c 91       	ld	r24, X
    2810:	89 17       	cp	r24, r25
    2812:	20 f4       	brcc	.+8      	; 0x281c <xTaskRemoveFromEventList+0x150>
    2814:	81 e0       	ldi	r24, 0x01	; 1
    2816:	80 93 f4 03 	sts	0x03F4, r24	; 0x8003f4 <xYieldPending>
    281a:	01 c0       	rjmp	.+2      	; 0x281e <xTaskRemoveFromEventList+0x152>
    281c:	80 e0       	ldi	r24, 0x00	; 0
    281e:	df 91       	pop	r29
    2820:	cf 91       	pop	r28
    2822:	08 95       	ret

00002824 <vTaskInternalSetTimeOutState>:
    2824:	20 91 f3 03 	lds	r18, 0x03F3	; 0x8003f3 <xNumOfOverflows>
    2828:	fc 01       	movw	r30, r24
    282a:	20 83       	st	Z, r18
    282c:	20 91 f9 03 	lds	r18, 0x03F9	; 0x8003f9 <xTickCount>
    2830:	30 91 fa 03 	lds	r19, 0x03FA	; 0x8003fa <xTickCount+0x1>
    2834:	32 83       	std	Z+2, r19	; 0x02
    2836:	21 83       	std	Z+1, r18	; 0x01
    2838:	08 95       	ret

0000283a <xTaskCheckForTimeOut>:
    283a:	cf 93       	push	r28
    283c:	df 93       	push	r29
    283e:	0f b6       	in	r0, 0x3f	; 63
    2840:	f8 94       	cli
    2842:	0f 92       	push	r0
    2844:	40 91 f9 03 	lds	r20, 0x03F9	; 0x8003f9 <xTickCount>
    2848:	50 91 fa 03 	lds	r21, 0x03FA	; 0x8003fa <xTickCount+0x1>
    284c:	db 01       	movw	r26, r22
    284e:	2d 91       	ld	r18, X+
    2850:	3c 91       	ld	r19, X
    2852:	2f 3f       	cpi	r18, 0xFF	; 255
    2854:	bf ef       	ldi	r27, 0xFF	; 255
    2856:	3b 07       	cpc	r19, r27
    2858:	d9 f0       	breq	.+54     	; 0x2890 <xTaskCheckForTimeOut+0x56>
    285a:	ec 01       	movw	r28, r24
    285c:	e9 81       	ldd	r30, Y+1	; 0x01
    285e:	fa 81       	ldd	r31, Y+2	; 0x02
    2860:	a0 91 f3 03 	lds	r26, 0x03F3	; 0x8003f3 <xNumOfOverflows>
    2864:	b8 81       	ld	r27, Y
    2866:	ba 17       	cp	r27, r26
    2868:	41 f0       	breq	.+16     	; 0x287a <xTaskCheckForTimeOut+0x40>
    286a:	4e 17       	cp	r20, r30
    286c:	5f 07       	cpc	r21, r31
    286e:	28 f0       	brcs	.+10     	; 0x287a <xTaskCheckForTimeOut+0x40>
    2870:	fb 01       	movw	r30, r22
    2872:	11 82       	std	Z+1, r1	; 0x01
    2874:	10 82       	st	Z, r1
    2876:	81 e0       	ldi	r24, 0x01	; 1
    2878:	0c c0       	rjmp	.+24     	; 0x2892 <xTaskCheckForTimeOut+0x58>
    287a:	4e 1b       	sub	r20, r30
    287c:	5f 0b       	sbc	r21, r31
    287e:	42 17       	cp	r20, r18
    2880:	53 07       	cpc	r21, r19
    2882:	b0 f7       	brcc	.-20     	; 0x2870 <xTaskCheckForTimeOut+0x36>
    2884:	fb 01       	movw	r30, r22
    2886:	24 1b       	sub	r18, r20
    2888:	35 0b       	sbc	r19, r21
    288a:	31 83       	std	Z+1, r19	; 0x01
    288c:	20 83       	st	Z, r18
    288e:	ca df       	rcall	.-108    	; 0x2824 <vTaskInternalSetTimeOutState>
    2890:	80 e0       	ldi	r24, 0x00	; 0
    2892:	0f 90       	pop	r0
    2894:	0f be       	out	0x3f, r0	; 63
    2896:	df 91       	pop	r29
    2898:	cf 91       	pop	r28
    289a:	08 95       	ret

0000289c <vTaskMissedYield>:
    289c:	81 e0       	ldi	r24, 0x01	; 1
    289e:	80 93 f4 03 	sts	0x03F4, r24	; 0x8003f4 <xYieldPending>
    28a2:	08 95       	ret

000028a4 <xTaskGetSchedulerState>:
    28a4:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <xSchedulerRunning>
    28a8:	88 23       	and	r24, r24
    28aa:	31 f0       	breq	.+12     	; 0x28b8 <xTaskGetSchedulerState+0x14>
    28ac:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <uxSchedulerSuspended>
    28b0:	88 23       	and	r24, r24
    28b2:	21 f0       	breq	.+8      	; 0x28bc <xTaskGetSchedulerState+0x18>
    28b4:	80 e0       	ldi	r24, 0x00	; 0
    28b6:	08 95       	ret
    28b8:	81 e0       	ldi	r24, 0x01	; 1
    28ba:	08 95       	ret
    28bc:	82 e0       	ldi	r24, 0x02	; 2
    28be:	08 95       	ret

000028c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    28c0:	0f 93       	push	r16
    28c2:	1f 93       	push	r17
    28c4:	cf 93       	push	r28
    28c6:	df 93       	push	r29
    28c8:	ec 01       	movw	r28, r24
        TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
        BaseType_t xReturn = pdFALSE;

        if( pxMutexHolder != NULL )
    28ca:	89 2b       	or	r24, r25
    28cc:	11 f4       	brne	.+4      	; 0x28d2 <xTaskPriorityDisinherit+0x12>
#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
        TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
        BaseType_t xReturn = pdFALSE;
    28ce:	80 e0       	ldi	r24, 0x00	; 0
    28d0:	43 c0       	rjmp	.+134    	; 0x2958 <xTaskPriorityDisinherit+0x98>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
    28d2:	8a a1       	ldd	r24, Y+34	; 0x22
    28d4:	81 50       	subi	r24, 0x01	; 1
    28d6:	8a a3       	std	Y+34, r24	; 0x22

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    28d8:	2e 89       	ldd	r18, Y+22	; 0x16
    28da:	99 a1       	ldd	r25, Y+33	; 0x21
    28dc:	29 17       	cp	r18, r25
    28de:	b9 f3       	breq	.-18     	; 0x28ce <xTaskPriorityDisinherit+0xe>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    28e0:	81 11       	cpse	r24, r1
    28e2:	f5 cf       	rjmp	.-22     	; 0x28ce <xTaskPriorityDisinherit+0xe>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    28e4:	8e 01       	movw	r16, r28
    28e6:	0e 5f       	subi	r16, 0xFE	; 254
    28e8:	1f 4f       	sbci	r17, 0xFF	; 255
    28ea:	c8 01       	movw	r24, r16
    28ec:	88 d2       	rcall	.+1296   	; 0x2dfe <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
    28ee:	89 a1       	ldd	r24, Y+33	; 0x21
    28f0:	8e 8b       	std	Y+22, r24	; 0x16

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    28f2:	48 2f       	mov	r20, r24
    28f4:	50 e0       	ldi	r21, 0x00	; 0
    28f6:	24 e0       	ldi	r18, 0x04	; 4
    28f8:	30 e0       	ldi	r19, 0x00	; 0
    28fa:	24 1b       	sub	r18, r20
    28fc:	35 0b       	sbc	r19, r21
    28fe:	3d 87       	std	Y+13, r19	; 0x0d
    2900:	2c 87       	std	Y+12, r18	; 0x0c
                    prvAddTaskToReadyList( pxTCB );
    2902:	90 91 f8 03 	lds	r25, 0x03F8	; 0x8003f8 <uxTopReadyPriority>
    2906:	98 17       	cp	r25, r24
    2908:	10 f4       	brcc	.+4      	; 0x290e <xTaskPriorityDisinherit+0x4e>
    290a:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <uxTopReadyPriority>
    290e:	89 e0       	ldi	r24, 0x09	; 9
    2910:	84 9f       	mul	r24, r20
    2912:	f0 01       	movw	r30, r0
    2914:	85 9f       	mul	r24, r21
    2916:	f0 0d       	add	r31, r0
    2918:	11 24       	eor	r1, r1
    291a:	e2 5d       	subi	r30, 0xD2	; 210
    291c:	fb 4f       	sbci	r31, 0xFB	; 251
    291e:	01 80       	ldd	r0, Z+1	; 0x01
    2920:	f2 81       	ldd	r31, Z+2	; 0x02
    2922:	e0 2d       	mov	r30, r0
    2924:	fd 83       	std	Y+5, r31	; 0x05
    2926:	ec 83       	std	Y+4, r30	; 0x04
    2928:	24 81       	ldd	r18, Z+4	; 0x04
    292a:	35 81       	ldd	r19, Z+5	; 0x05
    292c:	3f 83       	std	Y+7, r19	; 0x07
    292e:	2e 83       	std	Y+6, r18	; 0x06
    2930:	a4 81       	ldd	r26, Z+4	; 0x04
    2932:	b5 81       	ldd	r27, Z+5	; 0x05
    2934:	13 96       	adiw	r26, 0x03	; 3
    2936:	1c 93       	st	X, r17
    2938:	0e 93       	st	-X, r16
    293a:	12 97       	sbiw	r26, 0x02	; 2
    293c:	15 83       	std	Z+5, r17	; 0x05
    293e:	04 83       	std	Z+4, r16	; 0x04
    2940:	ee 89       	ldd	r30, Y+22	; 0x16
    2942:	8e 9f       	mul	r24, r30
    2944:	f0 01       	movw	r30, r0
    2946:	11 24       	eor	r1, r1
    2948:	e2 5d       	subi	r30, 0xD2	; 210
    294a:	fb 4f       	sbci	r31, 0xFB	; 251
    294c:	fb 87       	std	Y+11, r31	; 0x0b
    294e:	ea 87       	std	Y+10, r30	; 0x0a
    2950:	80 81       	ld	r24, Z
    2952:	8f 5f       	subi	r24, 0xFF	; 255
    2954:	80 83       	st	Z, r24
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
    2956:	81 e0       	ldi	r24, 0x01	; 1
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2958:	df 91       	pop	r29
    295a:	cf 91       	pop	r28
    295c:	1f 91       	pop	r17
    295e:	0f 91       	pop	r16
    2960:	08 95       	ret

00002962 <prvCheckForValidListAndQueue>:
    2962:	0f 93       	push	r16
    2964:	0f b6       	in	r0, 0x3f	; 63
    2966:	f8 94       	cli
    2968:	0f 92       	push	r0
    296a:	80 91 aa 04 	lds	r24, 0x04AA	; 0x8004aa <xTimerQueue>
    296e:	90 91 ab 04 	lds	r25, 0x04AB	; 0x8004ab <xTimerQueue+0x1>
    2972:	89 2b       	or	r24, r25
    2974:	f1 f4       	brne	.+60     	; 0x29b2 <prvCheckForValidListAndQueue+0x50>
    2976:	89 eb       	ldi	r24, 0xB9	; 185
    2978:	94 e0       	ldi	r25, 0x04	; 4
    297a:	f7 d1       	rcall	.+1006   	; 0x2d6a <vListInitialise>
    297c:	80 eb       	ldi	r24, 0xB0	; 176
    297e:	94 e0       	ldi	r25, 0x04	; 4
    2980:	f4 d1       	rcall	.+1000   	; 0x2d6a <vListInitialise>
    2982:	89 eb       	ldi	r24, 0xB9	; 185
    2984:	94 e0       	ldi	r25, 0x04	; 4
    2986:	90 93 af 04 	sts	0x04AF, r25	; 0x8004af <pxCurrentTimerList+0x1>
    298a:	80 93 ae 04 	sts	0x04AE, r24	; 0x8004ae <pxCurrentTimerList>
    298e:	80 eb       	ldi	r24, 0xB0	; 176
    2990:	94 e0       	ldi	r25, 0x04	; 4
    2992:	90 93 ad 04 	sts	0x04AD, r25	; 0x8004ad <pxOverflowTimerList+0x1>
    2996:	80 93 ac 04 	sts	0x04AC, r24	; 0x8004ac <pxOverflowTimerList>
    299a:	00 e0       	ldi	r16, 0x00	; 0
    299c:	24 e5       	ldi	r18, 0x54	; 84
    299e:	34 e0       	ldi	r19, 0x04	; 4
    29a0:	44 e7       	ldi	r20, 0x74	; 116
    29a2:	54 e0       	ldi	r21, 0x04	; 4
    29a4:	65 e0       	ldi	r22, 0x05	; 5
    29a6:	8a e0       	ldi	r24, 0x0A	; 10
    29a8:	5f d8       	rcall	.-3906   	; 0x1a68 <xQueueGenericCreateStatic>
    29aa:	90 93 ab 04 	sts	0x04AB, r25	; 0x8004ab <xTimerQueue+0x1>
    29ae:	80 93 aa 04 	sts	0x04AA, r24	; 0x8004aa <xTimerQueue>
    29b2:	0f 90       	pop	r0
    29b4:	0f be       	out	0x3f, r0	; 63
    29b6:	0f 91       	pop	r16
    29b8:	08 95       	ret

000029ba <prvInsertTimerInActiveList>:
    29ba:	fc 01       	movw	r30, r24
    29bc:	73 83       	std	Z+3, r23	; 0x03
    29be:	62 83       	std	Z+2, r22	; 0x02
    29c0:	91 87       	std	Z+9, r25	; 0x09
    29c2:	80 87       	std	Z+8, r24	; 0x08
    29c4:	46 17       	cp	r20, r22
    29c6:	57 07       	cpc	r21, r23
    29c8:	78 f0       	brcs	.+30     	; 0x29e8 <prvInsertTimerInActiveList+0x2e>
    29ca:	42 1b       	sub	r20, r18
    29cc:	53 0b       	sbc	r21, r19
    29ce:	84 85       	ldd	r24, Z+12	; 0x0c
    29d0:	95 85       	ldd	r25, Z+13	; 0x0d
    29d2:	48 17       	cp	r20, r24
    29d4:	59 07       	cpc	r21, r25
    29d6:	c0 f4       	brcc	.+48     	; 0x2a08 <prvInsertTimerInActiveList+0x4e>
    29d8:	bf 01       	movw	r22, r30
    29da:	6e 5f       	subi	r22, 0xFE	; 254
    29dc:	7f 4f       	sbci	r23, 0xFF	; 255
    29de:	80 91 ac 04 	lds	r24, 0x04AC	; 0x8004ac <pxOverflowTimerList>
    29e2:	90 91 ad 04 	lds	r25, 0x04AD	; 0x8004ad <pxOverflowTimerList+0x1>
    29e6:	0d c0       	rjmp	.+26     	; 0x2a02 <prvInsertTimerInActiveList+0x48>
    29e8:	42 17       	cp	r20, r18
    29ea:	53 07       	cpc	r21, r19
    29ec:	18 f4       	brcc	.+6      	; 0x29f4 <prvInsertTimerInActiveList+0x3a>
    29ee:	62 17       	cp	r22, r18
    29f0:	73 07       	cpc	r23, r19
    29f2:	50 f4       	brcc	.+20     	; 0x2a08 <prvInsertTimerInActiveList+0x4e>
    29f4:	bf 01       	movw	r22, r30
    29f6:	6e 5f       	subi	r22, 0xFE	; 254
    29f8:	7f 4f       	sbci	r23, 0xFF	; 255
    29fa:	80 91 ae 04 	lds	r24, 0x04AE	; 0x8004ae <pxCurrentTimerList>
    29fe:	90 91 af 04 	lds	r25, 0x04AF	; 0x8004af <pxCurrentTimerList+0x1>
    2a02:	c5 d1       	rcall	.+906    	; 0x2d8e <vListInsert>
    2a04:	80 e0       	ldi	r24, 0x00	; 0
    2a06:	08 95       	ret
    2a08:	81 e0       	ldi	r24, 0x01	; 1
    2a0a:	08 95       	ret

00002a0c <prvReloadTimer>:
    2a0c:	ef 92       	push	r14
    2a0e:	ff 92       	push	r15
    2a10:	0f 93       	push	r16
    2a12:	1f 93       	push	r17
    2a14:	cf 93       	push	r28
    2a16:	df 93       	push	r29
    2a18:	ec 01       	movw	r28, r24
    2a1a:	8b 01       	movw	r16, r22
    2a1c:	7a 01       	movw	r14, r20
    2a1e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2a20:	7d 85       	ldd	r23, Y+13	; 0x0d
    2a22:	60 0f       	add	r22, r16
    2a24:	71 1f       	adc	r23, r17
    2a26:	98 01       	movw	r18, r16
    2a28:	a7 01       	movw	r20, r14
    2a2a:	ce 01       	movw	r24, r28
    2a2c:	c6 df       	rcall	.-116    	; 0x29ba <prvInsertTimerInActiveList>
    2a2e:	88 23       	and	r24, r24
    2a30:	49 f0       	breq	.+18     	; 0x2a44 <prvReloadTimer+0x38>
    2a32:	8c 85       	ldd	r24, Y+12	; 0x0c
    2a34:	9d 85       	ldd	r25, Y+13	; 0x0d
    2a36:	08 0f       	add	r16, r24
    2a38:	19 1f       	adc	r17, r25
    2a3a:	e8 89       	ldd	r30, Y+16	; 0x10
    2a3c:	f9 89       	ldd	r31, Y+17	; 0x11
    2a3e:	ce 01       	movw	r24, r28
    2a40:	19 95       	eicall
    2a42:	ed cf       	rjmp	.-38     	; 0x2a1e <prvReloadTimer+0x12>
    2a44:	df 91       	pop	r29
    2a46:	cf 91       	pop	r28
    2a48:	1f 91       	pop	r17
    2a4a:	0f 91       	pop	r16
    2a4c:	ff 90       	pop	r15
    2a4e:	ef 90       	pop	r14
    2a50:	08 95       	ret

00002a52 <prvProcessExpiredTimer>:
    2a52:	ef 92       	push	r14
    2a54:	ff 92       	push	r15
    2a56:	0f 93       	push	r16
    2a58:	1f 93       	push	r17
    2a5a:	cf 93       	push	r28
    2a5c:	df 93       	push	r29
    2a5e:	8c 01       	movw	r16, r24
    2a60:	7b 01       	movw	r14, r22
    2a62:	e0 91 ae 04 	lds	r30, 0x04AE	; 0x8004ae <pxCurrentTimerList>
    2a66:	f0 91 af 04 	lds	r31, 0x04AF	; 0x8004af <pxCurrentTimerList+0x1>
    2a6a:	05 80       	ldd	r0, Z+5	; 0x05
    2a6c:	f6 81       	ldd	r31, Z+6	; 0x06
    2a6e:	e0 2d       	mov	r30, r0
    2a70:	c6 81       	ldd	r28, Z+6	; 0x06
    2a72:	d7 81       	ldd	r29, Z+7	; 0x07
    2a74:	ce 01       	movw	r24, r28
    2a76:	02 96       	adiw	r24, 0x02	; 2
    2a78:	c2 d1       	rcall	.+900    	; 0x2dfe <uxListRemove>
    2a7a:	8a 89       	ldd	r24, Y+18	; 0x12
    2a7c:	82 ff       	sbrs	r24, 2
    2a7e:	05 c0       	rjmp	.+10     	; 0x2a8a <prvProcessExpiredTimer+0x38>
    2a80:	a7 01       	movw	r20, r14
    2a82:	b8 01       	movw	r22, r16
    2a84:	ce 01       	movw	r24, r28
    2a86:	c2 df       	rcall	.-124    	; 0x2a0c <prvReloadTimer>
    2a88:	02 c0       	rjmp	.+4      	; 0x2a8e <prvProcessExpiredTimer+0x3c>
    2a8a:	8e 7f       	andi	r24, 0xFE	; 254
    2a8c:	8a 8b       	std	Y+18, r24	; 0x12
    2a8e:	e8 89       	ldd	r30, Y+16	; 0x10
    2a90:	f9 89       	ldd	r31, Y+17	; 0x11
    2a92:	ce 01       	movw	r24, r28
    2a94:	df 91       	pop	r29
    2a96:	cf 91       	pop	r28
    2a98:	1f 91       	pop	r17
    2a9a:	0f 91       	pop	r16
    2a9c:	ff 90       	pop	r15
    2a9e:	ef 90       	pop	r14
    2aa0:	19 94       	eijmp

00002aa2 <prvSwitchTimerLists>:
    2aa2:	e0 91 ae 04 	lds	r30, 0x04AE	; 0x8004ae <pxCurrentTimerList>
    2aa6:	f0 91 af 04 	lds	r31, 0x04AF	; 0x8004af <pxCurrentTimerList+0x1>
    2aaa:	80 81       	ld	r24, Z
    2aac:	88 23       	and	r24, r24
    2aae:	49 f0       	breq	.+18     	; 0x2ac2 <prvSwitchTimerLists+0x20>
    2ab0:	05 80       	ldd	r0, Z+5	; 0x05
    2ab2:	f6 81       	ldd	r31, Z+6	; 0x06
    2ab4:	e0 2d       	mov	r30, r0
    2ab6:	6f ef       	ldi	r22, 0xFF	; 255
    2ab8:	7f ef       	ldi	r23, 0xFF	; 255
    2aba:	80 81       	ld	r24, Z
    2abc:	91 81       	ldd	r25, Z+1	; 0x01
    2abe:	c9 df       	rcall	.-110    	; 0x2a52 <prvProcessExpiredTimer>
    2ac0:	f0 cf       	rjmp	.-32     	; 0x2aa2 <prvSwitchTimerLists>
    2ac2:	80 91 ac 04 	lds	r24, 0x04AC	; 0x8004ac <pxOverflowTimerList>
    2ac6:	90 91 ad 04 	lds	r25, 0x04AD	; 0x8004ad <pxOverflowTimerList+0x1>
    2aca:	90 93 af 04 	sts	0x04AF, r25	; 0x8004af <pxCurrentTimerList+0x1>
    2ace:	80 93 ae 04 	sts	0x04AE, r24	; 0x8004ae <pxCurrentTimerList>
    2ad2:	f0 93 ad 04 	sts	0x04AD, r31	; 0x8004ad <pxOverflowTimerList+0x1>
    2ad6:	e0 93 ac 04 	sts	0x04AC, r30	; 0x8004ac <pxOverflowTimerList>
    2ada:	08 95       	ret

00002adc <xTimerCreateTimerTask>:
    2adc:	cf 92       	push	r12
    2ade:	df 92       	push	r13
    2ae0:	ef 92       	push	r14
    2ae2:	ff 92       	push	r15
    2ae4:	0f 93       	push	r16
    2ae6:	cf 93       	push	r28
    2ae8:	df 93       	push	r29
    2aea:	00 d0       	rcall	.+0      	; 0x2aec <xTimerCreateTimerTask+0x10>
    2aec:	00 d0       	rcall	.+0      	; 0x2aee <xTimerCreateTimerTask+0x12>
    2aee:	cd b7       	in	r28, 0x3d	; 61
    2af0:	de b7       	in	r29, 0x3e	; 62
    2af2:	37 df       	rcall	.-402    	; 0x2962 <prvCheckForValidListAndQueue>
    2af4:	80 91 aa 04 	lds	r24, 0x04AA	; 0x8004aa <xTimerQueue>
    2af8:	90 91 ab 04 	lds	r25, 0x04AB	; 0x8004ab <xTimerQueue+0x1>
    2afc:	89 2b       	or	r24, r25
    2afe:	19 f1       	breq	.+70     	; 0x2b46 <xTimerCreateTimerTask+0x6a>
    2b00:	1e 82       	std	Y+6, r1	; 0x06
    2b02:	1d 82       	std	Y+5, r1	; 0x05
    2b04:	1c 82       	std	Y+4, r1	; 0x04
    2b06:	1b 82       	std	Y+3, r1	; 0x03
    2b08:	ae 01       	movw	r20, r28
    2b0a:	4f 5f       	subi	r20, 0xFF	; 255
    2b0c:	5f 4f       	sbci	r21, 0xFF	; 255
    2b0e:	be 01       	movw	r22, r28
    2b10:	6d 5f       	subi	r22, 0xFD	; 253
    2b12:	7f 4f       	sbci	r23, 0xFF	; 255
    2b14:	ce 01       	movw	r24, r28
    2b16:	05 96       	adiw	r24, 0x05	; 5
    2b18:	d3 d0       	rcall	.+422    	; 0x2cc0 <vApplicationGetTimerTaskMemory>
    2b1a:	cd 80       	ldd	r12, Y+5	; 0x05
    2b1c:	de 80       	ldd	r13, Y+6	; 0x06
    2b1e:	eb 80       	ldd	r14, Y+3	; 0x03
    2b20:	fc 80       	ldd	r15, Y+4	; 0x04
    2b22:	49 81       	ldd	r20, Y+1	; 0x01
    2b24:	5a 81       	ldd	r21, Y+2	; 0x02
    2b26:	03 e0       	ldi	r16, 0x03	; 3
    2b28:	20 e0       	ldi	r18, 0x00	; 0
    2b2a:	30 e0       	ldi	r19, 0x00	; 0
    2b2c:	68 e6       	ldi	r22, 0x68	; 104
    2b2e:	72 e0       	ldi	r23, 0x02	; 2
    2b30:	83 e7       	ldi	r24, 0x73	; 115
    2b32:	91 e0       	ldi	r25, 0x01	; 1
    2b34:	b9 da       	rcall	.-2702   	; 0x20a8 <xTaskCreateStatic>
    2b36:	9c 01       	movw	r18, r24
    2b38:	90 93 a9 04 	sts	0x04A9, r25	; 0x8004a9 <xTimerTaskHandle+0x1>
    2b3c:	80 93 a8 04 	sts	0x04A8, r24	; 0x8004a8 <xTimerTaskHandle>
    2b40:	81 e0       	ldi	r24, 0x01	; 1
    2b42:	23 2b       	or	r18, r19
    2b44:	09 f4       	brne	.+2      	; 0x2b48 <xTimerCreateTimerTask+0x6c>
    2b46:	80 e0       	ldi	r24, 0x00	; 0
    2b48:	26 96       	adiw	r28, 0x06	; 6
    2b4a:	0f b6       	in	r0, 0x3f	; 63
    2b4c:	f8 94       	cli
    2b4e:	de bf       	out	0x3e, r29	; 62
    2b50:	0f be       	out	0x3f, r0	; 63
    2b52:	cd bf       	out	0x3d, r28	; 61
    2b54:	df 91       	pop	r29
    2b56:	cf 91       	pop	r28
    2b58:	0f 91       	pop	r16
    2b5a:	ff 90       	pop	r15
    2b5c:	ef 90       	pop	r14
    2b5e:	df 90       	pop	r13
    2b60:	cf 90       	pop	r12
    2b62:	08 95       	ret

00002b64 <xTimerCreateStatic>:
                                          const TickType_t xTimerPeriodInTicks,
                                          const BaseType_t xAutoReload,
                                          void * const pvTimerID,
                                          TimerCallbackFunction_t pxCallbackFunction,
                                          StaticTimer_t * pxTimerBuffer )
        {
    2b64:	7f 92       	push	r7
    2b66:	8f 92       	push	r8
    2b68:	9f 92       	push	r9
    2b6a:	af 92       	push	r10
    2b6c:	bf 92       	push	r11
    2b6e:	cf 92       	push	r12
    2b70:	df 92       	push	r13
    2b72:	ef 92       	push	r14
    2b74:	ff 92       	push	r15
    2b76:	0f 93       	push	r16
    2b78:	1f 93       	push	r17
    2b7a:	cf 93       	push	r28
    2b7c:	df 93       	push	r29
    2b7e:	4c 01       	movw	r8, r24
    2b80:	5b 01       	movw	r10, r22
    2b82:	74 2e       	mov	r7, r20
    2b84:	69 01       	movw	r12, r18
    2b86:	e7 01       	movw	r28, r14

            /* A pointer to a StaticTimer_t structure MUST be provided, use it. */
            configASSERT( pxTimerBuffer );
            pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */

            if( pxNewTimer != NULL )
    2b88:	20 97       	sbiw	r28, 0x00	; 0
    2b8a:	99 f0       	breq	.+38     	; 0x2bb2 <xTimerCreateStatic+0x4e>
            {
                /* Timers can be created statically or dynamically so note this
                 * timer was created statically in case it is later deleted.  The
                 * auto-reload bit may get set in prvInitialiseNewTimer(). */
                pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
    2b8c:	82 e0       	ldi	r24, 0x02	; 2
    2b8e:	8a 8b       	std	Y+18, r24	; 0x12
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
    2b90:	e8 de       	rcall	.-560    	; 0x2962 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
    2b92:	99 82       	std	Y+1, r9	; 0x01
    2b94:	88 82       	st	Y, r8
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    2b96:	bd 86       	std	Y+13, r11	; 0x0d
    2b98:	ac 86       	std	Y+12, r10	; 0x0c
        pxNewTimer->pvTimerID = pvTimerID;
    2b9a:	df 86       	std	Y+15, r13	; 0x0f
    2b9c:	ce 86       	std	Y+14, r12	; 0x0e
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    2b9e:	19 8b       	std	Y+17, r17	; 0x11
    2ba0:	08 8b       	std	Y+16, r16	; 0x10
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    2ba2:	c7 01       	movw	r24, r14
    2ba4:	02 96       	adiw	r24, 0x02	; 2
    2ba6:	ef d0       	rcall	.+478    	; 0x2d86 <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
    2ba8:	77 20       	and	r7, r7
    2baa:	19 f0       	breq	.+6      	; 0x2bb2 <xTimerCreateStatic+0x4e>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
    2bac:	8a 89       	ldd	r24, Y+18	; 0x12
    2bae:	84 60       	ori	r24, 0x04	; 4
    2bb0:	8a 8b       	std	Y+18, r24	; 0x12

                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
    2bb2:	ce 01       	movw	r24, r28
    2bb4:	df 91       	pop	r29
    2bb6:	cf 91       	pop	r28
    2bb8:	1f 91       	pop	r17
    2bba:	0f 91       	pop	r16
    2bbc:	ff 90       	pop	r15
    2bbe:	ef 90       	pop	r14
    2bc0:	df 90       	pop	r13
    2bc2:	cf 90       	pop	r12
    2bc4:	bf 90       	pop	r11
    2bc6:	af 90       	pop	r10
    2bc8:	9f 90       	pop	r9
    2bca:	8f 90       	pop	r8
    2bcc:	7f 90       	pop	r7
    2bce:	08 95       	ret

00002bd0 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    2bd0:	0f 93       	push	r16
    2bd2:	1f 93       	push	r17
    2bd4:	cf 93       	push	r28
    2bd6:	df 93       	push	r29
    2bd8:	00 d0       	rcall	.+0      	; 0x2bda <xTimerGenericCommand+0xa>
    2bda:	1f 92       	push	r1
    2bdc:	1f 92       	push	r1
    2bde:	cd b7       	in	r28, 0x3d	; 61
    2be0:	de b7       	in	r29, 0x3e	; 62

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2be2:	a0 91 aa 04 	lds	r26, 0x04AA	; 0x8004aa <xTimerQueue>
    2be6:	b0 91 ab 04 	lds	r27, 0x04AB	; 0x8004ab <xTimerQueue+0x1>
    2bea:	10 97       	sbiw	r26, 0x00	; 0
    2bec:	21 f1       	breq	.+72     	; 0x2c36 <xTimerGenericCommand+0x66>
    2bee:	f9 01       	movw	r30, r18
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2bf0:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2bf2:	5b 83       	std	Y+3, r21	; 0x03
    2bf4:	4a 83       	std	Y+2, r20	; 0x02
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    2bf6:	9d 83       	std	Y+5, r25	; 0x05
    2bf8:	8c 83       	std	Y+4, r24	; 0x04

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2bfa:	66 30       	cpi	r22, 0x06	; 6
    2bfc:	9c f4       	brge	.+38     	; 0x2c24 <xTimerGenericCommand+0x54>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2bfe:	52 de       	rcall	.-860    	; 0x28a4 <xTaskGetSchedulerState>
    2c00:	e0 91 aa 04 	lds	r30, 0x04AA	; 0x8004aa <xTimerQueue>
    2c04:	f0 91 ab 04 	lds	r31, 0x04AB	; 0x8004ab <xTimerQueue+0x1>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2c08:	20 e0       	ldi	r18, 0x00	; 0
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
            xMessage.u.xTimerParameters.pxTimer = xTimer;

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2c0a:	82 30       	cpi	r24, 0x02	; 2
    2c0c:	11 f4       	brne	.+4      	; 0x2c12 <xTimerGenericCommand+0x42>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2c0e:	a8 01       	movw	r20, r16
    2c10:	02 c0       	rjmp	.+4      	; 0x2c16 <xTimerGenericCommand+0x46>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2c12:	40 e0       	ldi	r20, 0x00	; 0
    2c14:	50 e0       	ldi	r21, 0x00	; 0
    2c16:	be 01       	movw	r22, r28
    2c18:	6f 5f       	subi	r22, 0xFF	; 255
    2c1a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c1c:	cf 01       	movw	r24, r30
    2c1e:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <xQueueGenericSend>
    2c22:	0a c0       	rjmp	.+20     	; 0x2c38 <xTimerGenericCommand+0x68>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2c24:	20 e0       	ldi	r18, 0x00	; 0
    2c26:	af 01       	movw	r20, r30
    2c28:	be 01       	movw	r22, r28
    2c2a:	6f 5f       	subi	r22, 0xFF	; 255
    2c2c:	7f 4f       	sbci	r23, 0xFF	; 255
    2c2e:	cd 01       	movw	r24, r26
    2c30:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <xQueueGenericSendFromISR>
    2c34:	01 c0       	rjmp	.+2      	; 0x2c38 <xTimerGenericCommand+0x68>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    2c36:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2c38:	0f 90       	pop	r0
    2c3a:	0f 90       	pop	r0
    2c3c:	0f 90       	pop	r0
    2c3e:	0f 90       	pop	r0
    2c40:	0f 90       	pop	r0
    2c42:	df 91       	pop	r29
    2c44:	cf 91       	pop	r28
    2c46:	1f 91       	pop	r17
    2c48:	0f 91       	pop	r16
    2c4a:	08 95       	ret

00002c4c <initVariant>:
    prvSetMainLedOn(); // Main LED on.
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    2c4c:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <__malloc_margin>
    2c50:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <__malloc_margin+0x1>
    2c54:	8f ef       	ldi	r24, 0xFF	; 255
    2c56:	91 e2       	ldi	r25, 0x21	; 33
    2c58:	82 1b       	sub	r24, r18
    2c5a:	93 0b       	sbc	r25, r19
    2c5c:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    2c60:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    2c64:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <setup>
    2c68:	55 ca       	rjmp	.-2902   	; 0x2114 <vTaskStartScheduler>
    2c6a:	08 95       	ret

00002c6c <vApplicationIdleHook>:
    2c6c:	0e 94 21 05 	call	0xa42	; 0xa42 <loop>
    2c70:	80 e0       	ldi	r24, 0x00	; 0
    2c72:	90 e0       	ldi	r25, 0x00	; 0
    2c74:	89 2b       	or	r24, r25
    2c76:	11 f0       	breq	.+4      	; 0x2c7c <vApplicationIdleHook+0x10>
    2c78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    2c7c:	08 95       	ret

00002c7e <_Z15prvSetMainLedOnv>:
    2c7e:	27 9a       	sbi	0x04, 7	; 4
    2c80:	2f 9a       	sbi	0x05, 7	; 5
    2c82:	08 95       	ret

00002c84 <_Z15prvBlinkMainLedv>:
    2c84:	1f 9a       	sbi	0x03, 7	; 3
    2c86:	08 95       	ret

00002c88 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__ ((unused)),
                                    char * pcTaskName __attribute__ ((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    2c88:	fa df       	rcall	.-12     	; 0x2c7e <_Z15prvSetMainLedOnv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2c8a:	2f ef       	ldi	r18, 0xFF	; 255
    2c8c:	87 ea       	ldi	r24, 0xA7	; 167
    2c8e:	91 e6       	ldi	r25, 0x61	; 97
    2c90:	21 50       	subi	r18, 0x01	; 1
    2c92:	80 40       	sbci	r24, 0x00	; 0
    2c94:	90 40       	sbci	r25, 0x00	; 0
    2c96:	e1 f7       	brne	.-8      	; 0x2c90 <vApplicationStackOverflowHook+0x8>
    2c98:	00 c0       	rjmp	.+0      	; 0x2c9a <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    2c9a:	00 00       	nop
    2c9c:	f3 df       	rcall	.-26     	; 0x2c84 <_Z15prvBlinkMainLedv>
    2c9e:	f5 cf       	rjmp	.-22     	; 0x2c8a <vApplicationStackOverflowHook+0x2>

00002ca0 <vApplicationGetIdleTaskMemory>:
                                    configSTACK_DEPTH_TYPE * puxIdleTaskStackSize )
{
    static StaticTask_t xIdleTaskTCB;
    static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
    2ca0:	20 e0       	ldi	r18, 0x00	; 0
    2ca2:	36 e0       	ldi	r19, 0x06	; 6
    2ca4:	fc 01       	movw	r30, r24
    2ca6:	31 83       	std	Z+1, r19	; 0x01
    2ca8:	20 83       	st	Z, r18
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
    2caa:	80 e4       	ldi	r24, 0x40	; 64
    2cac:	95 e0       	ldi	r25, 0x05	; 5
    2cae:	fb 01       	movw	r30, r22
    2cb0:	91 83       	std	Z+1, r25	; 0x01
    2cb2:	80 83       	st	Z, r24
    *puxIdleTaskStackSize = configMINIMAL_STACK_SIZE;
    2cb4:	80 ec       	ldi	r24, 0xC0	; 192
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
    2cb8:	fa 01       	movw	r30, r20
    2cba:	91 83       	std	Z+1, r25	; 0x01
    2cbc:	80 83       	st	Z, r24
    2cbe:	08 95       	ret

00002cc0 <vApplicationGetTimerTaskMemory>:
                                     configSTACK_DEPTH_TYPE * puxTimerTaskStackSize )
{
    static StaticTask_t xTimerTaskTCB;
    static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
    2cc0:	27 e1       	ldi	r18, 0x17	; 23
    2cc2:	35 e0       	ldi	r19, 0x05	; 5
    2cc4:	fc 01       	movw	r30, r24
    2cc6:	31 83       	std	Z+1, r19	; 0x01
    2cc8:	20 83       	st	Z, r18
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
    2cca:	82 ec       	ldi	r24, 0xC2	; 194
    2ccc:	94 e0       	ldi	r25, 0x04	; 4
    2cce:	fb 01       	movw	r30, r22
    2cd0:	91 83       	std	Z+1, r25	; 0x01
    2cd2:	80 83       	st	Z, r24
    *puxTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
    2cd4:	85 e5       	ldi	r24, 0x55	; 85
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	fa 01       	movw	r30, r20
    2cda:	91 83       	std	Z+1, r25	; 0x01
    2cdc:	80 83       	st	Z, r24
    2cde:	08 95       	ret

00002ce0 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    2ce0:	cf 93       	push	r28
  uint8_t sreg = SREG;
    2ce2:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    2ce4:	f8 94       	cli
  if (!initialized) {
    2ce6:	80 91 2c 06 	lds	r24, 0x062C	; 0x80062c <_ZN8SPIClass11initializedE>
    2cea:	81 11       	cpse	r24, r1
    2cec:	27 c0       	rjmp	.+78     	; 0x2d3c <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    2cee:	e3 e3       	ldi	r30, 0x33	; 51
    2cf0:	f2 e0       	ldi	r31, 0x02	; 2
    2cf2:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    2cf4:	ed ee       	ldi	r30, 0xED	; 237
    2cf6:	f1 e0       	ldi	r31, 0x01	; 1
    2cf8:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    2cfa:	e8 2f       	mov	r30, r24
    2cfc:	f0 e0       	ldi	r31, 0x00	; 0
    2cfe:	ee 0f       	add	r30, r30
    2d00:	ff 1f       	adc	r31, r31
    2d02:	e8 58       	subi	r30, 0x88	; 136
    2d04:	fd 4f       	sbci	r31, 0xFD	; 253
    2d06:	a5 91       	lpm	r26, Z+
    2d08:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    2d0a:	ec 91       	ld	r30, X
    2d0c:	e9 23       	and	r30, r25
    2d0e:	21 f4       	brne	.+8      	; 0x2d18 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    2d10:	61 e0       	ldi	r22, 0x01	; 1
    2d12:	85 e3       	ldi	r24, 0x35	; 53
    2d14:	0e 94 d7 06 	call	0xdae	; 0xdae <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    2d18:	61 e0       	ldi	r22, 0x01	; 1
    2d1a:	85 e3       	ldi	r24, 0x35	; 53
    2d1c:	0e 94 9b 06 	call	0xd36	; 0xd36 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    2d20:	8c b5       	in	r24, 0x2c	; 44
    2d22:	80 61       	ori	r24, 0x10	; 16
    2d24:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    2d26:	8c b5       	in	r24, 0x2c	; 44
    2d28:	80 64       	ori	r24, 0x40	; 64
    2d2a:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    2d2c:	61 e0       	ldi	r22, 0x01	; 1
    2d2e:	84 e3       	ldi	r24, 0x34	; 52
    2d30:	0e 94 9b 06 	call	0xd36	; 0xd36 <pinMode>
    pinMode(MOSI, OUTPUT);
    2d34:	61 e0       	ldi	r22, 0x01	; 1
    2d36:	83 e3       	ldi	r24, 0x33	; 51
    2d38:	0e 94 9b 06 	call	0xd36	; 0xd36 <pinMode>
  }
  initialized++; // reference count
    2d3c:	80 91 2c 06 	lds	r24, 0x062C	; 0x80062c <_ZN8SPIClass11initializedE>
    2d40:	8f 5f       	subi	r24, 0xFF	; 255
    2d42:	80 93 2c 06 	sts	0x062C, r24	; 0x80062c <_ZN8SPIClass11initializedE>
  SREG = sreg;
    2d46:	cf bf       	out	0x3f, r28	; 63
}
    2d48:	cf 91       	pop	r28
    2d4a:	08 95       	ret

00002d4c <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2d4c:	08 95       	ret

00002d4e <vPortFree>:
    return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
    2d4e:	cf 93       	push	r28
    2d50:	df 93       	push	r29
    if( pv != NULL )
    2d52:	00 97       	sbiw	r24, 0x00	; 0
    2d54:	39 f0       	breq	.+14     	; 0x2d64 <vPortFree+0x16>
    2d56:	ec 01       	movw	r28, r24
    {
        vTaskSuspendAll();
    2d58:	26 da       	rcall	.-2996   	; 0x21a6 <vTaskSuspendAll>
        {
            free( pv );
    2d5a:	ce 01       	movw	r24, r28
    2d5c:	2e d2       	rcall	.+1116   	; 0x31ba <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
    }
}
    2d5e:	df 91       	pop	r29
        vTaskSuspendAll();
        {
            free( pv );
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
    2d60:	cf 91       	pop	r28
    2d62:	3a cb       	rjmp	.-2444   	; 0x23d8 <xTaskResumeAll>
    }
}
    2d64:	df 91       	pop	r29
    2d66:	cf 91       	pop	r28
    2d68:	08 95       	ret

00002d6a <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
    2d6a:	fc 01       	movw	r30, r24
    2d6c:	03 96       	adiw	r24, 0x03	; 3
    2d6e:	92 83       	std	Z+2, r25	; 0x02
    2d70:	81 83       	std	Z+1, r24	; 0x01
    2d72:	2f ef       	ldi	r18, 0xFF	; 255
    2d74:	3f ef       	ldi	r19, 0xFF	; 255
    2d76:	34 83       	std	Z+4, r19	; 0x04
    2d78:	23 83       	std	Z+3, r18	; 0x03
    2d7a:	96 83       	std	Z+6, r25	; 0x06
    2d7c:	85 83       	std	Z+5, r24	; 0x05
    2d7e:	90 87       	std	Z+8, r25	; 0x08
    2d80:	87 83       	std	Z+7, r24	; 0x07
    2d82:	10 82       	st	Z, r1
    2d84:	08 95       	ret

00002d86 <vListInitialiseItem>:
    2d86:	fc 01       	movw	r30, r24
    2d88:	11 86       	std	Z+9, r1	; 0x09
    2d8a:	10 86       	std	Z+8, r1	; 0x08
    2d8c:	08 95       	ret

00002d8e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
    2d8e:	0f 93       	push	r16
    2d90:	1f 93       	push	r17
    2d92:	cf 93       	push	r28
    2d94:	df 93       	push	r29
    2d96:	8c 01       	movw	r16, r24
    2d98:	fb 01       	movw	r30, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    2d9a:	80 81       	ld	r24, Z
    2d9c:	91 81       	ldd	r25, Z+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    2d9e:	8f 3f       	cpi	r24, 0xFF	; 255
    2da0:	2f ef       	ldi	r18, 0xFF	; 255
    2da2:	92 07       	cpc	r25, r18
    2da4:	21 f4       	brne	.+8      	; 0x2dae <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    2da6:	e8 01       	movw	r28, r16
    2da8:	af 81       	ldd	r26, Y+7	; 0x07
    2daa:	b8 85       	ldd	r27, Y+8	; 0x08
    2dac:	0e c0       	rjmp	.+28     	; 0x2dca <vListInsert+0x3c>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    2dae:	d8 01       	movw	r26, r16
    2db0:	13 96       	adiw	r26, 0x03	; 3
    2db2:	12 96       	adiw	r26, 0x02	; 2
    2db4:	2d 91       	ld	r18, X+
    2db6:	3c 91       	ld	r19, X
    2db8:	13 97       	sbiw	r26, 0x03	; 3
    2dba:	e9 01       	movw	r28, r18
    2dbc:	48 81       	ld	r20, Y
    2dbe:	59 81       	ldd	r21, Y+1	; 0x01
    2dc0:	84 17       	cp	r24, r20
    2dc2:	95 07       	cpc	r25, r21
    2dc4:	10 f0       	brcs	.+4      	; 0x2dca <vListInsert+0x3c>
    2dc6:	d9 01       	movw	r26, r18
    2dc8:	f4 cf       	rjmp	.-24     	; 0x2db2 <vListInsert+0x24>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    2dca:	12 96       	adiw	r26, 0x02	; 2
    2dcc:	8d 91       	ld	r24, X+
    2dce:	9c 91       	ld	r25, X
    2dd0:	13 97       	sbiw	r26, 0x03	; 3
    2dd2:	93 83       	std	Z+3, r25	; 0x03
    2dd4:	82 83       	std	Z+2, r24	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    2dd6:	ec 01       	movw	r28, r24
    2dd8:	fd 83       	std	Y+5, r31	; 0x05
    2dda:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
    2ddc:	b5 83       	std	Z+5, r27	; 0x05
    2dde:	a4 83       	std	Z+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
    2de0:	13 96       	adiw	r26, 0x03	; 3
    2de2:	fc 93       	st	X, r31
    2de4:	ee 93       	st	-X, r30
    2de6:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
    2de8:	11 87       	std	Z+9, r17	; 0x09
    2dea:	00 87       	std	Z+8, r16	; 0x08

    ( pxList->uxNumberOfItems )++;
    2dec:	f8 01       	movw	r30, r16
    2dee:	80 81       	ld	r24, Z
    2df0:	8f 5f       	subi	r24, 0xFF	; 255
    2df2:	80 83       	st	Z, r24
}
    2df4:	df 91       	pop	r29
    2df6:	cf 91       	pop	r28
    2df8:	1f 91       	pop	r17
    2dfa:	0f 91       	pop	r16
    2dfc:	08 95       	ret

00002dfe <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    2dfe:	cf 93       	push	r28
    2e00:	df 93       	push	r29
    2e02:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
    2e04:	a0 85       	ldd	r26, Z+8	; 0x08
    2e06:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2e08:	82 81       	ldd	r24, Z+2	; 0x02
    2e0a:	93 81       	ldd	r25, Z+3	; 0x03
    2e0c:	24 81       	ldd	r18, Z+4	; 0x04
    2e0e:	35 81       	ldd	r19, Z+5	; 0x05
    2e10:	ec 01       	movw	r28, r24
    2e12:	3d 83       	std	Y+5, r19	; 0x05
    2e14:	2c 83       	std	Y+4, r18	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2e16:	c4 81       	ldd	r28, Z+4	; 0x04
    2e18:	d5 81       	ldd	r29, Z+5	; 0x05
    2e1a:	9b 83       	std	Y+3, r25	; 0x03
    2e1c:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    2e1e:	11 96       	adiw	r26, 0x01	; 1
    2e20:	8d 91       	ld	r24, X+
    2e22:	9c 91       	ld	r25, X
    2e24:	12 97       	sbiw	r26, 0x02	; 2
    2e26:	e8 17       	cp	r30, r24
    2e28:	f9 07       	cpc	r31, r25
    2e2a:	21 f4       	brne	.+8      	; 0x2e34 <uxListRemove+0x36>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    2e2c:	12 96       	adiw	r26, 0x02	; 2
    2e2e:	dc 93       	st	X, r29
    2e30:	ce 93       	st	-X, r28
    2e32:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    2e34:	11 86       	std	Z+9, r1	; 0x09
    2e36:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
    2e38:	8c 91       	ld	r24, X
    2e3a:	81 50       	subi	r24, 0x01	; 1
    2e3c:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    2e3e:	8c 91       	ld	r24, X
}
    2e40:	df 91       	pop	r29
    2e42:	cf 91       	pop	r28
    2e44:	08 95       	ret

00002e46 <pxPortInitialiseStack>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
    2e46:	fc 01       	movw	r30, r24
    2e48:	60 83       	st	Z, r22
    2e4a:	31 97       	sbiw	r30, 0x01	; 1
    2e4c:	70 83       	st	Z, r23
    2e4e:	31 97       	sbiw	r30, 0x01	; 1
    2e50:	10 82       	st	Z, r1
    2e52:	31 97       	sbiw	r30, 0x01	; 1
    2e54:	10 82       	st	Z, r1
    2e56:	31 97       	sbiw	r30, 0x01	; 1
    2e58:	20 e8       	ldi	r18, 0x80	; 128
    2e5a:	20 83       	st	Z, r18
    2e5c:	31 97       	sbiw	r30, 0x01	; 1
    2e5e:	10 82       	st	Z, r1
    2e60:	31 97       	sbiw	r30, 0x01	; 1
    2e62:	10 82       	st	Z, r1
    2e64:	31 97       	sbiw	r30, 0x01	; 1
    2e66:	10 82       	st	Z, r1
    2e68:	77 97       	sbiw	r30, 0x17	; 23
    2e6a:	40 83       	st	Z, r20
    2e6c:	31 97       	sbiw	r30, 0x01	; 1
    2e6e:	50 83       	st	Z, r21
    2e70:	86 97       	sbiw	r24, 0x26	; 38
    2e72:	08 95       	ret

00002e74 <vPortYield>:
    2e74:	0f 92       	push	r0
    2e76:	0f b6       	in	r0, 0x3f	; 63
    2e78:	f8 94       	cli
    2e7a:	0f 92       	push	r0
    2e7c:	0b b6       	in	r0, 0x3b	; 59
    2e7e:	0f 92       	push	r0
    2e80:	0c b6       	in	r0, 0x3c	; 60
    2e82:	0f 92       	push	r0
    2e84:	1f 92       	push	r1
    2e86:	11 24       	eor	r1, r1
    2e88:	2f 92       	push	r2
    2e8a:	3f 92       	push	r3
    2e8c:	4f 92       	push	r4
    2e8e:	5f 92       	push	r5
    2e90:	6f 92       	push	r6
    2e92:	7f 92       	push	r7
    2e94:	8f 92       	push	r8
    2e96:	9f 92       	push	r9
    2e98:	af 92       	push	r10
    2e9a:	bf 92       	push	r11
    2e9c:	cf 92       	push	r12
    2e9e:	df 92       	push	r13
    2ea0:	ef 92       	push	r14
    2ea2:	ff 92       	push	r15
    2ea4:	0f 93       	push	r16
    2ea6:	1f 93       	push	r17
    2ea8:	2f 93       	push	r18
    2eaa:	3f 93       	push	r19
    2eac:	4f 93       	push	r20
    2eae:	5f 93       	push	r21
    2eb0:	6f 93       	push	r22
    2eb2:	7f 93       	push	r23
    2eb4:	8f 93       	push	r24
    2eb6:	9f 93       	push	r25
    2eb8:	af 93       	push	r26
    2eba:	bf 93       	push	r27
    2ebc:	cf 93       	push	r28
    2ebe:	df 93       	push	r29
    2ec0:	ef 93       	push	r30
    2ec2:	ff 93       	push	r31
    2ec4:	a0 91 52 04 	lds	r26, 0x0452	; 0x800452 <pxCurrentTCB>
    2ec8:	b0 91 53 04 	lds	r27, 0x0453	; 0x800453 <pxCurrentTCB+0x1>
    2ecc:	0d b6       	in	r0, 0x3d	; 61
    2ece:	0d 92       	st	X+, r0
    2ed0:	0e b6       	in	r0, 0x3e	; 62
    2ed2:	0d 92       	st	X+, r0
    2ed4:	4a db       	rcall	.-2412   	; 0x256a <vTaskSwitchContext>
    2ed6:	a0 91 52 04 	lds	r26, 0x0452	; 0x800452 <pxCurrentTCB>
    2eda:	b0 91 53 04 	lds	r27, 0x0453	; 0x800453 <pxCurrentTCB+0x1>
    2ede:	cd 91       	ld	r28, X+
    2ee0:	cd bf       	out	0x3d, r28	; 61
    2ee2:	dd 91       	ld	r29, X+
    2ee4:	de bf       	out	0x3e, r29	; 62
    2ee6:	ff 91       	pop	r31
    2ee8:	ef 91       	pop	r30
    2eea:	df 91       	pop	r29
    2eec:	cf 91       	pop	r28
    2eee:	bf 91       	pop	r27
    2ef0:	af 91       	pop	r26
    2ef2:	9f 91       	pop	r25
    2ef4:	8f 91       	pop	r24
    2ef6:	7f 91       	pop	r23
    2ef8:	6f 91       	pop	r22
    2efa:	5f 91       	pop	r21
    2efc:	4f 91       	pop	r20
    2efe:	3f 91       	pop	r19
    2f00:	2f 91       	pop	r18
    2f02:	1f 91       	pop	r17
    2f04:	0f 91       	pop	r16
    2f06:	ff 90       	pop	r15
    2f08:	ef 90       	pop	r14
    2f0a:	df 90       	pop	r13
    2f0c:	cf 90       	pop	r12
    2f0e:	bf 90       	pop	r11
    2f10:	af 90       	pop	r10
    2f12:	9f 90       	pop	r9
    2f14:	8f 90       	pop	r8
    2f16:	7f 90       	pop	r7
    2f18:	6f 90       	pop	r6
    2f1a:	5f 90       	pop	r5
    2f1c:	4f 90       	pop	r4
    2f1e:	3f 90       	pop	r3
    2f20:	2f 90       	pop	r2
    2f22:	1f 90       	pop	r1
    2f24:	0f 90       	pop	r0
    2f26:	0c be       	out	0x3c, r0	; 60
    2f28:	0f 90       	pop	r0
    2f2a:	0b be       	out	0x3b, r0	; 59
    2f2c:	0f 90       	pop	r0
    2f2e:	0f be       	out	0x3f, r0	; 63
    2f30:	0f 90       	pop	r0
    2f32:	08 95       	ret

00002f34 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ((hot, flatten, naked));
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    2f34:	0f 92       	push	r0
    2f36:	0f b6       	in	r0, 0x3f	; 63
    2f38:	f8 94       	cli
    2f3a:	0f 92       	push	r0
    2f3c:	0b b6       	in	r0, 0x3b	; 59
    2f3e:	0f 92       	push	r0
    2f40:	0c b6       	in	r0, 0x3c	; 60
    2f42:	0f 92       	push	r0
    2f44:	1f 92       	push	r1
    2f46:	11 24       	eor	r1, r1
    2f48:	2f 92       	push	r2
    2f4a:	3f 92       	push	r3
    2f4c:	4f 92       	push	r4
    2f4e:	5f 92       	push	r5
    2f50:	6f 92       	push	r6
    2f52:	7f 92       	push	r7
    2f54:	8f 92       	push	r8
    2f56:	9f 92       	push	r9
    2f58:	af 92       	push	r10
    2f5a:	bf 92       	push	r11
    2f5c:	cf 92       	push	r12
    2f5e:	df 92       	push	r13
    2f60:	ef 92       	push	r14
    2f62:	ff 92       	push	r15
    2f64:	0f 93       	push	r16
    2f66:	1f 93       	push	r17
    2f68:	2f 93       	push	r18
    2f6a:	3f 93       	push	r19
    2f6c:	4f 93       	push	r20
    2f6e:	5f 93       	push	r21
    2f70:	6f 93       	push	r22
    2f72:	7f 93       	push	r23
    2f74:	8f 93       	push	r24
    2f76:	9f 93       	push	r25
    2f78:	af 93       	push	r26
    2f7a:	bf 93       	push	r27
    2f7c:	cf 93       	push	r28
    2f7e:	df 93       	push	r29
    2f80:	ef 93       	push	r30
    2f82:	ff 93       	push	r31
    2f84:	a0 91 52 04 	lds	r26, 0x0452	; 0x800452 <pxCurrentTCB>
    2f88:	b0 91 53 04 	lds	r27, 0x0453	; 0x800453 <pxCurrentTCB+0x1>
    2f8c:	0d b6       	in	r0, 0x3d	; 61
    2f8e:	0d 92       	st	X+, r0
    2f90:	0e b6       	in	r0, 0x3e	; 62
    2f92:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
    2f94:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
    2f96:	1a d9       	rcall	.-3532   	; 0x21cc <xTaskIncrementTick>
    2f98:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    2f9a:	e7 da       	rcall	.-2610   	; 0x256a <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
    2f9c:	a0 91 52 04 	lds	r26, 0x0452	; 0x800452 <pxCurrentTCB>
    2fa0:	b0 91 53 04 	lds	r27, 0x0453	; 0x800453 <pxCurrentTCB+0x1>
    2fa4:	cd 91       	ld	r28, X+
    2fa6:	cd bf       	out	0x3d, r28	; 61
    2fa8:	dd 91       	ld	r29, X+
    2faa:	de bf       	out	0x3e, r29	; 62
    2fac:	ff 91       	pop	r31
    2fae:	ef 91       	pop	r30
    2fb0:	df 91       	pop	r29
    2fb2:	cf 91       	pop	r28
    2fb4:	bf 91       	pop	r27
    2fb6:	af 91       	pop	r26
    2fb8:	9f 91       	pop	r25
    2fba:	8f 91       	pop	r24
    2fbc:	7f 91       	pop	r23
    2fbe:	6f 91       	pop	r22
    2fc0:	5f 91       	pop	r21
    2fc2:	4f 91       	pop	r20
    2fc4:	3f 91       	pop	r19
    2fc6:	2f 91       	pop	r18
    2fc8:	1f 91       	pop	r17
    2fca:	0f 91       	pop	r16
    2fcc:	ff 90       	pop	r15
    2fce:	ef 90       	pop	r14
    2fd0:	df 90       	pop	r13
    2fd2:	cf 90       	pop	r12
    2fd4:	bf 90       	pop	r11
    2fd6:	af 90       	pop	r10
    2fd8:	9f 90       	pop	r9
    2fda:	8f 90       	pop	r8
    2fdc:	7f 90       	pop	r7
    2fde:	6f 90       	pop	r6
    2fe0:	5f 90       	pop	r5
    2fe2:	4f 90       	pop	r4
    2fe4:	3f 90       	pop	r3
    2fe6:	2f 90       	pop	r2
    2fe8:	1f 90       	pop	r1
    2fea:	0f 90       	pop	r0
    2fec:	0c be       	out	0x3c, r0	; 60
    2fee:	0f 90       	pop	r0
    2ff0:	0b be       	out	0x3b, r0	; 59
    2ff2:	0f 90       	pop	r0
    2ff4:	0f be       	out	0x3f, r0	; 63
    2ff6:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    2ff8:	08 95       	ret

00002ffa <prvSetupTimerInterrupt>:
 * Setup WDT to generate a tick interrupt.
 */
void prvSetupTimerInterrupt( void )
{
    /* reset watchdog */
    wdt_reset();
    2ffa:	a8 95       	wdr
                : "r0"
        );
    }
    else
    {
        __asm__ __volatile__ (
    2ffc:	90 ec       	ldi	r25, 0xC0	; 192
    2ffe:	88 e1       	ldi	r24, 0x18	; 24
    3000:	0f b6       	in	r0, 0x3f	; 63
    3002:	f8 94       	cli
    3004:	a8 95       	wdr
    3006:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    300a:	0f be       	out	0x3f, r0	; 63
    300c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    3010:	08 95       	ret

00003012 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void )
{
    /* Setup the relevant timer hardware to generate the tick. */
    prvSetupTimerInterrupt();
    3012:	f3 df       	rcall	.-26     	; 0x2ffa <prvSetupTimerInterrupt>

    /* Restore the context of the first task that is going to run. */
    portRESTORE_CONTEXT();
    3014:	a0 91 52 04 	lds	r26, 0x0452	; 0x800452 <pxCurrentTCB>
    3018:	b0 91 53 04 	lds	r27, 0x0453	; 0x800453 <pxCurrentTCB+0x1>
    301c:	cd 91       	ld	r28, X+
    301e:	cd bf       	out	0x3d, r28	; 61
    3020:	dd 91       	ld	r29, X+
    3022:	de bf       	out	0x3e, r29	; 62
    3024:	ff 91       	pop	r31
    3026:	ef 91       	pop	r30
    3028:	df 91       	pop	r29
    302a:	cf 91       	pop	r28
    302c:	bf 91       	pop	r27
    302e:	af 91       	pop	r26
    3030:	9f 91       	pop	r25
    3032:	8f 91       	pop	r24
    3034:	7f 91       	pop	r23
    3036:	6f 91       	pop	r22
    3038:	5f 91       	pop	r21
    303a:	4f 91       	pop	r20
    303c:	3f 91       	pop	r19
    303e:	2f 91       	pop	r18
    3040:	1f 91       	pop	r17
    3042:	0f 91       	pop	r16
    3044:	ff 90       	pop	r15
    3046:	ef 90       	pop	r14
    3048:	df 90       	pop	r13
    304a:	cf 90       	pop	r12
    304c:	bf 90       	pop	r11
    304e:	af 90       	pop	r10
    3050:	9f 90       	pop	r9
    3052:	8f 90       	pop	r8
    3054:	7f 90       	pop	r7
    3056:	6f 90       	pop	r6
    3058:	5f 90       	pop	r5
    305a:	4f 90       	pop	r4
    305c:	3f 90       	pop	r3
    305e:	2f 90       	pop	r2
    3060:	1f 90       	pop	r1
    3062:	0f 90       	pop	r0
    3064:	0c be       	out	0x3c, r0	; 60
    3066:	0f 90       	pop	r0
    3068:	0b be       	out	0x3b, r0	; 59
    306a:	0f 90       	pop	r0
    306c:	0f be       	out	0x3f, r0	; 63
    306e:	0f 90       	pop	r0

    /* Simulate a function call end as generated by the compiler. We will now
    jump to the start of the task the context of which we have just restored. */
    __asm__ __volatile__ ( "ret" );
    3070:	08 95       	ret

    /* Should not get here. */
    return pdTRUE;
}
    3072:	81 e0       	ldi	r24, 0x01	; 1
    3074:	08 95       	ret

00003076 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    3076:	5e df       	rcall	.-324    	; 0x2f34 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    3078:	18 95       	reti

0000307a <__tablejump2__>:
    307a:	ee 0f       	add	r30, r30
    307c:	ff 1f       	adc	r31, r31
    307e:	88 1f       	adc	r24, r24
    3080:	8b bf       	out	0x3b, r24	; 59
    3082:	07 90       	elpm	r0, Z+
    3084:	f6 91       	elpm	r31, Z
    3086:	e0 2d       	mov	r30, r0
    3088:	19 94       	eijmp

0000308a <malloc>:
    308a:	0f 93       	push	r16
    308c:	1f 93       	push	r17
    308e:	cf 93       	push	r28
    3090:	df 93       	push	r29
    3092:	82 30       	cpi	r24, 0x02	; 2
    3094:	91 05       	cpc	r25, r1
    3096:	10 f4       	brcc	.+4      	; 0x309c <malloc+0x12>
    3098:	82 e0       	ldi	r24, 0x02	; 2
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	e0 91 30 06 	lds	r30, 0x0630	; 0x800630 <__flp>
    30a0:	f0 91 31 06 	lds	r31, 0x0631	; 0x800631 <__flp+0x1>
    30a4:	20 e0       	ldi	r18, 0x00	; 0
    30a6:	30 e0       	ldi	r19, 0x00	; 0
    30a8:	a0 e0       	ldi	r26, 0x00	; 0
    30aa:	b0 e0       	ldi	r27, 0x00	; 0
    30ac:	30 97       	sbiw	r30, 0x00	; 0
    30ae:	19 f1       	breq	.+70     	; 0x30f6 <malloc+0x6c>
    30b0:	40 81       	ld	r20, Z
    30b2:	51 81       	ldd	r21, Z+1	; 0x01
    30b4:	02 81       	ldd	r16, Z+2	; 0x02
    30b6:	13 81       	ldd	r17, Z+3	; 0x03
    30b8:	48 17       	cp	r20, r24
    30ba:	59 07       	cpc	r21, r25
    30bc:	c8 f0       	brcs	.+50     	; 0x30f0 <malloc+0x66>
    30be:	84 17       	cp	r24, r20
    30c0:	95 07       	cpc	r25, r21
    30c2:	69 f4       	brne	.+26     	; 0x30de <malloc+0x54>
    30c4:	10 97       	sbiw	r26, 0x00	; 0
    30c6:	31 f0       	breq	.+12     	; 0x30d4 <malloc+0x4a>
    30c8:	12 96       	adiw	r26, 0x02	; 2
    30ca:	0c 93       	st	X, r16
    30cc:	12 97       	sbiw	r26, 0x02	; 2
    30ce:	13 96       	adiw	r26, 0x03	; 3
    30d0:	1c 93       	st	X, r17
    30d2:	27 c0       	rjmp	.+78     	; 0x3122 <malloc+0x98>
    30d4:	00 93 30 06 	sts	0x0630, r16	; 0x800630 <__flp>
    30d8:	10 93 31 06 	sts	0x0631, r17	; 0x800631 <__flp+0x1>
    30dc:	22 c0       	rjmp	.+68     	; 0x3122 <malloc+0x98>
    30de:	21 15       	cp	r18, r1
    30e0:	31 05       	cpc	r19, r1
    30e2:	19 f0       	breq	.+6      	; 0x30ea <malloc+0x60>
    30e4:	42 17       	cp	r20, r18
    30e6:	53 07       	cpc	r21, r19
    30e8:	18 f4       	brcc	.+6      	; 0x30f0 <malloc+0x66>
    30ea:	9a 01       	movw	r18, r20
    30ec:	bd 01       	movw	r22, r26
    30ee:	ef 01       	movw	r28, r30
    30f0:	df 01       	movw	r26, r30
    30f2:	f8 01       	movw	r30, r16
    30f4:	db cf       	rjmp	.-74     	; 0x30ac <malloc+0x22>
    30f6:	21 15       	cp	r18, r1
    30f8:	31 05       	cpc	r19, r1
    30fa:	f9 f0       	breq	.+62     	; 0x313a <malloc+0xb0>
    30fc:	28 1b       	sub	r18, r24
    30fe:	39 0b       	sbc	r19, r25
    3100:	24 30       	cpi	r18, 0x04	; 4
    3102:	31 05       	cpc	r19, r1
    3104:	80 f4       	brcc	.+32     	; 0x3126 <malloc+0x9c>
    3106:	8a 81       	ldd	r24, Y+2	; 0x02
    3108:	9b 81       	ldd	r25, Y+3	; 0x03
    310a:	61 15       	cp	r22, r1
    310c:	71 05       	cpc	r23, r1
    310e:	21 f0       	breq	.+8      	; 0x3118 <malloc+0x8e>
    3110:	fb 01       	movw	r30, r22
    3112:	93 83       	std	Z+3, r25	; 0x03
    3114:	82 83       	std	Z+2, r24	; 0x02
    3116:	04 c0       	rjmp	.+8      	; 0x3120 <malloc+0x96>
    3118:	90 93 31 06 	sts	0x0631, r25	; 0x800631 <__flp+0x1>
    311c:	80 93 30 06 	sts	0x0630, r24	; 0x800630 <__flp>
    3120:	fe 01       	movw	r30, r28
    3122:	32 96       	adiw	r30, 0x02	; 2
    3124:	44 c0       	rjmp	.+136    	; 0x31ae <malloc+0x124>
    3126:	fe 01       	movw	r30, r28
    3128:	e2 0f       	add	r30, r18
    312a:	f3 1f       	adc	r31, r19
    312c:	81 93       	st	Z+, r24
    312e:	91 93       	st	Z+, r25
    3130:	22 50       	subi	r18, 0x02	; 2
    3132:	31 09       	sbc	r19, r1
    3134:	39 83       	std	Y+1, r19	; 0x01
    3136:	28 83       	st	Y, r18
    3138:	3a c0       	rjmp	.+116    	; 0x31ae <malloc+0x124>
    313a:	20 91 2e 06 	lds	r18, 0x062E	; 0x80062e <__brkval>
    313e:	30 91 2f 06 	lds	r19, 0x062F	; 0x80062f <__brkval+0x1>
    3142:	23 2b       	or	r18, r19
    3144:	41 f4       	brne	.+16     	; 0x3156 <malloc+0xcc>
    3146:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    314a:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    314e:	30 93 2f 06 	sts	0x062F, r19	; 0x80062f <__brkval+0x1>
    3152:	20 93 2e 06 	sts	0x062E, r18	; 0x80062e <__brkval>
    3156:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    315a:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    315e:	21 15       	cp	r18, r1
    3160:	31 05       	cpc	r19, r1
    3162:	41 f4       	brne	.+16     	; 0x3174 <malloc+0xea>
    3164:	2d b7       	in	r18, 0x3d	; 61
    3166:	3e b7       	in	r19, 0x3e	; 62
    3168:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    316c:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    3170:	24 1b       	sub	r18, r20
    3172:	35 0b       	sbc	r19, r21
    3174:	e0 91 2e 06 	lds	r30, 0x062E	; 0x80062e <__brkval>
    3178:	f0 91 2f 06 	lds	r31, 0x062F	; 0x80062f <__brkval+0x1>
    317c:	e2 17       	cp	r30, r18
    317e:	f3 07       	cpc	r31, r19
    3180:	a0 f4       	brcc	.+40     	; 0x31aa <malloc+0x120>
    3182:	2e 1b       	sub	r18, r30
    3184:	3f 0b       	sbc	r19, r31
    3186:	28 17       	cp	r18, r24
    3188:	39 07       	cpc	r19, r25
    318a:	78 f0       	brcs	.+30     	; 0x31aa <malloc+0x120>
    318c:	ac 01       	movw	r20, r24
    318e:	4e 5f       	subi	r20, 0xFE	; 254
    3190:	5f 4f       	sbci	r21, 0xFF	; 255
    3192:	24 17       	cp	r18, r20
    3194:	35 07       	cpc	r19, r21
    3196:	48 f0       	brcs	.+18     	; 0x31aa <malloc+0x120>
    3198:	4e 0f       	add	r20, r30
    319a:	5f 1f       	adc	r21, r31
    319c:	50 93 2f 06 	sts	0x062F, r21	; 0x80062f <__brkval+0x1>
    31a0:	40 93 2e 06 	sts	0x062E, r20	; 0x80062e <__brkval>
    31a4:	81 93       	st	Z+, r24
    31a6:	91 93       	st	Z+, r25
    31a8:	02 c0       	rjmp	.+4      	; 0x31ae <malloc+0x124>
    31aa:	e0 e0       	ldi	r30, 0x00	; 0
    31ac:	f0 e0       	ldi	r31, 0x00	; 0
    31ae:	cf 01       	movw	r24, r30
    31b0:	df 91       	pop	r29
    31b2:	cf 91       	pop	r28
    31b4:	1f 91       	pop	r17
    31b6:	0f 91       	pop	r16
    31b8:	08 95       	ret

000031ba <free>:
    31ba:	cf 93       	push	r28
    31bc:	df 93       	push	r29
    31be:	00 97       	sbiw	r24, 0x00	; 0
    31c0:	09 f4       	brne	.+2      	; 0x31c4 <free+0xa>
    31c2:	81 c0       	rjmp	.+258    	; 0x32c6 <free+0x10c>
    31c4:	fc 01       	movw	r30, r24
    31c6:	32 97       	sbiw	r30, 0x02	; 2
    31c8:	13 82       	std	Z+3, r1	; 0x03
    31ca:	12 82       	std	Z+2, r1	; 0x02
    31cc:	a0 91 30 06 	lds	r26, 0x0630	; 0x800630 <__flp>
    31d0:	b0 91 31 06 	lds	r27, 0x0631	; 0x800631 <__flp+0x1>
    31d4:	10 97       	sbiw	r26, 0x00	; 0
    31d6:	81 f4       	brne	.+32     	; 0x31f8 <free+0x3e>
    31d8:	20 81       	ld	r18, Z
    31da:	31 81       	ldd	r19, Z+1	; 0x01
    31dc:	82 0f       	add	r24, r18
    31de:	93 1f       	adc	r25, r19
    31e0:	20 91 2e 06 	lds	r18, 0x062E	; 0x80062e <__brkval>
    31e4:	30 91 2f 06 	lds	r19, 0x062F	; 0x80062f <__brkval+0x1>
    31e8:	28 17       	cp	r18, r24
    31ea:	39 07       	cpc	r19, r25
    31ec:	51 f5       	brne	.+84     	; 0x3242 <free+0x88>
    31ee:	f0 93 2f 06 	sts	0x062F, r31	; 0x80062f <__brkval+0x1>
    31f2:	e0 93 2e 06 	sts	0x062E, r30	; 0x80062e <__brkval>
    31f6:	67 c0       	rjmp	.+206    	; 0x32c6 <free+0x10c>
    31f8:	ed 01       	movw	r28, r26
    31fa:	20 e0       	ldi	r18, 0x00	; 0
    31fc:	30 e0       	ldi	r19, 0x00	; 0
    31fe:	ce 17       	cp	r28, r30
    3200:	df 07       	cpc	r29, r31
    3202:	40 f4       	brcc	.+16     	; 0x3214 <free+0x5a>
    3204:	4a 81       	ldd	r20, Y+2	; 0x02
    3206:	5b 81       	ldd	r21, Y+3	; 0x03
    3208:	9e 01       	movw	r18, r28
    320a:	41 15       	cp	r20, r1
    320c:	51 05       	cpc	r21, r1
    320e:	f1 f0       	breq	.+60     	; 0x324c <free+0x92>
    3210:	ea 01       	movw	r28, r20
    3212:	f5 cf       	rjmp	.-22     	; 0x31fe <free+0x44>
    3214:	d3 83       	std	Z+3, r29	; 0x03
    3216:	c2 83       	std	Z+2, r28	; 0x02
    3218:	40 81       	ld	r20, Z
    321a:	51 81       	ldd	r21, Z+1	; 0x01
    321c:	84 0f       	add	r24, r20
    321e:	95 1f       	adc	r25, r21
    3220:	c8 17       	cp	r28, r24
    3222:	d9 07       	cpc	r29, r25
    3224:	59 f4       	brne	.+22     	; 0x323c <free+0x82>
    3226:	88 81       	ld	r24, Y
    3228:	99 81       	ldd	r25, Y+1	; 0x01
    322a:	84 0f       	add	r24, r20
    322c:	95 1f       	adc	r25, r21
    322e:	02 96       	adiw	r24, 0x02	; 2
    3230:	91 83       	std	Z+1, r25	; 0x01
    3232:	80 83       	st	Z, r24
    3234:	8a 81       	ldd	r24, Y+2	; 0x02
    3236:	9b 81       	ldd	r25, Y+3	; 0x03
    3238:	93 83       	std	Z+3, r25	; 0x03
    323a:	82 83       	std	Z+2, r24	; 0x02
    323c:	21 15       	cp	r18, r1
    323e:	31 05       	cpc	r19, r1
    3240:	29 f4       	brne	.+10     	; 0x324c <free+0x92>
    3242:	f0 93 31 06 	sts	0x0631, r31	; 0x800631 <__flp+0x1>
    3246:	e0 93 30 06 	sts	0x0630, r30	; 0x800630 <__flp>
    324a:	3d c0       	rjmp	.+122    	; 0x32c6 <free+0x10c>
    324c:	e9 01       	movw	r28, r18
    324e:	fb 83       	std	Y+3, r31	; 0x03
    3250:	ea 83       	std	Y+2, r30	; 0x02
    3252:	49 91       	ld	r20, Y+
    3254:	59 91       	ld	r21, Y+
    3256:	c4 0f       	add	r28, r20
    3258:	d5 1f       	adc	r29, r21
    325a:	ec 17       	cp	r30, r28
    325c:	fd 07       	cpc	r31, r29
    325e:	61 f4       	brne	.+24     	; 0x3278 <free+0xbe>
    3260:	80 81       	ld	r24, Z
    3262:	91 81       	ldd	r25, Z+1	; 0x01
    3264:	84 0f       	add	r24, r20
    3266:	95 1f       	adc	r25, r21
    3268:	02 96       	adiw	r24, 0x02	; 2
    326a:	e9 01       	movw	r28, r18
    326c:	99 83       	std	Y+1, r25	; 0x01
    326e:	88 83       	st	Y, r24
    3270:	82 81       	ldd	r24, Z+2	; 0x02
    3272:	93 81       	ldd	r25, Z+3	; 0x03
    3274:	9b 83       	std	Y+3, r25	; 0x03
    3276:	8a 83       	std	Y+2, r24	; 0x02
    3278:	e0 e0       	ldi	r30, 0x00	; 0
    327a:	f0 e0       	ldi	r31, 0x00	; 0
    327c:	12 96       	adiw	r26, 0x02	; 2
    327e:	8d 91       	ld	r24, X+
    3280:	9c 91       	ld	r25, X
    3282:	13 97       	sbiw	r26, 0x03	; 3
    3284:	00 97       	sbiw	r24, 0x00	; 0
    3286:	19 f0       	breq	.+6      	; 0x328e <free+0xd4>
    3288:	fd 01       	movw	r30, r26
    328a:	dc 01       	movw	r26, r24
    328c:	f7 cf       	rjmp	.-18     	; 0x327c <free+0xc2>
    328e:	8d 91       	ld	r24, X+
    3290:	9c 91       	ld	r25, X
    3292:	11 97       	sbiw	r26, 0x01	; 1
    3294:	9d 01       	movw	r18, r26
    3296:	2e 5f       	subi	r18, 0xFE	; 254
    3298:	3f 4f       	sbci	r19, 0xFF	; 255
    329a:	82 0f       	add	r24, r18
    329c:	93 1f       	adc	r25, r19
    329e:	20 91 2e 06 	lds	r18, 0x062E	; 0x80062e <__brkval>
    32a2:	30 91 2f 06 	lds	r19, 0x062F	; 0x80062f <__brkval+0x1>
    32a6:	28 17       	cp	r18, r24
    32a8:	39 07       	cpc	r19, r25
    32aa:	69 f4       	brne	.+26     	; 0x32c6 <free+0x10c>
    32ac:	30 97       	sbiw	r30, 0x00	; 0
    32ae:	29 f4       	brne	.+10     	; 0x32ba <free+0x100>
    32b0:	10 92 31 06 	sts	0x0631, r1	; 0x800631 <__flp+0x1>
    32b4:	10 92 30 06 	sts	0x0630, r1	; 0x800630 <__flp>
    32b8:	02 c0       	rjmp	.+4      	; 0x32be <free+0x104>
    32ba:	13 82       	std	Z+3, r1	; 0x03
    32bc:	12 82       	std	Z+2, r1	; 0x02
    32be:	b0 93 2f 06 	sts	0x062F, r27	; 0x80062f <__brkval+0x1>
    32c2:	a0 93 2e 06 	sts	0x062E, r26	; 0x80062e <__brkval>
    32c6:	df 91       	pop	r29
    32c8:	cf 91       	pop	r28
    32ca:	08 95       	ret

000032cc <memcpy>:
    32cc:	fb 01       	movw	r30, r22
    32ce:	dc 01       	movw	r26, r24
    32d0:	02 c0       	rjmp	.+4      	; 0x32d6 <memcpy+0xa>
    32d2:	01 90       	ld	r0, Z+
    32d4:	0d 92       	st	X+, r0
    32d6:	41 50       	subi	r20, 0x01	; 1
    32d8:	50 40       	sbci	r21, 0x00	; 0
    32da:	d8 f7       	brcc	.-10     	; 0x32d2 <memcpy+0x6>
    32dc:	08 95       	ret

000032de <memset>:
    32de:	dc 01       	movw	r26, r24
    32e0:	01 c0       	rjmp	.+2      	; 0x32e4 <memset+0x6>
    32e2:	6d 93       	st	X+, r22
    32e4:	41 50       	subi	r20, 0x01	; 1
    32e6:	50 40       	sbci	r21, 0x00	; 0
    32e8:	e0 f7       	brcc	.-8      	; 0x32e2 <memset+0x4>
    32ea:	08 95       	ret

000032ec <_exit>:
    32ec:	f8 94       	cli

000032ee <__stop_program>:
    32ee:	ff cf       	rjmp	.-2      	; 0x32ee <__stop_program>
