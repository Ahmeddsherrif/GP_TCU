
ECU_LT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800200  00002d04  00002d98  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002d04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000038b  00800246  00800246  00002dde  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002dde  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002e10  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007d8  00000000  00000000  00002e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e42b  00000000  00000000  00003628  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003149  00000000  00000000  00011a53  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005302  00000000  00000000  00014b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001868  00000000  00000000  00019ea0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000041ce  00000000  00000000  0001b708  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009b06  00000000  00000000  0001f8d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007b8  00000000  00000000  000293dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4a c2       	rjmp	.+1172   	; 0x496 <__ctors_end>
       2:	00 00       	nop
       4:	78 c2       	rjmp	.+1264   	; 0x4f6 <__bad_interrupt>
       6:	00 00       	nop
       8:	76 c2       	rjmp	.+1260   	; 0x4f6 <__bad_interrupt>
       a:	00 00       	nop
       c:	74 c2       	rjmp	.+1256   	; 0x4f6 <__bad_interrupt>
       e:	00 00       	nop
      10:	72 c2       	rjmp	.+1252   	; 0x4f6 <__bad_interrupt>
      12:	00 00       	nop
      14:	70 c2       	rjmp	.+1248   	; 0x4f6 <__bad_interrupt>
      16:	00 00       	nop
      18:	6e c2       	rjmp	.+1244   	; 0x4f6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6c c2       	rjmp	.+1240   	; 0x4f6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	6a c2       	rjmp	.+1236   	; 0x4f6 <__bad_interrupt>
      22:	00 00       	nop
      24:	68 c2       	rjmp	.+1232   	; 0x4f6 <__bad_interrupt>
      26:	00 00       	nop
      28:	66 c2       	rjmp	.+1228   	; 0x4f6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	64 c2       	rjmp	.+1224   	; 0x4f6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 66 16 	jmp	0x2ccc	; 0x2ccc <__vector_12>
      34:	60 c2       	rjmp	.+1216   	; 0x4f6 <__bad_interrupt>
      36:	00 00       	nop
      38:	5e c2       	rjmp	.+1212   	; 0x4f6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5c c2       	rjmp	.+1208   	; 0x4f6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	5a c2       	rjmp	.+1204   	; 0x4f6 <__bad_interrupt>
      42:	00 00       	nop
      44:	58 c2       	rjmp	.+1200   	; 0x4f6 <__bad_interrupt>
      46:	00 00       	nop
      48:	56 c2       	rjmp	.+1196   	; 0x4f6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	54 c2       	rjmp	.+1192   	; 0x4f6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	52 c2       	rjmp	.+1188   	; 0x4f6 <__bad_interrupt>
      52:	00 00       	nop
      54:	50 c2       	rjmp	.+1184   	; 0x4f6 <__bad_interrupt>
      56:	00 00       	nop
      58:	4e c2       	rjmp	.+1180   	; 0x4f6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	65 c4       	rjmp	.+2250   	; 0x928 <__vector_23>
      5e:	00 00       	nop
      60:	4a c2       	rjmp	.+1172   	; 0x4f6 <__bad_interrupt>
      62:	00 00       	nop
      64:	48 c2       	rjmp	.+1168   	; 0x4f6 <__bad_interrupt>
      66:	00 00       	nop
      68:	46 c2       	rjmp	.+1164   	; 0x4f6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	44 c2       	rjmp	.+1160   	; 0x4f6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	42 c2       	rjmp	.+1156   	; 0x4f6 <__bad_interrupt>
      72:	00 00       	nop
      74:	40 c2       	rjmp	.+1152   	; 0x4f6 <__bad_interrupt>
      76:	00 00       	nop
      78:	3e c2       	rjmp	.+1148   	; 0x4f6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	3c c2       	rjmp	.+1144   	; 0x4f6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	3a c2       	rjmp	.+1140   	; 0x4f6 <__bad_interrupt>
      82:	00 00       	nop
      84:	38 c2       	rjmp	.+1136   	; 0x4f6 <__bad_interrupt>
      86:	00 00       	nop
      88:	36 c2       	rjmp	.+1132   	; 0x4f6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	34 c2       	rjmp	.+1128   	; 0x4f6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	32 c2       	rjmp	.+1124   	; 0x4f6 <__bad_interrupt>
      92:	00 00       	nop
      94:	30 c2       	rjmp	.+1120   	; 0x4f6 <__bad_interrupt>
      96:	00 00       	nop
      98:	2e c2       	rjmp	.+1116   	; 0x4f6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	2c c2       	rjmp	.+1112   	; 0x4f6 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	2a c2       	rjmp	.+1108   	; 0x4f6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	28 c2       	rjmp	.+1104   	; 0x4f6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	26 c2       	rjmp	.+1100   	; 0x4f6 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	24 c2       	rjmp	.+1096   	; 0x4f6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	22 c2       	rjmp	.+1092   	; 0x4f6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	20 c2       	rjmp	.+1088   	; 0x4f6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	1e c2       	rjmp	.+1084   	; 0x4f6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	1c c2       	rjmp	.+1080   	; 0x4f6 <__bad_interrupt>
      be:	00 00       	nop
      c0:	1a c2       	rjmp	.+1076   	; 0x4f6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	18 c2       	rjmp	.+1072   	; 0x4f6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	16 c2       	rjmp	.+1068   	; 0x4f6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	14 c2       	rjmp	.+1064   	; 0x4f6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	12 c2       	rjmp	.+1060   	; 0x4f6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	10 c2       	rjmp	.+1056   	; 0x4f6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0e c2       	rjmp	.+1052   	; 0x4f6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	0c c2       	rjmp	.+1048   	; 0x4f6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	0a c2       	rjmp	.+1044   	; 0x4f6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c6 05       	cpc	r28, r6
      e6:	c9 05       	cpc	r28, r9
      e8:	b8 05       	cpc	r27, r8
      ea:	bc 05       	cpc	r27, r12
      ec:	c2 05       	cpc	r28, r2
      ee:	00 06       	cpc	r0, r16
      f0:	cd 05       	cpc	r28, r13
      f2:	d1 05       	cpc	r29, r1
      f4:	d7 05       	cpc	r29, r7
      f6:	db 05       	cpc	r29, r11
      f8:	df 05       	cpc	r29, r15
      fa:	e5 05       	cpc	r30, r5
      fc:	e9 05       	cpc	r30, r9
      fe:	ed 05       	cpc	r30, r13
     100:	00 06       	cpc	r0, r16
     102:	f3 05       	cpc	r31, r3
     104:	f7 05       	cpc	r31, r7
     106:	fb 05       	cpc	r31, r11
     108:	59 08       	sbc	r5, r9
     10a:	cb 07       	cpc	r28, r27
     10c:	5d 08       	sbc	r5, r13
     10e:	ce 07       	cpc	r28, r30
     110:	d1 07       	cpc	r29, r17
     112:	d5 07       	cpc	r29, r21
     114:	d8 07       	cpc	r29, r24
     116:	db 07       	cpc	r29, r27
     118:	57 08       	sbc	r5, r7
     11a:	57 08       	sbc	r5, r7
     11c:	de 07       	cpc	r29, r30
     11e:	e1 07       	cpc	r30, r17
     120:	e4 07       	cpc	r30, r20
     122:	e7 07       	cpc	r30, r23
     124:	ea 07       	cpc	r30, r26
     126:	ed 07       	cpc	r30, r29
     128:	61 08       	sbc	r6, r1
     12a:	fd 07       	cpc	r31, r29
     12c:	00 08       	sbc	r0, r0
     12e:	57 08       	sbc	r5, r7
     130:	04 08       	sbc	r0, r4
     132:	08 08       	sbc	r0, r8
     134:	0b 08       	sbc	r0, r11
     136:	0e 08       	sbc	r0, r14
     138:	11 08       	sbc	r1, r1
     13a:	14 08       	sbc	r1, r4
     13c:	44 08       	sbc	r4, r4
     13e:	17 08       	sbc	r1, r7
     140:	1a 08       	sbc	r1, r10
     142:	1d 08       	sbc	r1, r13
     144:	20 08       	sbc	r2, r0
     146:	23 08       	sbc	r2, r3
     148:	65 08       	sbc	r6, r5
     14a:	33 08       	sbc	r3, r3
     14c:	36 08       	sbc	r3, r6
     14e:	3a 08       	sbc	r3, r10
     150:	3d 08       	sbc	r3, r13
     152:	57 08       	sbc	r5, r7
     154:	41 08       	sbc	r4, r1
     156:	44 08       	sbc	r4, r4
     158:	48 08       	sbc	r4, r8
     15a:	4c 08       	sbc	r4, r12
     15c:	50 08       	sbc	r5, r0
     15e:	54 08       	sbc	r5, r4
     160:	05 02       	muls	r16, r21
     162:	05 02       	muls	r16, r21
     164:	46 02       	muls	r20, r22
     166:	33 02       	muls	r19, r19
     168:	46 02       	muls	r20, r22
     16a:	05 02       	muls	r16, r21
     16c:	05 02       	muls	r16, r21
     16e:	46 02       	muls	r20, r22
     170:	33 02       	muls	r19, r19

00000172 <__trampolines_end>:
     172:	00 00       	nop
     174:	0a 0b       	sbc	r16, r26
     176:	02 09       	sbc	r16, r2
     178:	0c 0d       	add	r16, r12
     17a:	0e 08       	sbc	r0, r14
     17c:	07 03       	mulsu	r16, r23
     17e:	04 01       	movw	r0, r8
	...
     19c:	00 00       	nop
     19e:	12 11       	cpse	r17, r2
     1a0:	10 00       	.word	0x0010	; ????
	...

000001b8 <digital_pin_to_bit_mask_PGM>:
     1b8:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     1c8:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     1d8:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     1e8:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     1f8:	04 08 10 20 40 80                                   ... @.

000001fe <digital_pin_to_port_PGM>:
     1fe:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     20e:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     21e:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     22e:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     23e:	0b 0b 0b 0b 0b 0b                                   ......

00000244 <port_to_input_PGM>:
     244:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     254:	00 01 00 00 03 01 06 01 09 01                       ..........

0000025e <port_to_output_PGM>:
     25e:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     26e:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000278 <port_to_mode_PGM>:
     278:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     288:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000292 <prvIdleTask>:
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
     292:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <uxDeletedTasksWaitingCleanUp>
     296:	88 23       	and	r24, r24
     298:	c9 f0       	breq	.+50     	; 0x2cc <prvIdleTask+0x3a>
     29a:	0f b6       	in	r0, 0x3f	; 63
     29c:	f8 94       	cli
     29e:	0f 92       	push	r0
     2a0:	e0 91 b1 03 	lds	r30, 0x03B1	; 0x8003b1 <xTasksWaitingTermination+0x5>
     2a4:	f0 91 b2 03 	lds	r31, 0x03B2	; 0x8003b2 <xTasksWaitingTermination+0x6>
     2a8:	86 81       	ldd	r24, Z+6	; 0x06
     2aa:	97 81       	ldd	r25, Z+7	; 0x07
     2ac:	02 96       	adiw	r24, 0x02	; 2
     2ae:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <uxListRemove>
     2b2:	80 91 a1 03 	lds	r24, 0x03A1	; 0x8003a1 <uxCurrentNumberOfTasks>
     2b6:	81 50       	subi	r24, 0x01	; 1
     2b8:	80 93 a1 03 	sts	0x03A1, r24	; 0x8003a1 <uxCurrentNumberOfTasks>
     2bc:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <uxDeletedTasksWaitingCleanUp>
     2c0:	81 50       	subi	r24, 0x01	; 1
     2c2:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <uxDeletedTasksWaitingCleanUp>
     2c6:	0f 90       	pop	r0
     2c8:	0f be       	out	0x3f, r0	; 63
     2ca:	e3 cf       	rjmp	.-58     	; 0x292 <prvIdleTask>
     2cc:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <pxReadyTasksLists>
     2d0:	82 30       	cpi	r24, 0x02	; 2
     2d2:	10 f0       	brcs	.+4      	; 0x2d8 <prvIdleTask+0x46>
     2d4:	0e 94 65 15 	call	0x2aca	; 0x2aca <vPortYield>
     2d8:	0e 94 6f 14 	call	0x28de	; 0x28de <vApplicationIdleHook>
     2dc:	da cf       	rjmp	.-76     	; 0x292 <prvIdleTask>

000002de <prvTimerTask>:
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    }
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
     2de:	cf 93       	push	r28
     2e0:	df 93       	push	r29
     2e2:	00 d0       	rcall	.+0      	; 0x2e4 <prvTimerTask+0x6>
     2e4:	1f 92       	push	r1
     2e6:	1f 92       	push	r1
     2e8:	cd b7       	in	r28, 0x3d	; 61
     2ea:	de b7       	in	r29, 0x3e	; 62
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
     2ec:	e0 91 53 04 	lds	r30, 0x0453	; 0x800453 <pxCurrentTimerList>
     2f0:	f0 91 54 04 	lds	r31, 0x0454	; 0x800454 <pxCurrentTimerList+0x1>
     2f4:	d0 80       	ld	r13, Z

        if( *pxListWasEmpty == pdFALSE )
     2f6:	dd 20       	and	r13, r13
     2f8:	31 f0       	breq	.+12     	; 0x306 <prvTimerTask+0x28>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
     2fa:	05 80       	ldd	r0, Z+5	; 0x05
     2fc:	f6 81       	ldd	r31, Z+6	; 0x06
     2fe:	e0 2d       	mov	r30, r0
     300:	00 81       	ld	r16, Z
     302:	11 81       	ldd	r17, Z+1	; 0x01
     304:	02 c0       	rjmp	.+4      	; 0x30a <prvTimerTask+0x2c>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
     306:	00 e0       	ldi	r16, 0x00	; 0
     308:	10 e0       	ldi	r17, 0x00	; 0
                                            BaseType_t xListWasEmpty )
    {
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
     30a:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <vTaskSuspendAll>
    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
     30e:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <xTaskGetTickCount>
     312:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
     314:	80 91 4b 04 	lds	r24, 0x044B	; 0x80044b <xLastTime.2488>
     318:	90 91 4c 04 	lds	r25, 0x044C	; 0x80044c <xLastTime.2488+0x1>
     31c:	e8 16       	cp	r14, r24
     31e:	f9 06       	cpc	r15, r25
     320:	20 f4       	brcc	.+8      	; 0x32a <prvTimerTask+0x4c>
        {
            prvSwitchTimerLists();
     322:	0e 94 8b 13 	call	0x2716	; 0x2716 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
     326:	81 e0       	ldi	r24, 0x01	; 1
     328:	01 c0       	rjmp	.+2      	; 0x32c <prvTimerTask+0x4e>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
     32a:	80 e0       	ldi	r24, 0x00	; 0
        }

        xLastTime = xTimeNow;
     32c:	f0 92 4c 04 	sts	0x044C, r15	; 0x80044c <xLastTime.2488+0x1>
     330:	e0 92 4b 04 	sts	0x044B, r14	; 0x80044b <xLastTime.2488>
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

            if( xTimerListsWereSwitched == pdFALSE )
     334:	81 11       	cpse	r24, r1
     336:	24 c0       	rjmp	.+72     	; 0x380 <prvTimerTask+0xa2>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
     338:	dd 20       	and	r13, r13
     33a:	51 f0       	breq	.+20     	; 0x350 <prvTimerTask+0x72>
     33c:	e0 16       	cp	r14, r16
     33e:	f1 06       	cpc	r15, r17
     340:	70 f0       	brcs	.+28     	; 0x35e <prvTimerTask+0x80>
                {
                    ( void ) xTaskResumeAll();
     342:	0e 94 26 10 	call	0x204c	; 0x204c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
     346:	b7 01       	movw	r22, r14
     348:	c8 01       	movw	r24, r16
     34a:	0e 94 63 13 	call	0x26c6	; 0x26c6 <prvProcessExpiredTimer>
     34e:	1e c0       	rjmp	.+60     	; 0x38c <prvTimerTask+0xae>
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
     350:	e0 91 51 04 	lds	r30, 0x0451	; 0x800451 <pxOverflowTimerList>
     354:	f0 91 52 04 	lds	r31, 0x0452	; 0x800452 <pxOverflowTimerList+0x1>
     358:	80 81       	ld	r24, Z
     35a:	41 e0       	ldi	r20, 0x01	; 1
     35c:	81 11       	cpse	r24, r1
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

            if( xTimerListsWereSwitched == pdFALSE )
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
     35e:	40 e0       	ldi	r20, 0x00	; 0
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
     360:	b8 01       	movw	r22, r16
     362:	6e 19       	sub	r22, r14
     364:	7f 09       	sbc	r23, r15
     366:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <xTimerQueue>
     36a:	90 91 50 04 	lds	r25, 0x0450	; 0x800450 <xTimerQueue+0x1>
     36e:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
     372:	0e 94 26 10 	call	0x204c	; 0x204c <xTaskResumeAll>
     376:	81 11       	cpse	r24, r1
     378:	09 c0       	rjmp	.+18     	; 0x38c <prvTimerTask+0xae>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
     37a:	0e 94 65 15 	call	0x2aca	; 0x2aca <vPortYield>
     37e:	06 c0       	rjmp	.+12     	; 0x38c <prvTimerTask+0xae>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
     380:	0e 94 26 10 	call	0x204c	; 0x204c <xTaskResumeAll>
     384:	03 c0       	rjmp	.+6      	; 0x38c <prvTimerTask+0xae>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
     386:	89 81       	ldd	r24, Y+1	; 0x01
     388:	87 ff       	sbrs	r24, 7
     38a:	0e c0       	rjmp	.+28     	; 0x3a8 <prvTimerTask+0xca>
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
     38c:	40 e0       	ldi	r20, 0x00	; 0
     38e:	50 e0       	ldi	r21, 0x00	; 0
     390:	be 01       	movw	r22, r28
     392:	6f 5f       	subi	r22, 0xFF	; 255
     394:	7f 4f       	sbci	r23, 0xFF	; 255
     396:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <xTimerQueue>
     39a:	90 91 50 04 	lds	r25, 0x0450	; 0x800450 <xTimerQueue+0x1>
     39e:	0e 94 8e 0c 	call	0x191c	; 0x191c <xQueueReceive>
     3a2:	81 11       	cpse	r24, r1
     3a4:	f0 cf       	rjmp	.-32     	; 0x386 <prvTimerTask+0xa8>
     3a6:	a2 cf       	rjmp	.-188    	; 0x2ec <prvTimerTask+0xe>
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
     3a8:	0c 81       	ldd	r16, Y+4	; 0x04
     3aa:	1d 81       	ldd	r17, Y+5	; 0x05

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
     3ac:	d8 01       	movw	r26, r16
     3ae:	1a 96       	adiw	r26, 0x0a	; 10
     3b0:	8d 91       	ld	r24, X+
     3b2:	9c 91       	ld	r25, X
     3b4:	1b 97       	sbiw	r26, 0x0b	; 11
     3b6:	89 2b       	or	r24, r25
     3b8:	21 f0       	breq	.+8      	; 0x3c2 <prvTimerTask+0xe4>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
     3ba:	c8 01       	movw	r24, r16
     3bc:	02 96       	adiw	r24, 0x02	; 2
     3be:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <uxListRemove>
    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
     3c2:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <xTaskGetTickCount>
     3c6:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
     3c8:	80 91 4b 04 	lds	r24, 0x044B	; 0x80044b <xLastTime.2488>
     3cc:	90 91 4c 04 	lds	r25, 0x044C	; 0x80044c <xLastTime.2488+0x1>
     3d0:	e8 16       	cp	r14, r24
     3d2:	f9 06       	cpc	r15, r25
     3d4:	10 f4       	brcc	.+4      	; 0x3da <prvTimerTask+0xfc>
        {
            prvSwitchTimerLists();
     3d6:	0e 94 8b 13 	call	0x2716	; 0x2716 <prvSwitchTimerLists>
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
        }

        xLastTime = xTimeNow;
     3da:	f0 92 4c 04 	sts	0x044C, r15	; 0x80044c <xLastTime.2488+0x1>
     3de:	e0 92 4b 04 	sts	0x044B, r14	; 0x80044b <xLastTime.2488>
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

                switch( xMessage.xMessageID )
     3e2:	e9 81       	ldd	r30, Y+1	; 0x01
     3e4:	8e 2f       	mov	r24, r30
     3e6:	ee 0f       	add	r30, r30
     3e8:	99 0b       	sbc	r25, r25
     3ea:	aa 0b       	sbc	r26, r26
     3ec:	bb 0b       	sbc	r27, r27
     3ee:	fc 01       	movw	r30, r24
     3f0:	31 97       	sbiw	r30, 0x01	; 1
     3f2:	e9 30       	cpi	r30, 0x09	; 9
     3f4:	f1 05       	cpc	r31, r1
     3f6:	50 f6       	brcc	.-108    	; 0x38c <prvTimerTask+0xae>
     3f8:	d8 01       	movw	r26, r16
     3fa:	52 96       	adiw	r26, 0x12	; 18
     3fc:	9c 91       	ld	r25, X
     3fe:	88 27       	eor	r24, r24
     400:	e0 55       	subi	r30, 0x50	; 80
     402:	ff 4f       	sbci	r31, 0xFF	; 255
     404:	8f 4f       	sbci	r24, 0xFF	; 255
     406:	0c 94 68 16 	jmp	0x2cd0	; 0x2cd0 <__tablejump2__>
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
     40a:	91 60       	ori	r25, 0x01	; 1
     40c:	f8 01       	movw	r30, r16
     40e:	92 8b       	std	Z+18, r25	; 0x12

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
     410:	2a 81       	ldd	r18, Y+2	; 0x02
     412:	3b 81       	ldd	r19, Y+3	; 0x03
     414:	64 85       	ldd	r22, Z+12	; 0x0c
     416:	75 85       	ldd	r23, Z+13	; 0x0d
     418:	62 0f       	add	r22, r18
     41a:	73 1f       	adc	r23, r19
     41c:	a7 01       	movw	r20, r14
     41e:	c8 01       	movw	r24, r16
     420:	0e 94 17 13 	call	0x262e	; 0x262e <prvInsertTimerInActiveList>
     424:	88 23       	and	r24, r24
     426:	09 f4       	brne	.+2      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     428:	b1 cf       	rjmp	.-158    	; 0x38c <prvTimerTask+0xae>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
     42a:	d8 01       	movw	r26, r16
     42c:	52 96       	adiw	r26, 0x12	; 18
     42e:	8c 91       	ld	r24, X
     430:	52 97       	sbiw	r26, 0x12	; 18
     432:	82 ff       	sbrs	r24, 2
     434:	0d c0       	rjmp	.+26     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
     436:	6a 81       	ldd	r22, Y+2	; 0x02
     438:	7b 81       	ldd	r23, Y+3	; 0x03
     43a:	1c 96       	adiw	r26, 0x0c	; 12
     43c:	8d 91       	ld	r24, X+
     43e:	9c 91       	ld	r25, X
     440:	1d 97       	sbiw	r26, 0x0d	; 13
     442:	68 0f       	add	r22, r24
     444:	79 1f       	adc	r23, r25
     446:	a7 01       	movw	r20, r14
     448:	c8 01       	movw	r24, r16
     44a:	0e 94 40 13 	call	0x2680	; 0x2680 <prvReloadTimer>
     44e:	03 c0       	rjmp	.+6      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
     450:	8e 7f       	andi	r24, 0xFE	; 254
     452:	f8 01       	movw	r30, r16
     454:	82 8b       	std	Z+18, r24	; 0x12
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
     456:	d8 01       	movw	r26, r16
     458:	50 96       	adiw	r26, 0x10	; 16
     45a:	ed 91       	ld	r30, X+
     45c:	fc 91       	ld	r31, X
     45e:	51 97       	sbiw	r26, 0x11	; 17
     460:	c8 01       	movw	r24, r16
     462:	19 95       	eicall
     464:	93 cf       	rjmp	.-218    	; 0x38c <prvTimerTask+0xae>
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        break;

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
     466:	91 60       	ori	r25, 0x01	; 1
     468:	d8 01       	movw	r26, r16
     46a:	52 96       	adiw	r26, 0x12	; 18
     46c:	9c 93       	st	X, r25
     46e:	52 97       	sbiw	r26, 0x12	; 18
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
     470:	6a 81       	ldd	r22, Y+2	; 0x02
     472:	7b 81       	ldd	r23, Y+3	; 0x03
     474:	1d 96       	adiw	r26, 0x0d	; 13
     476:	7c 93       	st	X, r23
     478:	6e 93       	st	-X, r22
     47a:	1c 97       	sbiw	r26, 0x0c	; 12
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
     47c:	6e 0d       	add	r22, r14
     47e:	7f 1d       	adc	r23, r15
     480:	97 01       	movw	r18, r14
     482:	a7 01       	movw	r20, r14
     484:	c8 01       	movw	r24, r16
     486:	0e 94 17 13 	call	0x262e	; 0x262e <prvInsertTimerInActiveList>
     48a:	80 cf       	rjmp	.-256    	; 0x38c <prvTimerTask+0xae>
                        {
                            /* If dynamic allocation is not enabled, the memory
                             * could not have been dynamically allocated. So there is
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
     48c:	9e 7f       	andi	r25, 0xFE	; 254
     48e:	f8 01       	movw	r30, r16
     490:	92 8b       	std	Z+18, r25	; 0x12
     492:	7c cf       	rjmp	.-264    	; 0x38c <prvTimerTask+0xae>

00000494 <__ctors_start>:
     494:	dc 02       	muls	r29, r28

00000496 <__ctors_end>:
     496:	11 24       	eor	r1, r1
     498:	1f be       	out	0x3f, r1	; 63
     49a:	cf ef       	ldi	r28, 0xFF	; 255
     49c:	d1 e2       	ldi	r29, 0x21	; 33
     49e:	de bf       	out	0x3e, r29	; 62
     4a0:	cd bf       	out	0x3d, r28	; 61
     4a2:	00 e0       	ldi	r16, 0x00	; 0
     4a4:	0c bf       	out	0x3c, r16	; 60

000004a6 <__do_copy_data>:
     4a6:	12 e0       	ldi	r17, 0x02	; 2
     4a8:	a0 e0       	ldi	r26, 0x00	; 0
     4aa:	b2 e0       	ldi	r27, 0x02	; 2
     4ac:	e4 e0       	ldi	r30, 0x04	; 4
     4ae:	fd e2       	ldi	r31, 0x2D	; 45
     4b0:	00 e0       	ldi	r16, 0x00	; 0
     4b2:	0b bf       	out	0x3b, r16	; 59
     4b4:	02 c0       	rjmp	.+4      	; 0x4ba <__do_copy_data+0x14>
     4b6:	07 90       	elpm	r0, Z+
     4b8:	0d 92       	st	X+, r0
     4ba:	a6 34       	cpi	r26, 0x46	; 70
     4bc:	b1 07       	cpc	r27, r17
     4be:	d9 f7       	brne	.-10     	; 0x4b6 <__do_copy_data+0x10>

000004c0 <__do_clear_bss>:
     4c0:	25 e0       	ldi	r18, 0x05	; 5
     4c2:	a6 e4       	ldi	r26, 0x46	; 70
     4c4:	b2 e0       	ldi	r27, 0x02	; 2
     4c6:	01 c0       	rjmp	.+2      	; 0x4ca <.do_clear_bss_start>

000004c8 <.do_clear_bss_loop>:
     4c8:	1d 92       	st	X+, r1

000004ca <.do_clear_bss_start>:
     4ca:	a1 3d       	cpi	r26, 0xD1	; 209
     4cc:	b2 07       	cpc	r27, r18
     4ce:	e1 f7       	brne	.-8      	; 0x4c8 <.do_clear_bss_loop>

000004d0 <__do_global_ctors>:
     4d0:	12 e0       	ldi	r17, 0x02	; 2
     4d2:	cb e4       	ldi	r28, 0x4B	; 75
     4d4:	d2 e0       	ldi	r29, 0x02	; 2
     4d6:	00 e0       	ldi	r16, 0x00	; 0
     4d8:	06 c0       	rjmp	.+12     	; 0x4e6 <__do_global_ctors+0x16>
     4da:	21 97       	sbiw	r28, 0x01	; 1
     4dc:	01 09       	sbc	r16, r1
     4de:	80 2f       	mov	r24, r16
     4e0:	fe 01       	movw	r30, r28
     4e2:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <__tablejump2__>
     4e6:	ca 34       	cpi	r28, 0x4A	; 74
     4e8:	d1 07       	cpc	r29, r17
     4ea:	80 e0       	ldi	r24, 0x00	; 0
     4ec:	08 07       	cpc	r16, r24
     4ee:	a9 f7       	brne	.-22     	; 0x4da <__do_global_ctors+0xa>
     4f0:	0f d2       	rcall	.+1054   	; 0x910 <main>
     4f2:	0c 94 80 16 	jmp	0x2d00	; 0x2d00 <_exit>

000004f6 <__bad_interrupt>:
     4f6:	84 cd       	rjmp	.-1272   	; 0x0 <__vectors>

000004f8 <_Z8BSP_initv>:
	int rtnValue = 0;
	if (mcp2515.readMessage(frame) == MCP2515::ERROR_OK){
		rtnValue = 1;
	}
	return rtnValue;
}
     4f8:	61 e0       	ldi	r22, 0x01	; 1
     4fa:	89 e2       	ldi	r24, 0x29	; 41
     4fc:	82 d3       	rcall	.+1796   	; 0xc02 <pinMode>
     4fe:	61 e0       	ldi	r22, 0x01	; 1
     500:	8c e2       	ldi	r24, 0x2C	; 44
     502:	7f d3       	rcall	.+1790   	; 0xc02 <pinMode>
     504:	61 e0       	ldi	r22, 0x01	; 1
     506:	8a e2       	ldi	r24, 0x2A	; 42
     508:	7c d3       	rcall	.+1784   	; 0xc02 <pinMode>
     50a:	61 e0       	ldi	r22, 0x01	; 1
     50c:	8d e2       	ldi	r24, 0x2D	; 45
     50e:	79 d3       	rcall	.+1778   	; 0xc02 <pinMode>
     510:	62 e0       	ldi	r22, 0x02	; 2
     512:	89 e0       	ldi	r24, 0x09	; 9
     514:	76 d3       	rcall	.+1772   	; 0xc02 <pinMode>
     516:	87 e4       	ldi	r24, 0x47	; 71
     518:	92 e0       	ldi	r25, 0x02	; 2
     51a:	b5 d6       	rcall	.+3434   	; 0x1286 <_ZN7MCP25155resetEv>
     51c:	42 e0       	ldi	r20, 0x02	; 2
     51e:	6b e0       	ldi	r22, 0x0B	; 11
     520:	87 e4       	ldi	r24, 0x47	; 71
     522:	92 e0       	ldi	r25, 0x02	; 2
     524:	1a d5       	rcall	.+2612   	; 0xf5a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK>
     526:	87 e4       	ldi	r24, 0x47	; 71
     528:	92 e0       	ldi	r25, 0x02	; 2
     52a:	15 c5       	rjmp	.+2602   	; 0xf56 <_ZN7MCP251513setNormalModeEv>

0000052c <_Z14BSP_led_red_onv>:
     52c:	61 e0       	ldi	r22, 0x01	; 1
     52e:	8c e2       	ldi	r24, 0x2C	; 44
     530:	a4 c3       	rjmp	.+1864   	; 0xc7a <digitalWrite>

00000532 <_Z15BSP_led_red_offv>:
     532:	60 e0       	ldi	r22, 0x00	; 0
     534:	8c e2       	ldi	r24, 0x2C	; 44
     536:	a1 c3       	rjmp	.+1858   	; 0xc7a <digitalWrite>

00000538 <_Z16BSP_led_green_onv>:
     538:	61 e0       	ldi	r22, 0x01	; 1
     53a:	89 e2       	ldi	r24, 0x29	; 41
     53c:	9e c3       	rjmp	.+1852   	; 0xc7a <digitalWrite>

0000053e <_Z17BSP_led_green_offv>:
     53e:	60 e0       	ldi	r22, 0x00	; 0
     540:	89 e2       	ldi	r24, 0x29	; 41
     542:	9b c3       	rjmp	.+1846   	; 0xc7a <digitalWrite>

00000544 <_Z14BSP_get_buttonv>:
     544:	89 e0       	ldi	r24, 0x09	; 9
     546:	c7 c3       	rjmp	.+1934   	; 0xcd6 <digitalRead>

00000548 <_Z18BSP_send_can_frameP9can_frame>:
     548:	bc 01       	movw	r22, r24
     54a:	87 e4       	ldi	r24, 0x47	; 71
     54c:	92 e0       	ldi	r25, 0x02	; 2
     54e:	b6 c7       	rjmp	.+3948   	; 0x14bc <_ZN7MCP251511sendMessageEPK9can_frame>

00000550 <vApplicationTickHook>:
		Active_postFromISR(AO_blinkyButton, &switchPressedEvt, xHigherPriorityTaskWoken);
		state_button = STATE_BUTTON_PRESSED;
	}
}

void vApplicationTickHook(void) {
     550:	cf 93       	push	r28
     552:	df 93       	push	r29
     554:	1f 92       	push	r1
     556:	cd b7       	in	r28, 0x3d	; 61
     558:	de b7       	in	r29, 0x3e	; 62
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
     55a:	19 82       	std	Y+1, r1	; 0x01
	int current = BSP_get_button();
     55c:	f3 df       	rcall	.-26     	; 0x544 <_Z14BSP_get_buttonv>
	
	switch(state_button){
     55e:	20 91 46 02 	lds	r18, 0x0246	; 0x800246 <__data_end>
     562:	21 30       	cpi	r18, 0x01	; 1
     564:	19 f1       	breq	.+70     	; 0x5ac <vApplicationTickHook+0x5c>
     566:	18 f0       	brcs	.+6      	; 0x56e <vApplicationTickHook+0x1e>
     568:	22 30       	cpi	r18, 0x02	; 2
     56a:	81 f0       	breq	.+32     	; 0x58c <vApplicationTickHook+0x3c>
     56c:	21 c0       	rjmp	.+66     	; 0x5b0 <vApplicationTickHook+0x60>

static State_button_t state_button = STATE_BUTTON_INIT;


static void state_button_pressed_handler(const int * reading, BaseType_t * xHigherPriorityTaskWoken){
	if(*reading == BUTTON_NOT_PRESSED){
     56e:	81 30       	cpi	r24, 0x01	; 1
     570:	91 05       	cpc	r25, r1
     572:	61 f4       	brne	.+24     	; 0x58c <vApplicationTickHook+0x3c>
		static Event const switchRelasedEvt = {BUTTON_RELEASED_SIG};
		Active_postFromISR(AO_blinkyButton, &switchRelasedEvt, xHigherPriorityTaskWoken);
     574:	ae 01       	movw	r20, r28
     576:	4f 5f       	subi	r20, 0xFF	; 255
     578:	5f 4f       	sbci	r21, 0xFF	; 255
     57a:	66 e2       	ldi	r22, 0x26	; 38
     57c:	72 e0       	ldi	r23, 0x02	; 2
     57e:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <AO_blinkyButton>
     582:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <AO_blinkyButton+0x1>
     586:	af d0       	rcall	.+350    	; 0x6e6 <_Z18Active_postFromISRP6ActivePK5EventPa>
		state_button = STATE_BUTTON_NOT_PRESSED;
     588:	82 e0       	ldi	r24, 0x02	; 2
     58a:	0d c0       	rjmp	.+26     	; 0x5a6 <vApplicationTickHook+0x56>
	}
}
static void state_button_not_pressed_handler(const int * reading, BaseType_t * xHigherPriorityTaskWoken){
	if(*reading == BUTTON_PRESSED){
     58c:	89 2b       	or	r24, r25
     58e:	81 f4       	brne	.+32     	; 0x5b0 <vApplicationTickHook+0x60>
		static Event const switchPressedEvt = {BUTTON_PRESSED_SIG};
		Active_postFromISR(AO_blinkyButton, &switchPressedEvt, xHigherPriorityTaskWoken);
     590:	ae 01       	movw	r20, r28
     592:	4f 5f       	subi	r20, 0xFF	; 255
     594:	5f 4f       	sbci	r21, 0xFF	; 255
     596:	64 e2       	ldi	r22, 0x24	; 36
     598:	72 e0       	ldi	r23, 0x02	; 2
     59a:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <AO_blinkyButton>
     59e:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <AO_blinkyButton+0x1>
     5a2:	a1 d0       	rcall	.+322    	; 0x6e6 <_Z18Active_postFromISRP6ActivePK5EventPa>
		state_button = STATE_BUTTON_PRESSED;
     5a4:	81 e0       	ldi	r24, 0x01	; 1
     5a6:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <__data_end>
     5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <vApplicationTickHook+0x60>

static State_button_t state_button = STATE_BUTTON_INIT;


static void state_button_pressed_handler(const int * reading, BaseType_t * xHigherPriorityTaskWoken){
	if(*reading == BUTTON_NOT_PRESSED){
     5ac:	01 97       	sbiw	r24, 0x01	; 1
     5ae:	11 f3       	breq	.-60     	; 0x574 <vApplicationTickHook+0x24>
		case STATE_BUTTON_NOT_PRESSED:{					
			state_button_not_pressed_handler(&current, &xHigherPriorityTaskWoken);
			break;
		}
	}
}
     5b0:	0f 90       	pop	r0
     5b2:	df 91       	pop	r29
     5b4:	cf 91       	pop	r28
     5b6:	08 95       	ret

000005b8 <_GLOBAL__sub_I__Z8BSP_initv>:
     5b8:	0f 93       	push	r16
     5ba:	1f 93       	push	r17
#define PIN_LED_RED						44
#define PIN_LED_YELLOW					42
#define PIN_LED_GREEN					41


static MCP2515 mcp2515(SS_PIN);
     5bc:	00 e0       	ldi	r16, 0x00	; 0
     5be:	10 e0       	ldi	r17, 0x00	; 0
     5c0:	20 e8       	ldi	r18, 0x80	; 128
     5c2:	36 e9       	ldi	r19, 0x96	; 150
     5c4:	48 e9       	ldi	r20, 0x98	; 152
     5c6:	50 e0       	ldi	r21, 0x00	; 0
     5c8:	61 e3       	ldi	r22, 0x31	; 49
     5ca:	87 e4       	ldi	r24, 0x47	; 71
     5cc:	92 e0       	ldi	r25, 0x02	; 2
     5ce:	00 d4       	rcall	.+2048   	; 0xdd0 <_ZN7MCP2515C1EhmP8SPIClass>
		case STATE_BUTTON_NOT_PRESSED:{					
			state_button_not_pressed_handler(&current, &xHigherPriorityTaskWoken);
			break;
		}
	}
}
     5d0:	1f 91       	pop	r17
     5d2:	0f 91       	pop	r16
     5d4:	08 95       	ret

000005d6 <_ZL16Active_eventLoopPv>:
    me->dispatch = dispatch; /* assign the dispatch handler */
}

/*..........................................................................*/
/* thread function for all Active Objects (FreeRTOS task signature) */
static void Active_eventLoop(void *pvParameters) {
     5d6:	cf 93       	push	r28
     5d8:	df 93       	push	r29
     5da:	1f 92       	push	r1
     5dc:	1f 92       	push	r1
     5de:	cd b7       	in	r28, 0x3d	; 61
     5e0:	de b7       	in	r29, 0x3e	; 62
     5e2:	8c 01       	movw	r16, r24
    static Event const initEvt = { INIT_SIG };

    configASSERT(me); /* Active object must be provided */

    /* initialize the AO */
    (*me->dispatch)(me, &initEvt);
     5e4:	7c 01       	movw	r14, r24
     5e6:	8b e4       	ldi	r24, 0x4B	; 75
     5e8:	e8 0e       	add	r14, r24
     5ea:	f1 1c       	adc	r15, r1
     5ec:	d7 01       	movw	r26, r14
     5ee:	ed 91       	ld	r30, X+
     5f0:	fc 91       	ld	r31, X
     5f2:	6e e2       	ldi	r22, 0x2E	; 46
     5f4:	72 e0       	ldi	r23, 0x02	; 2
     5f6:	c8 01       	movw	r24, r16
     5f8:	19 95       	eicall

    for (;;) {   /* for-ever "superloop" */
        Event const *e; /* pointer to event object ("message") */

        /* wait for any event and receive it into object 'e' */
        xQueueReceive(me->queue, &e, portMAX_DELAY); /* BLOCKING! */
     5fa:	4f ef       	ldi	r20, 0xFF	; 255
     5fc:	5f ef       	ldi	r21, 0xFF	; 255
     5fe:	be 01       	movw	r22, r28
     600:	6f 5f       	subi	r22, 0xFF	; 255
     602:	7f 4f       	sbci	r23, 0xFF	; 255
     604:	f8 01       	movw	r30, r16
     606:	82 a5       	ldd	r24, Z+42	; 0x2a
     608:	93 a5       	ldd	r25, Z+43	; 0x2b
     60a:	0e 94 8e 0c 	call	0x191c	; 0x191c <xQueueReceive>
        configASSERT(e != (Event const *)0);

        /* dispatch event to the active object 'me' */
        (*me->dispatch)(me, e); /* NO BLOCKING! */
     60e:	69 81       	ldd	r22, Y+1	; 0x01
     610:	7a 81       	ldd	r23, Y+2	; 0x02
     612:	d7 01       	movw	r26, r14
     614:	ed 91       	ld	r30, X+
     616:	fc 91       	ld	r31, X
     618:	ee cf       	rjmp	.-36     	; 0x5f6 <_ZL16Active_eventLoopPv+0x20>

0000061a <_Z11Active_ctorP6ActivePFvS0_PK5EventE>:
*****************************************************************************/
#include "FreeAct.h" /* Free Active Object interface */

/*..........................................................................*/
void Active_ctor(Active * const me, DispatchHandler dispatch) {
    me->dispatch = dispatch; /* assign the dispatch handler */
     61a:	85 5b       	subi	r24, 0xB5	; 181
     61c:	9f 4f       	sbci	r25, 0xFF	; 255
     61e:	fc 01       	movw	r30, r24
     620:	71 83       	std	Z+1, r23	; 0x01
     622:	60 83       	st	Z, r22
     624:	08 95       	ret

00000626 <_Z12Active_startP6ActivehPP5EventmPvmj>:
                  Event **queueSto,
                  uint32_t queueLen,
                  void *stackSto,
                  uint32_t stackSize,
                  uint16_t opt)
{
     626:	4f 92       	push	r4
     628:	5f 92       	push	r5
     62a:	6f 92       	push	r6
     62c:	7f 92       	push	r7
     62e:	8f 92       	push	r8
     630:	9f 92       	push	r9
     632:	af 92       	push	r10
     634:	bf 92       	push	r11
     636:	cf 92       	push	r12
     638:	df 92       	push	r13
     63a:	ef 92       	push	r14
     63c:	ff 92       	push	r15
     63e:	0f 93       	push	r16
     640:	1f 93       	push	r17
     642:	cf 93       	push	r28
     644:	df 93       	push	r29
     646:	cd b7       	in	r28, 0x3d	; 61
     648:	de b7       	in	r29, 0x3e	; 62
     64a:	4c 01       	movw	r8, r24
     64c:	16 2f       	mov	r17, r22
     64e:	80 2f       	mov	r24, r16
     650:	25 01       	movw	r4, r10
     652:	36 01       	movw	r6, r12
    StackType_t *stk_sto = (StackType_t *)stackSto;
    uint32_t stk_depth = (stackSize / sizeof(StackType_t));

    (void)opt; /* unused parameter */
    me->queue = xQueueCreateStatic(
     654:	94 01       	movw	r18, r8
     656:	24 5d       	subi	r18, 0xD4	; 212
     658:	3f 4f       	sbci	r19, 0xFF	; 255
     65a:	00 e0       	ldi	r16, 0x00	; 0
     65c:	62 e0       	ldi	r22, 0x02	; 2
     65e:	0e 94 b4 0b 	call	0x1768	; 0x1768 <xQueueGenericCreateStatic>
                   queueLen,            /* queue length - provided by user */
                   sizeof(Event *),     /* item size */
                   (uint8_t *)queueSto, /* queue storage - provided by user */
                   &me->queue_cb);      /* queue control block */
     662:	f4 01       	movw	r30, r8
     664:	93 a7       	std	Z+43, r25	; 0x2b
     666:	82 a7       	std	Z+42, r24	; 0x2a
    configASSERT(me->queue);            /* queue must be created */

    me->thread = xTaskCreateStatic(
     668:	64 01       	movw	r12, r8
     66a:	f2 e0       	ldi	r31, 0x02	; 2
     66c:	cf 0e       	add	r12, r31
     66e:	d1 1c       	adc	r13, r1
     670:	01 2f       	mov	r16, r17
     672:	94 01       	movw	r18, r8
     674:	a2 01       	movw	r20, r4
     676:	68 e2       	ldi	r22, 0x28	; 40
     678:	72 e0       	ldi	r23, 0x02	; 2
     67a:	8b ee       	ldi	r24, 0xEB	; 235
     67c:	92 e0       	ldi	r25, 0x02	; 2
     67e:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <xTaskCreateStatic>
              "AO" ,                    /* the name of the task */
              stk_depth,                /* stack depth */
              me,                       /* the 'pvParameters' parameter */
              prio + tskIDLE_PRIORITY,  /* FreeRTOS priority */
              stk_sto,                  /* stack storage - provided by user */
              &me->thread_cb);          /* task control block */
     682:	f4 01       	movw	r30, r8
     684:	91 83       	std	Z+1, r25	; 0x01
     686:	80 83       	st	Z, r24
    configASSERT(me->thread);           /* thread must be created */
}
     688:	df 91       	pop	r29
     68a:	cf 91       	pop	r28
     68c:	1f 91       	pop	r17
     68e:	0f 91       	pop	r16
     690:	ff 90       	pop	r15
     692:	ef 90       	pop	r14
     694:	df 90       	pop	r13
     696:	cf 90       	pop	r12
     698:	bf 90       	pop	r11
     69a:	af 90       	pop	r10
     69c:	9f 90       	pop	r9
     69e:	8f 90       	pop	r8
     6a0:	7f 90       	pop	r7
     6a2:	6f 90       	pop	r6
     6a4:	5f 90       	pop	r5
     6a6:	4f 90       	pop	r4
     6a8:	08 95       	ret

000006aa <_Z11Active_postP6ActivePK5Event>:

/*..........................................................................*/
void Active_post(Active * const me, Event const * const e) {
     6aa:	cf 93       	push	r28
     6ac:	df 93       	push	r29
     6ae:	1f 92       	push	r1
     6b0:	1f 92       	push	r1
     6b2:	cd b7       	in	r28, 0x3d	; 61
     6b4:	de b7       	in	r29, 0x3e	; 62
     6b6:	7a 83       	std	Y+2, r23	; 0x02
     6b8:	69 83       	std	Y+1, r22	; 0x01
    BaseType_t status = xQueueSend(me->queue, (void *)&e, (TickType_t)0);
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	40 e0       	ldi	r20, 0x00	; 0
     6be:	50 e0       	ldi	r21, 0x00	; 0
     6c0:	be 01       	movw	r22, r28
     6c2:	6f 5f       	subi	r22, 0xFF	; 255
     6c4:	7f 4f       	sbci	r23, 0xFF	; 255
     6c6:	fc 01       	movw	r30, r24
     6c8:	82 a5       	ldd	r24, Z+42	; 0x2a
     6ca:	93 a5       	ldd	r25, Z+43	; 0x2b
     6cc:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <xQueueGenericSend>
    configASSERT(status == pdTRUE);
}
     6d0:	0f 90       	pop	r0
     6d2:	0f 90       	pop	r0
     6d4:	df 91       	pop	r29
     6d6:	cf 91       	pop	r28
     6d8:	08 95       	ret

000006da <_ZL18TimeEvent_callbackP10TimerDef_t>:
#define GET_TIME_EVENT_HEAD(ptr) \
    (TimeEvent*)((uintptr_t)(ptr) - offsetof(TimeEvent, timer_cb))

static void TimeEvent_callback(TimerHandle_t xTimer) {
    /* Also can use pvTimerGetTimerID(xTimer) */
    TimeEvent * const t = GET_TIME_EVENT_HEAD(xTimer);
     6da:	06 97       	sbiw	r24, 0x06	; 6

    /* Callback always called from non-interrupt context so no need
     * to check xPortIsInsideInterrupt
     */
    Active_post(t->act, &t->super);
     6dc:	bc 01       	movw	r22, r24
     6de:	fc 01       	movw	r30, r24
     6e0:	82 81       	ldd	r24, Z+2	; 0x02
     6e2:	93 81       	ldd	r25, Z+3	; 0x03
     6e4:	e2 cf       	rjmp	.-60     	; 0x6aa <_Z11Active_postP6ActivePK5Event>

000006e6 <_Z18Active_postFromISRP6ActivePK5EventPa>:
}

/*..........................................................................*/
void Active_postFromISR(Active * const me, Event const * const e,
                        BaseType_t *pxHigherPriorityTaskWoken)
{
     6e6:	cf 93       	push	r28
     6e8:	df 93       	push	r29
     6ea:	1f 92       	push	r1
     6ec:	1f 92       	push	r1
     6ee:	cd b7       	in	r28, 0x3d	; 61
     6f0:	de b7       	in	r29, 0x3e	; 62
     6f2:	7a 83       	std	Y+2, r23	; 0x02
     6f4:	69 83       	std	Y+1, r22	; 0x01
    BaseType_t status = xQueueSendFromISR(me->queue, (void *)&e,
     6f6:	20 e0       	ldi	r18, 0x00	; 0
     6f8:	be 01       	movw	r22, r28
     6fa:	6f 5f       	subi	r22, 0xFF	; 255
     6fc:	7f 4f       	sbci	r23, 0xFF	; 255
     6fe:	fc 01       	movw	r30, r24
     700:	82 a5       	ldd	r24, Z+42	; 0x2a
     702:	93 a5       	ldd	r25, Z+43	; 0x2b
     704:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <xQueueGenericSendFromISR>
                                          pxHigherPriorityTaskWoken);
    configASSERT(status == pdTRUE);
}
     708:	0f 90       	pop	r0
     70a:	0f 90       	pop	r0
     70c:	df 91       	pop	r29
     70e:	cf 91       	pop	r28
     710:	08 95       	ret

00000712 <_Z14TimeEvent_ctorP9TimeEventjP6Active>:
/*--------------------------------------------------------------------------*/
/* Time Event services... */
static void TimeEvent_callback(TimerHandle_t xTimer);

/*..........................................................................*/
void TimeEvent_ctor(TimeEvent * const me, Signal sig, Active *act) {
     712:	ef 92       	push	r14
     714:	ff 92       	push	r15
     716:	0f 93       	push	r16
     718:	1f 93       	push	r17
     71a:	cf 93       	push	r28
     71c:	df 93       	push	r29
     71e:	ec 01       	movw	r28, r24
    /* no critical section because it is presumed that all TimeEvents
     * are created *before* multitasking has started.
     */
    me->super.sig = sig;
     720:	79 83       	std	Y+1, r23	; 0x01
     722:	68 83       	st	Y, r22
    me->act = act;
     724:	5b 83       	std	Y+3, r21	; 0x03
     726:	4a 83       	std	Y+2, r20	; 0x02

    /* Create a timer object */
    me->timer = xTimerCreateStatic("TE", 1U, me->type, me,
     728:	7c 01       	movw	r14, r24
     72a:	86 e0       	ldi	r24, 0x06	; 6
     72c:	e8 0e       	add	r14, r24
     72e:	f1 1c       	adc	r15, r1
     730:	0d e6       	ldi	r16, 0x6D	; 109
     732:	13 e0       	ldi	r17, 0x03	; 3
     734:	9e 01       	movw	r18, r28
     736:	49 8d       	ldd	r20, Y+25	; 0x19
     738:	61 e0       	ldi	r22, 0x01	; 1
     73a:	70 e0       	ldi	r23, 0x00	; 0
     73c:	8b e2       	ldi	r24, 0x2B	; 43
     73e:	92 e0       	ldi	r25, 0x02	; 2
     740:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <xTimerCreateStatic>
                                   TimeEvent_callback, &me->timer_cb);
     744:	9d 83       	std	Y+5, r25	; 0x05
     746:	8c 83       	std	Y+4, r24	; 0x04
    configASSERT(me->timer);            /* timer must be created */
}
     748:	df 91       	pop	r29
     74a:	cf 91       	pop	r28
     74c:	1f 91       	pop	r17
     74e:	0f 91       	pop	r16
     750:	ff 90       	pop	r15
     752:	ef 90       	pop	r14
     754:	08 95       	ret

00000756 <_Z13TimeEvent_armP9TimeEventm>:

/*..........................................................................*/
void TimeEvent_arm(TimeEvent * const me, uint32_t millisec) {
     756:	0f 93       	push	r16
     758:	1f 93       	push	r17
    TickType_t ticks;
    BaseType_t status;
    BaseType_t xHigherPriorityTaskWoken;

    ticks = (millisec / portTICK_PERIOD_MS);
     75a:	24 e0       	ldi	r18, 0x04	; 4
     75c:	76 95       	lsr	r23
     75e:	67 95       	ror	r22
     760:	57 95       	ror	r21
     762:	47 95       	ror	r20
     764:	2a 95       	dec	r18
     766:	d1 f7       	brne	.-12     	; 0x75c <_Z13TimeEvent_armP9TimeEventm+0x6>
    if (ticks == 0U) {
     768:	41 15       	cp	r20, r1
     76a:	51 05       	cpc	r21, r1
     76c:	11 f4       	brne	.+4      	; 0x772 <_Z13TimeEvent_armP9TimeEventm+0x1c>
        ticks = 1U;
     76e:	41 e0       	ldi	r20, 0x01	; 1
     770:	50 e0       	ldi	r21, 0x00	; 0
    }

    
    status = xTimerChangePeriod(me->timer, ticks, 0);
     772:	00 e0       	ldi	r16, 0x00	; 0
     774:	10 e0       	ldi	r17, 0x00	; 0
     776:	20 e0       	ldi	r18, 0x00	; 0
     778:	30 e0       	ldi	r19, 0x00	; 0
     77a:	64 e0       	ldi	r22, 0x04	; 4
     77c:	fc 01       	movw	r30, r24
     77e:	84 81       	ldd	r24, Z+4	; 0x04
     780:	95 81       	ldd	r25, Z+5	; 0x05
     782:	0e 94 22 14 	call	0x2844	; 0x2844 <xTimerGenericCommand>
    configASSERT(status == pdPASS);
    
}
     786:	1f 91       	pop	r17
     788:	0f 91       	pop	r16
     78a:	08 95       	ret

0000078c <_Z16TimeEvent_disarmP9TimeEvent>:

/*..........................................................................*/
void TimeEvent_disarm(TimeEvent * const me) {
     78c:	0f 93       	push	r16
     78e:	1f 93       	push	r17
    BaseType_t xHigherPriorityTaskWoken;
    BaseType_t status;

   
    status = xTimerStop(me->timer, 0);
     790:	00 e0       	ldi	r16, 0x00	; 0
     792:	10 e0       	ldi	r17, 0x00	; 0
     794:	20 e0       	ldi	r18, 0x00	; 0
     796:	30 e0       	ldi	r19, 0x00	; 0
     798:	40 e0       	ldi	r20, 0x00	; 0
     79a:	50 e0       	ldi	r21, 0x00	; 0
     79c:	63 e0       	ldi	r22, 0x03	; 3
     79e:	fc 01       	movw	r30, r24
     7a0:	84 81       	ldd	r24, Z+4	; 0x04
     7a2:	95 81       	ldd	r25, Z+5	; 0x05
     7a4:	0e 94 22 14 	call	0x2844	; 0x2844 <xTimerGenericCommand>
    configASSERT(status == pdPASS);
    
}
     7a8:	1f 91       	pop	r17
     7aa:	0f 91       	pop	r16
     7ac:	08 95       	ret

000007ae <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event>:

/* Function Prototype ============================================================*/
void BlinkyButton_ctor(BlinkyButton * const me);


static void BlinkyButton_dispatch(BlinkyButton * const me, Event const * const e) {
     7ae:	ef 92       	push	r14
     7b0:	ff 92       	push	r15
     7b2:	0f 93       	push	r16
     7b4:	1f 93       	push	r17
     7b6:	cf 93       	push	r28
     7b8:	df 93       	push	r29
     7ba:	ec 01       	movw	r28, r24
	switch (e->sig) {
     7bc:	fb 01       	movw	r30, r22
     7be:	80 81       	ld	r24, Z
     7c0:	91 81       	ldd	r25, Z+1	; 0x01
     7c2:	81 30       	cpi	r24, 0x01	; 1
     7c4:	91 05       	cpc	r25, r1
     7c6:	11 f1       	breq	.+68     	; 0x80c <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0x5e>
     7c8:	d0 f0       	brcs	.+52     	; 0x7fe <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0x50>
     7ca:	02 97       	sbiw	r24, 0x02	; 2
     7cc:	09 f0       	breq	.+2      	; 0x7d0 <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0x22>
     7ce:	50 c0       	rjmp	.+160    	; 0x870 <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0xc2>
			BSP_led_green_on();
			break;
		}
		
		case BUTTON_PRESSED_SIG:{
			BSP_led_green_off();
     7d0:	b6 de       	rcall	.-660    	; 0x53e <_Z17BSP_led_green_offv>
				
			BSP_send_can_frame(&frame_sos_triggered);
     7d2:	88 e0       	ldi	r24, 0x08	; 8
     7d4:	92 e0       	ldi	r25, 0x02	; 2
     7d6:	b8 de       	rcall	.-656    	; 0x548 <_Z18BSP_send_can_frameP9can_frame>
			
			me->counter = 0;
     7d8:	fe 01       	movw	r30, r28
     7da:	e8 59       	subi	r30, 0x98	; 152
     7dc:	ff 4f       	sbci	r31, 0xFF	; 255
     7de:	11 82       	std	Z+1, r1	; 0x01
     7e0:	10 82       	st	Z, r1
			TimeEvent_arm(&me->te, LED_BLINK_PERIOD_MS);
     7e2:	48 ee       	ldi	r20, 0xE8	; 232
     7e4:	53 e0       	ldi	r21, 0x03	; 3
     7e6:	60 e0       	ldi	r22, 0x00	; 0
     7e8:	70 e0       	ldi	r23, 0x00	; 0
     7ea:	ce 01       	movw	r24, r28
     7ec:	83 5b       	subi	r24, 0xB3	; 179
     7ee:	9f 4f       	sbci	r25, 0xFF	; 255
			BSP_led_red_on();
     7f0:	b2 df       	rcall	.-156    	; 0x756 <_Z13TimeEvent_armP9TimeEventm>
     7f2:	9c de       	rcall	.-712    	; 0x52c <_Z14BSP_led_red_onv>
			me->isLedOn = true;
     7f4:	c9 59       	subi	r28, 0x99	; 153
     7f6:	df 4f       	sbci	r29, 0xFF	; 255
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	88 83       	st	Y, r24

			break;
     7fc:	39 c0       	rjmp	.+114    	; 0x870 <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0xc2>
		
		default: {
			break;
		}
	}
}
     7fe:	df 91       	pop	r29
     800:	cf 91       	pop	r28
     802:	1f 91       	pop	r17
     804:	0f 91       	pop	r16
     806:	ff 90       	pop	r15


static void BlinkyButton_dispatch(BlinkyButton * const me, Event const * const e) {
	switch (e->sig) {
		case INIT_SIG:{
			BSP_led_green_on();
     808:	ef 90       	pop	r14
     80a:	96 ce       	rjmp	.-724    	; 0x538 <_Z16BSP_led_green_onv>

			break;
		}
			
		case TIMEOUT_SIG: {
			if (!me->isLedOn) { /* LED not on */
     80c:	7e 01       	movw	r14, r28
     80e:	f7 e6       	ldi	r31, 0x67	; 103
     810:	ef 0e       	add	r14, r31
     812:	f1 1c       	adc	r15, r1
     814:	f7 01       	movw	r30, r14
     816:	80 81       	ld	r24, Z
     818:	8e 01       	movw	r16, r28
     81a:	03 5b       	subi	r16, 0xB3	; 179
     81c:	1f 4f       	sbci	r17, 0xFF	; 255
     81e:	81 11       	cpse	r24, r1
     820:	18 c0       	rjmp	.+48     	; 0x852 <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0xa4>
				(me->counter)++;
     822:	c8 59       	subi	r28, 0x98	; 152
     824:	df 4f       	sbci	r29, 0xFF	; 255
     826:	88 81       	ld	r24, Y
     828:	99 81       	ldd	r25, Y+1	; 0x01
     82a:	01 96       	adiw	r24, 0x01	; 1
     82c:	99 83       	std	Y+1, r25	; 0x01
				if(me->counter >= SOS_NUMBER_OF_LED_BLINK){
     82e:	88 83       	st	Y, r24
     830:	03 97       	sbiw	r24, 0x03	; 3
					TimeEvent_disarm(&me->te);
     832:	54 f0       	brlt	.+20     	; 0x848 <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0x9a>
     834:	c8 01       	movw	r24, r16
     836:	aa df       	rcall	.-172    	; 0x78c <_Z16TimeEvent_disarmP9TimeEvent>
					BSP_led_green_on();
     838:	7f de       	rcall	.-770    	; 0x538 <_Z16BSP_led_green_onv>
		
		default: {
			break;
		}
	}
}
     83a:	df 91       	pop	r29
     83c:	cf 91       	pop	r28
     83e:	1f 91       	pop	r17
     840:	0f 91       	pop	r16
     842:	ff 90       	pop	r15
			if (!me->isLedOn) { /* LED not on */
				(me->counter)++;
				if(me->counter >= SOS_NUMBER_OF_LED_BLINK){
					TimeEvent_disarm(&me->te);
					BSP_led_green_on();
					BSP_led_red_off();
     844:	ef 90       	pop	r14
     846:	75 ce       	rjmp	.-790    	; 0x532 <_Z15BSP_led_red_offv>
				}else{
					BSP_led_red_on();
     848:	71 de       	rcall	.-798    	; 0x52c <_Z14BSP_led_red_onv>
     84a:	81 e0       	ldi	r24, 0x01	; 1
					me->isLedOn = true;
     84c:	f7 01       	movw	r30, r14
     84e:	80 83       	st	Z, r24
     850:	03 c0       	rjmp	.+6      	; 0x858 <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0xaa>
     852:	6f de       	rcall	.-802    	; 0x532 <_Z15BSP_led_red_offv>
					TimeEvent_arm(&me->te, LED_BLINK_PERIOD_MS);
				}
			}
			else {  /* LED is on */
				BSP_led_red_off();
     854:	f7 01       	movw	r30, r14
     856:	10 82       	st	Z, r1
				me->isLedOn = false;
     858:	48 ee       	ldi	r20, 0xE8	; 232
     85a:	53 e0       	ldi	r21, 0x03	; 3
				TimeEvent_arm(&me->te, LED_BLINK_PERIOD_MS);
     85c:	60 e0       	ldi	r22, 0x00	; 0
     85e:	70 e0       	ldi	r23, 0x00	; 0
     860:	c8 01       	movw	r24, r16
     862:	df 91       	pop	r29
		
		default: {
			break;
		}
	}
}
     864:	cf 91       	pop	r28
     866:	1f 91       	pop	r17
     868:	0f 91       	pop	r16
     86a:	ff 90       	pop	r15
     86c:	ef 90       	pop	r14
     86e:	73 cf       	rjmp	.-282    	; 0x756 <_Z13TimeEvent_armP9TimeEventm>
				}
			}
			else {  /* LED is on */
				BSP_led_red_off();
				me->isLedOn = false;
				TimeEvent_arm(&me->te, LED_BLINK_PERIOD_MS);
     870:	df 91       	pop	r29
     872:	cf 91       	pop	r28
		
		default: {
			break;
		}
	}
}
     874:	1f 91       	pop	r17
     876:	0f 91       	pop	r16
     878:	ff 90       	pop	r15
     87a:	ef 90       	pop	r14
     87c:	08 95       	ret

0000087e <_Z17BlinkyButton_ctorP12BlinkyButton>:
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
void BlinkyButton_ctor(BlinkyButton * const me) {
     882:	ec 01       	movw	r28, r24
	Active_ctor(&me->super, (DispatchHandler)&BlinkyButton_dispatch);
     884:	67 ed       	ldi	r22, 0xD7	; 215
     886:	73 e0       	ldi	r23, 0x03	; 3
     888:	c8 de       	rcall	.-624    	; 0x61a <_Z11Active_ctorP6ActivePFvS0_PK5EventE>
	me->te.type = TYPE_ONE_SHOT;
     88a:	fe 01       	movw	r30, r28
     88c:	ea 59       	subi	r30, 0x9A	; 154
     88e:	ff 4f       	sbci	r31, 0xFF	; 255
     890:	10 82       	st	Z, r1
	TimeEvent_ctor(&me->te, TIMEOUT_SIG, &me->super);
     892:	ae 01       	movw	r20, r28
     894:	61 e0       	ldi	r22, 0x01	; 1
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	ce 01       	movw	r24, r28
     89a:	83 5b       	subi	r24, 0xB3	; 179
     89c:	9f 4f       	sbci	r25, 0xFF	; 255
     89e:	39 df       	rcall	.-398    	; 0x712 <_Z14TimeEvent_ctorP9TimeEventjP6Active>
	me->isLedOn = false;
     8a0:	c9 59       	subi	r28, 0x99	; 153
     8a2:	df 4f       	sbci	r29, 0xFF	; 255
     8a4:	18 82       	st	Y, r1
}
     8a6:	df 91       	pop	r29
     8a8:	cf 91       	pop	r28
     8aa:	08 95       	ret

000008ac <setup>:
static StackType_t blinkyButton_stack[configMINIMAL_STACK_SIZE]; /* task stack */
static Event *blinkyButton_queue[10];
static BlinkyButton blinkyButton;
Active *AO_blinkyButton = &blinkyButton.super;

void setup() {
     8ac:	8f 92       	push	r8
     8ae:	9f 92       	push	r9
     8b0:	af 92       	push	r10
     8b2:	bf 92       	push	r11
     8b4:	cf 92       	push	r12
     8b6:	df 92       	push	r13
     8b8:	ef 92       	push	r14
     8ba:	ff 92       	push	r15
     8bc:	0f 93       	push	r16
     8be:	1f 93       	push	r17
	BSP_init();
     8c0:	1b de       	rcall	.-970    	; 0x4f8 <_Z8BSP_initv>
	
	   /* create and start the BlinkyButton AO */
	   BlinkyButton_ctor(&blinkyButton);
     8c2:	8e e4       	ldi	r24, 0x4E	; 78
     8c4:	92 e0       	ldi	r25, 0x02	; 2
     8c6:	db df       	rcall	.-74     	; 0x87e <_Z17BlinkyButton_ctorP12BlinkyButton>
					1U,
					blinkyButton_queue,
					sizeof(blinkyButton_queue)/sizeof(blinkyButton_queue[0]),
					blinkyButton_stack,
					sizeof(blinkyButton_stack),
					0U);
     8c8:	81 2c       	mov	r8, r1
     8ca:	91 2c       	mov	r9, r1
     8cc:	80 ec       	ldi	r24, 0xC0	; 192
     8ce:	a8 2e       	mov	r10, r24
     8d0:	b1 2c       	mov	r11, r1
     8d2:	c1 2c       	mov	r12, r1
     8d4:	d1 2c       	mov	r13, r1
     8d6:	9c ec       	ldi	r25, 0xCC	; 204
     8d8:	e9 2e       	mov	r14, r25
     8da:	92 e0       	ldi	r25, 0x02	; 2
     8dc:	f9 2e       	mov	r15, r25
     8de:	0a e0       	ldi	r16, 0x0A	; 10
     8e0:	10 e0       	ldi	r17, 0x00	; 0
     8e2:	20 e0       	ldi	r18, 0x00	; 0
     8e4:	30 e0       	ldi	r19, 0x00	; 0
     8e6:	48 eb       	ldi	r20, 0xB8	; 184
     8e8:	52 e0       	ldi	r21, 0x02	; 2
     8ea:	61 e0       	ldi	r22, 0x01	; 1
     8ec:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <AO_blinkyButton>
     8f0:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <AO_blinkyButton+0x1>
     8f4:	98 de       	rcall	.-720    	; 0x626 <_Z12Active_startP6ActivehPP5EventmPvmj>
	   
	vTaskStartScheduler();
}
     8f6:	1f 91       	pop	r17
     8f8:	0f 91       	pop	r16
     8fa:	ff 90       	pop	r15
     8fc:	ef 90       	pop	r14
     8fe:	df 90       	pop	r13
     900:	cf 90       	pop	r12
     902:	bf 90       	pop	r11
     904:	af 90       	pop	r10
     906:	9f 90       	pop	r9
     908:	8f 90       	pop	r8
					sizeof(blinkyButton_queue)/sizeof(blinkyButton_queue[0]),
					blinkyButton_stack,
					sizeof(blinkyButton_stack),
					0U);
	   
	vTaskStartScheduler();
     90a:	0c 94 c4 0e 	jmp	0x1d88	; 0x1d88 <vTaskStartScheduler>

0000090e <loop>:
}

void loop() {
     90e:	08 95       	ret

00000910 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     910:	c0 d0       	rcall	.+384    	; 0xa92 <init>

	initVariant();
     912:	0e 94 5f 14 	call	0x28be	; 0x28be <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     916:	ca df       	rcall	.-108    	; 0x8ac <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     918:	c0 e0       	ldi	r28, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
     91a:	d0 e0       	ldi	r29, 0x00	; 0
     91c:	f8 df       	rcall	.-16     	; 0x90e <loop>
		if (serialEventRun) serialEventRun();
     91e:	20 97       	sbiw	r28, 0x00	; 0
     920:	e9 f3       	breq	.-6      	; 0x91c <main+0xc>
     922:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     926:	fa cf       	rjmp	.-12     	; 0x91c <main+0xc>

00000928 <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     928:	1f 92       	push	r1
     92a:	0f 92       	push	r0
     92c:	0f b6       	in	r0, 0x3f	; 63
     92e:	0f 92       	push	r0
     930:	11 24       	eor	r1, r1
     932:	2f 93       	push	r18
     934:	3f 93       	push	r19
     936:	8f 93       	push	r24
     938:	9f 93       	push	r25
     93a:	af 93       	push	r26
     93c:	bf 93       	push	r27
     93e:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <timer0_millis>
     942:	90 91 8e 03 	lds	r25, 0x038E	; 0x80038e <timer0_millis+0x1>
     946:	a0 91 8f 03 	lds	r26, 0x038F	; 0x80038f <timer0_millis+0x2>
     94a:	b0 91 90 03 	lds	r27, 0x0390	; 0x800390 <timer0_millis+0x3>
     94e:	30 91 8c 03 	lds	r19, 0x038C	; 0x80038c <timer0_fract>
     952:	23 e0       	ldi	r18, 0x03	; 3
     954:	23 0f       	add	r18, r19
     956:	2d 37       	cpi	r18, 0x7D	; 125
     958:	20 f4       	brcc	.+8      	; 0x962 <__vector_23+0x3a>
     95a:	01 96       	adiw	r24, 0x01	; 1
     95c:	a1 1d       	adc	r26, r1
     95e:	b1 1d       	adc	r27, r1
     960:	05 c0       	rjmp	.+10     	; 0x96c <__vector_23+0x44>
     962:	26 e8       	ldi	r18, 0x86	; 134
     964:	23 0f       	add	r18, r19
     966:	02 96       	adiw	r24, 0x02	; 2
     968:	a1 1d       	adc	r26, r1
     96a:	b1 1d       	adc	r27, r1
     96c:	20 93 8c 03 	sts	0x038C, r18	; 0x80038c <timer0_fract>
     970:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <timer0_millis>
     974:	90 93 8e 03 	sts	0x038E, r25	; 0x80038e <timer0_millis+0x1>
     978:	a0 93 8f 03 	sts	0x038F, r26	; 0x80038f <timer0_millis+0x2>
     97c:	b0 93 90 03 	sts	0x0390, r27	; 0x800390 <timer0_millis+0x3>
     980:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <timer0_overflow_count>
     984:	90 91 92 03 	lds	r25, 0x0392	; 0x800392 <timer0_overflow_count+0x1>
     988:	a0 91 93 03 	lds	r26, 0x0393	; 0x800393 <timer0_overflow_count+0x2>
     98c:	b0 91 94 03 	lds	r27, 0x0394	; 0x800394 <timer0_overflow_count+0x3>
     990:	01 96       	adiw	r24, 0x01	; 1
     992:	a1 1d       	adc	r26, r1
     994:	b1 1d       	adc	r27, r1
     996:	80 93 91 03 	sts	0x0391, r24	; 0x800391 <timer0_overflow_count>
     99a:	90 93 92 03 	sts	0x0392, r25	; 0x800392 <timer0_overflow_count+0x1>
     99e:	a0 93 93 03 	sts	0x0393, r26	; 0x800393 <timer0_overflow_count+0x2>
     9a2:	b0 93 94 03 	sts	0x0394, r27	; 0x800394 <timer0_overflow_count+0x3>
     9a6:	bf 91       	pop	r27
     9a8:	af 91       	pop	r26
     9aa:	9f 91       	pop	r25
     9ac:	8f 91       	pop	r24
     9ae:	3f 91       	pop	r19
     9b0:	2f 91       	pop	r18
     9b2:	0f 90       	pop	r0
     9b4:	0f be       	out	0x3f, r0	; 63
     9b6:	0f 90       	pop	r0
     9b8:	1f 90       	pop	r1
     9ba:	18 95       	reti

000009bc <millis>:
     9bc:	2f b7       	in	r18, 0x3f	; 63
     9be:	f8 94       	cli
     9c0:	60 91 8d 03 	lds	r22, 0x038D	; 0x80038d <timer0_millis>
     9c4:	70 91 8e 03 	lds	r23, 0x038E	; 0x80038e <timer0_millis+0x1>
     9c8:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <timer0_millis+0x2>
     9cc:	90 91 90 03 	lds	r25, 0x0390	; 0x800390 <timer0_millis+0x3>
     9d0:	2f bf       	out	0x3f, r18	; 63
     9d2:	08 95       	ret

000009d4 <micros>:
     9d4:	3f b7       	in	r19, 0x3f	; 63
     9d6:	f8 94       	cli
     9d8:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <timer0_overflow_count>
     9dc:	90 91 92 03 	lds	r25, 0x0392	; 0x800392 <timer0_overflow_count+0x1>
     9e0:	a0 91 93 03 	lds	r26, 0x0393	; 0x800393 <timer0_overflow_count+0x2>
     9e4:	b0 91 94 03 	lds	r27, 0x0394	; 0x800394 <timer0_overflow_count+0x3>
     9e8:	26 b5       	in	r18, 0x26	; 38
     9ea:	a8 9b       	sbis	0x15, 0	; 21
     9ec:	05 c0       	rjmp	.+10     	; 0x9f8 <micros+0x24>
     9ee:	2f 3f       	cpi	r18, 0xFF	; 255
     9f0:	19 f0       	breq	.+6      	; 0x9f8 <micros+0x24>
     9f2:	01 96       	adiw	r24, 0x01	; 1
     9f4:	a1 1d       	adc	r26, r1
     9f6:	b1 1d       	adc	r27, r1
     9f8:	3f bf       	out	0x3f, r19	; 63
     9fa:	ba 2f       	mov	r27, r26
     9fc:	a9 2f       	mov	r26, r25
     9fe:	98 2f       	mov	r25, r24
     a00:	88 27       	eor	r24, r24
     a02:	82 0f       	add	r24, r18
     a04:	91 1d       	adc	r25, r1
     a06:	a1 1d       	adc	r26, r1
     a08:	b1 1d       	adc	r27, r1
     a0a:	bc 01       	movw	r22, r24
     a0c:	cd 01       	movw	r24, r26
     a0e:	42 e0       	ldi	r20, 0x02	; 2
     a10:	66 0f       	add	r22, r22
     a12:	77 1f       	adc	r23, r23
     a14:	88 1f       	adc	r24, r24
     a16:	99 1f       	adc	r25, r25
     a18:	4a 95       	dec	r20
     a1a:	d1 f7       	brne	.-12     	; 0xa10 <micros+0x3c>
     a1c:	08 95       	ret

00000a1e <delay>:
     a1e:	8f 92       	push	r8
     a20:	9f 92       	push	r9
     a22:	af 92       	push	r10
     a24:	bf 92       	push	r11
     a26:	cf 92       	push	r12
     a28:	df 92       	push	r13
     a2a:	ef 92       	push	r14
     a2c:	ff 92       	push	r15
     a2e:	6b 01       	movw	r12, r22
     a30:	7c 01       	movw	r14, r24
     a32:	d0 df       	rcall	.-96     	; 0x9d4 <micros>
     a34:	4b 01       	movw	r8, r22
     a36:	5c 01       	movw	r10, r24
     a38:	c1 14       	cp	r12, r1
     a3a:	d1 04       	cpc	r13, r1
     a3c:	e1 04       	cpc	r14, r1
     a3e:	f1 04       	cpc	r15, r1
     a40:	f9 f0       	breq	.+62     	; 0xa80 <delay+0x62>
     a42:	0e 94 df 14 	call	0x29be	; 0x29be <yield>
     a46:	c6 df       	rcall	.-116    	; 0x9d4 <micros>
     a48:	dc 01       	movw	r26, r24
     a4a:	cb 01       	movw	r24, r22
     a4c:	88 19       	sub	r24, r8
     a4e:	99 09       	sbc	r25, r9
     a50:	aa 09       	sbc	r26, r10
     a52:	bb 09       	sbc	r27, r11
     a54:	88 3e       	cpi	r24, 0xE8	; 232
     a56:	93 40       	sbci	r25, 0x03	; 3
     a58:	a1 05       	cpc	r26, r1
     a5a:	b1 05       	cpc	r27, r1
     a5c:	68 f3       	brcs	.-38     	; 0xa38 <delay+0x1a>
     a5e:	21 e0       	ldi	r18, 0x01	; 1
     a60:	c2 1a       	sub	r12, r18
     a62:	d1 08       	sbc	r13, r1
     a64:	e1 08       	sbc	r14, r1
     a66:	f1 08       	sbc	r15, r1
     a68:	88 ee       	ldi	r24, 0xE8	; 232
     a6a:	88 0e       	add	r8, r24
     a6c:	83 e0       	ldi	r24, 0x03	; 3
     a6e:	98 1e       	adc	r9, r24
     a70:	a1 1c       	adc	r10, r1
     a72:	b1 1c       	adc	r11, r1
     a74:	c1 14       	cp	r12, r1
     a76:	d1 04       	cpc	r13, r1
     a78:	e1 04       	cpc	r14, r1
     a7a:	f1 04       	cpc	r15, r1
     a7c:	21 f7       	brne	.-56     	; 0xa46 <delay+0x28>
     a7e:	dc cf       	rjmp	.-72     	; 0xa38 <delay+0x1a>
     a80:	ff 90       	pop	r15
     a82:	ef 90       	pop	r14
     a84:	df 90       	pop	r13
     a86:	cf 90       	pop	r12
     a88:	bf 90       	pop	r11
     a8a:	af 90       	pop	r10
     a8c:	9f 90       	pop	r9
     a8e:	8f 90       	pop	r8
     a90:	08 95       	ret

00000a92 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     a92:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     a94:	84 b5       	in	r24, 0x24	; 36
     a96:	82 60       	ori	r24, 0x02	; 2
     a98:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     a9a:	84 b5       	in	r24, 0x24	; 36
     a9c:	81 60       	ori	r24, 0x01	; 1
     a9e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     aa0:	85 b5       	in	r24, 0x25	; 37
     aa2:	82 60       	ori	r24, 0x02	; 2
     aa4:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     aa6:	85 b5       	in	r24, 0x25	; 37
     aa8:	81 60       	ori	r24, 0x01	; 1
     aaa:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     aac:	ee e6       	ldi	r30, 0x6E	; 110
     aae:	f0 e0       	ldi	r31, 0x00	; 0
     ab0:	80 81       	ld	r24, Z
     ab2:	81 60       	ori	r24, 0x01	; 1
     ab4:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     ab6:	e1 e8       	ldi	r30, 0x81	; 129
     ab8:	f0 e0       	ldi	r31, 0x00	; 0
     aba:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     abc:	80 81       	ld	r24, Z
     abe:	82 60       	ori	r24, 0x02	; 2
     ac0:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     ac2:	80 81       	ld	r24, Z
     ac4:	81 60       	ori	r24, 0x01	; 1
     ac6:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     ac8:	e0 e8       	ldi	r30, 0x80	; 128
     aca:	f0 e0       	ldi	r31, 0x00	; 0
     acc:	80 81       	ld	r24, Z
     ace:	81 60       	ori	r24, 0x01	; 1
     ad0:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     ad2:	e1 eb       	ldi	r30, 0xB1	; 177
     ad4:	f0 e0       	ldi	r31, 0x00	; 0
     ad6:	80 81       	ld	r24, Z
     ad8:	84 60       	ori	r24, 0x04	; 4
     ada:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     adc:	e0 eb       	ldi	r30, 0xB0	; 176
     ade:	f0 e0       	ldi	r31, 0x00	; 0
     ae0:	80 81       	ld	r24, Z
     ae2:	81 60       	ori	r24, 0x01	; 1
     ae4:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
     ae6:	e1 e9       	ldi	r30, 0x91	; 145
     ae8:	f0 e0       	ldi	r31, 0x00	; 0
     aea:	80 81       	ld	r24, Z
     aec:	82 60       	ori	r24, 0x02	; 2
     aee:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
     af0:	80 81       	ld	r24, Z
     af2:	81 60       	ori	r24, 0x01	; 1
     af4:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
     af6:	e0 e9       	ldi	r30, 0x90	; 144
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	80 81       	ld	r24, Z
     afc:	81 60       	ori	r24, 0x01	; 1
     afe:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
     b00:	e1 ea       	ldi	r30, 0xA1	; 161
     b02:	f0 e0       	ldi	r31, 0x00	; 0
     b04:	80 81       	ld	r24, Z
     b06:	82 60       	ori	r24, 0x02	; 2
     b08:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
     b0a:	80 81       	ld	r24, Z
     b0c:	81 60       	ori	r24, 0x01	; 1
     b0e:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
     b10:	e0 ea       	ldi	r30, 0xA0	; 160
     b12:	f0 e0       	ldi	r31, 0x00	; 0
     b14:	80 81       	ld	r24, Z
     b16:	81 60       	ori	r24, 0x01	; 1
     b18:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
     b1a:	e1 e2       	ldi	r30, 0x21	; 33
     b1c:	f1 e0       	ldi	r31, 0x01	; 1
     b1e:	80 81       	ld	r24, Z
     b20:	82 60       	ori	r24, 0x02	; 2
     b22:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
     b24:	80 81       	ld	r24, Z
     b26:	81 60       	ori	r24, 0x01	; 1
     b28:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
     b2a:	e0 e2       	ldi	r30, 0x20	; 32
     b2c:	f1 e0       	ldi	r31, 0x01	; 1
     b2e:	80 81       	ld	r24, Z
     b30:	81 60       	ori	r24, 0x01	; 1
     b32:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     b34:	ea e7       	ldi	r30, 0x7A	; 122
     b36:	f0 e0       	ldi	r31, 0x00	; 0
     b38:	80 81       	ld	r24, Z
     b3a:	84 60       	ori	r24, 0x04	; 4
     b3c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     b3e:	80 81       	ld	r24, Z
     b40:	82 60       	ori	r24, 0x02	; 2
     b42:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     b44:	80 81       	ld	r24, Z
     b46:	81 60       	ori	r24, 0x01	; 1
     b48:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     b4a:	80 81       	ld	r24, Z
     b4c:	80 68       	ori	r24, 0x80	; 128
     b4e:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     b50:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
     b54:	08 95       	ret

00000b56 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	fc 01       	movw	r30, r24
     b5a:	31 97       	sbiw	r30, 0x01	; 1
     b5c:	e2 31       	cpi	r30, 0x12	; 18
     b5e:	f1 05       	cpc	r31, r1
     b60:	08 f0       	brcs	.+2      	; 0xb64 <turnOffPWM+0xe>
     b62:	4e c0       	rjmp	.+156    	; 0xc00 <turnOffPWM+0xaa>
     b64:	88 27       	eor	r24, r24
     b66:	ee 58       	subi	r30, 0x8E	; 142
     b68:	ff 4f       	sbci	r31, 0xFF	; 255
     b6a:	8f 4f       	sbci	r24, 0xFF	; 255
     b6c:	0c 94 68 16 	jmp	0x2cd0	; 0x2cd0 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     b70:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
     b74:	8f 77       	andi	r24, 0x7F	; 127
     b76:	03 c0       	rjmp	.+6      	; 0xb7e <turnOffPWM+0x28>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     b78:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
     b7c:	8f 7d       	andi	r24, 0xDF	; 223
     b7e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
     b82:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
     b84:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
     b88:	87 7f       	andi	r24, 0xF7	; 247
     b8a:	f9 cf       	rjmp	.-14     	; 0xb7e <turnOffPWM+0x28>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     b8c:	84 b5       	in	r24, 0x24	; 36
     b8e:	8f 77       	andi	r24, 0x7F	; 127
     b90:	02 c0       	rjmp	.+4      	; 0xb96 <turnOffPWM+0x40>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     b92:	84 b5       	in	r24, 0x24	; 36
     b94:	8f 7d       	andi	r24, 0xDF	; 223
     b96:	84 bd       	out	0x24, r24	; 36
     b98:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     b9a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
     b9e:	8f 77       	andi	r24, 0x7F	; 127
     ba0:	03 c0       	rjmp	.+6      	; 0xba8 <turnOffPWM+0x52>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     ba2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
     ba6:	8f 7d       	andi	r24, 0xDF	; 223
     ba8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
     bac:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
     bae:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
     bb2:	8f 77       	andi	r24, 0x7F	; 127
     bb4:	07 c0       	rjmp	.+14     	; 0xbc4 <turnOffPWM+0x6e>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
     bb6:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
     bba:	8f 7d       	andi	r24, 0xDF	; 223
     bbc:	03 c0       	rjmp	.+6      	; 0xbc4 <turnOffPWM+0x6e>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
     bbe:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
     bc2:	87 7f       	andi	r24, 0xF7	; 247
     bc4:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
     bc8:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
     bca:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
     bce:	8f 77       	andi	r24, 0x7F	; 127
     bd0:	07 c0       	rjmp	.+14     	; 0xbe0 <turnOffPWM+0x8a>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
     bd2:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
     bd6:	8f 7d       	andi	r24, 0xDF	; 223
     bd8:	03 c0       	rjmp	.+6      	; 0xbe0 <turnOffPWM+0x8a>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
     bda:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
     bde:	87 7f       	andi	r24, 0xF7	; 247
     be0:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
     be4:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
     be6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
     bea:	8f 77       	andi	r24, 0x7F	; 127
     bec:	07 c0       	rjmp	.+14     	; 0xbfc <turnOffPWM+0xa6>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
     bee:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
     bf2:	8f 7d       	andi	r24, 0xDF	; 223
     bf4:	03 c0       	rjmp	.+6      	; 0xbfc <turnOffPWM+0xa6>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
     bf6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
     bfa:	87 7f       	andi	r24, 0xF7	; 247
     bfc:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
     c00:	08 95       	ret

00000c02 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     c02:	cf 93       	push	r28
     c04:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	fc 01       	movw	r30, r24
     c0a:	e8 54       	subi	r30, 0x48	; 72
     c0c:	fe 4f       	sbci	r31, 0xFE	; 254
     c0e:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     c10:	fc 01       	movw	r30, r24
     c12:	e2 50       	subi	r30, 0x02	; 2
     c14:	fe 4f       	sbci	r31, 0xFE	; 254
     c16:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     c18:	88 23       	and	r24, r24
     c1a:	61 f1       	breq	.+88     	; 0xc74 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	88 0f       	add	r24, r24
     c20:	99 1f       	adc	r25, r25
     c22:	fc 01       	movw	r30, r24
     c24:	e8 58       	subi	r30, 0x88	; 136
     c26:	fd 4f       	sbci	r31, 0xFD	; 253
     c28:	c5 91       	lpm	r28, Z+
     c2a:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
     c2c:	fc 01       	movw	r30, r24
     c2e:	e2 5a       	subi	r30, 0xA2	; 162
     c30:	fd 4f       	sbci	r31, 0xFD	; 253
     c32:	a5 91       	lpm	r26, Z+
     c34:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
     c36:	61 11       	cpse	r22, r1
     c38:	09 c0       	rjmp	.+18     	; 0xc4c <pinMode+0x4a>
		uint8_t oldSREG = SREG;
     c3a:	9f b7       	in	r25, 0x3f	; 63
                cli();
     c3c:	f8 94       	cli
		*reg &= ~bit;
     c3e:	88 81       	ld	r24, Y
     c40:	20 95       	com	r18
     c42:	82 23       	and	r24, r18
     c44:	88 83       	st	Y, r24
		*out &= ~bit;
     c46:	ec 91       	ld	r30, X
     c48:	2e 23       	and	r18, r30
     c4a:	0b c0       	rjmp	.+22     	; 0xc62 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     c4c:	62 30       	cpi	r22, 0x02	; 2
     c4e:	61 f4       	brne	.+24     	; 0xc68 <pinMode+0x66>
		uint8_t oldSREG = SREG;
     c50:	9f b7       	in	r25, 0x3f	; 63
                cli();
     c52:	f8 94       	cli
		*reg &= ~bit;
     c54:	88 81       	ld	r24, Y
     c56:	32 2f       	mov	r19, r18
     c58:	30 95       	com	r19
     c5a:	83 23       	and	r24, r19
     c5c:	88 83       	st	Y, r24
		*out |= bit;
     c5e:	ec 91       	ld	r30, X
     c60:	2e 2b       	or	r18, r30
     c62:	2c 93       	st	X, r18
		SREG = oldSREG;
     c64:	9f bf       	out	0x3f, r25	; 63
     c66:	06 c0       	rjmp	.+12     	; 0xc74 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
     c68:	8f b7       	in	r24, 0x3f	; 63
                cli();
     c6a:	f8 94       	cli
		*reg |= bit;
     c6c:	e8 81       	ld	r30, Y
     c6e:	2e 2b       	or	r18, r30
     c70:	28 83       	st	Y, r18
		SREG = oldSREG;
     c72:	8f bf       	out	0x3f, r24	; 63
	}
}
     c74:	df 91       	pop	r29
     c76:	cf 91       	pop	r28
     c78:	08 95       	ret

00000c7a <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     c7a:	1f 93       	push	r17
     c7c:	cf 93       	push	r28
     c7e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     c80:	28 2f       	mov	r18, r24
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	f9 01       	movw	r30, r18
     c86:	ee 58       	subi	r30, 0x8E	; 142
     c88:	fe 4f       	sbci	r31, 0xFE	; 254
     c8a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     c8c:	f9 01       	movw	r30, r18
     c8e:	e8 54       	subi	r30, 0x48	; 72
     c90:	fe 4f       	sbci	r31, 0xFE	; 254
     c92:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     c94:	f9 01       	movw	r30, r18
     c96:	e2 50       	subi	r30, 0x02	; 2
     c98:	fe 4f       	sbci	r31, 0xFE	; 254
     c9a:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     c9c:	cc 23       	and	r28, r28
     c9e:	b9 f0       	breq	.+46     	; 0xcce <digitalWrite+0x54>
     ca0:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     ca2:	81 11       	cpse	r24, r1
     ca4:	58 df       	rcall	.-336    	; 0xb56 <turnOffPWM>

	out = portOutputRegister(port);
     ca6:	ec 2f       	mov	r30, r28
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	ee 0f       	add	r30, r30
     cac:	ff 1f       	adc	r31, r31
     cae:	e2 5a       	subi	r30, 0xA2	; 162
     cb0:	fd 4f       	sbci	r31, 0xFD	; 253
     cb2:	a5 91       	lpm	r26, Z+
     cb4:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     cb6:	9f b7       	in	r25, 0x3f	; 63
	cli();
     cb8:	f8 94       	cli

	if (val == LOW) {
     cba:	11 11       	cpse	r17, r1
     cbc:	04 c0       	rjmp	.+8      	; 0xcc6 <digitalWrite+0x4c>
		*out &= ~bit;
     cbe:	8c 91       	ld	r24, X
     cc0:	d0 95       	com	r29
     cc2:	d8 23       	and	r29, r24
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <digitalWrite+0x50>
	} else {
		*out |= bit;
     cc6:	ec 91       	ld	r30, X
     cc8:	de 2b       	or	r29, r30
     cca:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
     ccc:	9f bf       	out	0x3f, r25	; 63
}
     cce:	df 91       	pop	r29
     cd0:	cf 91       	pop	r28
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <digitalRead>:

int digitalRead(uint8_t pin)
{
     cd6:	cf 93       	push	r28
     cd8:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     cda:	28 2f       	mov	r18, r24
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	f9 01       	movw	r30, r18
     ce0:	ee 58       	subi	r30, 0x8E	; 142
     ce2:	fe 4f       	sbci	r31, 0xFE	; 254
     ce4:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     ce6:	f9 01       	movw	r30, r18
     ce8:	e8 54       	subi	r30, 0x48	; 72
     cea:	fe 4f       	sbci	r31, 0xFE	; 254
     cec:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     cee:	f9 01       	movw	r30, r18
     cf0:	e2 50       	subi	r30, 0x02	; 2
     cf2:	fe 4f       	sbci	r31, 0xFE	; 254
     cf4:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
     cf6:	cc 23       	and	r28, r28
     cf8:	89 f0       	breq	.+34     	; 0xd1c <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     cfa:	81 11       	cpse	r24, r1
     cfc:	2c df       	rcall	.-424    	; 0xb56 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
     cfe:	ec 2f       	mov	r30, r28
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	ee 0f       	add	r30, r30
     d04:	ff 1f       	adc	r31, r31
     d06:	ec 5b       	subi	r30, 0xBC	; 188
     d08:	fd 4f       	sbci	r31, 0xFD	; 253
     d0a:	a5 91       	lpm	r26, Z+
     d0c:	b4 91       	lpm	r27, Z
     d0e:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
     d10:	ed 23       	and	r30, r29
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	21 f4       	brne	.+8      	; 0xd20 <digitalRead+0x4a>
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	02 c0       	rjmp	.+4      	; 0xd20 <digitalRead+0x4a>
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
     d20:	df 91       	pop	r29
     d22:	cf 91       	pop	r28
     d24:	08 95       	ret

00000d26 <_ZN8SPIClass8transferEh>:
    modifyRegister(MCP_CANCTRL, CANCTRL_CLKEN, CANCTRL_CLKEN);

    /* Turn off CLKOUT for SOF */
    modifyRegister(MCP_CNF3, CNF3_SOF, 0x00);
    return ERROR_OK;
}
     d26:	8e bd       	out	0x2e, r24	; 46
     d28:	00 00       	nop
     d2a:	0d b4       	in	r0, 0x2d	; 45
     d2c:	07 fe       	sbrs	r0, 7
     d2e:	fd cf       	rjmp	.-6      	; 0xd2a <_ZN8SPIClass8transferEh+0x4>
     d30:	8e b5       	in	r24, 0x2e	; 46
     d32:	08 95       	ret

00000d34 <_ZN7MCP25158startSPIEv>:
     d34:	fc 01       	movw	r30, r24
     d36:	41 81       	ldd	r20, Z+1	; 0x01
     d38:	52 81       	ldd	r21, Z+2	; 0x02
     d3a:	63 81       	ldd	r22, Z+3	; 0x03
     d3c:	74 81       	ldd	r23, Z+4	; 0x04
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	92 e1       	ldi	r25, 0x12	; 18
     d42:	aa e7       	ldi	r26, 0x7A	; 122
     d44:	b0 e0       	ldi	r27, 0x00	; 0
     d46:	20 e0       	ldi	r18, 0x00	; 0
     d48:	48 17       	cp	r20, r24
     d4a:	59 07       	cpc	r21, r25
     d4c:	6a 07       	cpc	r22, r26
     d4e:	7b 07       	cpc	r23, r27
     d50:	40 f4       	brcc	.+16     	; 0xd62 <_ZN7MCP25158startSPIEv+0x2e>
     d52:	b6 95       	lsr	r27
     d54:	a7 95       	ror	r26
     d56:	97 95       	ror	r25
     d58:	87 95       	ror	r24
     d5a:	2f 5f       	subi	r18, 0xFF	; 255
     d5c:	26 30       	cpi	r18, 0x06	; 6
     d5e:	a1 f7       	brne	.-24     	; 0xd48 <_ZN7MCP25158startSPIEv+0x14>
     d60:	27 e0       	ldi	r18, 0x07	; 7
     d62:	91 e0       	ldi	r25, 0x01	; 1
     d64:	92 27       	eor	r25, r18
     d66:	29 2f       	mov	r18, r25
     d68:	20 6a       	ori	r18, 0xA0	; 160
     d6a:	26 95       	lsr	r18
     d6c:	91 70       	andi	r25, 0x01	; 1
     d6e:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <_ZN8SPIClass13interruptModeE>
     d72:	88 23       	and	r24, r24
     d74:	99 f0       	breq	.+38     	; 0xd9c <_ZN7MCP25158startSPIEv+0x68>
     d76:	8f b7       	in	r24, 0x3f	; 63
     d78:	f8 94       	cli
     d7a:	30 91 ce 05 	lds	r19, 0x05CE	; 0x8005ce <_ZN8SPIClass13interruptModeE>
     d7e:	31 30       	cpi	r19, 0x01	; 1
     d80:	59 f4       	brne	.+22     	; 0xd98 <_ZN7MCP25158startSPIEv+0x64>
     d82:	3d b3       	in	r19, 0x1d	; 29
     d84:	30 93 cc 05 	sts	0x05CC, r19	; 0x8005cc <_ZN8SPIClass13interruptSaveE>
     d88:	4d b3       	in	r20, 0x1d	; 29
     d8a:	30 91 cd 05 	lds	r19, 0x05CD	; 0x8005cd <_ZN8SPIClass13interruptMaskE>
     d8e:	30 95       	com	r19
     d90:	34 23       	and	r19, r20
     d92:	3d bb       	out	0x1d, r19	; 29
     d94:	8f bf       	out	0x3f, r24	; 63
     d96:	02 c0       	rjmp	.+4      	; 0xd9c <_ZN7MCP25158startSPIEv+0x68>
     d98:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <_ZN8SPIClass13interruptSaveE>
     d9c:	2c bd       	out	0x2c, r18	; 44
     d9e:	9d bd       	out	0x2d, r25	; 45
     da0:	60 e0       	ldi	r22, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	6a cf       	rjmp	.-300    	; 0xc7a <digitalWrite>

00000da6 <_ZN7MCP25156endSPIEv>:
     da6:	61 e0       	ldi	r22, 0x01	; 1
     da8:	fc 01       	movw	r30, r24
     daa:	80 81       	ld	r24, Z
     dac:	66 df       	rcall	.-308    	; 0xc7a <digitalWrite>
     dae:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <_ZN8SPIClass13interruptModeE>
     db2:	88 23       	and	r24, r24
     db4:	61 f0       	breq	.+24     	; 0xdce <_ZN7MCP25156endSPIEv+0x28>
     db6:	9f b7       	in	r25, 0x3f	; 63
     db8:	f8 94       	cli
     dba:	20 91 ce 05 	lds	r18, 0x05CE	; 0x8005ce <_ZN8SPIClass13interruptModeE>
     dbe:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <_ZN8SPIClass13interruptSaveE>
     dc2:	21 30       	cpi	r18, 0x01	; 1
     dc4:	19 f4       	brne	.+6      	; 0xdcc <_ZN7MCP25156endSPIEv+0x26>
     dc6:	8d bb       	out	0x1d, r24	; 29
     dc8:	9f bf       	out	0x3f, r25	; 63
     dca:	08 95       	ret
     dcc:	8f bf       	out	0x3f, r24	; 63
     dce:	08 95       	ret

00000dd0 <_ZN7MCP2515C1EhmP8SPIClass>:
     dd0:	8f 92       	push	r8
     dd2:	9f 92       	push	r9
     dd4:	af 92       	push	r10
     dd6:	bf 92       	push	r11
     dd8:	ff 92       	push	r15
     dda:	0f 93       	push	r16
     ddc:	1f 93       	push	r17
     dde:	cf 93       	push	r28
     de0:	df 93       	push	r29
     de2:	ec 01       	movw	r28, r24
     de4:	f6 2e       	mov	r15, r22
     de6:	49 01       	movw	r8, r18
     de8:	5a 01       	movw	r10, r20
     dea:	01 15       	cp	r16, r1
     dec:	11 05       	cpc	r17, r1
     dee:	19 f0       	breq	.+6      	; 0xdf6 <_ZN7MCP2515C1EhmP8SPIClass+0x26>
     df0:	1e 83       	std	Y+6, r17	; 0x06
     df2:	0d 83       	std	Y+5, r16	; 0x05
     df4:	06 c0       	rjmp	.+12     	; 0xe02 <_ZN7MCP2515C1EhmP8SPIClass+0x32>
     df6:	80 ed       	ldi	r24, 0xD0	; 208
     df8:	95 e0       	ldi	r25, 0x05	; 5
     dfa:	9e 83       	std	Y+6, r25	; 0x06
     dfc:	8d 83       	std	Y+5, r24	; 0x05
     dfe:	0e 94 a9 14 	call	0x2952	; 0x2952 <_ZN8SPIClass5beginEv>
     e02:	f8 82       	st	Y, r15
     e04:	89 82       	std	Y+1, r8	; 0x01
     e06:	9a 82       	std	Y+2, r9	; 0x02
     e08:	ab 82       	std	Y+3, r10	; 0x03
     e0a:	bc 82       	std	Y+4, r11	; 0x04
     e0c:	61 e0       	ldi	r22, 0x01	; 1
     e0e:	8f 2d       	mov	r24, r15
     e10:	f8 de       	rcall	.-528    	; 0xc02 <pinMode>
     e12:	ce 01       	movw	r24, r28
     e14:	df 91       	pop	r29
     e16:	cf 91       	pop	r28
     e18:	1f 91       	pop	r17
     e1a:	0f 91       	pop	r16
     e1c:	ff 90       	pop	r15
     e1e:	bf 90       	pop	r11
     e20:	af 90       	pop	r10
     e22:	9f 90       	pop	r9
     e24:	8f 90       	pop	r8
     e26:	bf cf       	rjmp	.-130    	; 0xda6 <_ZN7MCP25156endSPIEv>

00000e28 <_ZN7MCP251512readRegisterENS_8REGISTERE>:
     e28:	1f 93       	push	r17
     e2a:	cf 93       	push	r28
     e2c:	df 93       	push	r29
     e2e:	ec 01       	movw	r28, r24
     e30:	16 2f       	mov	r17, r22
     e32:	80 df       	rcall	.-256    	; 0xd34 <_ZN7MCP25158startSPIEv>
     e34:	83 e0       	ldi	r24, 0x03	; 3
     e36:	77 df       	rcall	.-274    	; 0xd26 <_ZN8SPIClass8transferEh>
     e38:	81 2f       	mov	r24, r17
     e3a:	75 df       	rcall	.-278    	; 0xd26 <_ZN8SPIClass8transferEh>
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	73 df       	rcall	.-282    	; 0xd26 <_ZN8SPIClass8transferEh>
     e40:	18 2f       	mov	r17, r24
     e42:	ce 01       	movw	r24, r28
     e44:	b0 df       	rcall	.-160    	; 0xda6 <_ZN7MCP25156endSPIEv>
     e46:	81 2f       	mov	r24, r17
     e48:	df 91       	pop	r29
     e4a:	cf 91       	pop	r28
     e4c:	1f 91       	pop	r17
     e4e:	08 95       	ret

00000e50 <_ZN7MCP251511setRegisterENS_8REGISTEREh>:
     e50:	0f 93       	push	r16
     e52:	1f 93       	push	r17
     e54:	cf 93       	push	r28
     e56:	df 93       	push	r29
     e58:	ec 01       	movw	r28, r24
     e5a:	06 2f       	mov	r16, r22
     e5c:	14 2f       	mov	r17, r20
     e5e:	6a df       	rcall	.-300    	; 0xd34 <_ZN7MCP25158startSPIEv>
     e60:	82 e0       	ldi	r24, 0x02	; 2
     e62:	61 df       	rcall	.-318    	; 0xd26 <_ZN8SPIClass8transferEh>
     e64:	80 2f       	mov	r24, r16
     e66:	5f df       	rcall	.-322    	; 0xd26 <_ZN8SPIClass8transferEh>
     e68:	81 2f       	mov	r24, r17
     e6a:	5d df       	rcall	.-326    	; 0xd26 <_ZN8SPIClass8transferEh>
     e6c:	ce 01       	movw	r24, r28
     e6e:	df 91       	pop	r29
     e70:	cf 91       	pop	r28
     e72:	1f 91       	pop	r17
     e74:	0f 91       	pop	r16
     e76:	97 cf       	rjmp	.-210    	; 0xda6 <_ZN7MCP25156endSPIEv>

00000e78 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>:
     e78:	df 92       	push	r13
     e7a:	ef 92       	push	r14
     e7c:	ff 92       	push	r15
     e7e:	0f 93       	push	r16
     e80:	1f 93       	push	r17
     e82:	cf 93       	push	r28
     e84:	df 93       	push	r29
     e86:	8c 01       	movw	r16, r24
     e88:	c6 2f       	mov	r28, r22
     e8a:	d4 2e       	mov	r13, r20
     e8c:	e5 2e       	mov	r14, r21
     e8e:	f2 2e       	mov	r15, r18
     e90:	51 df       	rcall	.-350    	; 0xd34 <_ZN7MCP25158startSPIEv>
     e92:	82 e0       	ldi	r24, 0x02	; 2
     e94:	48 df       	rcall	.-368    	; 0xd26 <_ZN8SPIClass8transferEh>
     e96:	8c 2f       	mov	r24, r28
     e98:	46 df       	rcall	.-372    	; 0xd26 <_ZN8SPIClass8transferEh>
     e9a:	cd 2d       	mov	r28, r13
     e9c:	de 2d       	mov	r29, r14
     e9e:	ce 01       	movw	r24, r28
     ea0:	8f 0d       	add	r24, r15
     ea2:	91 1d       	adc	r25, r1
     ea4:	7c 01       	movw	r14, r24
     ea6:	ce 15       	cp	r28, r14
     ea8:	df 05       	cpc	r29, r15
     eaa:	19 f0       	breq	.+6      	; 0xeb2 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh+0x3a>
     eac:	89 91       	ld	r24, Y+
     eae:	3b df       	rcall	.-394    	; 0xd26 <_ZN8SPIClass8transferEh>
     eb0:	fa cf       	rjmp	.-12     	; 0xea6 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh+0x2e>
     eb2:	c8 01       	movw	r24, r16
     eb4:	df 91       	pop	r29
     eb6:	cf 91       	pop	r28
     eb8:	1f 91       	pop	r17
     eba:	0f 91       	pop	r16
     ebc:	ff 90       	pop	r15
     ebe:	ef 90       	pop	r14
     ec0:	df 90       	pop	r13
     ec2:	71 cf       	rjmp	.-286    	; 0xda6 <_ZN7MCP25156endSPIEv>

00000ec4 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>:
     ec4:	ff 92       	push	r15
     ec6:	0f 93       	push	r16
     ec8:	1f 93       	push	r17
     eca:	cf 93       	push	r28
     ecc:	df 93       	push	r29
     ece:	ec 01       	movw	r28, r24
     ed0:	f6 2e       	mov	r15, r22
     ed2:	04 2f       	mov	r16, r20
     ed4:	12 2f       	mov	r17, r18
     ed6:	2e df       	rcall	.-420    	; 0xd34 <_ZN7MCP25158startSPIEv>
     ed8:	85 e0       	ldi	r24, 0x05	; 5
     eda:	25 df       	rcall	.-438    	; 0xd26 <_ZN8SPIClass8transferEh>
     edc:	8f 2d       	mov	r24, r15
     ede:	23 df       	rcall	.-442    	; 0xd26 <_ZN8SPIClass8transferEh>
     ee0:	80 2f       	mov	r24, r16
     ee2:	21 df       	rcall	.-446    	; 0xd26 <_ZN8SPIClass8transferEh>
     ee4:	81 2f       	mov	r24, r17
     ee6:	1f df       	rcall	.-450    	; 0xd26 <_ZN8SPIClass8transferEh>
     ee8:	ce 01       	movw	r24, r28
     eea:	df 91       	pop	r29
     eec:	cf 91       	pop	r28
     eee:	1f 91       	pop	r17
     ef0:	0f 91       	pop	r16
     ef2:	ff 90       	pop	r15
     ef4:	58 cf       	rjmp	.-336    	; 0xda6 <_ZN7MCP25156endSPIEv>

00000ef6 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>:
     ef6:	cf 92       	push	r12
     ef8:	df 92       	push	r13
     efa:	ef 92       	push	r14
     efc:	ff 92       	push	r15
     efe:	1f 93       	push	r17
     f00:	cf 93       	push	r28
     f02:	df 93       	push	r29
     f04:	ec 01       	movw	r28, r24
     f06:	16 2f       	mov	r17, r22
     f08:	26 2f       	mov	r18, r22
     f0a:	40 ee       	ldi	r20, 0xE0	; 224
     f0c:	6f e0       	ldi	r22, 0x0F	; 15
     f0e:	da df       	rcall	.-76     	; 0xec4 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
     f10:	55 dd       	rcall	.-1366   	; 0x9bc <millis>
     f12:	6b 01       	movw	r12, r22
     f14:	7c 01       	movw	r14, r24
     f16:	2a e0       	ldi	r18, 0x0A	; 10
     f18:	c2 0e       	add	r12, r18
     f1a:	d1 1c       	adc	r13, r1
     f1c:	e1 1c       	adc	r14, r1
     f1e:	f1 1c       	adc	r15, r1
     f20:	4d dd       	rcall	.-1382   	; 0x9bc <millis>
     f22:	6c 15       	cp	r22, r12
     f24:	7d 05       	cpc	r23, r13
     f26:	8e 05       	cpc	r24, r14
     f28:	9f 05       	cpc	r25, r15
     f2a:	40 f4       	brcc	.+16     	; 0xf3c <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x46>
     f2c:	6e e0       	ldi	r22, 0x0E	; 14
     f2e:	ce 01       	movw	r24, r28
     f30:	7b df       	rcall	.-266    	; 0xe28 <_ZN7MCP251512readRegisterENS_8REGISTERE>
     f32:	80 7e       	andi	r24, 0xE0	; 224
     f34:	18 13       	cpse	r17, r24
     f36:	f4 cf       	rjmp	.-24     	; 0xf20 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x2a>
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	01 c0       	rjmp	.+2      	; 0xf3e <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x48>
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	91 e0       	ldi	r25, 0x01	; 1
     f40:	89 27       	eor	r24, r25
     f42:	df 91       	pop	r29
     f44:	cf 91       	pop	r28
     f46:	1f 91       	pop	r17
     f48:	ff 90       	pop	r15
     f4a:	ef 90       	pop	r14
     f4c:	df 90       	pop	r13
     f4e:	cf 90       	pop	r12
     f50:	08 95       	ret

00000f52 <_ZN7MCP251513setConfigModeEv>:
     f52:	60 e8       	ldi	r22, 0x80	; 128
     f54:	d0 cf       	rjmp	.-96     	; 0xef6 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>

00000f56 <_ZN7MCP251513setNormalModeEv>:
     f56:	60 e0       	ldi	r22, 0x00	; 0
     f58:	ce cf       	rjmp	.-100    	; 0xef6 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>

00000f5a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK>:
     f5a:	0f 93       	push	r16
     f5c:	1f 93       	push	r17
     f5e:	cf 93       	push	r28
     f60:	df 93       	push	r29
     f62:	8c 01       	movw	r16, r24
     f64:	c6 2f       	mov	r28, r22
     f66:	d4 2f       	mov	r29, r20
     f68:	f4 df       	rcall	.-24     	; 0xf52 <_ZN7MCP251513setConfigModeEv>
     f6a:	81 11       	cpse	r24, r1
     f6c:	bd c0       	rjmp	.+378    	; 0x10e8 <__EEPROM_REGION_LENGTH__+0xe8>
     f6e:	d1 30       	cpi	r29, 0x01	; 1
     f70:	b9 f1       	breq	.+110    	; 0xfe0 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x86>
     f72:	08 f4       	brcc	.+2      	; 0xf76 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x1c>
     f74:	6b c0       	rjmp	.+214    	; 0x104c <__EEPROM_REGION_LENGTH__+0x4c>
     f76:	d2 30       	cpi	r29, 0x02	; 2
     f78:	09 f0       	breq	.+2      	; 0xf7c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x22>
     f7a:	99 c0       	rjmp	.+306    	; 0x10ae <__EEPROM_REGION_LENGTH__+0xae>
     f7c:	8c 2f       	mov	r24, r28
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	80 31       	cpi	r24, 0x10	; 16
     f82:	91 05       	cpc	r25, r1
     f84:	08 f0       	brcs	.+2      	; 0xf88 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x2e>
     f86:	93 c0       	rjmp	.+294    	; 0x10ae <__EEPROM_REGION_LENGTH__+0xae>
     f88:	fc 01       	movw	r30, r24
     f8a:	88 27       	eor	r24, r24
     f8c:	ec 57       	subi	r30, 0x7C	; 124
     f8e:	ff 4f       	sbci	r31, 0xFF	; 255
     f90:	8f 4f       	sbci	r24, 0xFF	; 255
     f92:	0c 94 68 16 	jmp	0x2cd0	; 0x2cd0 <__tablejump2__>
     f96:	c7 e8       	ldi	r28, 0x87	; 135
     f98:	df eb       	ldi	r29, 0xBF	; 191
     f9a:	34 c0       	rjmp	.+104    	; 0x1004 <__EEPROM_REGION_LENGTH__+0x4>
     f9c:	c4 e8       	ldi	r28, 0x84	; 132
     f9e:	d4 ea       	ldi	r29, 0xA4	; 164
     fa0:	8e c0       	rjmp	.+284    	; 0x10be <__EEPROM_REGION_LENGTH__+0xbe>
     fa2:	c5 e8       	ldi	r28, 0x85	; 133
     fa4:	d2 ee       	ldi	r29, 0xE2	; 226
     fa6:	47 e4       	ldi	r20, 0x47	; 71
     fa8:	93 c0       	rjmp	.+294    	; 0x10d0 <__EEPROM_REGION_LENGTH__+0xd0>
     faa:	c7 e8       	ldi	r28, 0x87	; 135
     fac:	df eb       	ldi	r29, 0xBF	; 191
     fae:	6e c0       	rjmp	.+220    	; 0x108c <__EEPROM_REGION_LENGTH__+0x8c>
     fb0:	c6 e8       	ldi	r28, 0x86	; 134
     fb2:	d4 eb       	ldi	r29, 0xB4	; 180
     fb4:	6b c0       	rjmp	.+214    	; 0x108c <__EEPROM_REGION_LENGTH__+0x8c>
     fb6:	c7 e8       	ldi	r28, 0x87	; 135
     fb8:	df eb       	ldi	r29, 0xBF	; 191
     fba:	6c c0       	rjmp	.+216    	; 0x1094 <__EEPROM_REGION_LENGTH__+0x94>
     fbc:	c6 e8       	ldi	r28, 0x86	; 134
     fbe:	d4 eb       	ldi	r29, 0xB4	; 180
     fc0:	69 c0       	rjmp	.+210    	; 0x1094 <__EEPROM_REGION_LENGTH__+0x94>
     fc2:	c5 e8       	ldi	r28, 0x85	; 133
     fc4:	d1 eb       	ldi	r29, 0xB1	; 177
     fc6:	66 c0       	rjmp	.+204    	; 0x1094 <__EEPROM_REGION_LENGTH__+0x94>
     fc8:	c6 e8       	ldi	r28, 0x86	; 134
     fca:	d4 eb       	ldi	r29, 0xB4	; 180
     fcc:	6b c0       	rjmp	.+214    	; 0x10a4 <__EEPROM_REGION_LENGTH__+0xa4>
     fce:	c5 e8       	ldi	r28, 0x85	; 133
     fd0:	d1 eb       	ldi	r29, 0xB1	; 177
     fd2:	68 c0       	rjmp	.+208    	; 0x10a4 <__EEPROM_REGION_LENGTH__+0xa4>
     fd4:	c2 e8       	ldi	r28, 0x82	; 130
     fd6:	d0 e9       	ldi	r29, 0x90	; 144
     fd8:	65 c0       	rjmp	.+202    	; 0x10a4 <__EEPROM_REGION_LENGTH__+0xa4>
     fda:	c0 e8       	ldi	r28, 0x80	; 128
     fdc:	d0 e8       	ldi	r29, 0x80	; 128
     fde:	62 c0       	rjmp	.+196    	; 0x10a4 <__EEPROM_REGION_LENGTH__+0xa4>
     fe0:	8c 2f       	mov	r24, r28
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	80 31       	cpi	r24, 0x10	; 16
     fe6:	91 05       	cpc	r25, r1
     fe8:	08 f0       	brcs	.+2      	; 0xfec <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x92>
     fea:	61 c0       	rjmp	.+194    	; 0x10ae <__EEPROM_REGION_LENGTH__+0xae>
     fec:	fc 01       	movw	r30, r24
     fee:	88 27       	eor	r24, r24
     ff0:	ec 56       	subi	r30, 0x6C	; 108
     ff2:	ff 4f       	sbci	r31, 0xFF	; 255
     ff4:	8f 4f       	sbci	r24, 0xFF	; 255
     ff6:	0c 94 68 16 	jmp	0x2cd0	; 0x2cd0 <__tablejump2__>
     ffa:	c7 e8       	ldi	r28, 0x87	; 135
     ffc:	df ef       	ldi	r29, 0xFF	; 255
     ffe:	5b c0       	rjmp	.+182    	; 0x10b6 <__EEPROM_REGION_LENGTH__+0xb6>
    1000:	c7 e8       	ldi	r28, 0x87	; 135
    1002:	df ef       	ldi	r29, 0xFF	; 255
    1004:	4f e0       	ldi	r20, 0x0F	; 15
    1006:	64 c0       	rjmp	.+200    	; 0x10d0 <__EEPROM_REGION_LENGTH__+0xd0>
    1008:	c5 e8       	ldi	r28, 0x85	; 133
    100a:	d1 ef       	ldi	r29, 0xF1	; 241
    100c:	4e e4       	ldi	r20, 0x4E	; 78
    100e:	60 c0       	rjmp	.+192    	; 0x10d0 <__EEPROM_REGION_LENGTH__+0xd0>
    1010:	c7 e8       	ldi	r28, 0x87	; 135
    1012:	df ef       	ldi	r29, 0xFF	; 255
    1014:	54 c0       	rjmp	.+168    	; 0x10be <__EEPROM_REGION_LENGTH__+0xbe>
    1016:	c7 e8       	ldi	r28, 0x87	; 135
    1018:	da ef       	ldi	r29, 0xFA	; 250
    101a:	51 c0       	rjmp	.+162    	; 0x10be <__EEPROM_REGION_LENGTH__+0xbe>
    101c:	c7 e8       	ldi	r28, 0x87	; 135
    101e:	df ef       	ldi	r29, 0xFF	; 255
    1020:	35 c0       	rjmp	.+106    	; 0x108c <__EEPROM_REGION_LENGTH__+0x8c>
    1022:	c7 e0       	ldi	r28, 0x07	; 7
    1024:	de eb       	ldi	r29, 0xBE	; 190
    1026:	32 c0       	rjmp	.+100    	; 0x108c <__EEPROM_REGION_LENGTH__+0x8c>
    1028:	c7 e0       	ldi	r28, 0x07	; 7
    102a:	dd ea       	ldi	r29, 0xAD	; 173
    102c:	2f c0       	rjmp	.+94     	; 0x108c <__EEPROM_REGION_LENGTH__+0x8c>
    102e:	c6 e8       	ldi	r28, 0x86	; 134
    1030:	d0 ef       	ldi	r29, 0xF0	; 240
    1032:	2c c0       	rjmp	.+88     	; 0x108c <__EEPROM_REGION_LENGTH__+0x8c>
    1034:	c7 e8       	ldi	r28, 0x87	; 135
    1036:	da ef       	ldi	r29, 0xFA	; 250
    1038:	2d c0       	rjmp	.+90     	; 0x1094 <__EEPROM_REGION_LENGTH__+0x94>
    103a:	c5 e8       	ldi	r28, 0x85	; 133
    103c:	d1 ef       	ldi	r29, 0xF1	; 241
    103e:	2e c0       	rjmp	.+92     	; 0x109c <__EEPROM_REGION_LENGTH__+0x9c>
    1040:	c6 e8       	ldi	r28, 0x86	; 134
    1042:	d0 ef       	ldi	r29, 0xF0	; 240
    1044:	2f c0       	rjmp	.+94     	; 0x10a4 <__EEPROM_REGION_LENGTH__+0xa4>
    1046:	c2 e8       	ldi	r28, 0x82	; 130
    1048:	d0 ed       	ldi	r29, 0xD0	; 208
    104a:	2c c0       	rjmp	.+88     	; 0x10a4 <__EEPROM_REGION_LENGTH__+0xa4>
    104c:	8c 2f       	mov	r24, r28
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	fc 01       	movw	r30, r24
    1052:	34 97       	sbiw	r30, 0x04	; 4
    1054:	ec 30       	cpi	r30, 0x0C	; 12
    1056:	f1 05       	cpc	r31, r1
    1058:	50 f5       	brcc	.+84     	; 0x10ae <__EEPROM_REGION_LENGTH__+0xae>
    105a:	88 27       	eor	r24, r24
    105c:	ec 55       	subi	r30, 0x5C	; 92
    105e:	ff 4f       	sbci	r31, 0xFF	; 255
    1060:	8f 4f       	sbci	r24, 0xFF	; 255
    1062:	0c 94 68 16 	jmp	0x2cd0	; 0x2cd0 <__tablejump2__>
    1066:	c7 e8       	ldi	r28, 0x87	; 135
    1068:	df ef       	ldi	r29, 0xFF	; 255
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <__EEPROM_REGION_LENGTH__+0x70>
    106c:	c7 e8       	ldi	r28, 0x87	; 135
    106e:	da ef       	ldi	r29, 0xFA	; 250
    1070:	49 e0       	ldi	r20, 0x09	; 9
    1072:	2e c0       	rjmp	.+92     	; 0x10d0 <__EEPROM_REGION_LENGTH__+0xd0>
    1074:	c7 e8       	ldi	r28, 0x87	; 135
    1076:	df ef       	ldi	r29, 0xFF	; 255
    1078:	02 c0       	rjmp	.+4      	; 0x107e <__EEPROM_REGION_LENGTH__+0x7e>
    107a:	c7 e8       	ldi	r28, 0x87	; 135
    107c:	de ef       	ldi	r29, 0xFE	; 254
    107e:	44 e0       	ldi	r20, 0x04	; 4
    1080:	27 c0       	rjmp	.+78     	; 0x10d0 <__EEPROM_REGION_LENGTH__+0xd0>
    1082:	c7 e8       	ldi	r28, 0x87	; 135
    1084:	da ef       	ldi	r29, 0xFA	; 250
    1086:	fb cf       	rjmp	.-10     	; 0x107e <__EEPROM_REGION_LENGTH__+0x7e>
    1088:	c7 e8       	ldi	r28, 0x87	; 135
    108a:	da ef       	ldi	r29, 0xFA	; 250
    108c:	43 e0       	ldi	r20, 0x03	; 3
    108e:	20 c0       	rjmp	.+64     	; 0x10d0 <__EEPROM_REGION_LENGTH__+0xd0>
    1090:	c7 e8       	ldi	r28, 0x87	; 135
    1092:	df ef       	ldi	r29, 0xFF	; 255
    1094:	41 e0       	ldi	r20, 0x01	; 1
    1096:	1c c0       	rjmp	.+56     	; 0x10d0 <__EEPROM_REGION_LENGTH__+0xd0>
    1098:	c6 e8       	ldi	r28, 0x86	; 134
    109a:	db ef       	ldi	r29, 0xFB	; 251
    109c:	41 e4       	ldi	r20, 0x41	; 65
    109e:	18 c0       	rjmp	.+48     	; 0x10d0 <__EEPROM_REGION_LENGTH__+0xd0>
    10a0:	c7 e8       	ldi	r28, 0x87	; 135
    10a2:	da ef       	ldi	r29, 0xFA	; 250
    10a4:	40 e0       	ldi	r20, 0x00	; 0
    10a6:	14 c0       	rjmp	.+40     	; 0x10d0 <__EEPROM_REGION_LENGTH__+0xd0>
    10a8:	c2 e8       	ldi	r28, 0x82	; 130
    10aa:	d9 ed       	ldi	r29, 0xD9	; 217
    10ac:	fb cf       	rjmp	.-10     	; 0x10a4 <__EEPROM_REGION_LENGTH__+0xa4>
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	1b c0       	rjmp	.+54     	; 0x10e8 <__EEPROM_REGION_LENGTH__+0xe8>
    10b2:	c7 e8       	ldi	r28, 0x87	; 135
    10b4:	df eb       	ldi	r29, 0xBF	; 191
    10b6:	4f e1       	ldi	r20, 0x1F	; 31
    10b8:	0b c0       	rjmp	.+22     	; 0x10d0 <__EEPROM_REGION_LENGTH__+0xd0>
    10ba:	c7 e8       	ldi	r28, 0x87	; 135
    10bc:	df eb       	ldi	r29, 0xBF	; 191
    10be:	47 e0       	ldi	r20, 0x07	; 7
    10c0:	07 c0       	rjmp	.+14     	; 0x10d0 <__EEPROM_REGION_LENGTH__+0xd0>
    10c2:	c7 e8       	ldi	r28, 0x87	; 135
    10c4:	df ef       	ldi	r29, 0xFF	; 255
    10c6:	4f e3       	ldi	r20, 0x3F	; 63
    10c8:	03 c0       	rjmp	.+6      	; 0x10d0 <__EEPROM_REGION_LENGTH__+0xd0>
    10ca:	c7 e8       	ldi	r28, 0x87	; 135
    10cc:	df ef       	ldi	r29, 0xFF	; 255
    10ce:	4b e0       	ldi	r20, 0x0B	; 11
    10d0:	6a e2       	ldi	r22, 0x2A	; 42
    10d2:	c8 01       	movw	r24, r16
    10d4:	bd de       	rcall	.-646    	; 0xe50 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    10d6:	4d 2f       	mov	r20, r29
    10d8:	69 e2       	ldi	r22, 0x29	; 41
    10da:	c8 01       	movw	r24, r16
    10dc:	b9 de       	rcall	.-654    	; 0xe50 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    10de:	4c 2f       	mov	r20, r28
    10e0:	68 e2       	ldi	r22, 0x28	; 40
    10e2:	c8 01       	movw	r24, r16
    10e4:	b5 de       	rcall	.-662    	; 0xe50 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	df 91       	pop	r29
    10ea:	cf 91       	pop	r28
    10ec:	1f 91       	pop	r17
    10ee:	0f 91       	pop	r16
    10f0:	08 95       	ret

000010f2 <_ZN7MCP25159prepareIdEPhbm>:

void MCP2515::prepareId(uint8_t *buffer, const bool ext, const uint32_t id)
{
    10f2:	0f 93       	push	r16
    10f4:	1f 93       	push	r17
    10f6:	fb 01       	movw	r30, r22
    uint16_t canid = (uint16_t)(id & 0x0FFFF);

    if (ext) {
    10f8:	44 23       	and	r20, r20
    10fa:	b1 f0       	breq	.+44     	; 0x1128 <_ZN7MCP25159prepareIdEPhbm+0x36>
        buffer[MCP_EID0] = (uint8_t) (canid & 0xFF);
    10fc:	03 83       	std	Z+3, r16	; 0x03
        buffer[MCP_EID8] = (uint8_t) (canid >> 8);
    10fe:	12 83       	std	Z+2, r17	; 0x02
        canid = (uint16_t)(id >> 16);
    1100:	89 01       	movw	r16, r18
    1102:	22 27       	eor	r18, r18
    1104:	33 27       	eor	r19, r19
        buffer[MCP_SIDL] = (uint8_t) (canid & 0x03);
        buffer[MCP_SIDL] += (uint8_t) ((canid & 0x1C) << 3);
        buffer[MCP_SIDL] |= TXB_EXIDE_MASK;
    1106:	90 2f       	mov	r25, r16
    1108:	9c 71       	andi	r25, 0x1C	; 28
    110a:	80 2f       	mov	r24, r16
    110c:	83 70       	andi	r24, 0x03	; 3
    110e:	48 e0       	ldi	r20, 0x08	; 8
    1110:	94 9f       	mul	r25, r20
    1112:	80 0d       	add	r24, r0
    1114:	11 24       	eor	r1, r1
    1116:	88 60       	ori	r24, 0x08	; 8
    1118:	81 83       	std	Z+1, r24	; 0x01
        buffer[MCP_SIDH] = (uint8_t) (canid >> 5);
    111a:	55 e0       	ldi	r21, 0x05	; 5
    111c:	16 95       	lsr	r17
    111e:	07 95       	ror	r16
    1120:	5a 95       	dec	r21
    1122:	e1 f7       	brne	.-8      	; 0x111c <_ZN7MCP25159prepareIdEPhbm+0x2a>
    1124:	00 83       	st	Z, r16
    1126:	0d c0       	rjmp	.+26     	; 0x1142 <_ZN7MCP25159prepareIdEPhbm+0x50>
    } else {
        buffer[MCP_SIDH] = (uint8_t) (canid >> 3);
    1128:	c8 01       	movw	r24, r16
    112a:	23 e0       	ldi	r18, 0x03	; 3
    112c:	96 95       	lsr	r25
    112e:	87 95       	ror	r24
    1130:	2a 95       	dec	r18
    1132:	e1 f7       	brne	.-8      	; 0x112c <_ZN7MCP25159prepareIdEPhbm+0x3a>
    1134:	80 83       	st	Z, r24
        buffer[MCP_SIDL] = (uint8_t) ((canid & 0x07 ) << 5);
    1136:	02 95       	swap	r16
    1138:	00 0f       	add	r16, r16
    113a:	00 7e       	andi	r16, 0xE0	; 224
    113c:	01 83       	std	Z+1, r16	; 0x01
        buffer[MCP_EID0] = 0;
    113e:	13 82       	std	Z+3, r1	; 0x03
        buffer[MCP_EID8] = 0;
    1140:	12 82       	std	Z+2, r1	; 0x02
    }
}
    1142:	1f 91       	pop	r17
    1144:	0f 91       	pop	r16
    1146:	08 95       	ret

00001148 <_ZN7MCP251513setFilterMaskENS_4MASKEbm>:

MCP2515::ERROR MCP2515::setFilterMask(const MASK mask, const bool ext, const uint32_t ulData)
{
    1148:	8f 92       	push	r8
    114a:	9f 92       	push	r9
    114c:	af 92       	push	r10
    114e:	bf 92       	push	r11
    1150:	cf 92       	push	r12
    1152:	df 92       	push	r13
    1154:	ef 92       	push	r14
    1156:	ff 92       	push	r15
    1158:	0f 93       	push	r16
    115a:	1f 93       	push	r17
    115c:	cf 93       	push	r28
    115e:	df 93       	push	r29
    1160:	00 d0       	rcall	.+0      	; 0x1162 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x1a>
    1162:	1f 92       	push	r1
    1164:	cd b7       	in	r28, 0x3d	; 61
    1166:	de b7       	in	r29, 0x3e	; 62
    1168:	7c 01       	movw	r14, r24
    116a:	d6 2e       	mov	r13, r22
    116c:	c4 2e       	mov	r12, r20
    116e:	48 01       	movw	r8, r16
    1170:	59 01       	movw	r10, r18
    ERROR res = setConfigMode();
    1172:	ef de       	rcall	.-546    	; 0xf52 <_ZN7MCP251513setConfigModeEv>
    if (res != ERROR_OK) {
    1174:	81 11       	cpse	r24, r1
    1176:	19 c0       	rjmp	.+50     	; 0x11aa <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x62>
        return res;
    }
    
    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
    1178:	95 01       	movw	r18, r10
    117a:	84 01       	movw	r16, r8
    117c:	4c 2d       	mov	r20, r12
    117e:	be 01       	movw	r22, r28
    1180:	6f 5f       	subi	r22, 0xFF	; 255
    1182:	7f 4f       	sbci	r23, 0xFF	; 255
    1184:	c7 01       	movw	r24, r14
    1186:	b5 df       	rcall	.-150    	; 0x10f2 <_ZN7MCP25159prepareIdEPhbm>

    REGISTER reg;
    switch (mask) {
    1188:	dd 20       	and	r13, r13
    118a:	29 f0       	breq	.+10     	; 0x1196 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x4e>
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	d8 12       	cpse	r13, r24
    1190:	0b c0       	rjmp	.+22     	; 0x11a8 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x60>
        case MASK0: reg = MCP_RXM0SIDH; break;
        case MASK1: reg = MCP_RXM1SIDH; break;
    1192:	64 e2       	ldi	r22, 0x24	; 36
    1194:	01 c0       	rjmp	.+2      	; 0x1198 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x50>
    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);

    REGISTER reg;
    switch (mask) {
        case MASK0: reg = MCP_RXM0SIDH; break;
    1196:	60 e2       	ldi	r22, 0x20	; 32
        case MASK1: reg = MCP_RXM1SIDH; break;
        default:
            return ERROR_FAIL;
    }

    setRegisters(reg, tbufdata, 4);
    1198:	24 e0       	ldi	r18, 0x04	; 4
    119a:	ae 01       	movw	r20, r28
    119c:	4f 5f       	subi	r20, 0xFF	; 255
    119e:	5f 4f       	sbci	r21, 0xFF	; 255
    11a0:	c7 01       	movw	r24, r14
    11a2:	6a de       	rcall	.-812    	; 0xe78 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    
    return ERROR_OK;
    11a4:	80 e0       	ldi	r24, 0x00	; 0
    11a6:	01 c0       	rjmp	.+2      	; 0x11aa <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x62>
    REGISTER reg;
    switch (mask) {
        case MASK0: reg = MCP_RXM0SIDH; break;
        case MASK1: reg = MCP_RXM1SIDH; break;
        default:
            return ERROR_FAIL;
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    }

    setRegisters(reg, tbufdata, 4);
    
    return ERROR_OK;
}
    11aa:	0f 90       	pop	r0
    11ac:	0f 90       	pop	r0
    11ae:	0f 90       	pop	r0
    11b0:	0f 90       	pop	r0
    11b2:	df 91       	pop	r29
    11b4:	cf 91       	pop	r28
    11b6:	1f 91       	pop	r17
    11b8:	0f 91       	pop	r16
    11ba:	ff 90       	pop	r15
    11bc:	ef 90       	pop	r14
    11be:	df 90       	pop	r13
    11c0:	cf 90       	pop	r12
    11c2:	bf 90       	pop	r11
    11c4:	af 90       	pop	r10
    11c6:	9f 90       	pop	r9
    11c8:	8f 90       	pop	r8
    11ca:	08 95       	ret

000011cc <_ZN7MCP25159setFilterENS_3RXFEbm>:

MCP2515::ERROR MCP2515::setFilter(const RXF num, const bool ext, const uint32_t ulData)
{
    11cc:	8f 92       	push	r8
    11ce:	9f 92       	push	r9
    11d0:	af 92       	push	r10
    11d2:	bf 92       	push	r11
    11d4:	cf 92       	push	r12
    11d6:	df 92       	push	r13
    11d8:	ef 92       	push	r14
    11da:	ff 92       	push	r15
    11dc:	0f 93       	push	r16
    11de:	1f 93       	push	r17
    11e0:	cf 93       	push	r28
    11e2:	df 93       	push	r29
    11e4:	00 d0       	rcall	.+0      	; 0x11e6 <_ZN7MCP25159setFilterENS_3RXFEbm+0x1a>
    11e6:	1f 92       	push	r1
    11e8:	cd b7       	in	r28, 0x3d	; 61
    11ea:	de b7       	in	r29, 0x3e	; 62
    11ec:	6c 01       	movw	r12, r24
    11ee:	f6 2e       	mov	r15, r22
    11f0:	e4 2e       	mov	r14, r20
    11f2:	48 01       	movw	r8, r16
    11f4:	59 01       	movw	r10, r18
    ERROR res = setConfigMode();
    11f6:	ad de       	rcall	.-678    	; 0xf52 <_ZN7MCP251513setConfigModeEv>
    if (res != ERROR_OK) {
    11f8:	81 11       	cpse	r24, r1
    11fa:	34 c0       	rjmp	.+104    	; 0x1264 <_ZN7MCP25159setFilterENS_3RXFEbm+0x98>
        return res;
    }

    REGISTER reg;

    switch (num) {
    11fc:	82 e0       	ldi	r24, 0x02	; 2
    11fe:	f8 16       	cp	r15, r24
    1200:	a9 f0       	breq	.+42     	; 0x122c <_ZN7MCP25159setFilterENS_3RXFEbm+0x60>
    1202:	8f 15       	cp	r24, r15
    1204:	40 f0       	brcs	.+16     	; 0x1216 <_ZN7MCP25159setFilterENS_3RXFEbm+0x4a>
    1206:	ff 20       	and	r15, r15
    1208:	d1 f0       	breq	.+52     	; 0x123e <_ZN7MCP25159setFilterENS_3RXFEbm+0x72>
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	f8 12       	cpse	r15, r24
    120e:	29 c0       	rjmp	.+82     	; 0x1262 <_ZN7MCP25159setFilterENS_3RXFEbm+0x96>
        case RXF0: reg = MCP_RXF0SIDH; break;
        case RXF1: reg = MCP_RXF1SIDH; break;
    1210:	44 e0       	ldi	r20, 0x04	; 4
    1212:	f4 2e       	mov	r15, r20
    1214:	15 c0       	rjmp	.+42     	; 0x1240 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        return res;
    }

    REGISTER reg;

    switch (num) {
    1216:	84 e0       	ldi	r24, 0x04	; 4
    1218:	f8 16       	cp	r15, r24
    121a:	71 f0       	breq	.+28     	; 0x1238 <_ZN7MCP25159setFilterENS_3RXFEbm+0x6c>
    121c:	f8 16       	cp	r15, r24
    121e:	48 f0       	brcs	.+18     	; 0x1232 <_ZN7MCP25159setFilterENS_3RXFEbm+0x66>
    1220:	85 e0       	ldi	r24, 0x05	; 5
    1222:	f8 12       	cpse	r15, r24
    1224:	1e c0       	rjmp	.+60     	; 0x1262 <_ZN7MCP25159setFilterENS_3RXFEbm+0x96>
        case RXF0: reg = MCP_RXF0SIDH; break;
        case RXF1: reg = MCP_RXF1SIDH; break;
        case RXF2: reg = MCP_RXF2SIDH; break;
        case RXF3: reg = MCP_RXF3SIDH; break;
        case RXF4: reg = MCP_RXF4SIDH; break;
        case RXF5: reg = MCP_RXF5SIDH; break;
    1226:	88 e1       	ldi	r24, 0x18	; 24
    1228:	f8 2e       	mov	r15, r24
    122a:	0a c0       	rjmp	.+20     	; 0x1240 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
    REGISTER reg;

    switch (num) {
        case RXF0: reg = MCP_RXF0SIDH; break;
        case RXF1: reg = MCP_RXF1SIDH; break;
        case RXF2: reg = MCP_RXF2SIDH; break;
    122c:	38 e0       	ldi	r19, 0x08	; 8
    122e:	f3 2e       	mov	r15, r19
    1230:	07 c0       	rjmp	.+14     	; 0x1240 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF3: reg = MCP_RXF3SIDH; break;
    1232:	20 e1       	ldi	r18, 0x10	; 16
    1234:	f2 2e       	mov	r15, r18
    1236:	04 c0       	rjmp	.+8      	; 0x1240 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF4: reg = MCP_RXF4SIDH; break;
    1238:	94 e1       	ldi	r25, 0x14	; 20
    123a:	f9 2e       	mov	r15, r25
    123c:	01 c0       	rjmp	.+2      	; 0x1240 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
    }

    REGISTER reg;

    switch (num) {
        case RXF0: reg = MCP_RXF0SIDH; break;
    123e:	f1 2c       	mov	r15, r1
        default:
            return ERROR_FAIL;
    }

    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
    1240:	95 01       	movw	r18, r10
    1242:	84 01       	movw	r16, r8
    1244:	4e 2d       	mov	r20, r14
    1246:	be 01       	movw	r22, r28
    1248:	6f 5f       	subi	r22, 0xFF	; 255
    124a:	7f 4f       	sbci	r23, 0xFF	; 255
    124c:	c6 01       	movw	r24, r12
    124e:	51 df       	rcall	.-350    	; 0x10f2 <_ZN7MCP25159prepareIdEPhbm>
    setRegisters(reg, tbufdata, 4);
    1250:	24 e0       	ldi	r18, 0x04	; 4
    1252:	ae 01       	movw	r20, r28
    1254:	4f 5f       	subi	r20, 0xFF	; 255
    1256:	5f 4f       	sbci	r21, 0xFF	; 255
    1258:	6f 2d       	mov	r22, r15
    125a:	c6 01       	movw	r24, r12
    125c:	0d de       	rcall	.-998    	; 0xe78 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    return ERROR_OK;
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	01 c0       	rjmp	.+2      	; 0x1264 <_ZN7MCP25159setFilterENS_3RXFEbm+0x98>
        case RXF2: reg = MCP_RXF2SIDH; break;
        case RXF3: reg = MCP_RXF3SIDH; break;
        case RXF4: reg = MCP_RXF4SIDH; break;
        case RXF5: reg = MCP_RXF5SIDH; break;
        default:
            return ERROR_FAIL;
    1262:	81 e0       	ldi	r24, 0x01	; 1
    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
    setRegisters(reg, tbufdata, 4);

    return ERROR_OK;
}
    1264:	0f 90       	pop	r0
    1266:	0f 90       	pop	r0
    1268:	0f 90       	pop	r0
    126a:	0f 90       	pop	r0
    126c:	df 91       	pop	r29
    126e:	cf 91       	pop	r28
    1270:	1f 91       	pop	r17
    1272:	0f 91       	pop	r16
    1274:	ff 90       	pop	r15
    1276:	ef 90       	pop	r14
    1278:	df 90       	pop	r13
    127a:	cf 90       	pop	r12
    127c:	bf 90       	pop	r11
    127e:	af 90       	pop	r10
    1280:	9f 90       	pop	r9
    1282:	8f 90       	pop	r8
    1284:	08 95       	ret

00001286 <_ZN7MCP25155resetEv>:
    digitalWrite(SPICS, HIGH);
    SPIn->endTransaction();
}

MCP2515::ERROR MCP2515::reset(void)
{
    1286:	af 92       	push	r10
    1288:	bf 92       	push	r11
    128a:	cf 92       	push	r12
    128c:	df 92       	push	r13
    128e:	ef 92       	push	r14
    1290:	ff 92       	push	r15
    1292:	0f 93       	push	r16
    1294:	1f 93       	push	r17
    1296:	cf 93       	push	r28
    1298:	df 93       	push	r29
    129a:	cd b7       	in	r28, 0x3d	; 61
    129c:	de b7       	in	r29, 0x3e	; 62
    129e:	64 97       	sbiw	r28, 0x14	; 20
    12a0:	0f b6       	in	r0, 0x3f	; 63
    12a2:	f8 94       	cli
    12a4:	de bf       	out	0x3e, r29	; 62
    12a6:	0f be       	out	0x3f, r0	; 63
    12a8:	cd bf       	out	0x3d, r28	; 61
    12aa:	7c 01       	movw	r14, r24
    startSPI();
    12ac:	43 dd       	rcall	.-1402   	; 0xd34 <_ZN7MCP25158startSPIEv>
    SPIn->transfer(INSTRUCTION_RESET);
    12ae:	80 ec       	ldi	r24, 0xC0	; 192
    12b0:	3a dd       	rcall	.-1420   	; 0xd26 <_ZN8SPIClass8transferEh>
    endSPI();
    12b2:	c7 01       	movw	r24, r14
    12b4:	78 dd       	rcall	.-1296   	; 0xda6 <_ZN7MCP25156endSPIEv>
    12b6:	6a e0       	ldi	r22, 0x0A	; 10

    delay(10);
    12b8:	70 e0       	ldi	r23, 0x00	; 0
    12ba:	80 e0       	ldi	r24, 0x00	; 0
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	af db       	rcall	.-2210   	; 0xa1e <delay>
    12c0:	8e 01       	movw	r16, r28

    uint8_t zeros[14];
    memset(zeros, 0, sizeof(zeros));
    12c2:	0f 5f       	subi	r16, 0xFF	; 255
    12c4:	1f 4f       	sbci	r17, 0xFF	; 255
    12c6:	8e e0       	ldi	r24, 0x0E	; 14
    12c8:	f8 01       	movw	r30, r16
    12ca:	11 92       	st	Z+, r1
    12cc:	8a 95       	dec	r24
    12ce:	e9 f7       	brne	.-6      	; 0x12ca <_ZN7MCP25155resetEv+0x44>
    12d0:	2e e0       	ldi	r18, 0x0E	; 14
    setRegisters(MCP_TXB0CTRL, zeros, 14);
    12d2:	a8 01       	movw	r20, r16
    12d4:	60 e3       	ldi	r22, 0x30	; 48
    12d6:	c7 01       	movw	r24, r14
    12d8:	cf dd       	rcall	.-1122   	; 0xe78 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    12da:	2e e0       	ldi	r18, 0x0E	; 14
    setRegisters(MCP_TXB1CTRL, zeros, 14);
    12dc:	a8 01       	movw	r20, r16
    12de:	60 e4       	ldi	r22, 0x40	; 64
    12e0:	c7 01       	movw	r24, r14
    12e2:	ca dd       	rcall	.-1132   	; 0xe78 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    12e4:	2e e0       	ldi	r18, 0x0E	; 14
    setRegisters(MCP_TXB2CTRL, zeros, 14);
    12e6:	a8 01       	movw	r20, r16
    12e8:	60 e5       	ldi	r22, 0x50	; 80
    12ea:	c7 01       	movw	r24, r14
    12ec:	c5 dd       	rcall	.-1142   	; 0xe78 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    12ee:	40 e0       	ldi	r20, 0x00	; 0

    setRegister(MCP_RXB0CTRL, 0);
    12f0:	60 e6       	ldi	r22, 0x60	; 96
    12f2:	c7 01       	movw	r24, r14
    12f4:	ad dd       	rcall	.-1190   	; 0xe50 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    12f6:	40 e0       	ldi	r20, 0x00	; 0
    setRegister(MCP_RXB1CTRL, 0);
    12f8:	60 e7       	ldi	r22, 0x70	; 112
    12fa:	c7 01       	movw	r24, r14
    12fc:	a9 dd       	rcall	.-1198   	; 0xe50 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    12fe:	43 ea       	ldi	r20, 0xA3	; 163

    setRegister(MCP_CANINTE, CANINTF_RX0IF | CANINTF_RX1IF | CANINTF_ERRIF | CANINTF_MERRF);
    1300:	6b e2       	ldi	r22, 0x2B	; 43
    1302:	c7 01       	movw	r24, r14
    1304:	a5 dd       	rcall	.-1206   	; 0xe50 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    1306:	24 e0       	ldi	r18, 0x04	; 4

    // receives all valid messages using either Standard or Extended Identifiers that
    // meet filter criteria. RXF0 is applied for RXB0, RXF1 is applied for RXB1
    modifyRegister(MCP_RXB0CTRL,
                   RXBnCTRL_RXM_MASK | RXB0CTRL_BUKT | RXB0CTRL_FILHIT_MASK,
                   RXBnCTRL_RXM_STDEXT | RXB0CTRL_BUKT | RXB0CTRL_FILHIT);
    1308:	47 e6       	ldi	r20, 0x67	; 103
    130a:	60 e6       	ldi	r22, 0x60	; 96
    130c:	c7 01       	movw	r24, r14
    130e:	da dd       	rcall	.-1100   	; 0xec4 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
    1310:	21 e0       	ldi	r18, 0x01	; 1
    1312:	47 e6       	ldi	r20, 0x67	; 103
    modifyRegister(MCP_RXB1CTRL,
                   RXBnCTRL_RXM_MASK | RXB1CTRL_FILHIT_MASK,
                   RXBnCTRL_RXM_STDEXT | RXB1CTRL_FILHIT);
    1314:	60 e7       	ldi	r22, 0x70	; 112
    1316:	c7 01       	movw	r24, r14
    1318:	d5 dd       	rcall	.-1110   	; 0xec4 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
    131a:	86 e0       	ldi	r24, 0x06	; 6
    131c:	eb e1       	ldi	r30, 0x1B	; 27
    131e:	f2 e0       	ldi	r31, 0x02	; 2

    // clear filters and masks
    // do not filter any standard frames for RXF0 used by RXB0
    // do not filter any extended frames for RXF1 used by RXB1
    RXF filters[] = {RXF0, RXF1, RXF2, RXF3, RXF4, RXF5};
    1320:	de 01       	movw	r26, r28
    1322:	1f 96       	adiw	r26, 0x0f	; 15
    1324:	01 90       	ld	r0, Z+
    1326:	0d 92       	st	X+, r0
    1328:	8a 95       	dec	r24
    132a:	e1 f7       	brne	.-8      	; 0x1324 <_ZN7MCP25155resetEv+0x9e>
    132c:	5e 01       	movw	r10, r28
    132e:	ff e0       	ldi	r31, 0x0F	; 15
    1330:	af 0e       	add	r10, r31
    1332:	b1 1c       	adc	r11, r1
    1334:	c1 2c       	mov	r12, r1
    1336:	d1 2c       	mov	r13, r1
    1338:	f5 01       	movw	r30, r10
    for (int i=0; i<6; i++) {
    133a:	61 91       	ld	r22, Z+
    133c:	5f 01       	movw	r10, r30
        bool ext = (i == 1);
        ERROR result = setFilter(filters[i], ext, 0);
    133e:	41 e0       	ldi	r20, 0x01	; 1
    1340:	f1 e0       	ldi	r31, 0x01	; 1
    1342:	cf 16       	cp	r12, r31
    1344:	d1 04       	cpc	r13, r1
    1346:	09 f0       	breq	.+2      	; 0x134a <_ZN7MCP25155resetEv+0xc4>
    1348:	40 e0       	ldi	r20, 0x00	; 0
    134a:	00 e0       	ldi	r16, 0x00	; 0
    134c:	10 e0       	ldi	r17, 0x00	; 0
    134e:	98 01       	movw	r18, r16
    1350:	c7 01       	movw	r24, r14
    1352:	3c df       	rcall	.-392    	; 0x11cc <_ZN7MCP25159setFilterENS_3RXFEbm>
    1354:	81 11       	cpse	r24, r1
    1356:	17 c0       	rjmp	.+46     	; 0x1386 <_ZN7MCP25155resetEv+0x100>
    1358:	8f ef       	ldi	r24, 0xFF	; 255
        if (result != ERROR_OK) {
    135a:	c8 1a       	sub	r12, r24
    135c:	d8 0a       	sbc	r13, r24

    // clear filters and masks
    // do not filter any standard frames for RXF0 used by RXB0
    // do not filter any extended frames for RXF1 used by RXB1
    RXF filters[] = {RXF0, RXF1, RXF2, RXF3, RXF4, RXF5};
    for (int i=0; i<6; i++) {
    135e:	e6 e0       	ldi	r30, 0x06	; 6
    1360:	ce 16       	cp	r12, r30
    1362:	d1 04       	cpc	r13, r1
    1364:	49 f7       	brne	.-46     	; 0x1338 <_ZN7MCP25155resetEv+0xb2>
    1366:	00 e0       	ldi	r16, 0x00	; 0
    1368:	10 e0       	ldi	r17, 0x00	; 0
        }
    }

    MASK masks[] = {MASK0, MASK1};
    for (int i=0; i<2; i++) {
        ERROR result = setFilterMask(masks[i], true, 0);
    136a:	98 01       	movw	r18, r16
    136c:	41 e0       	ldi	r20, 0x01	; 1
    136e:	60 e0       	ldi	r22, 0x00	; 0
    1370:	c7 01       	movw	r24, r14
    1372:	ea de       	rcall	.-556    	; 0x1148 <_ZN7MCP251513setFilterMaskENS_4MASKEbm>
    1374:	81 11       	cpse	r24, r1
    1376:	07 c0       	rjmp	.+14     	; 0x1386 <_ZN7MCP25155resetEv+0x100>
        if (result != ERROR_OK) {
    1378:	00 e0       	ldi	r16, 0x00	; 0
    137a:	10 e0       	ldi	r17, 0x00	; 0
        }
    }

    MASK masks[] = {MASK0, MASK1};
    for (int i=0; i<2; i++) {
        ERROR result = setFilterMask(masks[i], true, 0);
    137c:	98 01       	movw	r18, r16
    137e:	41 e0       	ldi	r20, 0x01	; 1
    1380:	61 e0       	ldi	r22, 0x01	; 1
    1382:	c7 01       	movw	r24, r14
    1384:	e1 de       	rcall	.-574    	; 0x1148 <_ZN7MCP251513setFilterMaskENS_4MASKEbm>
    1386:	64 96       	adiw	r28, 0x14	; 20
    1388:	0f b6       	in	r0, 0x3f	; 63
    138a:	f8 94       	cli
            return result;
        }
    }

    return ERROR_OK;
}
    138c:	de bf       	out	0x3e, r29	; 62
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	cd bf       	out	0x3d, r28	; 61
    1392:	df 91       	pop	r29
    1394:	cf 91       	pop	r28
    1396:	1f 91       	pop	r17
    1398:	0f 91       	pop	r16
    139a:	ff 90       	pop	r15
    139c:	ef 90       	pop	r14
    139e:	df 90       	pop	r13
    13a0:	cf 90       	pop	r12
    13a2:	bf 90       	pop	r11
    13a4:	af 90       	pop	r10
    13a6:	08 95       	ret

000013a8 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame>:
    13a8:	4f 92       	push	r4
    13aa:	5f 92       	push	r5
    13ac:	6f 92       	push	r6

    return ERROR_OK;
}

MCP2515::ERROR MCP2515::sendMessage(const TXBn txbn, const struct can_frame *frame)
{
    13ae:	7f 92       	push	r7
    13b0:	af 92       	push	r10
    13b2:	bf 92       	push	r11
    13b4:	cf 92       	push	r12
    13b6:	df 92       	push	r13
    13b8:	ef 92       	push	r14
    13ba:	ff 92       	push	r15
    13bc:	0f 93       	push	r16
    13be:	1f 93       	push	r17
    13c0:	cf 93       	push	r28
    13c2:	df 93       	push	r29
    13c4:	cd b7       	in	r28, 0x3d	; 61
    13c6:	de b7       	in	r29, 0x3e	; 62
    13c8:	2d 97       	sbiw	r28, 0x0d	; 13
    13ca:	0f b6       	in	r0, 0x3f	; 63
    13cc:	f8 94       	cli
    13ce:	de bf       	out	0x3e, r29	; 62
    13d0:	0f be       	out	0x3f, r0	; 63
    13d2:	cd bf       	out	0x3d, r28	; 61
    13d4:	5c 01       	movw	r10, r24
    13d6:	fa 01       	movw	r30, r20
    if (frame->can_dlc > CAN_MAX_DLEN) {
    13d8:	24 81       	ldd	r18, Z+4	; 0x04
    13da:	29 30       	cpi	r18, 0x09	; 9
    13dc:	08 f0       	brcs	.+2      	; 0x13e0 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0x38>
    13de:	58 c0       	rjmp	.+176    	; 0x1490 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0xe8>
        return ERROR_FAILTX;
    }

    const struct TXBn_REGS *txbuf = &TXB[txbn];
    13e0:	e6 2e       	mov	r14, r22
    13e2:	f1 2c       	mov	r15, r1

    uint8_t data[13];

    bool ext = (frame->can_id & CAN_EFF_FLAG);
    13e4:	80 81       	ld	r24, Z
    13e6:	91 81       	ldd	r25, Z+1	; 0x01
    13e8:	a2 81       	ldd	r26, Z+2	; 0x02
    13ea:	b3 81       	ldd	r27, Z+3	; 0x03
    13ec:	ac 01       	movw	r20, r24
    13ee:	bd 01       	movw	r22, r26
    13f0:	44 27       	eor	r20, r20
    13f2:	77 fd       	sbrc	r23, 7
    13f4:	43 95       	inc	r20
    13f6:	55 27       	eor	r21, r21
    13f8:	66 27       	eor	r22, r22
    13fa:	77 27       	eor	r23, r23
    bool rtr = (frame->can_id & CAN_RTR_FLAG);
    13fc:	2c 01       	movw	r4, r24
    13fe:	3d 01       	movw	r6, r26
    1400:	44 24       	eor	r4, r4
    1402:	55 24       	eor	r5, r5
    1404:	66 24       	eor	r6, r6
    1406:	20 e4       	ldi	r18, 0x40	; 64
    1408:	72 22       	and	r7, r18
    uint32_t id = (frame->can_id & (ext ? CAN_EFF_MASK : CAN_SFF_MASK));
    140a:	b7 fd       	sbrc	r27, 7
    140c:	05 c0       	rjmp	.+10     	; 0x1418 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0x70>
    140e:	0f ef       	ldi	r16, 0xFF	; 255
    1410:	17 e0       	ldi	r17, 0x07	; 7
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	04 c0       	rjmp	.+8      	; 0x1420 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0x78>
    1418:	0f ef       	ldi	r16, 0xFF	; 255
    141a:	1f ef       	ldi	r17, 0xFF	; 255
    141c:	2f ef       	ldi	r18, 0xFF	; 255
    141e:	3f e1       	ldi	r19, 0x1F	; 31
    1420:	6f 01       	movw	r12, r30

    prepareId(data, ext, id);
    1422:	08 23       	and	r16, r24
    1424:	19 23       	and	r17, r25
    1426:	2a 23       	and	r18, r26
    1428:	3b 23       	and	r19, r27
    142a:	be 01       	movw	r22, r28
    142c:	6f 5f       	subi	r22, 0xFF	; 255
    142e:	7f 4f       	sbci	r23, 0xFF	; 255
    1430:	c5 01       	movw	r24, r10
    1432:	5f de       	rcall	.-834    	; 0x10f2 <_ZN7MCP25159prepareIdEPhbm>
    1434:	f6 01       	movw	r30, r12
    1436:	14 81       	ldd	r17, Z+4	; 0x04

    data[MCP_DLC] = rtr ? (frame->can_dlc | RTR_MASK) : frame->can_dlc;
    1438:	81 2f       	mov	r24, r17
    143a:	45 28       	or	r4, r5
    143c:	46 28       	or	r4, r6
    143e:	47 28       	or	r4, r7
    1440:	09 f0       	breq	.+2      	; 0x1444 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0x9c>
    1442:	80 64       	ori	r24, 0x40	; 64
    1444:	8d 83       	std	Y+5, r24	; 0x05

    memcpy(&data[MCP_DATA], frame->data, frame->can_dlc);
    1446:	41 2f       	mov	r20, r17
    1448:	50 e0       	ldi	r21, 0x00	; 0
    144a:	b6 01       	movw	r22, r12
    144c:	68 5f       	subi	r22, 0xF8	; 248
    144e:	7f 4f       	sbci	r23, 0xFF	; 255
    1450:	ce 01       	movw	r24, r28
    1452:	06 96       	adiw	r24, 0x06	; 6
    1454:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <memcpy>

    setRegisters(txbuf->SIDH, data, 5 + frame->can_dlc);
    1458:	25 e0       	ldi	r18, 0x05	; 5
    145a:	21 0f       	add	r18, r17
    145c:	87 01       	movw	r16, r14
    145e:	00 0f       	add	r16, r16
    1460:	11 1f       	adc	r17, r17
    1462:	0e 0d       	add	r16, r14
    1464:	1f 1d       	adc	r17, r15
    1466:	00 5d       	subi	r16, 0xD0	; 208
    1468:	1d 4f       	sbci	r17, 0xFD	; 253
    146a:	ae 01       	movw	r20, r28
    146c:	4f 5f       	subi	r20, 0xFF	; 255
    146e:	5f 4f       	sbci	r21, 0xFF	; 255
    1470:	f8 01       	movw	r30, r16
    1472:	61 81       	ldd	r22, Z+1	; 0x01
    1474:	c5 01       	movw	r24, r10
    1476:	00 dd       	rcall	.-1536   	; 0xe78 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    modifyRegister(txbuf->CTRL, TXB_TXREQ, TXB_TXREQ);
    1478:	f8 01       	movw	r30, r16
    147a:	10 81       	ld	r17, Z
    147c:	28 e0       	ldi	r18, 0x08	; 8
    147e:	48 e0       	ldi	r20, 0x08	; 8
    1480:	61 2f       	mov	r22, r17
    1482:	c5 01       	movw	r24, r10
    1484:	1f dd       	rcall	.-1474   	; 0xec4 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>

    uint8_t ctrl = readRegister(txbuf->CTRL);
    1486:	61 2f       	mov	r22, r17
    1488:	c5 01       	movw	r24, r10
    148a:	ce dc       	rcall	.-1636   	; 0xe28 <_ZN7MCP251512readRegisterENS_8REGISTERE>
    148c:	80 77       	andi	r24, 0x70	; 112
    if ((ctrl & (TXB_ABTF | TXB_MLOA | TXB_TXERR)) != 0) {
    148e:	09 f0       	breq	.+2      	; 0x1492 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0xea>
    1490:	84 e0       	ldi	r24, 0x04	; 4
}

MCP2515::ERROR MCP2515::sendMessage(const TXBn txbn, const struct can_frame *frame)
{
    if (frame->can_dlc > CAN_MAX_DLEN) {
        return ERROR_FAILTX;
    1492:	2d 96       	adiw	r28, 0x0d	; 13
    uint8_t ctrl = readRegister(txbuf->CTRL);
    if ((ctrl & (TXB_ABTF | TXB_MLOA | TXB_TXERR)) != 0) {
        return ERROR_FAILTX;
    }
    return ERROR_OK;
}
    1494:	0f b6       	in	r0, 0x3f	; 63
    1496:	f8 94       	cli
    1498:	de bf       	out	0x3e, r29	; 62
    149a:	0f be       	out	0x3f, r0	; 63
    149c:	cd bf       	out	0x3d, r28	; 61
    149e:	df 91       	pop	r29
    14a0:	cf 91       	pop	r28
    14a2:	1f 91       	pop	r17
    14a4:	0f 91       	pop	r16
    14a6:	ff 90       	pop	r15
    14a8:	ef 90       	pop	r14
    14aa:	df 90       	pop	r13
    14ac:	cf 90       	pop	r12
    14ae:	bf 90       	pop	r11
    14b0:	af 90       	pop	r10
    14b2:	7f 90       	pop	r7
    14b4:	6f 90       	pop	r6
    14b6:	5f 90       	pop	r5
    14b8:	4f 90       	pop	r4
    14ba:	08 95       	ret

000014bc <_ZN7MCP251511sendMessageEPK9can_frame>:
    14bc:	9f 92       	push	r9

MCP2515::ERROR MCP2515::sendMessage(const struct can_frame *frame)
{
    14be:	af 92       	push	r10
    14c0:	bf 92       	push	r11
    14c2:	cf 92       	push	r12
    14c4:	df 92       	push	r13
    14c6:	ef 92       	push	r14
    14c8:	ff 92       	push	r15
    14ca:	0f 93       	push	r16
    14cc:	1f 93       	push	r17
    14ce:	cf 93       	push	r28
    14d0:	df 93       	push	r29
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <_ZN7MCP251511sendMessageEPK9can_frame+0x18>
    14d4:	cd b7       	in	r28, 0x3d	; 61
    14d6:	de b7       	in	r29, 0x3e	; 62
    if (frame->can_dlc > CAN_MAX_DLEN) {
    14d8:	fb 01       	movw	r30, r22
    14da:	24 81       	ldd	r18, Z+4	; 0x04
    14dc:	29 30       	cpi	r18, 0x09	; 9
    14de:	d8 f5       	brcc	.+118    	; 0x1556 <_ZN7MCP251511sendMessageEPK9can_frame+0x9a>
    14e0:	7b 01       	movw	r14, r22
    14e2:	8c 01       	movw	r16, r24
        return ERROR_FAILTX;
    }

    TXBn txBuffers[N_TXBUFFERS] = {TXB0, TXB1, TXB2};
    14e4:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <uxTopUsedPriority+0x7>
    14e8:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <uxTopUsedPriority+0x8>
    14ec:	a0 91 23 02 	lds	r26, 0x0223	; 0x800223 <uxTopUsedPriority+0x9>
    14f0:	89 83       	std	Y+1, r24	; 0x01
    14f2:	9a 83       	std	Y+2, r25	; 0x02
    14f4:	ab 83       	std	Y+3, r26	; 0x03
    14f6:	ce 01       	movw	r24, r28
    14f8:	01 96       	adiw	r24, 0x01	; 1
    14fa:	6c 01       	movw	r12, r24
    14fc:	5e 01       	movw	r10, r28
    14fe:	94 e0       	ldi	r25, 0x04	; 4
    1500:	a9 0e       	add	r10, r25
    1502:	b1 1c       	adc	r11, r1

    for (int i=0; i<N_TXBUFFERS; i++) {
        const struct TXBn_REGS *txbuf = &TXB[txBuffers[i]];
    1504:	f6 01       	movw	r30, r12
    1506:	91 90       	ld	r9, Z+
    1508:	6f 01       	movw	r12, r30
        uint8_t ctrlval = readRegister(txbuf->CTRL);
    150a:	29 2d       	mov	r18, r9
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	f9 01       	movw	r30, r18
    1510:	ee 0f       	add	r30, r30
    1512:	ff 1f       	adc	r31, r31
    1514:	2e 0f       	add	r18, r30
    1516:	3f 1f       	adc	r19, r31
    1518:	f9 01       	movw	r30, r18
    151a:	e0 5d       	subi	r30, 0xD0	; 208
    151c:	fd 4f       	sbci	r31, 0xFD	; 253
    151e:	60 81       	ld	r22, Z
    1520:	c8 01       	movw	r24, r16
    1522:	82 dc       	rcall	.-1788   	; 0xe28 <_ZN7MCP251512readRegisterENS_8REGISTERE>
        if ( (ctrlval & TXB_TXREQ) == 0 ) {
    1524:	83 fd       	sbrc	r24, 3
    1526:	12 c0       	rjmp	.+36     	; 0x154c <_ZN7MCP251511sendMessageEPK9can_frame+0x90>
            return sendMessage(txBuffers[i], frame);
    1528:	a7 01       	movw	r20, r14
    152a:	69 2d       	mov	r22, r9
    152c:	c8 01       	movw	r24, r16
        }
    }

    return ERROR_ALLTXBUSY;
}
    152e:	0f 90       	pop	r0
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	df 91       	pop	r29
    1536:	cf 91       	pop	r28
    1538:	1f 91       	pop	r17
    153a:	0f 91       	pop	r16
    153c:	ff 90       	pop	r15
    153e:	ef 90       	pop	r14
    1540:	df 90       	pop	r13
    1542:	cf 90       	pop	r12
    1544:	bf 90       	pop	r11
    1546:	af 90       	pop	r10

    for (int i=0; i<N_TXBUFFERS; i++) {
        const struct TXBn_REGS *txbuf = &TXB[txBuffers[i]];
        uint8_t ctrlval = readRegister(txbuf->CTRL);
        if ( (ctrlval & TXB_TXREQ) == 0 ) {
            return sendMessage(txBuffers[i], frame);
    1548:	9f 90       	pop	r9
    154a:	2e cf       	rjmp	.-420    	; 0x13a8 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame>
        return ERROR_FAILTX;
    }

    TXBn txBuffers[N_TXBUFFERS] = {TXB0, TXB1, TXB2};

    for (int i=0; i<N_TXBUFFERS; i++) {
    154c:	ca 14       	cp	r12, r10
    154e:	db 04       	cpc	r13, r11
    1550:	c9 f6       	brne	.-78     	; 0x1504 <_ZN7MCP251511sendMessageEPK9can_frame+0x48>
        if ( (ctrlval & TXB_TXREQ) == 0 ) {
            return sendMessage(txBuffers[i], frame);
        }
    }

    return ERROR_ALLTXBUSY;
    1552:	82 e0       	ldi	r24, 0x02	; 2
    1554:	01 c0       	rjmp	.+2      	; 0x1558 <_ZN7MCP251511sendMessageEPK9can_frame+0x9c>
}

MCP2515::ERROR MCP2515::sendMessage(const struct can_frame *frame)
{
    if (frame->can_dlc > CAN_MAX_DLEN) {
        return ERROR_FAILTX;
    1556:	84 e0       	ldi	r24, 0x04	; 4
            return sendMessage(txBuffers[i], frame);
        }
    }

    return ERROR_ALLTXBUSY;
}
    1558:	0f 90       	pop	r0
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	df 91       	pop	r29
    1560:	cf 91       	pop	r28
    1562:	1f 91       	pop	r17
    1564:	0f 91       	pop	r16
    1566:	ff 90       	pop	r15
    1568:	ef 90       	pop	r14
    156a:	df 90       	pop	r13
    156c:	cf 90       	pop	r12
    156e:	bf 90       	pop	r11
    1570:	af 90       	pop	r10
    1572:	9f 90       	pop	r9
    1574:	08 95       	ret

00001576 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1576:	0f b6       	in	r0, 0x3f	; 63
    1578:	f8 94       	cli
    157a:	0f 92       	push	r0
    157c:	fc 01       	movw	r30, r24
    157e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1580:	0f 90       	pop	r0
    1582:	0f be       	out	0x3f, r0	; 63
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	91 11       	cpse	r25, r1
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	08 95       	ret

0000158c <prvCopyDataToQueue>:
    158c:	0f 93       	push	r16
    158e:	1f 93       	push	r17
    1590:	cf 93       	push	r28
    1592:	df 93       	push	r29
    1594:	ec 01       	movw	r28, r24
    1596:	04 2f       	mov	r16, r20
    1598:	1a 8d       	ldd	r17, Y+26	; 0x1a
    159a:	4c 8d       	ldd	r20, Y+28	; 0x1c
    159c:	41 11       	cpse	r20, r1
    159e:	0a c0       	rjmp	.+20     	; 0x15b4 <prvCopyDataToQueue+0x28>
    15a0:	88 81       	ld	r24, Y
    15a2:	99 81       	ldd	r25, Y+1	; 0x01
    15a4:	89 2b       	or	r24, r25
    15a6:	e1 f5       	brne	.+120    	; 0x1620 <prvCopyDataToQueue+0x94>
    15a8:	8c 81       	ldd	r24, Y+4	; 0x04
    15aa:	9d 81       	ldd	r25, Y+5	; 0x05
    15ac:	c3 d7       	rcall	.+3974   	; 0x2534 <xTaskPriorityDisinherit>
    15ae:	1d 82       	std	Y+5, r1	; 0x05
    15b0:	1c 82       	std	Y+4, r1	; 0x04
    15b2:	37 c0       	rjmp	.+110    	; 0x1622 <prvCopyDataToQueue+0x96>
    15b4:	50 e0       	ldi	r21, 0x00	; 0
    15b6:	01 11       	cpse	r16, r1
    15b8:	15 c0       	rjmp	.+42     	; 0x15e4 <prvCopyDataToQueue+0x58>
    15ba:	8a 81       	ldd	r24, Y+2	; 0x02
    15bc:	9b 81       	ldd	r25, Y+3	; 0x03
    15be:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <memcpy>
    15c2:	2c 8d       	ldd	r18, Y+28	; 0x1c
    15c4:	8a 81       	ldd	r24, Y+2	; 0x02
    15c6:	9b 81       	ldd	r25, Y+3	; 0x03
    15c8:	82 0f       	add	r24, r18
    15ca:	91 1d       	adc	r25, r1
    15cc:	9b 83       	std	Y+3, r25	; 0x03
    15ce:	8a 83       	std	Y+2, r24	; 0x02
    15d0:	2c 81       	ldd	r18, Y+4	; 0x04
    15d2:	3d 81       	ldd	r19, Y+5	; 0x05
    15d4:	82 17       	cp	r24, r18
    15d6:	93 07       	cpc	r25, r19
    15d8:	18 f1       	brcs	.+70     	; 0x1620 <prvCopyDataToQueue+0x94>
    15da:	88 81       	ld	r24, Y
    15dc:	99 81       	ldd	r25, Y+1	; 0x01
    15de:	9b 83       	std	Y+3, r25	; 0x03
    15e0:	8a 83       	std	Y+2, r24	; 0x02
    15e2:	1e c0       	rjmp	.+60     	; 0x1620 <prvCopyDataToQueue+0x94>
    15e4:	8e 81       	ldd	r24, Y+6	; 0x06
    15e6:	9f 81       	ldd	r25, Y+7	; 0x07
    15e8:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <memcpy>
    15ec:	8c 8d       	ldd	r24, Y+28	; 0x1c
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	91 95       	neg	r25
    15f2:	81 95       	neg	r24
    15f4:	91 09       	sbc	r25, r1
    15f6:	2e 81       	ldd	r18, Y+6	; 0x06
    15f8:	3f 81       	ldd	r19, Y+7	; 0x07
    15fa:	28 0f       	add	r18, r24
    15fc:	39 1f       	adc	r19, r25
    15fe:	3f 83       	std	Y+7, r19	; 0x07
    1600:	2e 83       	std	Y+6, r18	; 0x06
    1602:	48 81       	ld	r20, Y
    1604:	59 81       	ldd	r21, Y+1	; 0x01
    1606:	24 17       	cp	r18, r20
    1608:	35 07       	cpc	r19, r21
    160a:	30 f4       	brcc	.+12     	; 0x1618 <prvCopyDataToQueue+0x8c>
    160c:	2c 81       	ldd	r18, Y+4	; 0x04
    160e:	3d 81       	ldd	r19, Y+5	; 0x05
    1610:	82 0f       	add	r24, r18
    1612:	93 1f       	adc	r25, r19
    1614:	9f 83       	std	Y+7, r25	; 0x07
    1616:	8e 83       	std	Y+6, r24	; 0x06
    1618:	02 30       	cpi	r16, 0x02	; 2
    161a:	11 f4       	brne	.+4      	; 0x1620 <prvCopyDataToQueue+0x94>
    161c:	11 11       	cpse	r17, r1
    161e:	11 50       	subi	r17, 0x01	; 1
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	1f 5f       	subi	r17, 0xFF	; 255
    1624:	1a 8f       	std	Y+26, r17	; 0x1a
    1626:	df 91       	pop	r29
    1628:	cf 91       	pop	r28
    162a:	1f 91       	pop	r17
    162c:	0f 91       	pop	r16
    162e:	08 95       	ret

00001630 <prvCopyDataFromQueue>:
    1630:	fc 01       	movw	r30, r24
    1632:	cb 01       	movw	r24, r22
    1634:	44 8d       	ldd	r20, Z+28	; 0x1c
    1636:	44 23       	and	r20, r20
    1638:	a1 f0       	breq	.+40     	; 0x1662 <prvCopyDataFromQueue+0x32>
    163a:	50 e0       	ldi	r21, 0x00	; 0
    163c:	26 81       	ldd	r18, Z+6	; 0x06
    163e:	37 81       	ldd	r19, Z+7	; 0x07
    1640:	24 0f       	add	r18, r20
    1642:	35 1f       	adc	r19, r21
    1644:	37 83       	std	Z+7, r19	; 0x07
    1646:	26 83       	std	Z+6, r18	; 0x06
    1648:	64 81       	ldd	r22, Z+4	; 0x04
    164a:	75 81       	ldd	r23, Z+5	; 0x05
    164c:	26 17       	cp	r18, r22
    164e:	37 07       	cpc	r19, r23
    1650:	20 f0       	brcs	.+8      	; 0x165a <prvCopyDataFromQueue+0x2a>
    1652:	20 81       	ld	r18, Z
    1654:	31 81       	ldd	r19, Z+1	; 0x01
    1656:	37 83       	std	Z+7, r19	; 0x07
    1658:	26 83       	std	Z+6, r18	; 0x06
    165a:	66 81       	ldd	r22, Z+6	; 0x06
    165c:	77 81       	ldd	r23, Z+7	; 0x07
    165e:	0c 94 70 16 	jmp	0x2ce0	; 0x2ce0 <memcpy>
    1662:	08 95       	ret

00001664 <prvUnlockQueue>:
    1664:	ef 92       	push	r14
    1666:	ff 92       	push	r15
    1668:	1f 93       	push	r17
    166a:	cf 93       	push	r28
    166c:	df 93       	push	r29
    166e:	ec 01       	movw	r28, r24
    1670:	0f b6       	in	r0, 0x3f	; 63
    1672:	f8 94       	cli
    1674:	0f 92       	push	r0
    1676:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1678:	7c 01       	movw	r14, r24
    167a:	81 e1       	ldi	r24, 0x11	; 17
    167c:	e8 0e       	add	r14, r24
    167e:	f1 1c       	adc	r15, r1
    1680:	11 16       	cp	r1, r17
    1682:	4c f4       	brge	.+18     	; 0x1696 <prvUnlockQueue+0x32>
    1684:	89 89       	ldd	r24, Y+17	; 0x11
    1686:	88 23       	and	r24, r24
    1688:	31 f0       	breq	.+12     	; 0x1696 <prvUnlockQueue+0x32>
    168a:	c7 01       	movw	r24, r14
    168c:	59 d6       	rcall	.+3250   	; 0x2340 <xTaskRemoveFromEventList>
    168e:	81 11       	cpse	r24, r1
    1690:	3f d7       	rcall	.+3710   	; 0x2510 <vTaskMissedYield>
    1692:	11 50       	subi	r17, 0x01	; 1
    1694:	f5 cf       	rjmp	.-22     	; 0x1680 <prvUnlockQueue+0x1c>
    1696:	8f ef       	ldi	r24, 0xFF	; 255
    1698:	8e 8f       	std	Y+30, r24	; 0x1e
    169a:	0f 90       	pop	r0
    169c:	0f be       	out	0x3f, r0	; 63
    169e:	0f b6       	in	r0, 0x3f	; 63
    16a0:	f8 94       	cli
    16a2:	0f 92       	push	r0
    16a4:	1d 8d       	ldd	r17, Y+29	; 0x1d
    16a6:	7e 01       	movw	r14, r28
    16a8:	88 e0       	ldi	r24, 0x08	; 8
    16aa:	e8 0e       	add	r14, r24
    16ac:	f1 1c       	adc	r15, r1
    16ae:	11 16       	cp	r1, r17
    16b0:	4c f4       	brge	.+18     	; 0x16c4 <prvUnlockQueue+0x60>
    16b2:	88 85       	ldd	r24, Y+8	; 0x08
    16b4:	88 23       	and	r24, r24
    16b6:	31 f0       	breq	.+12     	; 0x16c4 <prvUnlockQueue+0x60>
    16b8:	c7 01       	movw	r24, r14
    16ba:	42 d6       	rcall	.+3204   	; 0x2340 <xTaskRemoveFromEventList>
    16bc:	81 11       	cpse	r24, r1
    16be:	28 d7       	rcall	.+3664   	; 0x2510 <vTaskMissedYield>
    16c0:	11 50       	subi	r17, 0x01	; 1
    16c2:	f5 cf       	rjmp	.-22     	; 0x16ae <prvUnlockQueue+0x4a>
    16c4:	8f ef       	ldi	r24, 0xFF	; 255
    16c6:	8d 8f       	std	Y+29, r24	; 0x1d
    16c8:	0f 90       	pop	r0
    16ca:	0f be       	out	0x3f, r0	; 63
    16cc:	df 91       	pop	r29
    16ce:	cf 91       	pop	r28
    16d0:	1f 91       	pop	r17
    16d2:	ff 90       	pop	r15
    16d4:	ef 90       	pop	r14
    16d6:	08 95       	ret

000016d8 <xQueueGenericReset>:
    16d8:	cf 93       	push	r28
    16da:	df 93       	push	r29
    16dc:	00 97       	sbiw	r24, 0x00	; 0
    16de:	09 f4       	brne	.+2      	; 0x16e2 <xQueueGenericReset+0xa>
    16e0:	3f c0       	rjmp	.+126    	; 0x1760 <xQueueGenericReset+0x88>
    16e2:	fc 01       	movw	r30, r24
    16e4:	23 8d       	ldd	r18, Z+27	; 0x1b
    16e6:	22 23       	and	r18, r18
    16e8:	09 f4       	brne	.+2      	; 0x16ec <xQueueGenericReset+0x14>
    16ea:	3a c0       	rjmp	.+116    	; 0x1760 <xQueueGenericReset+0x88>
    16ec:	ec 01       	movw	r28, r24
    16ee:	0f b6       	in	r0, 0x3f	; 63
    16f0:	f8 94       	cli
    16f2:	0f 92       	push	r0
    16f4:	40 81       	ld	r20, Z
    16f6:	51 81       	ldd	r21, Z+1	; 0x01
    16f8:	83 8d       	ldd	r24, Z+27	; 0x1b
    16fa:	74 8d       	ldd	r23, Z+28	; 0x1c
    16fc:	9a 01       	movw	r18, r20
    16fe:	87 9f       	mul	r24, r23
    1700:	20 0d       	add	r18, r0
    1702:	31 1d       	adc	r19, r1
    1704:	11 24       	eor	r1, r1
    1706:	35 83       	std	Z+5, r19	; 0x05
    1708:	24 83       	std	Z+4, r18	; 0x04
    170a:	12 8e       	std	Z+26, r1	; 0x1a
    170c:	53 83       	std	Z+3, r21	; 0x03
    170e:	42 83       	std	Z+2, r20	; 0x02
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	01 97       	sbiw	r24, 0x01	; 1
    1714:	78 9f       	mul	r23, r24
    1716:	90 01       	movw	r18, r0
    1718:	79 9f       	mul	r23, r25
    171a:	30 0d       	add	r19, r0
    171c:	11 24       	eor	r1, r1
    171e:	ca 01       	movw	r24, r20
    1720:	82 0f       	add	r24, r18
    1722:	93 1f       	adc	r25, r19
    1724:	97 83       	std	Z+7, r25	; 0x07
    1726:	86 83       	std	Z+6, r24	; 0x06
    1728:	8f ef       	ldi	r24, 0xFF	; 255
    172a:	85 8f       	std	Z+29, r24	; 0x1d
    172c:	86 8f       	std	Z+30, r24	; 0x1e
    172e:	61 11       	cpse	r22, r1
    1730:	0b c0       	rjmp	.+22     	; 0x1748 <xQueueGenericReset+0x70>
    1732:	80 85       	ldd	r24, Z+8	; 0x08
    1734:	88 23       	and	r24, r24
    1736:	81 f0       	breq	.+32     	; 0x1758 <xQueueGenericReset+0x80>
    1738:	cf 01       	movw	r24, r30
    173a:	08 96       	adiw	r24, 0x08	; 8
    173c:	01 d6       	rcall	.+3074   	; 0x2340 <xTaskRemoveFromEventList>
    173e:	88 23       	and	r24, r24
    1740:	59 f0       	breq	.+22     	; 0x1758 <xQueueGenericReset+0x80>
    1742:	0e 94 65 15 	call	0x2aca	; 0x2aca <vPortYield>
    1746:	08 c0       	rjmp	.+16     	; 0x1758 <xQueueGenericReset+0x80>
    1748:	cf 01       	movw	r24, r30
    174a:	08 96       	adiw	r24, 0x08	; 8
    174c:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <vListInitialise>
    1750:	ce 01       	movw	r24, r28
    1752:	41 96       	adiw	r24, 0x11	; 17
    1754:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <vListInitialise>
    1758:	0f 90       	pop	r0
    175a:	0f be       	out	0x3f, r0	; 63
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	01 c0       	rjmp	.+2      	; 0x1762 <xQueueGenericReset+0x8a>
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	df 91       	pop	r29
    1764:	cf 91       	pop	r28
    1766:	08 95       	ret

00001768 <xQueueGenericCreateStatic>:
    1768:	cf 93       	push	r28
    176a:	df 93       	push	r29
    176c:	e9 01       	movw	r28, r18
    176e:	88 23       	and	r24, r24
    1770:	a1 f0       	breq	.+40     	; 0x179a <xQueueGenericCreateStatic+0x32>
    1772:	20 97       	sbiw	r28, 0x00	; 0
    1774:	a1 f0       	breq	.+40     	; 0x179e <xQueueGenericCreateStatic+0x36>
    1776:	41 15       	cp	r20, r1
    1778:	51 05       	cpc	r21, r1
    177a:	29 f0       	breq	.+10     	; 0x1786 <xQueueGenericCreateStatic+0x1e>
    177c:	66 23       	and	r22, r22
    177e:	69 f0       	breq	.+26     	; 0x179a <xQueueGenericCreateStatic+0x32>
    1780:	59 83       	std	Y+1, r21	; 0x01
    1782:	48 83       	st	Y, r20
    1784:	04 c0       	rjmp	.+8      	; 0x178e <xQueueGenericCreateStatic+0x26>
    1786:	61 11       	cpse	r22, r1
    1788:	08 c0       	rjmp	.+16     	; 0x179a <xQueueGenericCreateStatic+0x32>
    178a:	39 83       	std	Y+1, r19	; 0x01
    178c:	28 83       	st	Y, r18
    178e:	8b 8f       	std	Y+27, r24	; 0x1b
    1790:	6c 8f       	std	Y+28, r22	; 0x1c
    1792:	61 e0       	ldi	r22, 0x01	; 1
    1794:	ce 01       	movw	r24, r28
    1796:	a0 df       	rcall	.-192    	; 0x16d8 <xQueueGenericReset>
    1798:	02 c0       	rjmp	.+4      	; 0x179e <xQueueGenericCreateStatic+0x36>
    179a:	c0 e0       	ldi	r28, 0x00	; 0
    179c:	d0 e0       	ldi	r29, 0x00	; 0
    179e:	ce 01       	movw	r24, r28
    17a0:	df 91       	pop	r29
    17a2:	cf 91       	pop	r28
    17a4:	08 95       	ret

000017a6 <xQueueGenericSend>:
    17a6:	af 92       	push	r10
    17a8:	bf 92       	push	r11
    17aa:	cf 92       	push	r12
    17ac:	df 92       	push	r13
    17ae:	ff 92       	push	r15
    17b0:	0f 93       	push	r16
    17b2:	1f 93       	push	r17
    17b4:	cf 93       	push	r28
    17b6:	df 93       	push	r29
    17b8:	00 d0       	rcall	.+0      	; 0x17ba <xQueueGenericSend+0x14>
    17ba:	1f 92       	push	r1
    17bc:	1f 92       	push	r1
    17be:	cd b7       	in	r28, 0x3d	; 61
    17c0:	de b7       	in	r29, 0x3e	; 62
    17c2:	8c 01       	movw	r16, r24
    17c4:	6b 01       	movw	r12, r22
    17c6:	5d 83       	std	Y+5, r21	; 0x05
    17c8:	4c 83       	std	Y+4, r20	; 0x04
    17ca:	f2 2e       	mov	r15, r18
    17cc:	80 e0       	ldi	r24, 0x00	; 0
    17ce:	58 01       	movw	r10, r16
    17d0:	98 e0       	ldi	r25, 0x08	; 8
    17d2:	a9 0e       	add	r10, r25
    17d4:	b1 1c       	adc	r11, r1
    17d6:	0f b6       	in	r0, 0x3f	; 63
    17d8:	f8 94       	cli
    17da:	0f 92       	push	r0
    17dc:	f8 01       	movw	r30, r16
    17de:	22 8d       	ldd	r18, Z+26	; 0x1a
    17e0:	93 8d       	ldd	r25, Z+27	; 0x1b
    17e2:	29 17       	cp	r18, r25
    17e4:	18 f0       	brcs	.+6      	; 0x17ec <xQueueGenericSend+0x46>
    17e6:	f2 e0       	ldi	r31, 0x02	; 2
    17e8:	ff 12       	cpse	r15, r31
    17ea:	12 c0       	rjmp	.+36     	; 0x1810 <xQueueGenericSend+0x6a>
    17ec:	4f 2d       	mov	r20, r15
    17ee:	b6 01       	movw	r22, r12
    17f0:	c8 01       	movw	r24, r16
    17f2:	cc de       	rcall	.-616    	; 0x158c <prvCopyDataToQueue>
    17f4:	f8 01       	movw	r30, r16
    17f6:	91 89       	ldd	r25, Z+17	; 0x11
    17f8:	99 23       	and	r25, r25
    17fa:	19 f0       	breq	.+6      	; 0x1802 <xQueueGenericSend+0x5c>
    17fc:	c8 01       	movw	r24, r16
    17fe:	41 96       	adiw	r24, 0x11	; 17
    1800:	9f d5       	rcall	.+2878   	; 0x2340 <xTaskRemoveFromEventList>
    1802:	81 11       	cpse	r24, r1
    1804:	0e 94 65 15 	call	0x2aca	; 0x2aca <vPortYield>
    1808:	0f 90       	pop	r0
    180a:	0f be       	out	0x3f, r0	; 63
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	46 c0       	rjmp	.+140    	; 0x189c <xQueueGenericSend+0xf6>
    1810:	2c 81       	ldd	r18, Y+4	; 0x04
    1812:	3d 81       	ldd	r19, Y+5	; 0x05
    1814:	23 2b       	or	r18, r19
    1816:	19 f4       	brne	.+6      	; 0x181e <xQueueGenericSend+0x78>
    1818:	0f 90       	pop	r0
    181a:	0f be       	out	0x3f, r0	; 63
    181c:	3e c0       	rjmp	.+124    	; 0x189a <xQueueGenericSend+0xf4>
    181e:	81 11       	cpse	r24, r1
    1820:	03 c0       	rjmp	.+6      	; 0x1828 <xQueueGenericSend+0x82>
    1822:	ce 01       	movw	r24, r28
    1824:	01 96       	adiw	r24, 0x01	; 1
    1826:	38 d6       	rcall	.+3184   	; 0x2498 <vTaskInternalSetTimeOutState>
    1828:	0f 90       	pop	r0
    182a:	0f be       	out	0x3f, r0	; 63
    182c:	f6 d2       	rcall	.+1516   	; 0x1e1a <vTaskSuspendAll>
    182e:	0f b6       	in	r0, 0x3f	; 63
    1830:	f8 94       	cli
    1832:	0f 92       	push	r0
    1834:	f8 01       	movw	r30, r16
    1836:	85 8d       	ldd	r24, Z+29	; 0x1d
    1838:	8f 3f       	cpi	r24, 0xFF	; 255
    183a:	09 f4       	brne	.+2      	; 0x183e <xQueueGenericSend+0x98>
    183c:	15 8e       	std	Z+29, r1	; 0x1d
    183e:	f8 01       	movw	r30, r16
    1840:	86 8d       	ldd	r24, Z+30	; 0x1e
    1842:	8f 3f       	cpi	r24, 0xFF	; 255
    1844:	09 f4       	brne	.+2      	; 0x1848 <xQueueGenericSend+0xa2>
    1846:	16 8e       	std	Z+30, r1	; 0x1e
    1848:	0f 90       	pop	r0
    184a:	0f be       	out	0x3f, r0	; 63
    184c:	be 01       	movw	r22, r28
    184e:	6c 5f       	subi	r22, 0xFC	; 252
    1850:	7f 4f       	sbci	r23, 0xFF	; 255
    1852:	ce 01       	movw	r24, r28
    1854:	01 96       	adiw	r24, 0x01	; 1
    1856:	2b d6       	rcall	.+3158   	; 0x24ae <xTaskCheckForTimeOut>
    1858:	81 11       	cpse	r24, r1
    185a:	1c c0       	rjmp	.+56     	; 0x1894 <xQueueGenericSend+0xee>
    185c:	0f b6       	in	r0, 0x3f	; 63
    185e:	f8 94       	cli
    1860:	0f 92       	push	r0
    1862:	f8 01       	movw	r30, r16
    1864:	92 8d       	ldd	r25, Z+26	; 0x1a
    1866:	83 8d       	ldd	r24, Z+27	; 0x1b
    1868:	0f 90       	pop	r0
    186a:	0f be       	out	0x3f, r0	; 63
    186c:	98 13       	cpse	r25, r24
    186e:	0e c0       	rjmp	.+28     	; 0x188c <xQueueGenericSend+0xe6>
    1870:	6c 81       	ldd	r22, Y+4	; 0x04
    1872:	7d 81       	ldd	r23, Y+5	; 0x05
    1874:	c5 01       	movw	r24, r10
    1876:	0e d5       	rcall	.+2588   	; 0x2294 <vTaskPlaceOnEventList>
    1878:	c8 01       	movw	r24, r16
    187a:	f4 de       	rcall	.-536    	; 0x1664 <prvUnlockQueue>
    187c:	e7 d3       	rcall	.+1998   	; 0x204c <xTaskResumeAll>
    187e:	88 23       	and	r24, r24
    1880:	11 f0       	breq	.+4      	; 0x1886 <xQueueGenericSend+0xe0>
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	a8 cf       	rjmp	.-176    	; 0x17d6 <xQueueGenericSend+0x30>
    1886:	0e 94 65 15 	call	0x2aca	; 0x2aca <vPortYield>
    188a:	fb cf       	rjmp	.-10     	; 0x1882 <xQueueGenericSend+0xdc>
    188c:	c8 01       	movw	r24, r16
    188e:	ea de       	rcall	.-556    	; 0x1664 <prvUnlockQueue>
    1890:	dd d3       	rcall	.+1978   	; 0x204c <xTaskResumeAll>
    1892:	f7 cf       	rjmp	.-18     	; 0x1882 <xQueueGenericSend+0xdc>
    1894:	c8 01       	movw	r24, r16
    1896:	e6 de       	rcall	.-564    	; 0x1664 <prvUnlockQueue>
    1898:	d9 d3       	rcall	.+1970   	; 0x204c <xTaskResumeAll>
    189a:	80 e0       	ldi	r24, 0x00	; 0
    189c:	0f 90       	pop	r0
    189e:	0f 90       	pop	r0
    18a0:	0f 90       	pop	r0
    18a2:	0f 90       	pop	r0
    18a4:	0f 90       	pop	r0
    18a6:	df 91       	pop	r29
    18a8:	cf 91       	pop	r28
    18aa:	1f 91       	pop	r17
    18ac:	0f 91       	pop	r16
    18ae:	ff 90       	pop	r15
    18b0:	df 90       	pop	r13
    18b2:	cf 90       	pop	r12
    18b4:	bf 90       	pop	r11
    18b6:	af 90       	pop	r10
    18b8:	08 95       	ret

000018ba <xQueueGenericSendFromISR>:
    18ba:	ef 92       	push	r14
    18bc:	ff 92       	push	r15
    18be:	1f 93       	push	r17
    18c0:	cf 93       	push	r28
    18c2:	df 93       	push	r29
    18c4:	ec 01       	movw	r28, r24
    18c6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    18c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18ca:	98 17       	cp	r25, r24
    18cc:	10 f0       	brcs	.+4      	; 0x18d2 <xQueueGenericSendFromISR+0x18>
    18ce:	22 30       	cpi	r18, 0x02	; 2
    18d0:	f1 f4       	brne	.+60     	; 0x190e <xQueueGenericSendFromISR+0x54>
    18d2:	7a 01       	movw	r14, r20
    18d4:	1e 8d       	ldd	r17, Y+30	; 0x1e
    18d6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    18d8:	42 2f       	mov	r20, r18
    18da:	ce 01       	movw	r24, r28
    18dc:	57 de       	rcall	.-850    	; 0x158c <prvCopyDataToQueue>
    18de:	1f 3f       	cpi	r17, 0xFF	; 255
    18e0:	79 f4       	brne	.+30     	; 0x1900 <xQueueGenericSendFromISR+0x46>
    18e2:	89 89       	ldd	r24, Y+17	; 0x11
    18e4:	88 23       	and	r24, r24
    18e6:	89 f0       	breq	.+34     	; 0x190a <xQueueGenericSendFromISR+0x50>
    18e8:	ce 01       	movw	r24, r28
    18ea:	41 96       	adiw	r24, 0x11	; 17
    18ec:	29 d5       	rcall	.+2642   	; 0x2340 <xTaskRemoveFromEventList>
    18ee:	88 23       	and	r24, r24
    18f0:	61 f0       	breq	.+24     	; 0x190a <xQueueGenericSendFromISR+0x50>
    18f2:	e1 14       	cp	r14, r1
    18f4:	f1 04       	cpc	r15, r1
    18f6:	49 f0       	breq	.+18     	; 0x190a <xQueueGenericSendFromISR+0x50>
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	f7 01       	movw	r30, r14
    18fc:	80 83       	st	Z, r24
    18fe:	08 c0       	rjmp	.+16     	; 0x1910 <xQueueGenericSendFromISR+0x56>
    1900:	9c d2       	rcall	.+1336   	; 0x1e3a <uxTaskGetNumberOfTasks>
    1902:	18 17       	cp	r17, r24
    1904:	10 f4       	brcc	.+4      	; 0x190a <xQueueGenericSendFromISR+0x50>
    1906:	1f 5f       	subi	r17, 0xFF	; 255
    1908:	1e 8f       	std	Y+30, r17	; 0x1e
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	01 c0       	rjmp	.+2      	; 0x1910 <xQueueGenericSendFromISR+0x56>
    190e:	80 e0       	ldi	r24, 0x00	; 0
    1910:	df 91       	pop	r29
    1912:	cf 91       	pop	r28
    1914:	1f 91       	pop	r17
    1916:	ff 90       	pop	r15
    1918:	ef 90       	pop	r14
    191a:	08 95       	ret

0000191c <xQueueReceive>:
    191c:	af 92       	push	r10
    191e:	bf 92       	push	r11
    1920:	cf 92       	push	r12
    1922:	df 92       	push	r13
    1924:	ff 92       	push	r15
    1926:	0f 93       	push	r16
    1928:	1f 93       	push	r17
    192a:	cf 93       	push	r28
    192c:	df 93       	push	r29
    192e:	00 d0       	rcall	.+0      	; 0x1930 <xQueueReceive+0x14>
    1930:	1f 92       	push	r1
    1932:	1f 92       	push	r1
    1934:	cd b7       	in	r28, 0x3d	; 61
    1936:	de b7       	in	r29, 0x3e	; 62
    1938:	8c 01       	movw	r16, r24
    193a:	6b 01       	movw	r12, r22
    193c:	5d 83       	std	Y+5, r21	; 0x05
    193e:	4c 83       	std	Y+4, r20	; 0x04
    1940:	80 e0       	ldi	r24, 0x00	; 0
    1942:	58 01       	movw	r10, r16
    1944:	91 e1       	ldi	r25, 0x11	; 17
    1946:	a9 0e       	add	r10, r25
    1948:	b1 1c       	adc	r11, r1
    194a:	0f b6       	in	r0, 0x3f	; 63
    194c:	f8 94       	cli
    194e:	0f 92       	push	r0
    1950:	f8 01       	movw	r30, r16
    1952:	f2 8c       	ldd	r15, Z+26	; 0x1a
    1954:	ff 20       	and	r15, r15
    1956:	99 f0       	breq	.+38     	; 0x197e <xQueueReceive+0x62>
    1958:	b6 01       	movw	r22, r12
    195a:	c8 01       	movw	r24, r16
    195c:	69 de       	rcall	.-814    	; 0x1630 <prvCopyDataFromQueue>
    195e:	fa 94       	dec	r15
    1960:	f8 01       	movw	r30, r16
    1962:	f2 8e       	std	Z+26, r15	; 0x1a
    1964:	80 85       	ldd	r24, Z+8	; 0x08
    1966:	88 23       	and	r24, r24
    1968:	31 f0       	breq	.+12     	; 0x1976 <xQueueReceive+0x5a>
    196a:	c8 01       	movw	r24, r16
    196c:	08 96       	adiw	r24, 0x08	; 8
    196e:	e8 d4       	rcall	.+2512   	; 0x2340 <xTaskRemoveFromEventList>
    1970:	81 11       	cpse	r24, r1
    1972:	0e 94 65 15 	call	0x2aca	; 0x2aca <vPortYield>
    1976:	0f 90       	pop	r0
    1978:	0f be       	out	0x3f, r0	; 63
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	44 c0       	rjmp	.+136    	; 0x1a06 <xQueueReceive+0xea>
    197e:	2c 81       	ldd	r18, Y+4	; 0x04
    1980:	3d 81       	ldd	r19, Y+5	; 0x05
    1982:	23 2b       	or	r18, r19
    1984:	19 f4       	brne	.+6      	; 0x198c <xQueueReceive+0x70>
    1986:	0f 90       	pop	r0
    1988:	0f be       	out	0x3f, r0	; 63
    198a:	3c c0       	rjmp	.+120    	; 0x1a04 <xQueueReceive+0xe8>
    198c:	81 11       	cpse	r24, r1
    198e:	03 c0       	rjmp	.+6      	; 0x1996 <xQueueReceive+0x7a>
    1990:	ce 01       	movw	r24, r28
    1992:	01 96       	adiw	r24, 0x01	; 1
    1994:	81 d5       	rcall	.+2818   	; 0x2498 <vTaskInternalSetTimeOutState>
    1996:	0f 90       	pop	r0
    1998:	0f be       	out	0x3f, r0	; 63
    199a:	3f d2       	rcall	.+1150   	; 0x1e1a <vTaskSuspendAll>
    199c:	0f b6       	in	r0, 0x3f	; 63
    199e:	f8 94       	cli
    19a0:	0f 92       	push	r0
    19a2:	f8 01       	movw	r30, r16
    19a4:	85 8d       	ldd	r24, Z+29	; 0x1d
    19a6:	8f 3f       	cpi	r24, 0xFF	; 255
    19a8:	09 f4       	brne	.+2      	; 0x19ac <xQueueReceive+0x90>
    19aa:	15 8e       	std	Z+29, r1	; 0x1d
    19ac:	f8 01       	movw	r30, r16
    19ae:	86 8d       	ldd	r24, Z+30	; 0x1e
    19b0:	8f 3f       	cpi	r24, 0xFF	; 255
    19b2:	09 f4       	brne	.+2      	; 0x19b6 <xQueueReceive+0x9a>
    19b4:	16 8e       	std	Z+30, r1	; 0x1e
    19b6:	0f 90       	pop	r0
    19b8:	0f be       	out	0x3f, r0	; 63
    19ba:	be 01       	movw	r22, r28
    19bc:	6c 5f       	subi	r22, 0xFC	; 252
    19be:	7f 4f       	sbci	r23, 0xFF	; 255
    19c0:	ce 01       	movw	r24, r28
    19c2:	01 96       	adiw	r24, 0x01	; 1
    19c4:	74 d5       	rcall	.+2792   	; 0x24ae <xTaskCheckForTimeOut>
    19c6:	81 11       	cpse	r24, r1
    19c8:	16 c0       	rjmp	.+44     	; 0x19f6 <xQueueReceive+0xda>
    19ca:	c8 01       	movw	r24, r16
    19cc:	d4 dd       	rcall	.-1112   	; 0x1576 <prvIsQueueEmpty>
    19ce:	88 23       	and	r24, r24
    19d0:	71 f0       	breq	.+28     	; 0x19ee <xQueueReceive+0xd2>
    19d2:	6c 81       	ldd	r22, Y+4	; 0x04
    19d4:	7d 81       	ldd	r23, Y+5	; 0x05
    19d6:	c5 01       	movw	r24, r10
    19d8:	5d d4       	rcall	.+2234   	; 0x2294 <vTaskPlaceOnEventList>
    19da:	c8 01       	movw	r24, r16
    19dc:	43 de       	rcall	.-890    	; 0x1664 <prvUnlockQueue>
    19de:	36 d3       	rcall	.+1644   	; 0x204c <xTaskResumeAll>
    19e0:	88 23       	and	r24, r24
    19e2:	11 f0       	breq	.+4      	; 0x19e8 <xQueueReceive+0xcc>
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	b1 cf       	rjmp	.-158    	; 0x194a <xQueueReceive+0x2e>
    19e8:	0e 94 65 15 	call	0x2aca	; 0x2aca <vPortYield>
    19ec:	fb cf       	rjmp	.-10     	; 0x19e4 <xQueueReceive+0xc8>
    19ee:	c8 01       	movw	r24, r16
    19f0:	39 de       	rcall	.-910    	; 0x1664 <prvUnlockQueue>
    19f2:	2c d3       	rcall	.+1624   	; 0x204c <xTaskResumeAll>
    19f4:	f7 cf       	rjmp	.-18     	; 0x19e4 <xQueueReceive+0xc8>
    19f6:	c8 01       	movw	r24, r16
    19f8:	35 de       	rcall	.-918    	; 0x1664 <prvUnlockQueue>
    19fa:	28 d3       	rcall	.+1616   	; 0x204c <xTaskResumeAll>
    19fc:	c8 01       	movw	r24, r16
    19fe:	bb dd       	rcall	.-1162   	; 0x1576 <prvIsQueueEmpty>
    1a00:	88 23       	and	r24, r24
    1a02:	81 f3       	breq	.-32     	; 0x19e4 <xQueueReceive+0xc8>
    1a04:	80 e0       	ldi	r24, 0x00	; 0
    1a06:	0f 90       	pop	r0
    1a08:	0f 90       	pop	r0
    1a0a:	0f 90       	pop	r0
    1a0c:	0f 90       	pop	r0
    1a0e:	0f 90       	pop	r0
    1a10:	df 91       	pop	r29
    1a12:	cf 91       	pop	r28
    1a14:	1f 91       	pop	r17
    1a16:	0f 91       	pop	r16
    1a18:	ff 90       	pop	r15
    1a1a:	df 90       	pop	r13
    1a1c:	cf 90       	pop	r12
    1a1e:	bf 90       	pop	r11
    1a20:	af 90       	pop	r10
    1a22:	08 95       	ret

00001a24 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    1a24:	cf 93       	push	r28
    1a26:	df 93       	push	r29
    1a28:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1a2a:	0f b6       	in	r0, 0x3f	; 63
    1a2c:	f8 94       	cli
    1a2e:	0f 92       	push	r0
    1a30:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a32:	8f 3f       	cpi	r24, 0xFF	; 255
    1a34:	09 f4       	brne	.+2      	; 0x1a38 <vQueueWaitForMessageRestricted+0x14>
    1a36:	1d 8e       	std	Y+29, r1	; 0x1d
    1a38:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a3a:	8f 3f       	cpi	r24, 0xFF	; 255
    1a3c:	09 f4       	brne	.+2      	; 0x1a40 <vQueueWaitForMessageRestricted+0x1c>
    1a3e:	1e 8e       	std	Y+30, r1	; 0x1e
    1a40:	0f 90       	pop	r0
    1a42:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1a44:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1a46:	81 11       	cpse	r24, r1
    1a48:	03 c0       	rjmp	.+6      	; 0x1a50 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1a4a:	ce 01       	movw	r24, r28
    1a4c:	41 96       	adiw	r24, 0x11	; 17
    1a4e:	31 d4       	rcall	.+2146   	; 0x22b2 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    1a50:	ce 01       	movw	r24, r28
    }
    1a52:	df 91       	pop	r29
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    1a54:	cf 91       	pop	r28
    1a56:	06 ce       	rjmp	.-1012   	; 0x1664 <prvUnlockQueue>

00001a58 <prvResetNextTaskUnblockTime>:
    1a58:	e0 91 c0 03 	lds	r30, 0x03C0	; 0x8003c0 <pxDelayedTaskList>
    1a5c:	f0 91 c1 03 	lds	r31, 0x03C1	; 0x8003c1 <pxDelayedTaskList+0x1>
    1a60:	80 81       	ld	r24, Z
    1a62:	81 11       	cpse	r24, r1
    1a64:	03 c0       	rjmp	.+6      	; 0x1a6c <prvResetNextTaskUnblockTime+0x14>
    1a66:	8f ef       	ldi	r24, 0xFF	; 255
    1a68:	9f ef       	ldi	r25, 0xFF	; 255
    1a6a:	09 c0       	rjmp	.+18     	; 0x1a7e <prvResetNextTaskUnblockTime+0x26>
    1a6c:	e0 91 c0 03 	lds	r30, 0x03C0	; 0x8003c0 <pxDelayedTaskList>
    1a70:	f0 91 c1 03 	lds	r31, 0x03C1	; 0x8003c1 <pxDelayedTaskList+0x1>
    1a74:	05 80       	ldd	r0, Z+5	; 0x05
    1a76:	f6 81       	ldd	r31, Z+6	; 0x06
    1a78:	e0 2d       	mov	r30, r0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	91 81       	ldd	r25, Z+1	; 0x01
    1a7e:	90 93 97 03 	sts	0x0397, r25	; 0x800397 <xNextTaskUnblockTime+0x1>
    1a82:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <xNextTaskUnblockTime>
    1a86:	08 95       	ret

00001a88 <prvAddCurrentTaskToDelayedList>:
    1a88:	ff 92       	push	r15
    1a8a:	0f 93       	push	r16
    1a8c:	1f 93       	push	r17
    1a8e:	cf 93       	push	r28
    1a90:	df 93       	push	r29
    1a92:	ec 01       	movw	r28, r24
    1a94:	f6 2e       	mov	r15, r22
    1a96:	00 91 9f 03 	lds	r16, 0x039F	; 0x80039f <xTickCount>
    1a9a:	10 91 a0 03 	lds	r17, 0x03A0	; 0x8003a0 <xTickCount+0x1>
    1a9e:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <pxCurrentTCB>
    1aa2:	90 91 f9 03 	lds	r25, 0x03F9	; 0x8003f9 <pxCurrentTCB+0x1>
    1aa6:	02 96       	adiw	r24, 0x02	; 2
    1aa8:	d5 d7       	rcall	.+4010   	; 0x2a54 <uxListRemove>
    1aaa:	cf 3f       	cpi	r28, 0xFF	; 255
    1aac:	8f ef       	ldi	r24, 0xFF	; 255
    1aae:	d8 07       	cpc	r29, r24
    1ab0:	c1 f5       	brne	.+112    	; 0x1b22 <prvAddCurrentTaskToDelayedList+0x9a>
    1ab2:	ff 20       	and	r15, r15
    1ab4:	b1 f1       	breq	.+108    	; 0x1b22 <prvAddCurrentTaskToDelayedList+0x9a>
    1ab6:	e0 91 a3 03 	lds	r30, 0x03A3	; 0x8003a3 <xSuspendedTaskList+0x1>
    1aba:	f0 91 a4 03 	lds	r31, 0x03A4	; 0x8003a4 <xSuspendedTaskList+0x2>
    1abe:	a0 91 f8 03 	lds	r26, 0x03F8	; 0x8003f8 <pxCurrentTCB>
    1ac2:	b0 91 f9 03 	lds	r27, 0x03F9	; 0x8003f9 <pxCurrentTCB+0x1>
    1ac6:	15 96       	adiw	r26, 0x05	; 5
    1ac8:	fc 93       	st	X, r31
    1aca:	ee 93       	st	-X, r30
    1acc:	14 97       	sbiw	r26, 0x04	; 4
    1ace:	a0 91 f8 03 	lds	r26, 0x03F8	; 0x8003f8 <pxCurrentTCB>
    1ad2:	b0 91 f9 03 	lds	r27, 0x03F9	; 0x8003f9 <pxCurrentTCB+0x1>
    1ad6:	84 81       	ldd	r24, Z+4	; 0x04
    1ad8:	95 81       	ldd	r25, Z+5	; 0x05
    1ada:	17 96       	adiw	r26, 0x07	; 7
    1adc:	9c 93       	st	X, r25
    1ade:	8e 93       	st	-X, r24
    1ae0:	16 97       	sbiw	r26, 0x06	; 6
    1ae2:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <pxCurrentTCB>
    1ae6:	90 91 f9 03 	lds	r25, 0x03F9	; 0x8003f9 <pxCurrentTCB+0x1>
    1aea:	a4 81       	ldd	r26, Z+4	; 0x04
    1aec:	b5 81       	ldd	r27, Z+5	; 0x05
    1aee:	02 96       	adiw	r24, 0x02	; 2
    1af0:	13 96       	adiw	r26, 0x03	; 3
    1af2:	9c 93       	st	X, r25
    1af4:	8e 93       	st	-X, r24
    1af6:	12 97       	sbiw	r26, 0x02	; 2
    1af8:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <pxCurrentTCB>
    1afc:	90 91 f9 03 	lds	r25, 0x03F9	; 0x8003f9 <pxCurrentTCB+0x1>
    1b00:	02 96       	adiw	r24, 0x02	; 2
    1b02:	95 83       	std	Z+5, r25	; 0x05
    1b04:	84 83       	std	Z+4, r24	; 0x04
    1b06:	e0 91 f8 03 	lds	r30, 0x03F8	; 0x8003f8 <pxCurrentTCB>
    1b0a:	f0 91 f9 03 	lds	r31, 0x03F9	; 0x8003f9 <pxCurrentTCB+0x1>
    1b0e:	82 ea       	ldi	r24, 0xA2	; 162
    1b10:	93 e0       	ldi	r25, 0x03	; 3
    1b12:	93 87       	std	Z+11, r25	; 0x0b
    1b14:	82 87       	std	Z+10, r24	; 0x0a
    1b16:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <xSuspendedTaskList>
    1b1a:	8f 5f       	subi	r24, 0xFF	; 255
    1b1c:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <xSuspendedTaskList>
    1b20:	2d c0       	rjmp	.+90     	; 0x1b7c <prvAddCurrentTaskToDelayedList+0xf4>
    1b22:	c0 0f       	add	r28, r16
    1b24:	d1 1f       	adc	r29, r17
    1b26:	e0 91 f8 03 	lds	r30, 0x03F8	; 0x8003f8 <pxCurrentTCB>
    1b2a:	f0 91 f9 03 	lds	r31, 0x03F9	; 0x8003f9 <pxCurrentTCB+0x1>
    1b2e:	d3 83       	std	Z+3, r29	; 0x03
    1b30:	c2 83       	std	Z+2, r28	; 0x02
    1b32:	60 91 f8 03 	lds	r22, 0x03F8	; 0x8003f8 <pxCurrentTCB>
    1b36:	70 91 f9 03 	lds	r23, 0x03F9	; 0x8003f9 <pxCurrentTCB+0x1>
    1b3a:	c0 17       	cp	r28, r16
    1b3c:	d1 07       	cpc	r29, r17
    1b3e:	60 f4       	brcc	.+24     	; 0x1b58 <prvAddCurrentTaskToDelayedList+0xd0>
    1b40:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <pxOverflowDelayedTaskList>
    1b44:	90 91 bf 03 	lds	r25, 0x03BF	; 0x8003bf <pxOverflowDelayedTaskList+0x1>
    1b48:	6e 5f       	subi	r22, 0xFE	; 254
    1b4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b4c:	df 91       	pop	r29
    1b4e:	cf 91       	pop	r28
    1b50:	1f 91       	pop	r17
    1b52:	0f 91       	pop	r16
    1b54:	ff 90       	pop	r15
    1b56:	46 c7       	rjmp	.+3724   	; 0x29e4 <vListInsert>
    1b58:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <pxDelayedTaskList>
    1b5c:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <pxDelayedTaskList+0x1>
    1b60:	6e 5f       	subi	r22, 0xFE	; 254
    1b62:	7f 4f       	sbci	r23, 0xFF	; 255
    1b64:	3f d7       	rcall	.+3710   	; 0x29e4 <vListInsert>
    1b66:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <xNextTaskUnblockTime>
    1b6a:	90 91 97 03 	lds	r25, 0x0397	; 0x800397 <xNextTaskUnblockTime+0x1>
    1b6e:	c8 17       	cp	r28, r24
    1b70:	d9 07       	cpc	r29, r25
    1b72:	20 f4       	brcc	.+8      	; 0x1b7c <prvAddCurrentTaskToDelayedList+0xf4>
    1b74:	d0 93 97 03 	sts	0x0397, r29	; 0x800397 <xNextTaskUnblockTime+0x1>
    1b78:	c0 93 96 03 	sts	0x0396, r28	; 0x800396 <xNextTaskUnblockTime>
    1b7c:	df 91       	pop	r29
    1b7e:	cf 91       	pop	r28
    1b80:	1f 91       	pop	r17
    1b82:	0f 91       	pop	r16
    1b84:	ff 90       	pop	r15
    1b86:	08 95       	ret

00001b88 <xTaskCreateStatic>:
    1b88:	6f 92       	push	r6
    1b8a:	7f 92       	push	r7
    1b8c:	8f 92       	push	r8
    1b8e:	9f 92       	push	r9
    1b90:	af 92       	push	r10
    1b92:	bf 92       	push	r11
    1b94:	cf 92       	push	r12
    1b96:	df 92       	push	r13
    1b98:	ef 92       	push	r14
    1b9a:	ff 92       	push	r15
    1b9c:	0f 93       	push	r16
    1b9e:	cf 93       	push	r28
    1ba0:	df 93       	push	r29
    1ba2:	c1 14       	cp	r12, r1
    1ba4:	d1 04       	cpc	r13, r1
    1ba6:	09 f4       	brne	.+2      	; 0x1baa <xTaskCreateStatic+0x22>
    1ba8:	dd c0       	rjmp	.+442    	; 0x1d64 <xTaskCreateStatic+0x1dc>
    1baa:	e1 14       	cp	r14, r1
    1bac:	f1 04       	cpc	r15, r1
    1bae:	09 f4       	brne	.+2      	; 0x1bb2 <xTaskCreateStatic+0x2a>
    1bb0:	d9 c0       	rjmp	.+434    	; 0x1d64 <xTaskCreateStatic+0x1dc>
    1bb2:	e6 01       	movw	r28, r12
    1bb4:	59 01       	movw	r10, r18
    1bb6:	3a 01       	movw	r6, r20
    1bb8:	4b 01       	movw	r8, r22
    1bba:	6c 01       	movw	r12, r24
    1bbc:	88 e2       	ldi	r24, 0x28	; 40
    1bbe:	de 01       	movw	r26, r28
    1bc0:	1d 92       	st	X+, r1
    1bc2:	8a 95       	dec	r24
    1bc4:	e9 f7       	brne	.-6      	; 0x1bc0 <xTaskCreateStatic+0x38>
    1bc6:	f8 8e       	std	Y+24, r15	; 0x18
    1bc8:	ef 8a       	std	Y+23, r14	; 0x17
    1bca:	65 ea       	ldi	r22, 0xA5	; 165
    1bcc:	70 e0       	ldi	r23, 0x00	; 0
    1bce:	c7 01       	movw	r24, r14
    1bd0:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <memset>
    1bd4:	b1 e0       	ldi	r27, 0x01	; 1
    1bd6:	6b 1a       	sub	r6, r27
    1bd8:	71 08       	sbc	r7, r1
    1bda:	ef 88       	ldd	r14, Y+23	; 0x17
    1bdc:	f8 8c       	ldd	r15, Y+24	; 0x18
    1bde:	e6 0c       	add	r14, r6
    1be0:	f7 1c       	adc	r15, r7
    1be2:	81 14       	cp	r8, r1
    1be4:	91 04       	cpc	r9, r1
    1be6:	99 f0       	breq	.+38     	; 0x1c0e <xTaskCreateStatic+0x86>
    1be8:	be 01       	movw	r22, r28
    1bea:	67 5e       	subi	r22, 0xE7	; 231
    1bec:	7f 4f       	sbci	r23, 0xFF	; 255
    1bee:	f4 01       	movw	r30, r8
    1bf0:	c4 01       	movw	r24, r8
    1bf2:	08 96       	adiw	r24, 0x08	; 8
    1bf4:	9f 01       	movw	r18, r30
    1bf6:	41 91       	ld	r20, Z+
    1bf8:	db 01       	movw	r26, r22
    1bfa:	4d 93       	st	X+, r20
    1bfc:	bd 01       	movw	r22, r26
    1bfe:	d9 01       	movw	r26, r18
    1c00:	2c 91       	ld	r18, X
    1c02:	22 23       	and	r18, r18
    1c04:	19 f0       	breq	.+6      	; 0x1c0c <xTaskCreateStatic+0x84>
    1c06:	e8 17       	cp	r30, r24
    1c08:	f9 07       	cpc	r31, r25
    1c0a:	a1 f7       	brne	.-24     	; 0x1bf4 <xTaskCreateStatic+0x6c>
    1c0c:	18 a2       	std	Y+32, r1	; 0x20
    1c0e:	04 30       	cpi	r16, 0x04	; 4
    1c10:	08 f0       	brcs	.+2      	; 0x1c14 <xTaskCreateStatic+0x8c>
    1c12:	03 e0       	ldi	r16, 0x03	; 3
    1c14:	0e 8b       	std	Y+22, r16	; 0x16
    1c16:	09 a3       	std	Y+33, r16	; 0x21
    1c18:	4e 01       	movw	r8, r28
    1c1a:	b2 e0       	ldi	r27, 0x02	; 2
    1c1c:	8b 0e       	add	r8, r27
    1c1e:	91 1c       	adc	r9, r1
    1c20:	c4 01       	movw	r24, r8
    1c22:	dc d6       	rcall	.+3512   	; 0x29dc <vListInitialiseItem>
    1c24:	ce 01       	movw	r24, r28
    1c26:	0c 96       	adiw	r24, 0x0c	; 12
    1c28:	d9 d6       	rcall	.+3506   	; 0x29dc <vListInitialiseItem>
    1c2a:	d9 87       	std	Y+9, r29	; 0x09
    1c2c:	c8 87       	std	Y+8, r28	; 0x08
    1c2e:	84 e0       	ldi	r24, 0x04	; 4
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	80 1b       	sub	r24, r16
    1c34:	91 09       	sbc	r25, r1
    1c36:	9d 87       	std	Y+13, r25	; 0x0d
    1c38:	8c 87       	std	Y+12, r24	; 0x0c
    1c3a:	db 8b       	std	Y+19, r29	; 0x13
    1c3c:	ca 8b       	std	Y+18, r28	; 0x12
    1c3e:	a5 01       	movw	r20, r10
    1c40:	b6 01       	movw	r22, r12
    1c42:	c7 01       	movw	r24, r14
    1c44:	2b d7       	rcall	.+3670   	; 0x2a9c <pxPortInitialiseStack>
    1c46:	99 83       	std	Y+1, r25	; 0x01
    1c48:	88 83       	st	Y, r24
    1c4a:	0f b6       	in	r0, 0x3f	; 63
    1c4c:	f8 94       	cli
    1c4e:	0f 92       	push	r0
    1c50:	80 91 a1 03 	lds	r24, 0x03A1	; 0x8003a1 <uxCurrentNumberOfTasks>
    1c54:	8f 5f       	subi	r24, 0xFF	; 255
    1c56:	80 93 a1 03 	sts	0x03A1, r24	; 0x8003a1 <uxCurrentNumberOfTasks>
    1c5a:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <pxCurrentTCB>
    1c5e:	90 91 f9 03 	lds	r25, 0x03F9	; 0x8003f9 <pxCurrentTCB+0x1>
    1c62:	89 2b       	or	r24, r25
    1c64:	89 f5       	brne	.+98     	; 0x1cc8 <xTaskCreateStatic+0x140>
    1c66:	d0 93 f9 03 	sts	0x03F9, r29	; 0x8003f9 <pxCurrentTCB+0x1>
    1c6a:	c0 93 f8 03 	sts	0x03F8, r28	; 0x8003f8 <pxCurrentTCB>
    1c6e:	80 91 a1 03 	lds	r24, 0x03A1	; 0x8003a1 <uxCurrentNumberOfTasks>
    1c72:	81 30       	cpi	r24, 0x01	; 1
    1c74:	09 f0       	breq	.+2      	; 0x1c78 <xTaskCreateStatic+0xf0>
    1c76:	38 c0       	rjmp	.+112    	; 0x1ce8 <xTaskCreateStatic+0x160>
    1c78:	84 ed       	ldi	r24, 0xD4	; 212
    1c7a:	93 e0       	ldi	r25, 0x03	; 3
    1c7c:	a1 d6       	rcall	.+3394   	; 0x29c0 <vListInitialise>
    1c7e:	8d ed       	ldi	r24, 0xDD	; 221
    1c80:	93 e0       	ldi	r25, 0x03	; 3
    1c82:	9e d6       	rcall	.+3388   	; 0x29c0 <vListInitialise>
    1c84:	86 ee       	ldi	r24, 0xE6	; 230
    1c86:	93 e0       	ldi	r25, 0x03	; 3
    1c88:	9b d6       	rcall	.+3382   	; 0x29c0 <vListInitialise>
    1c8a:	8f ee       	ldi	r24, 0xEF	; 239
    1c8c:	93 e0       	ldi	r25, 0x03	; 3
    1c8e:	98 d6       	rcall	.+3376   	; 0x29c0 <vListInitialise>
    1c90:	8b ec       	ldi	r24, 0xCB	; 203
    1c92:	93 e0       	ldi	r25, 0x03	; 3
    1c94:	95 d6       	rcall	.+3370   	; 0x29c0 <vListInitialise>
    1c96:	82 ec       	ldi	r24, 0xC2	; 194
    1c98:	93 e0       	ldi	r25, 0x03	; 3
    1c9a:	92 d6       	rcall	.+3364   	; 0x29c0 <vListInitialise>
    1c9c:	85 eb       	ldi	r24, 0xB5	; 181
    1c9e:	93 e0       	ldi	r25, 0x03	; 3
    1ca0:	8f d6       	rcall	.+3358   	; 0x29c0 <vListInitialise>
    1ca2:	8c ea       	ldi	r24, 0xAC	; 172
    1ca4:	93 e0       	ldi	r25, 0x03	; 3
    1ca6:	8c d6       	rcall	.+3352   	; 0x29c0 <vListInitialise>
    1ca8:	82 ea       	ldi	r24, 0xA2	; 162
    1caa:	93 e0       	ldi	r25, 0x03	; 3
    1cac:	89 d6       	rcall	.+3346   	; 0x29c0 <vListInitialise>
    1cae:	8b ec       	ldi	r24, 0xCB	; 203
    1cb0:	93 e0       	ldi	r25, 0x03	; 3
    1cb2:	90 93 c1 03 	sts	0x03C1, r25	; 0x8003c1 <pxDelayedTaskList+0x1>
    1cb6:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <pxDelayedTaskList>
    1cba:	82 ec       	ldi	r24, 0xC2	; 194
    1cbc:	93 e0       	ldi	r25, 0x03	; 3
    1cbe:	90 93 bf 03 	sts	0x03BF, r25	; 0x8003bf <pxOverflowDelayedTaskList+0x1>
    1cc2:	80 93 be 03 	sts	0x03BE, r24	; 0x8003be <pxOverflowDelayedTaskList>
    1cc6:	10 c0       	rjmp	.+32     	; 0x1ce8 <xTaskCreateStatic+0x160>
    1cc8:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <xSchedulerRunning>
    1ccc:	81 11       	cpse	r24, r1
    1cce:	0c c0       	rjmp	.+24     	; 0x1ce8 <xTaskCreateStatic+0x160>
    1cd0:	e0 91 f8 03 	lds	r30, 0x03F8	; 0x8003f8 <pxCurrentTCB>
    1cd4:	f0 91 f9 03 	lds	r31, 0x03F9	; 0x8003f9 <pxCurrentTCB+0x1>
    1cd8:	96 89       	ldd	r25, Z+22	; 0x16
    1cda:	8e 89       	ldd	r24, Y+22	; 0x16
    1cdc:	89 17       	cp	r24, r25
    1cde:	20 f0       	brcs	.+8      	; 0x1ce8 <xTaskCreateStatic+0x160>
    1ce0:	d0 93 f9 03 	sts	0x03F9, r29	; 0x8003f9 <pxCurrentTCB+0x1>
    1ce4:	c0 93 f8 03 	sts	0x03F8, r28	; 0x8003f8 <pxCurrentTCB>
    1ce8:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <uxTaskNumber>
    1cec:	8f 5f       	subi	r24, 0xFF	; 255
    1cee:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <uxTaskNumber>
    1cf2:	ee 89       	ldd	r30, Y+22	; 0x16
    1cf4:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <uxTopReadyPriority>
    1cf8:	8e 17       	cp	r24, r30
    1cfa:	10 f4       	brcc	.+4      	; 0x1d00 <xTaskCreateStatic+0x178>
    1cfc:	e0 93 9e 03 	sts	0x039E, r30	; 0x80039e <uxTopReadyPriority>
    1d00:	89 e0       	ldi	r24, 0x09	; 9
    1d02:	8e 9f       	mul	r24, r30
    1d04:	f0 01       	movw	r30, r0
    1d06:	11 24       	eor	r1, r1
    1d08:	ec 52       	subi	r30, 0x2C	; 44
    1d0a:	fc 4f       	sbci	r31, 0xFC	; 252
    1d0c:	01 80       	ldd	r0, Z+1	; 0x01
    1d0e:	f2 81       	ldd	r31, Z+2	; 0x02
    1d10:	e0 2d       	mov	r30, r0
    1d12:	fd 83       	std	Y+5, r31	; 0x05
    1d14:	ec 83       	std	Y+4, r30	; 0x04
    1d16:	24 81       	ldd	r18, Z+4	; 0x04
    1d18:	35 81       	ldd	r19, Z+5	; 0x05
    1d1a:	3f 83       	std	Y+7, r19	; 0x07
    1d1c:	2e 83       	std	Y+6, r18	; 0x06
    1d1e:	a4 81       	ldd	r26, Z+4	; 0x04
    1d20:	b5 81       	ldd	r27, Z+5	; 0x05
    1d22:	13 96       	adiw	r26, 0x03	; 3
    1d24:	9c 92       	st	X, r9
    1d26:	8e 92       	st	-X, r8
    1d28:	12 97       	sbiw	r26, 0x02	; 2
    1d2a:	95 82       	std	Z+5, r9	; 0x05
    1d2c:	84 82       	std	Z+4, r8	; 0x04
    1d2e:	ee 89       	ldd	r30, Y+22	; 0x16
    1d30:	8e 9f       	mul	r24, r30
    1d32:	f0 01       	movw	r30, r0
    1d34:	11 24       	eor	r1, r1
    1d36:	ec 52       	subi	r30, 0x2C	; 44
    1d38:	fc 4f       	sbci	r31, 0xFC	; 252
    1d3a:	fb 87       	std	Y+11, r31	; 0x0b
    1d3c:	ea 87       	std	Y+10, r30	; 0x0a
    1d3e:	80 81       	ld	r24, Z
    1d40:	8f 5f       	subi	r24, 0xFF	; 255
    1d42:	80 83       	st	Z, r24
    1d44:	0f 90       	pop	r0
    1d46:	0f be       	out	0x3f, r0	; 63
    1d48:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <xSchedulerRunning>
    1d4c:	88 23       	and	r24, r24
    1d4e:	69 f0       	breq	.+26     	; 0x1d6a <xTaskCreateStatic+0x1e2>
    1d50:	e0 91 f8 03 	lds	r30, 0x03F8	; 0x8003f8 <pxCurrentTCB>
    1d54:	f0 91 f9 03 	lds	r31, 0x03F9	; 0x8003f9 <pxCurrentTCB+0x1>
    1d58:	96 89       	ldd	r25, Z+22	; 0x16
    1d5a:	8e 89       	ldd	r24, Y+22	; 0x16
    1d5c:	98 17       	cp	r25, r24
    1d5e:	28 f4       	brcc	.+10     	; 0x1d6a <xTaskCreateStatic+0x1e2>
    1d60:	b4 d6       	rcall	.+3432   	; 0x2aca <vPortYield>
    1d62:	03 c0       	rjmp	.+6      	; 0x1d6a <xTaskCreateStatic+0x1e2>
    1d64:	80 e0       	ldi	r24, 0x00	; 0
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	01 c0       	rjmp	.+2      	; 0x1d6c <xTaskCreateStatic+0x1e4>
    1d6a:	ce 01       	movw	r24, r28
    1d6c:	df 91       	pop	r29
    1d6e:	cf 91       	pop	r28
    1d70:	0f 91       	pop	r16
    1d72:	ff 90       	pop	r15
    1d74:	ef 90       	pop	r14
    1d76:	df 90       	pop	r13
    1d78:	cf 90       	pop	r12
    1d7a:	bf 90       	pop	r11
    1d7c:	af 90       	pop	r10
    1d7e:	9f 90       	pop	r9
    1d80:	8f 90       	pop	r8
    1d82:	7f 90       	pop	r7
    1d84:	6f 90       	pop	r6
    1d86:	08 95       	ret

00001d88 <vTaskStartScheduler>:
    1d88:	cf 92       	push	r12
    1d8a:	df 92       	push	r13
    1d8c:	ef 92       	push	r14
    1d8e:	ff 92       	push	r15
    1d90:	0f 93       	push	r16
    1d92:	cf 93       	push	r28
    1d94:	df 93       	push	r29
    1d96:	00 d0       	rcall	.+0      	; 0x1d98 <vTaskStartScheduler+0x10>
    1d98:	00 d0       	rcall	.+0      	; 0x1d9a <vTaskStartScheduler+0x12>
    1d9a:	cd b7       	in	r28, 0x3d	; 61
    1d9c:	de b7       	in	r29, 0x3e	; 62
    1d9e:	1e 82       	std	Y+6, r1	; 0x06
    1da0:	1d 82       	std	Y+5, r1	; 0x05
    1da2:	1c 82       	std	Y+4, r1	; 0x04
    1da4:	1b 82       	std	Y+3, r1	; 0x03
    1da6:	ae 01       	movw	r20, r28
    1da8:	4f 5f       	subi	r20, 0xFF	; 255
    1daa:	5f 4f       	sbci	r21, 0xFF	; 255
    1dac:	be 01       	movw	r22, r28
    1dae:	6d 5f       	subi	r22, 0xFD	; 253
    1db0:	7f 4f       	sbci	r23, 0xFF	; 255
    1db2:	ce 01       	movw	r24, r28
    1db4:	05 96       	adiw	r24, 0x05	; 5
    1db6:	ad d5       	rcall	.+2906   	; 0x2912 <vApplicationGetIdleTaskMemory>
    1db8:	cd 80       	ldd	r12, Y+5	; 0x05
    1dba:	de 80       	ldd	r13, Y+6	; 0x06
    1dbc:	eb 80       	ldd	r14, Y+3	; 0x03
    1dbe:	fc 80       	ldd	r15, Y+4	; 0x04
    1dc0:	49 81       	ldd	r20, Y+1	; 0x01
    1dc2:	5a 81       	ldd	r21, Y+2	; 0x02
    1dc4:	00 e0       	ldi	r16, 0x00	; 0
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	69 e3       	ldi	r22, 0x39	; 57
    1dcc:	72 e0       	ldi	r23, 0x02	; 2
    1dce:	89 e4       	ldi	r24, 0x49	; 73
    1dd0:	91 e0       	ldi	r25, 0x01	; 1
    1dd2:	da de       	rcall	.-588    	; 0x1b88 <xTaskCreateStatic>
    1dd4:	89 2b       	or	r24, r25
    1dd6:	89 f0       	breq	.+34     	; 0x1dfa <vTaskStartScheduler+0x72>
    1dd8:	bb d4       	rcall	.+2422   	; 0x2750 <xTimerCreateTimerTask>
    1dda:	81 30       	cpi	r24, 0x01	; 1
    1ddc:	71 f4       	brne	.+28     	; 0x1dfa <vTaskStartScheduler+0x72>
    1dde:	f8 94       	cli
    1de0:	2f ef       	ldi	r18, 0xFF	; 255
    1de2:	3f ef       	ldi	r19, 0xFF	; 255
    1de4:	30 93 97 03 	sts	0x0397, r19	; 0x800397 <xNextTaskUnblockTime+0x1>
    1de8:	20 93 96 03 	sts	0x0396, r18	; 0x800396 <xNextTaskUnblockTime>
    1dec:	80 93 9d 03 	sts	0x039D, r24	; 0x80039d <xSchedulerRunning>
    1df0:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <xTickCount+0x1>
    1df4:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <xTickCount>
    1df8:	37 d7       	rcall	.+3694   	; 0x2c68 <xPortStartScheduler>
    1dfa:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <uxTopUsedPriority>
    1dfe:	26 96       	adiw	r28, 0x06	; 6
    1e00:	0f b6       	in	r0, 0x3f	; 63
    1e02:	f8 94       	cli
    1e04:	de bf       	out	0x3e, r29	; 62
    1e06:	0f be       	out	0x3f, r0	; 63
    1e08:	cd bf       	out	0x3d, r28	; 61
    1e0a:	df 91       	pop	r29
    1e0c:	cf 91       	pop	r28
    1e0e:	0f 91       	pop	r16
    1e10:	ff 90       	pop	r15
    1e12:	ef 90       	pop	r14
    1e14:	df 90       	pop	r13
    1e16:	cf 90       	pop	r12
    1e18:	08 95       	ret

00001e1a <vTaskSuspendAll>:
    1e1a:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <uxSchedulerSuspended>
    1e1e:	8f 5f       	subi	r24, 0xFF	; 255
    1e20:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <uxSchedulerSuspended>
    1e24:	08 95       	ret

00001e26 <xTaskGetTickCount>:
    1e26:	0f b6       	in	r0, 0x3f	; 63
    1e28:	f8 94       	cli
    1e2a:	0f 92       	push	r0
    1e2c:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <xTickCount>
    1e30:	90 91 a0 03 	lds	r25, 0x03A0	; 0x8003a0 <xTickCount+0x1>
    1e34:	0f 90       	pop	r0
    1e36:	0f be       	out	0x3f, r0	; 63
    1e38:	08 95       	ret

00001e3a <uxTaskGetNumberOfTasks>:
    1e3a:	80 91 a1 03 	lds	r24, 0x03A1	; 0x8003a1 <uxCurrentNumberOfTasks>
    1e3e:	08 95       	ret

00001e40 <xTaskIncrementTick>:
    1e40:	df 92       	push	r13
    1e42:	ef 92       	push	r14
    1e44:	ff 92       	push	r15
    1e46:	0f 93       	push	r16
    1e48:	1f 93       	push	r17
    1e4a:	cf 93       	push	r28
    1e4c:	df 93       	push	r29
    1e4e:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <uxSchedulerSuspended>
    1e52:	81 11       	cpse	r24, r1
    1e54:	e6 c0       	rjmp	.+460    	; 0x2022 <__DATA_REGION_LENGTH__+0x22>
    1e56:	00 91 9f 03 	lds	r16, 0x039F	; 0x80039f <xTickCount>
    1e5a:	10 91 a0 03 	lds	r17, 0x03A0	; 0x8003a0 <xTickCount+0x1>
    1e5e:	0f 5f       	subi	r16, 0xFF	; 255
    1e60:	1f 4f       	sbci	r17, 0xFF	; 255
    1e62:	10 93 a0 03 	sts	0x03A0, r17	; 0x8003a0 <xTickCount+0x1>
    1e66:	00 93 9f 03 	sts	0x039F, r16	; 0x80039f <xTickCount>
    1e6a:	01 15       	cp	r16, r1
    1e6c:	11 05       	cpc	r17, r1
    1e6e:	b1 f4       	brne	.+44     	; 0x1e9c <xTaskIncrementTick+0x5c>
    1e70:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <pxDelayedTaskList>
    1e74:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <pxDelayedTaskList+0x1>
    1e78:	20 91 be 03 	lds	r18, 0x03BE	; 0x8003be <pxOverflowDelayedTaskList>
    1e7c:	30 91 bf 03 	lds	r19, 0x03BF	; 0x8003bf <pxOverflowDelayedTaskList+0x1>
    1e80:	30 93 c1 03 	sts	0x03C1, r19	; 0x8003c1 <pxDelayedTaskList+0x1>
    1e84:	20 93 c0 03 	sts	0x03C0, r18	; 0x8003c0 <pxDelayedTaskList>
    1e88:	90 93 bf 03 	sts	0x03BF, r25	; 0x8003bf <pxOverflowDelayedTaskList+0x1>
    1e8c:	80 93 be 03 	sts	0x03BE, r24	; 0x8003be <pxOverflowDelayedTaskList>
    1e90:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <xNumOfOverflows>
    1e94:	8f 5f       	subi	r24, 0xFF	; 255
    1e96:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <xNumOfOverflows>
    1e9a:	de dd       	rcall	.-1092   	; 0x1a58 <prvResetNextTaskUnblockTime>
    1e9c:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <xNextTaskUnblockTime>
    1ea0:	90 91 97 03 	lds	r25, 0x0397	; 0x800397 <xNextTaskUnblockTime+0x1>
    1ea4:	d1 2c       	mov	r13, r1
    1ea6:	08 17       	cp	r16, r24
    1ea8:	19 07       	cpc	r17, r25
    1eaa:	08 f4       	brcc	.+2      	; 0x1eae <xTaskIncrementTick+0x6e>
    1eac:	9b c0       	rjmp	.+310    	; 0x1fe4 <xTaskIncrementTick+0x1a4>
    1eae:	49 e0       	ldi	r20, 0x09	; 9
    1eb0:	e0 91 c0 03 	lds	r30, 0x03C0	; 0x8003c0 <pxDelayedTaskList>
    1eb4:	f0 91 c1 03 	lds	r31, 0x03C1	; 0x8003c1 <pxDelayedTaskList+0x1>
    1eb8:	80 81       	ld	r24, Z
    1eba:	81 11       	cpse	r24, r1
    1ebc:	03 c0       	rjmp	.+6      	; 0x1ec4 <xTaskIncrementTick+0x84>
    1ebe:	8f ef       	ldi	r24, 0xFF	; 255
    1ec0:	9f ef       	ldi	r25, 0xFF	; 255
    1ec2:	0f c0       	rjmp	.+30     	; 0x1ee2 <xTaskIncrementTick+0xa2>
    1ec4:	e0 91 c0 03 	lds	r30, 0x03C0	; 0x8003c0 <pxDelayedTaskList>
    1ec8:	f0 91 c1 03 	lds	r31, 0x03C1	; 0x8003c1 <pxDelayedTaskList+0x1>
    1ecc:	05 80       	ldd	r0, Z+5	; 0x05
    1ece:	f6 81       	ldd	r31, Z+6	; 0x06
    1ed0:	e0 2d       	mov	r30, r0
    1ed2:	06 80       	ldd	r0, Z+6	; 0x06
    1ed4:	f7 81       	ldd	r31, Z+7	; 0x07
    1ed6:	e0 2d       	mov	r30, r0
    1ed8:	82 81       	ldd	r24, Z+2	; 0x02
    1eda:	93 81       	ldd	r25, Z+3	; 0x03
    1edc:	08 17       	cp	r16, r24
    1ede:	19 07       	cpc	r17, r25
    1ee0:	28 f4       	brcc	.+10     	; 0x1eec <xTaskIncrementTick+0xac>
    1ee2:	90 93 97 03 	sts	0x0397, r25	; 0x800397 <xNextTaskUnblockTime+0x1>
    1ee6:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <xNextTaskUnblockTime>
    1eea:	7c c0       	rjmp	.+248    	; 0x1fe4 <xTaskIncrementTick+0x1a4>
    1eec:	a2 85       	ldd	r26, Z+10	; 0x0a
    1eee:	b3 85       	ldd	r27, Z+11	; 0x0b
    1ef0:	84 81       	ldd	r24, Z+4	; 0x04
    1ef2:	95 81       	ldd	r25, Z+5	; 0x05
    1ef4:	26 81       	ldd	r18, Z+6	; 0x06
    1ef6:	37 81       	ldd	r19, Z+7	; 0x07
    1ef8:	ec 01       	movw	r28, r24
    1efa:	3d 83       	std	Y+5, r19	; 0x05
    1efc:	2c 83       	std	Y+4, r18	; 0x04
    1efe:	26 81       	ldd	r18, Z+6	; 0x06
    1f00:	37 81       	ldd	r19, Z+7	; 0x07
    1f02:	e9 01       	movw	r28, r18
    1f04:	9b 83       	std	Y+3, r25	; 0x03
    1f06:	8a 83       	std	Y+2, r24	; 0x02
    1f08:	cf 01       	movw	r24, r30
    1f0a:	02 96       	adiw	r24, 0x02	; 2
    1f0c:	11 96       	adiw	r26, 0x01	; 1
    1f0e:	6d 91       	ld	r22, X+
    1f10:	7c 91       	ld	r23, X
    1f12:	12 97       	sbiw	r26, 0x02	; 2
    1f14:	68 17       	cp	r22, r24
    1f16:	79 07       	cpc	r23, r25
    1f18:	21 f4       	brne	.+8      	; 0x1f22 <xTaskIncrementTick+0xe2>
    1f1a:	12 96       	adiw	r26, 0x02	; 2
    1f1c:	3c 93       	st	X, r19
    1f1e:	2e 93       	st	-X, r18
    1f20:	11 97       	sbiw	r26, 0x01	; 1
    1f22:	13 86       	std	Z+11, r1	; 0x0b
    1f24:	12 86       	std	Z+10, r1	; 0x0a
    1f26:	2c 91       	ld	r18, X
    1f28:	21 50       	subi	r18, 0x01	; 1
    1f2a:	2c 93       	st	X, r18
    1f2c:	a4 89       	ldd	r26, Z+20	; 0x14
    1f2e:	b5 89       	ldd	r27, Z+21	; 0x15
    1f30:	10 97       	sbiw	r26, 0x00	; 0
    1f32:	f9 f0       	breq	.+62     	; 0x1f72 <xTaskIncrementTick+0x132>
    1f34:	26 85       	ldd	r18, Z+14	; 0x0e
    1f36:	37 85       	ldd	r19, Z+15	; 0x0f
    1f38:	60 89       	ldd	r22, Z+16	; 0x10
    1f3a:	71 89       	ldd	r23, Z+17	; 0x11
    1f3c:	e9 01       	movw	r28, r18
    1f3e:	7d 83       	std	Y+5, r23	; 0x05
    1f40:	6c 83       	std	Y+4, r22	; 0x04
    1f42:	60 89       	ldd	r22, Z+16	; 0x10
    1f44:	71 89       	ldd	r23, Z+17	; 0x11
    1f46:	eb 01       	movw	r28, r22
    1f48:	3b 83       	std	Y+3, r19	; 0x03
    1f4a:	2a 83       	std	Y+2, r18	; 0x02
    1f4c:	11 96       	adiw	r26, 0x01	; 1
    1f4e:	ed 90       	ld	r14, X+
    1f50:	fc 90       	ld	r15, X
    1f52:	12 97       	sbiw	r26, 0x02	; 2
    1f54:	9f 01       	movw	r18, r30
    1f56:	24 5f       	subi	r18, 0xF4	; 244
    1f58:	3f 4f       	sbci	r19, 0xFF	; 255
    1f5a:	e2 16       	cp	r14, r18
    1f5c:	f3 06       	cpc	r15, r19
    1f5e:	21 f4       	brne	.+8      	; 0x1f68 <xTaskIncrementTick+0x128>
    1f60:	12 96       	adiw	r26, 0x02	; 2
    1f62:	7c 93       	st	X, r23
    1f64:	6e 93       	st	-X, r22
    1f66:	11 97       	sbiw	r26, 0x01	; 1
    1f68:	15 8a       	std	Z+21, r1	; 0x15
    1f6a:	14 8a       	std	Z+20, r1	; 0x14
    1f6c:	2c 91       	ld	r18, X
    1f6e:	21 50       	subi	r18, 0x01	; 1
    1f70:	2c 93       	st	X, r18
    1f72:	a6 89       	ldd	r26, Z+22	; 0x16
    1f74:	20 91 9e 03 	lds	r18, 0x039E	; 0x80039e <uxTopReadyPriority>
    1f78:	2a 17       	cp	r18, r26
    1f7a:	10 f4       	brcc	.+4      	; 0x1f80 <xTaskIncrementTick+0x140>
    1f7c:	a0 93 9e 03 	sts	0x039E, r26	; 0x80039e <uxTopReadyPriority>
    1f80:	4a 9f       	mul	r20, r26
    1f82:	d0 01       	movw	r26, r0
    1f84:	11 24       	eor	r1, r1
    1f86:	ac 52       	subi	r26, 0x2C	; 44
    1f88:	bc 4f       	sbci	r27, 0xFC	; 252
    1f8a:	11 96       	adiw	r26, 0x01	; 1
    1f8c:	0d 90       	ld	r0, X+
    1f8e:	bc 91       	ld	r27, X
    1f90:	a0 2d       	mov	r26, r0
    1f92:	b5 83       	std	Z+5, r27	; 0x05
    1f94:	a4 83       	std	Z+4, r26	; 0x04
    1f96:	14 96       	adiw	r26, 0x04	; 4
    1f98:	2d 91       	ld	r18, X+
    1f9a:	3c 91       	ld	r19, X
    1f9c:	15 97       	sbiw	r26, 0x05	; 5
    1f9e:	37 83       	std	Z+7, r19	; 0x07
    1fa0:	26 83       	std	Z+6, r18	; 0x06
    1fa2:	14 96       	adiw	r26, 0x04	; 4
    1fa4:	2d 91       	ld	r18, X+
    1fa6:	3c 91       	ld	r19, X
    1fa8:	15 97       	sbiw	r26, 0x05	; 5
    1faa:	e9 01       	movw	r28, r18
    1fac:	9b 83       	std	Y+3, r25	; 0x03
    1fae:	8a 83       	std	Y+2, r24	; 0x02
    1fb0:	15 96       	adiw	r26, 0x05	; 5
    1fb2:	9c 93       	st	X, r25
    1fb4:	8e 93       	st	-X, r24
    1fb6:	14 97       	sbiw	r26, 0x04	; 4
    1fb8:	96 89       	ldd	r25, Z+22	; 0x16
    1fba:	49 9f       	mul	r20, r25
    1fbc:	d0 01       	movw	r26, r0
    1fbe:	11 24       	eor	r1, r1
    1fc0:	ac 52       	subi	r26, 0x2C	; 44
    1fc2:	bc 4f       	sbci	r27, 0xFC	; 252
    1fc4:	b3 87       	std	Z+11, r27	; 0x0b
    1fc6:	a2 87       	std	Z+10, r26	; 0x0a
    1fc8:	8c 91       	ld	r24, X
    1fca:	8f 5f       	subi	r24, 0xFF	; 255
    1fcc:	8c 93       	st	X, r24
    1fce:	e0 91 f8 03 	lds	r30, 0x03F8	; 0x8003f8 <pxCurrentTCB>
    1fd2:	f0 91 f9 03 	lds	r31, 0x03F9	; 0x8003f9 <pxCurrentTCB+0x1>
    1fd6:	86 89       	ldd	r24, Z+22	; 0x16
    1fd8:	89 17       	cp	r24, r25
    1fda:	08 f0       	brcs	.+2      	; 0x1fde <xTaskIncrementTick+0x19e>
    1fdc:	69 cf       	rjmp	.-302    	; 0x1eb0 <xTaskIncrementTick+0x70>
    1fde:	dd 24       	eor	r13, r13
    1fe0:	d3 94       	inc	r13
    1fe2:	66 cf       	rjmp	.-308    	; 0x1eb0 <xTaskIncrementTick+0x70>
    1fe4:	e0 91 f8 03 	lds	r30, 0x03F8	; 0x8003f8 <pxCurrentTCB>
    1fe8:	f0 91 f9 03 	lds	r31, 0x03F9	; 0x8003f9 <pxCurrentTCB+0x1>
    1fec:	e6 89       	ldd	r30, Z+22	; 0x16
    1fee:	d9 e0       	ldi	r29, 0x09	; 9
    1ff0:	ed 9f       	mul	r30, r29
    1ff2:	f0 01       	movw	r30, r0
    1ff4:	11 24       	eor	r1, r1
    1ff6:	ec 52       	subi	r30, 0x2C	; 44
    1ff8:	fc 4f       	sbci	r31, 0xFC	; 252
    1ffa:	80 81       	ld	r24, Z
    1ffc:	82 30       	cpi	r24, 0x02	; 2
    1ffe:	10 f0       	brcs	.+4      	; 0x2004 <__DATA_REGION_LENGTH__+0x4>
    2000:	dd 24       	eor	r13, r13
    2002:	d3 94       	inc	r13
    2004:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <xPendedTicks>
    2008:	90 91 9c 03 	lds	r25, 0x039C	; 0x80039c <xPendedTicks+0x1>
    200c:	89 2b       	or	r24, r25
    200e:	11 f4       	brne	.+4      	; 0x2014 <__DATA_REGION_LENGTH__+0x14>
    2010:	0e 94 a8 02 	call	0x550	; 0x550 <vApplicationTickHook>
    2014:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <xYieldPending>
    2018:	88 23       	and	r24, r24
    201a:	79 f0       	breq	.+30     	; 0x203a <__DATA_REGION_LENGTH__+0x3a>
    201c:	dd 24       	eor	r13, r13
    201e:	d3 94       	inc	r13
    2020:	0c c0       	rjmp	.+24     	; 0x203a <__DATA_REGION_LENGTH__+0x3a>
    2022:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <xPendedTicks>
    2026:	90 91 9c 03 	lds	r25, 0x039C	; 0x80039c <xPendedTicks+0x1>
    202a:	01 96       	adiw	r24, 0x01	; 1
    202c:	90 93 9c 03 	sts	0x039C, r25	; 0x80039c <xPendedTicks+0x1>
    2030:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <xPendedTicks>
    2034:	0e 94 a8 02 	call	0x550	; 0x550 <vApplicationTickHook>
    2038:	d1 2c       	mov	r13, r1
    203a:	8d 2d       	mov	r24, r13
    203c:	df 91       	pop	r29
    203e:	cf 91       	pop	r28
    2040:	1f 91       	pop	r17
    2042:	0f 91       	pop	r16
    2044:	ff 90       	pop	r15
    2046:	ef 90       	pop	r14
    2048:	df 90       	pop	r13
    204a:	08 95       	ret

0000204c <xTaskResumeAll>:
    204c:	ef 92       	push	r14
    204e:	ff 92       	push	r15
    2050:	0f 93       	push	r16
    2052:	1f 93       	push	r17
    2054:	cf 93       	push	r28
    2056:	df 93       	push	r29
    2058:	0f b6       	in	r0, 0x3f	; 63
    205a:	f8 94       	cli
    205c:	0f 92       	push	r0
    205e:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <uxSchedulerSuspended>
    2062:	81 50       	subi	r24, 0x01	; 1
    2064:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <uxSchedulerSuspended>
    2068:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <uxSchedulerSuspended>
    206c:	88 23       	and	r24, r24
    206e:	11 f0       	breq	.+4      	; 0x2074 <xTaskResumeAll+0x28>
    2070:	80 e0       	ldi	r24, 0x00	; 0
    2072:	ac c0       	rjmp	.+344    	; 0x21cc <xTaskResumeAll+0x180>
    2074:	80 91 a1 03 	lds	r24, 0x03A1	; 0x8003a1 <uxCurrentNumberOfTasks>
    2078:	88 23       	and	r24, r24
    207a:	d1 f3       	breq	.-12     	; 0x2070 <xTaskResumeAll+0x24>
    207c:	e0 90 ba 03 	lds	r14, 0x03BA	; 0x8003ba <xPendingReadyList+0x5>
    2080:	f0 90 bb 03 	lds	r15, 0x03BB	; 0x8003bb <xPendingReadyList+0x6>
    2084:	e0 e0       	ldi	r30, 0x00	; 0
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	39 e0       	ldi	r19, 0x09	; 9
    208a:	41 e0       	ldi	r20, 0x01	; 1
    208c:	80 91 b5 03 	lds	r24, 0x03B5	; 0x8003b5 <xPendingReadyList>
    2090:	88 23       	and	r24, r24
    2092:	09 f4       	brne	.+2      	; 0x2096 <xTaskResumeAll+0x4a>
    2094:	80 c0       	rjmp	.+256    	; 0x2196 <xTaskResumeAll+0x14a>
    2096:	d7 01       	movw	r26, r14
    2098:	16 96       	adiw	r26, 0x06	; 6
    209a:	ed 91       	ld	r30, X+
    209c:	fc 91       	ld	r31, X
    209e:	17 97       	sbiw	r26, 0x07	; 7
    20a0:	a4 89       	ldd	r26, Z+20	; 0x14
    20a2:	b5 89       	ldd	r27, Z+21	; 0x15
    20a4:	66 85       	ldd	r22, Z+14	; 0x0e
    20a6:	77 85       	ldd	r23, Z+15	; 0x0f
    20a8:	80 89       	ldd	r24, Z+16	; 0x10
    20aa:	91 89       	ldd	r25, Z+17	; 0x11
    20ac:	eb 01       	movw	r28, r22
    20ae:	9d 83       	std	Y+5, r25	; 0x05
    20b0:	8c 83       	std	Y+4, r24	; 0x04
    20b2:	80 89       	ldd	r24, Z+16	; 0x10
    20b4:	91 89       	ldd	r25, Z+17	; 0x11
    20b6:	ec 01       	movw	r28, r24
    20b8:	7b 83       	std	Y+3, r23	; 0x03
    20ba:	6a 83       	std	Y+2, r22	; 0x02
    20bc:	bf 01       	movw	r22, r30
    20be:	64 5f       	subi	r22, 0xF4	; 244
    20c0:	7f 4f       	sbci	r23, 0xFF	; 255
    20c2:	11 96       	adiw	r26, 0x01	; 1
    20c4:	0d 91       	ld	r16, X+
    20c6:	1c 91       	ld	r17, X
    20c8:	12 97       	sbiw	r26, 0x02	; 2
    20ca:	06 17       	cp	r16, r22
    20cc:	17 07       	cpc	r17, r23
    20ce:	21 f4       	brne	.+8      	; 0x20d8 <xTaskResumeAll+0x8c>
    20d0:	12 96       	adiw	r26, 0x02	; 2
    20d2:	9c 93       	st	X, r25
    20d4:	8e 93       	st	-X, r24
    20d6:	11 97       	sbiw	r26, 0x01	; 1
    20d8:	15 8a       	std	Z+21, r1	; 0x15
    20da:	14 8a       	std	Z+20, r1	; 0x14
    20dc:	8c 91       	ld	r24, X
    20de:	81 50       	subi	r24, 0x01	; 1
    20e0:	8c 93       	st	X, r24
    20e2:	a2 85       	ldd	r26, Z+10	; 0x0a
    20e4:	b3 85       	ldd	r27, Z+11	; 0x0b
    20e6:	84 81       	ldd	r24, Z+4	; 0x04
    20e8:	95 81       	ldd	r25, Z+5	; 0x05
    20ea:	66 81       	ldd	r22, Z+6	; 0x06
    20ec:	77 81       	ldd	r23, Z+7	; 0x07
    20ee:	ec 01       	movw	r28, r24
    20f0:	7d 83       	std	Y+5, r23	; 0x05
    20f2:	6c 83       	std	Y+4, r22	; 0x04
    20f4:	66 81       	ldd	r22, Z+6	; 0x06
    20f6:	77 81       	ldd	r23, Z+7	; 0x07
    20f8:	eb 01       	movw	r28, r22
    20fa:	9b 83       	std	Y+3, r25	; 0x03
    20fc:	8a 83       	std	Y+2, r24	; 0x02
    20fe:	cf 01       	movw	r24, r30
    2100:	02 96       	adiw	r24, 0x02	; 2
    2102:	11 96       	adiw	r26, 0x01	; 1
    2104:	0d 91       	ld	r16, X+
    2106:	1c 91       	ld	r17, X
    2108:	12 97       	sbiw	r26, 0x02	; 2
    210a:	08 17       	cp	r16, r24
    210c:	19 07       	cpc	r17, r25
    210e:	21 f4       	brne	.+8      	; 0x2118 <xTaskResumeAll+0xcc>
    2110:	12 96       	adiw	r26, 0x02	; 2
    2112:	7c 93       	st	X, r23
    2114:	6e 93       	st	-X, r22
    2116:	11 97       	sbiw	r26, 0x01	; 1
    2118:	13 86       	std	Z+11, r1	; 0x0b
    211a:	12 86       	std	Z+10, r1	; 0x0a
    211c:	2c 91       	ld	r18, X
    211e:	21 50       	subi	r18, 0x01	; 1
    2120:	2c 93       	st	X, r18
    2122:	a6 89       	ldd	r26, Z+22	; 0x16
    2124:	20 91 9e 03 	lds	r18, 0x039E	; 0x80039e <uxTopReadyPriority>
    2128:	2a 17       	cp	r18, r26
    212a:	10 f4       	brcc	.+4      	; 0x2130 <xTaskResumeAll+0xe4>
    212c:	a0 93 9e 03 	sts	0x039E, r26	; 0x80039e <uxTopReadyPriority>
    2130:	3a 9f       	mul	r19, r26
    2132:	d0 01       	movw	r26, r0
    2134:	11 24       	eor	r1, r1
    2136:	ac 52       	subi	r26, 0x2C	; 44
    2138:	bc 4f       	sbci	r27, 0xFC	; 252
    213a:	11 96       	adiw	r26, 0x01	; 1
    213c:	0d 90       	ld	r0, X+
    213e:	bc 91       	ld	r27, X
    2140:	a0 2d       	mov	r26, r0
    2142:	b5 83       	std	Z+5, r27	; 0x05
    2144:	a4 83       	std	Z+4, r26	; 0x04
    2146:	14 96       	adiw	r26, 0x04	; 4
    2148:	6d 91       	ld	r22, X+
    214a:	7c 91       	ld	r23, X
    214c:	15 97       	sbiw	r26, 0x05	; 5
    214e:	77 83       	std	Z+7, r23	; 0x07
    2150:	66 83       	std	Z+6, r22	; 0x06
    2152:	14 96       	adiw	r26, 0x04	; 4
    2154:	6d 91       	ld	r22, X+
    2156:	7c 91       	ld	r23, X
    2158:	15 97       	sbiw	r26, 0x05	; 5
    215a:	eb 01       	movw	r28, r22
    215c:	9b 83       	std	Y+3, r25	; 0x03
    215e:	8a 83       	std	Y+2, r24	; 0x02
    2160:	15 96       	adiw	r26, 0x05	; 5
    2162:	9c 93       	st	X, r25
    2164:	8e 93       	st	-X, r24
    2166:	14 97       	sbiw	r26, 0x04	; 4
    2168:	96 89       	ldd	r25, Z+22	; 0x16
    216a:	39 9f       	mul	r19, r25
    216c:	d0 01       	movw	r26, r0
    216e:	11 24       	eor	r1, r1
    2170:	ac 52       	subi	r26, 0x2C	; 44
    2172:	bc 4f       	sbci	r27, 0xFC	; 252
    2174:	b3 87       	std	Z+11, r27	; 0x0b
    2176:	a2 87       	std	Z+10, r26	; 0x0a
    2178:	8c 91       	ld	r24, X
    217a:	8f 5f       	subi	r24, 0xFF	; 255
    217c:	8c 93       	st	X, r24
    217e:	a0 91 f8 03 	lds	r26, 0x03F8	; 0x8003f8 <pxCurrentTCB>
    2182:	b0 91 f9 03 	lds	r27, 0x03F9	; 0x8003f9 <pxCurrentTCB+0x1>
    2186:	56 96       	adiw	r26, 0x16	; 22
    2188:	8c 91       	ld	r24, X
    218a:	89 17       	cp	r24, r25
    218c:	08 f0       	brcs	.+2      	; 0x2190 <xTaskResumeAll+0x144>
    218e:	7e cf       	rjmp	.-260    	; 0x208c <xTaskResumeAll+0x40>
    2190:	40 93 9a 03 	sts	0x039A, r20	; 0x80039a <xYieldPending>
    2194:	7b cf       	rjmp	.-266    	; 0x208c <xTaskResumeAll+0x40>
    2196:	ef 2b       	or	r30, r31
    2198:	09 f0       	breq	.+2      	; 0x219c <xTaskResumeAll+0x150>
    219a:	5e dc       	rcall	.-1860   	; 0x1a58 <prvResetNextTaskUnblockTime>
    219c:	c0 91 9b 03 	lds	r28, 0x039B	; 0x80039b <xPendedTicks>
    21a0:	d0 91 9c 03 	lds	r29, 0x039C	; 0x80039c <xPendedTicks+0x1>
    21a4:	20 97       	sbiw	r28, 0x00	; 0
    21a6:	59 f0       	breq	.+22     	; 0x21be <xTaskResumeAll+0x172>
    21a8:	11 e0       	ldi	r17, 0x01	; 1
    21aa:	4a de       	rcall	.-876    	; 0x1e40 <xTaskIncrementTick>
    21ac:	81 11       	cpse	r24, r1
    21ae:	10 93 9a 03 	sts	0x039A, r17	; 0x80039a <xYieldPending>
    21b2:	21 97       	sbiw	r28, 0x01	; 1
    21b4:	d1 f7       	brne	.-12     	; 0x21aa <xTaskResumeAll+0x15e>
    21b6:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <xPendedTicks+0x1>
    21ba:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <xPendedTicks>
    21be:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <xYieldPending>
    21c2:	88 23       	and	r24, r24
    21c4:	09 f4       	brne	.+2      	; 0x21c8 <xTaskResumeAll+0x17c>
    21c6:	54 cf       	rjmp	.-344    	; 0x2070 <xTaskResumeAll+0x24>
    21c8:	80 d4       	rcall	.+2304   	; 0x2aca <vPortYield>
    21ca:	81 e0       	ldi	r24, 0x01	; 1
    21cc:	0f 90       	pop	r0
    21ce:	0f be       	out	0x3f, r0	; 63
    21d0:	df 91       	pop	r29
    21d2:	cf 91       	pop	r28
    21d4:	1f 91       	pop	r17
    21d6:	0f 91       	pop	r16
    21d8:	ff 90       	pop	r15
    21da:	ef 90       	pop	r14
    21dc:	08 95       	ret

000021de <vTaskSwitchContext>:
    21de:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <uxSchedulerSuspended>
    21e2:	88 23       	and	r24, r24
    21e4:	21 f0       	breq	.+8      	; 0x21ee <vTaskSwitchContext+0x10>
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <xYieldPending>
    21ec:	08 95       	ret
    21ee:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <xYieldPending>
    21f2:	a0 91 f8 03 	lds	r26, 0x03F8	; 0x8003f8 <pxCurrentTCB>
    21f6:	b0 91 f9 03 	lds	r27, 0x03F9	; 0x8003f9 <pxCurrentTCB+0x1>
    21fa:	e0 91 f8 03 	lds	r30, 0x03F8	; 0x8003f8 <pxCurrentTCB>
    21fe:	f0 91 f9 03 	lds	r31, 0x03F9	; 0x8003f9 <pxCurrentTCB+0x1>
    2202:	2d 91       	ld	r18, X+
    2204:	3c 91       	ld	r19, X
    2206:	87 89       	ldd	r24, Z+23	; 0x17
    2208:	90 8d       	ldd	r25, Z+24	; 0x18
    220a:	82 17       	cp	r24, r18
    220c:	93 07       	cpc	r25, r19
    220e:	58 f0       	brcs	.+22     	; 0x2226 <__stack+0x27>
    2210:	60 91 f8 03 	lds	r22, 0x03F8	; 0x8003f8 <pxCurrentTCB>
    2214:	70 91 f9 03 	lds	r23, 0x03F9	; 0x8003f9 <pxCurrentTCB+0x1>
    2218:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <pxCurrentTCB>
    221c:	90 91 f9 03 	lds	r25, 0x03F9	; 0x8003f9 <pxCurrentTCB+0x1>
    2220:	67 5e       	subi	r22, 0xE7	; 231
    2222:	7f 4f       	sbci	r23, 0xFF	; 255
    2224:	6a d3       	rcall	.+1748   	; 0x28fa <vApplicationStackOverflowHook>
    2226:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <uxTopReadyPriority>
    222a:	69 e0       	ldi	r22, 0x09	; 9
    222c:	48 2f       	mov	r20, r24
    222e:	50 e0       	ldi	r21, 0x00	; 0
    2230:	64 9f       	mul	r22, r20
    2232:	90 01       	movw	r18, r0
    2234:	65 9f       	mul	r22, r21
    2236:	30 0d       	add	r19, r0
    2238:	11 24       	eor	r1, r1
    223a:	f9 01       	movw	r30, r18
    223c:	ec 52       	subi	r30, 0x2C	; 44
    223e:	fc 4f       	sbci	r31, 0xFC	; 252
    2240:	90 81       	ld	r25, Z
    2242:	91 11       	cpse	r25, r1
    2244:	02 c0       	rjmp	.+4      	; 0x224a <__stack+0x4b>
    2246:	81 50       	subi	r24, 0x01	; 1
    2248:	f1 cf       	rjmp	.-30     	; 0x222c <__stack+0x2d>
    224a:	a1 81       	ldd	r26, Z+1	; 0x01
    224c:	b2 81       	ldd	r27, Z+2	; 0x02
    224e:	12 96       	adiw	r26, 0x02	; 2
    2250:	6d 91       	ld	r22, X+
    2252:	7c 91       	ld	r23, X
    2254:	13 97       	sbiw	r26, 0x03	; 3
    2256:	72 83       	std	Z+2, r23	; 0x02
    2258:	61 83       	std	Z+1, r22	; 0x01
    225a:	29 52       	subi	r18, 0x29	; 41
    225c:	3c 4f       	sbci	r19, 0xFC	; 252
    225e:	62 17       	cp	r22, r18
    2260:	73 07       	cpc	r23, r19
    2262:	21 f4       	brne	.+8      	; 0x226c <__stack+0x6d>
    2264:	25 81       	ldd	r18, Z+5	; 0x05
    2266:	36 81       	ldd	r19, Z+6	; 0x06
    2268:	32 83       	std	Z+2, r19	; 0x02
    226a:	21 83       	std	Z+1, r18	; 0x01
    226c:	99 e0       	ldi	r25, 0x09	; 9
    226e:	94 9f       	mul	r25, r20
    2270:	f0 01       	movw	r30, r0
    2272:	95 9f       	mul	r25, r21
    2274:	f0 0d       	add	r31, r0
    2276:	11 24       	eor	r1, r1
    2278:	ec 52       	subi	r30, 0x2C	; 44
    227a:	fc 4f       	sbci	r31, 0xFC	; 252
    227c:	01 80       	ldd	r0, Z+1	; 0x01
    227e:	f2 81       	ldd	r31, Z+2	; 0x02
    2280:	e0 2d       	mov	r30, r0
    2282:	26 81       	ldd	r18, Z+6	; 0x06
    2284:	37 81       	ldd	r19, Z+7	; 0x07
    2286:	30 93 f9 03 	sts	0x03F9, r19	; 0x8003f9 <pxCurrentTCB+0x1>
    228a:	20 93 f8 03 	sts	0x03F8, r18	; 0x8003f8 <pxCurrentTCB>
    228e:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <uxTopReadyPriority>
    2292:	08 95       	ret

00002294 <vTaskPlaceOnEventList>:
    2294:	cf 93       	push	r28
    2296:	df 93       	push	r29
    2298:	eb 01       	movw	r28, r22
    229a:	60 91 f8 03 	lds	r22, 0x03F8	; 0x8003f8 <pxCurrentTCB>
    229e:	70 91 f9 03 	lds	r23, 0x03F9	; 0x8003f9 <pxCurrentTCB+0x1>
    22a2:	64 5f       	subi	r22, 0xF4	; 244
    22a4:	7f 4f       	sbci	r23, 0xFF	; 255
    22a6:	9e d3       	rcall	.+1852   	; 0x29e4 <vListInsert>
    22a8:	61 e0       	ldi	r22, 0x01	; 1
    22aa:	ce 01       	movw	r24, r28
    22ac:	df 91       	pop	r29
    22ae:	cf 91       	pop	r28
    22b0:	eb cb       	rjmp	.-2090   	; 0x1a88 <prvAddCurrentTaskToDelayedList>

000022b2 <vTaskPlaceOnEventListRestricted>:
    22b2:	0f 93       	push	r16
    22b4:	1f 93       	push	r17
    22b6:	cf 93       	push	r28
    22b8:	df 93       	push	r29
    22ba:	fc 01       	movw	r30, r24
    22bc:	8b 01       	movw	r16, r22
    22be:	a1 81       	ldd	r26, Z+1	; 0x01
    22c0:	b2 81       	ldd	r27, Z+2	; 0x02
    22c2:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <pxCurrentTCB>
    22c6:	90 91 f9 03 	lds	r25, 0x03F9	; 0x8003f9 <pxCurrentTCB+0x1>
    22ca:	ec 01       	movw	r28, r24
    22cc:	bf 87       	std	Y+15, r27	; 0x0f
    22ce:	ae 87       	std	Y+14, r26	; 0x0e
    22d0:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <pxCurrentTCB>
    22d4:	90 91 f9 03 	lds	r25, 0x03F9	; 0x8003f9 <pxCurrentTCB+0x1>
    22d8:	14 96       	adiw	r26, 0x04	; 4
    22da:	2d 91       	ld	r18, X+
    22dc:	3c 91       	ld	r19, X
    22de:	15 97       	sbiw	r26, 0x05	; 5
    22e0:	ec 01       	movw	r28, r24
    22e2:	39 8b       	std	Y+17, r19	; 0x11
    22e4:	28 8b       	std	Y+16, r18	; 0x10
    22e6:	20 91 f8 03 	lds	r18, 0x03F8	; 0x8003f8 <pxCurrentTCB>
    22ea:	30 91 f9 03 	lds	r19, 0x03F9	; 0x8003f9 <pxCurrentTCB+0x1>
    22ee:	14 96       	adiw	r26, 0x04	; 4
    22f0:	8d 91       	ld	r24, X+
    22f2:	9c 91       	ld	r25, X
    22f4:	15 97       	sbiw	r26, 0x05	; 5
    22f6:	24 5f       	subi	r18, 0xF4	; 244
    22f8:	3f 4f       	sbci	r19, 0xFF	; 255
    22fa:	ec 01       	movw	r28, r24
    22fc:	3b 83       	std	Y+3, r19	; 0x03
    22fe:	2a 83       	std	Y+2, r18	; 0x02
    2300:	20 91 f8 03 	lds	r18, 0x03F8	; 0x8003f8 <pxCurrentTCB>
    2304:	30 91 f9 03 	lds	r19, 0x03F9	; 0x8003f9 <pxCurrentTCB+0x1>
    2308:	24 5f       	subi	r18, 0xF4	; 244
    230a:	3f 4f       	sbci	r19, 0xFF	; 255
    230c:	15 96       	adiw	r26, 0x05	; 5
    230e:	3c 93       	st	X, r19
    2310:	2e 93       	st	-X, r18
    2312:	14 97       	sbiw	r26, 0x04	; 4
    2314:	a0 91 f8 03 	lds	r26, 0x03F8	; 0x8003f8 <pxCurrentTCB>
    2318:	b0 91 f9 03 	lds	r27, 0x03F9	; 0x8003f9 <pxCurrentTCB+0x1>
    231c:	55 96       	adiw	r26, 0x15	; 21
    231e:	fc 93       	st	X, r31
    2320:	ee 93       	st	-X, r30
    2322:	54 97       	sbiw	r26, 0x14	; 20
    2324:	90 81       	ld	r25, Z
    2326:	9f 5f       	subi	r25, 0xFF	; 255
    2328:	90 83       	st	Z, r25
    232a:	44 23       	and	r20, r20
    232c:	11 f0       	breq	.+4      	; 0x2332 <vTaskPlaceOnEventListRestricted+0x80>
    232e:	0f ef       	ldi	r16, 0xFF	; 255
    2330:	1f ef       	ldi	r17, 0xFF	; 255
    2332:	64 2f       	mov	r22, r20
    2334:	c8 01       	movw	r24, r16
    2336:	df 91       	pop	r29
    2338:	cf 91       	pop	r28
    233a:	1f 91       	pop	r17
    233c:	0f 91       	pop	r16
    233e:	a4 cb       	rjmp	.-2232   	; 0x1a88 <prvAddCurrentTaskToDelayedList>

00002340 <xTaskRemoveFromEventList>:
    2340:	cf 93       	push	r28
    2342:	df 93       	push	r29
    2344:	dc 01       	movw	r26, r24
    2346:	15 96       	adiw	r26, 0x05	; 5
    2348:	ed 91       	ld	r30, X+
    234a:	fc 91       	ld	r31, X
    234c:	16 97       	sbiw	r26, 0x06	; 6
    234e:	06 80       	ldd	r0, Z+6	; 0x06
    2350:	f7 81       	ldd	r31, Z+7	; 0x07
    2352:	e0 2d       	mov	r30, r0
    2354:	a4 89       	ldd	r26, Z+20	; 0x14
    2356:	b5 89       	ldd	r27, Z+21	; 0x15
    2358:	86 85       	ldd	r24, Z+14	; 0x0e
    235a:	97 85       	ldd	r25, Z+15	; 0x0f
    235c:	20 89       	ldd	r18, Z+16	; 0x10
    235e:	31 89       	ldd	r19, Z+17	; 0x11
    2360:	ec 01       	movw	r28, r24
    2362:	3d 83       	std	Y+5, r19	; 0x05
    2364:	2c 83       	std	Y+4, r18	; 0x04
    2366:	c0 89       	ldd	r28, Z+16	; 0x10
    2368:	d1 89       	ldd	r29, Z+17	; 0x11
    236a:	9b 83       	std	Y+3, r25	; 0x03
    236c:	8a 83       	std	Y+2, r24	; 0x02
    236e:	cf 01       	movw	r24, r30
    2370:	0c 96       	adiw	r24, 0x0c	; 12
    2372:	11 96       	adiw	r26, 0x01	; 1
    2374:	2d 91       	ld	r18, X+
    2376:	3c 91       	ld	r19, X
    2378:	12 97       	sbiw	r26, 0x02	; 2
    237a:	28 17       	cp	r18, r24
    237c:	39 07       	cpc	r19, r25
    237e:	21 f4       	brne	.+8      	; 0x2388 <xTaskRemoveFromEventList+0x48>
    2380:	12 96       	adiw	r26, 0x02	; 2
    2382:	dc 93       	st	X, r29
    2384:	ce 93       	st	-X, r28
    2386:	11 97       	sbiw	r26, 0x01	; 1
    2388:	15 8a       	std	Z+21, r1	; 0x15
    238a:	14 8a       	std	Z+20, r1	; 0x14
    238c:	2c 91       	ld	r18, X
    238e:	21 50       	subi	r18, 0x01	; 1
    2390:	2c 93       	st	X, r18
    2392:	20 91 95 03 	lds	r18, 0x0395	; 0x800395 <uxSchedulerSuspended>
    2396:	21 11       	cpse	r18, r1
    2398:	4f c0       	rjmp	.+158    	; 0x2438 <xTaskRemoveFromEventList+0xf8>
    239a:	a2 85       	ldd	r26, Z+10	; 0x0a
    239c:	b3 85       	ldd	r27, Z+11	; 0x0b
    239e:	84 81       	ldd	r24, Z+4	; 0x04
    23a0:	95 81       	ldd	r25, Z+5	; 0x05
    23a2:	26 81       	ldd	r18, Z+6	; 0x06
    23a4:	37 81       	ldd	r19, Z+7	; 0x07
    23a6:	ec 01       	movw	r28, r24
    23a8:	3d 83       	std	Y+5, r19	; 0x05
    23aa:	2c 83       	std	Y+4, r18	; 0x04
    23ac:	c6 81       	ldd	r28, Z+6	; 0x06
    23ae:	d7 81       	ldd	r29, Z+7	; 0x07
    23b0:	9b 83       	std	Y+3, r25	; 0x03
    23b2:	8a 83       	std	Y+2, r24	; 0x02
    23b4:	9f 01       	movw	r18, r30
    23b6:	2e 5f       	subi	r18, 0xFE	; 254
    23b8:	3f 4f       	sbci	r19, 0xFF	; 255
    23ba:	11 96       	adiw	r26, 0x01	; 1
    23bc:	8d 91       	ld	r24, X+
    23be:	9c 91       	ld	r25, X
    23c0:	12 97       	sbiw	r26, 0x02	; 2
    23c2:	82 17       	cp	r24, r18
    23c4:	93 07       	cpc	r25, r19
    23c6:	21 f4       	brne	.+8      	; 0x23d0 <xTaskRemoveFromEventList+0x90>
    23c8:	12 96       	adiw	r26, 0x02	; 2
    23ca:	dc 93       	st	X, r29
    23cc:	ce 93       	st	-X, r28
    23ce:	11 97       	sbiw	r26, 0x01	; 1
    23d0:	13 86       	std	Z+11, r1	; 0x0b
    23d2:	12 86       	std	Z+10, r1	; 0x0a
    23d4:	8c 91       	ld	r24, X
    23d6:	81 50       	subi	r24, 0x01	; 1
    23d8:	8c 93       	st	X, r24
    23da:	a6 89       	ldd	r26, Z+22	; 0x16
    23dc:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <uxTopReadyPriority>
    23e0:	8a 17       	cp	r24, r26
    23e2:	10 f4       	brcc	.+4      	; 0x23e8 <xTaskRemoveFromEventList+0xa8>
    23e4:	a0 93 9e 03 	sts	0x039E, r26	; 0x80039e <uxTopReadyPriority>
    23e8:	89 e0       	ldi	r24, 0x09	; 9
    23ea:	8a 9f       	mul	r24, r26
    23ec:	d0 01       	movw	r26, r0
    23ee:	11 24       	eor	r1, r1
    23f0:	ac 52       	subi	r26, 0x2C	; 44
    23f2:	bc 4f       	sbci	r27, 0xFC	; 252
    23f4:	11 96       	adiw	r26, 0x01	; 1
    23f6:	0d 90       	ld	r0, X+
    23f8:	bc 91       	ld	r27, X
    23fa:	a0 2d       	mov	r26, r0
    23fc:	b5 83       	std	Z+5, r27	; 0x05
    23fe:	a4 83       	std	Z+4, r26	; 0x04
    2400:	14 96       	adiw	r26, 0x04	; 4
    2402:	4d 91       	ld	r20, X+
    2404:	5c 91       	ld	r21, X
    2406:	15 97       	sbiw	r26, 0x05	; 5
    2408:	57 83       	std	Z+7, r21	; 0x07
    240a:	46 83       	std	Z+6, r20	; 0x06
    240c:	14 96       	adiw	r26, 0x04	; 4
    240e:	cd 91       	ld	r28, X+
    2410:	dc 91       	ld	r29, X
    2412:	15 97       	sbiw	r26, 0x05	; 5
    2414:	3b 83       	std	Y+3, r19	; 0x03
    2416:	2a 83       	std	Y+2, r18	; 0x02
    2418:	15 96       	adiw	r26, 0x05	; 5
    241a:	3c 93       	st	X, r19
    241c:	2e 93       	st	-X, r18
    241e:	14 97       	sbiw	r26, 0x04	; 4
    2420:	a6 89       	ldd	r26, Z+22	; 0x16
    2422:	8a 9f       	mul	r24, r26
    2424:	d0 01       	movw	r26, r0
    2426:	11 24       	eor	r1, r1
    2428:	ac 52       	subi	r26, 0x2C	; 44
    242a:	bc 4f       	sbci	r27, 0xFC	; 252
    242c:	b3 87       	std	Z+11, r27	; 0x0b
    242e:	a2 87       	std	Z+10, r26	; 0x0a
    2430:	8c 91       	ld	r24, X
    2432:	8f 5f       	subi	r24, 0xFF	; 255
    2434:	8c 93       	st	X, r24
    2436:	1f c0       	rjmp	.+62     	; 0x2476 <xTaskRemoveFromEventList+0x136>
    2438:	a0 91 b6 03 	lds	r26, 0x03B6	; 0x8003b6 <xPendingReadyList+0x1>
    243c:	b0 91 b7 03 	lds	r27, 0x03B7	; 0x8003b7 <xPendingReadyList+0x2>
    2440:	b7 87       	std	Z+15, r27	; 0x0f
    2442:	a6 87       	std	Z+14, r26	; 0x0e
    2444:	14 96       	adiw	r26, 0x04	; 4
    2446:	2d 91       	ld	r18, X+
    2448:	3c 91       	ld	r19, X
    244a:	15 97       	sbiw	r26, 0x05	; 5
    244c:	31 8b       	std	Z+17, r19	; 0x11
    244e:	20 8b       	std	Z+16, r18	; 0x10
    2450:	14 96       	adiw	r26, 0x04	; 4
    2452:	cd 91       	ld	r28, X+
    2454:	dc 91       	ld	r29, X
    2456:	15 97       	sbiw	r26, 0x05	; 5
    2458:	9b 83       	std	Y+3, r25	; 0x03
    245a:	8a 83       	std	Y+2, r24	; 0x02
    245c:	15 96       	adiw	r26, 0x05	; 5
    245e:	9c 93       	st	X, r25
    2460:	8e 93       	st	-X, r24
    2462:	14 97       	sbiw	r26, 0x04	; 4
    2464:	85 eb       	ldi	r24, 0xB5	; 181
    2466:	93 e0       	ldi	r25, 0x03	; 3
    2468:	95 8b       	std	Z+21, r25	; 0x15
    246a:	84 8b       	std	Z+20, r24	; 0x14
    246c:	80 91 b5 03 	lds	r24, 0x03B5	; 0x8003b5 <xPendingReadyList>
    2470:	8f 5f       	subi	r24, 0xFF	; 255
    2472:	80 93 b5 03 	sts	0x03B5, r24	; 0x8003b5 <xPendingReadyList>
    2476:	a0 91 f8 03 	lds	r26, 0x03F8	; 0x8003f8 <pxCurrentTCB>
    247a:	b0 91 f9 03 	lds	r27, 0x03F9	; 0x8003f9 <pxCurrentTCB+0x1>
    247e:	96 89       	ldd	r25, Z+22	; 0x16
    2480:	56 96       	adiw	r26, 0x16	; 22
    2482:	8c 91       	ld	r24, X
    2484:	89 17       	cp	r24, r25
    2486:	20 f4       	brcc	.+8      	; 0x2490 <xTaskRemoveFromEventList+0x150>
    2488:	81 e0       	ldi	r24, 0x01	; 1
    248a:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <xYieldPending>
    248e:	01 c0       	rjmp	.+2      	; 0x2492 <xTaskRemoveFromEventList+0x152>
    2490:	80 e0       	ldi	r24, 0x00	; 0
    2492:	df 91       	pop	r29
    2494:	cf 91       	pop	r28
    2496:	08 95       	ret

00002498 <vTaskInternalSetTimeOutState>:
    2498:	20 91 99 03 	lds	r18, 0x0399	; 0x800399 <xNumOfOverflows>
    249c:	fc 01       	movw	r30, r24
    249e:	20 83       	st	Z, r18
    24a0:	20 91 9f 03 	lds	r18, 0x039F	; 0x80039f <xTickCount>
    24a4:	30 91 a0 03 	lds	r19, 0x03A0	; 0x8003a0 <xTickCount+0x1>
    24a8:	32 83       	std	Z+2, r19	; 0x02
    24aa:	21 83       	std	Z+1, r18	; 0x01
    24ac:	08 95       	ret

000024ae <xTaskCheckForTimeOut>:
    24ae:	cf 93       	push	r28
    24b0:	df 93       	push	r29
    24b2:	0f b6       	in	r0, 0x3f	; 63
    24b4:	f8 94       	cli
    24b6:	0f 92       	push	r0
    24b8:	40 91 9f 03 	lds	r20, 0x039F	; 0x80039f <xTickCount>
    24bc:	50 91 a0 03 	lds	r21, 0x03A0	; 0x8003a0 <xTickCount+0x1>
    24c0:	db 01       	movw	r26, r22
    24c2:	2d 91       	ld	r18, X+
    24c4:	3c 91       	ld	r19, X
    24c6:	2f 3f       	cpi	r18, 0xFF	; 255
    24c8:	bf ef       	ldi	r27, 0xFF	; 255
    24ca:	3b 07       	cpc	r19, r27
    24cc:	d9 f0       	breq	.+54     	; 0x2504 <xTaskCheckForTimeOut+0x56>
    24ce:	ec 01       	movw	r28, r24
    24d0:	e9 81       	ldd	r30, Y+1	; 0x01
    24d2:	fa 81       	ldd	r31, Y+2	; 0x02
    24d4:	a0 91 99 03 	lds	r26, 0x0399	; 0x800399 <xNumOfOverflows>
    24d8:	b8 81       	ld	r27, Y
    24da:	ba 17       	cp	r27, r26
    24dc:	41 f0       	breq	.+16     	; 0x24ee <xTaskCheckForTimeOut+0x40>
    24de:	4e 17       	cp	r20, r30
    24e0:	5f 07       	cpc	r21, r31
    24e2:	28 f0       	brcs	.+10     	; 0x24ee <xTaskCheckForTimeOut+0x40>
    24e4:	fb 01       	movw	r30, r22
    24e6:	11 82       	std	Z+1, r1	; 0x01
    24e8:	10 82       	st	Z, r1
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	0c c0       	rjmp	.+24     	; 0x2506 <xTaskCheckForTimeOut+0x58>
    24ee:	4e 1b       	sub	r20, r30
    24f0:	5f 0b       	sbc	r21, r31
    24f2:	42 17       	cp	r20, r18
    24f4:	53 07       	cpc	r21, r19
    24f6:	b0 f7       	brcc	.-20     	; 0x24e4 <xTaskCheckForTimeOut+0x36>
    24f8:	fb 01       	movw	r30, r22
    24fa:	24 1b       	sub	r18, r20
    24fc:	35 0b       	sbc	r19, r21
    24fe:	31 83       	std	Z+1, r19	; 0x01
    2500:	20 83       	st	Z, r18
    2502:	ca df       	rcall	.-108    	; 0x2498 <vTaskInternalSetTimeOutState>
    2504:	80 e0       	ldi	r24, 0x00	; 0
    2506:	0f 90       	pop	r0
    2508:	0f be       	out	0x3f, r0	; 63
    250a:	df 91       	pop	r29
    250c:	cf 91       	pop	r28
    250e:	08 95       	ret

00002510 <vTaskMissedYield>:
    2510:	81 e0       	ldi	r24, 0x01	; 1
    2512:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <xYieldPending>
    2516:	08 95       	ret

00002518 <xTaskGetSchedulerState>:
    2518:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <xSchedulerRunning>
    251c:	88 23       	and	r24, r24
    251e:	31 f0       	breq	.+12     	; 0x252c <xTaskGetSchedulerState+0x14>
    2520:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <uxSchedulerSuspended>
    2524:	88 23       	and	r24, r24
    2526:	21 f0       	breq	.+8      	; 0x2530 <xTaskGetSchedulerState+0x18>
    2528:	80 e0       	ldi	r24, 0x00	; 0
    252a:	08 95       	ret
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	08 95       	ret
    2530:	82 e0       	ldi	r24, 0x02	; 2
    2532:	08 95       	ret

00002534 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    2534:	0f 93       	push	r16
    2536:	1f 93       	push	r17
    2538:	cf 93       	push	r28
    253a:	df 93       	push	r29
    253c:	ec 01       	movw	r28, r24
        TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
        BaseType_t xReturn = pdFALSE;

        if( pxMutexHolder != NULL )
    253e:	89 2b       	or	r24, r25
    2540:	11 f4       	brne	.+4      	; 0x2546 <xTaskPriorityDisinherit+0x12>
#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
        TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
        BaseType_t xReturn = pdFALSE;
    2542:	80 e0       	ldi	r24, 0x00	; 0
    2544:	43 c0       	rjmp	.+134    	; 0x25cc <xTaskPriorityDisinherit+0x98>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
    2546:	8a a1       	ldd	r24, Y+34	; 0x22
    2548:	81 50       	subi	r24, 0x01	; 1
    254a:	8a a3       	std	Y+34, r24	; 0x22

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    254c:	2e 89       	ldd	r18, Y+22	; 0x16
    254e:	99 a1       	ldd	r25, Y+33	; 0x21
    2550:	29 17       	cp	r18, r25
    2552:	b9 f3       	breq	.-18     	; 0x2542 <xTaskPriorityDisinherit+0xe>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    2554:	81 11       	cpse	r24, r1
    2556:	f5 cf       	rjmp	.-22     	; 0x2542 <xTaskPriorityDisinherit+0xe>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2558:	8e 01       	movw	r16, r28
    255a:	0e 5f       	subi	r16, 0xFE	; 254
    255c:	1f 4f       	sbci	r17, 0xFF	; 255
    255e:	c8 01       	movw	r24, r16
    2560:	79 d2       	rcall	.+1266   	; 0x2a54 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
    2562:	89 a1       	ldd	r24, Y+33	; 0x21
    2564:	8e 8b       	std	Y+22, r24	; 0x16

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2566:	48 2f       	mov	r20, r24
    2568:	50 e0       	ldi	r21, 0x00	; 0
    256a:	24 e0       	ldi	r18, 0x04	; 4
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	24 1b       	sub	r18, r20
    2570:	35 0b       	sbc	r19, r21
    2572:	3d 87       	std	Y+13, r19	; 0x0d
    2574:	2c 87       	std	Y+12, r18	; 0x0c
                    prvAddTaskToReadyList( pxTCB );
    2576:	90 91 9e 03 	lds	r25, 0x039E	; 0x80039e <uxTopReadyPriority>
    257a:	98 17       	cp	r25, r24
    257c:	10 f4       	brcc	.+4      	; 0x2582 <xTaskPriorityDisinherit+0x4e>
    257e:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <uxTopReadyPriority>
    2582:	89 e0       	ldi	r24, 0x09	; 9
    2584:	84 9f       	mul	r24, r20
    2586:	f0 01       	movw	r30, r0
    2588:	85 9f       	mul	r24, r21
    258a:	f0 0d       	add	r31, r0
    258c:	11 24       	eor	r1, r1
    258e:	ec 52       	subi	r30, 0x2C	; 44
    2590:	fc 4f       	sbci	r31, 0xFC	; 252
    2592:	01 80       	ldd	r0, Z+1	; 0x01
    2594:	f2 81       	ldd	r31, Z+2	; 0x02
    2596:	e0 2d       	mov	r30, r0
    2598:	fd 83       	std	Y+5, r31	; 0x05
    259a:	ec 83       	std	Y+4, r30	; 0x04
    259c:	24 81       	ldd	r18, Z+4	; 0x04
    259e:	35 81       	ldd	r19, Z+5	; 0x05
    25a0:	3f 83       	std	Y+7, r19	; 0x07
    25a2:	2e 83       	std	Y+6, r18	; 0x06
    25a4:	a4 81       	ldd	r26, Z+4	; 0x04
    25a6:	b5 81       	ldd	r27, Z+5	; 0x05
    25a8:	13 96       	adiw	r26, 0x03	; 3
    25aa:	1c 93       	st	X, r17
    25ac:	0e 93       	st	-X, r16
    25ae:	12 97       	sbiw	r26, 0x02	; 2
    25b0:	15 83       	std	Z+5, r17	; 0x05
    25b2:	04 83       	std	Z+4, r16	; 0x04
    25b4:	ee 89       	ldd	r30, Y+22	; 0x16
    25b6:	8e 9f       	mul	r24, r30
    25b8:	f0 01       	movw	r30, r0
    25ba:	11 24       	eor	r1, r1
    25bc:	ec 52       	subi	r30, 0x2C	; 44
    25be:	fc 4f       	sbci	r31, 0xFC	; 252
    25c0:	fb 87       	std	Y+11, r31	; 0x0b
    25c2:	ea 87       	std	Y+10, r30	; 0x0a
    25c4:	80 81       	ld	r24, Z
    25c6:	8f 5f       	subi	r24, 0xFF	; 255
    25c8:	80 83       	st	Z, r24
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
    25ca:	81 e0       	ldi	r24, 0x01	; 1
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    25cc:	df 91       	pop	r29
    25ce:	cf 91       	pop	r28
    25d0:	1f 91       	pop	r17
    25d2:	0f 91       	pop	r16
    25d4:	08 95       	ret

000025d6 <prvCheckForValidListAndQueue>:
        pxOverflowTimerList = pxTemp;
    }
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
    25d6:	0f 93       	push	r16
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
    25d8:	0f b6       	in	r0, 0x3f	; 63
    25da:	f8 94       	cli
    25dc:	0f 92       	push	r0
        {
            if( xTimerQueue == NULL )
    25de:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <xTimerQueue>
    25e2:	90 91 50 04 	lds	r25, 0x0450	; 0x800450 <xTimerQueue+0x1>
    25e6:	89 2b       	or	r24, r25
    25e8:	f1 f4       	brne	.+60     	; 0x2626 <prvCheckForValidListAndQueue+0x50>
            {
                vListInitialise( &xActiveTimerList1 );
    25ea:	8e e5       	ldi	r24, 0x5E	; 94
    25ec:	94 e0       	ldi	r25, 0x04	; 4
    25ee:	e8 d1       	rcall	.+976    	; 0x29c0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
    25f0:	85 e5       	ldi	r24, 0x55	; 85
    25f2:	94 e0       	ldi	r25, 0x04	; 4
    25f4:	e5 d1       	rcall	.+970    	; 0x29c0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
    25f6:	8e e5       	ldi	r24, 0x5E	; 94
    25f8:	94 e0       	ldi	r25, 0x04	; 4
    25fa:	90 93 54 04 	sts	0x0454, r25	; 0x800454 <pxCurrentTimerList+0x1>
    25fe:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <pxCurrentTimerList>
                pxOverflowTimerList = &xActiveTimerList2;
    2602:	85 e5       	ldi	r24, 0x55	; 85
    2604:	94 e0       	ldi	r25, 0x04	; 4
    2606:	90 93 52 04 	sts	0x0452, r25	; 0x800452 <pxOverflowTimerList+0x1>
    260a:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <pxOverflowTimerList>
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
    260e:	00 e0       	ldi	r16, 0x00	; 0
    2610:	2a ef       	ldi	r18, 0xFA	; 250
    2612:	33 e0       	ldi	r19, 0x03	; 3
    2614:	49 e1       	ldi	r20, 0x19	; 25
    2616:	54 e0       	ldi	r21, 0x04	; 4
    2618:	65 e0       	ldi	r22, 0x05	; 5
    261a:	8a e0       	ldi	r24, 0x0A	; 10
    261c:	a5 d8       	rcall	.-3766   	; 0x1768 <xQueueGenericCreateStatic>
    261e:	90 93 50 04 	sts	0x0450, r25	; 0x800450 <xTimerQueue+0x1>
    2622:	80 93 4f 04 	sts	0x044F, r24	; 0x80044f <xTimerQueue>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    2626:	0f 90       	pop	r0
    2628:	0f be       	out	0x3f, r0	; 63
    }
    262a:	0f 91       	pop	r16
    262c:	08 95       	ret

0000262e <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
    262e:	fc 01       	movw	r30, r24
        BaseType_t xProcessTimerNow = pdFALSE;

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    2630:	73 83       	std	Z+3, r23	; 0x03
    2632:	62 83       	std	Z+2, r22	; 0x02
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2634:	91 87       	std	Z+9, r25	; 0x09
    2636:	80 87       	std	Z+8, r24	; 0x08

        if( xNextExpiryTime <= xTimeNow )
    2638:	46 17       	cp	r20, r22
    263a:	57 07       	cpc	r21, r23
    263c:	78 f0       	brcs	.+30     	; 0x265c <prvInsertTimerInActiveList+0x2e>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    263e:	42 1b       	sub	r20, r18
    2640:	53 0b       	sbc	r21, r19
    2642:	84 85       	ldd	r24, Z+12	; 0x0c
    2644:	95 85       	ldd	r25, Z+13	; 0x0d
    2646:	48 17       	cp	r20, r24
    2648:	59 07       	cpc	r21, r25
    264a:	c0 f4       	brcc	.+48     	; 0x267c <prvInsertTimerInActiveList+0x4e>
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    264c:	bf 01       	movw	r22, r30
    264e:	6e 5f       	subi	r22, 0xFE	; 254
    2650:	7f 4f       	sbci	r23, 0xFF	; 255
    2652:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <pxOverflowTimerList>
    2656:	90 91 52 04 	lds	r25, 0x0452	; 0x800452 <pxOverflowTimerList+0x1>
    265a:	0d c0       	rjmp	.+26     	; 0x2676 <prvInsertTimerInActiveList+0x48>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    265c:	42 17       	cp	r20, r18
    265e:	53 07       	cpc	r21, r19
    2660:	18 f4       	brcc	.+6      	; 0x2668 <prvInsertTimerInActiveList+0x3a>
    2662:	62 17       	cp	r22, r18
    2664:	73 07       	cpc	r23, r19
    2666:	50 f4       	brcc	.+20     	; 0x267c <prvInsertTimerInActiveList+0x4e>
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2668:	bf 01       	movw	r22, r30
    266a:	6e 5f       	subi	r22, 0xFE	; 254
    266c:	7f 4f       	sbci	r23, 0xFF	; 255
    266e:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <pxCurrentTimerList>
    2672:	90 91 54 04 	lds	r25, 0x0454	; 0x800454 <pxCurrentTimerList+0x1>
    2676:	b6 d1       	rcall	.+876    	; 0x29e4 <vListInsert>
    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
        BaseType_t xProcessTimerNow = pdFALSE;
    2678:	80 e0       	ldi	r24, 0x00	; 0
    267a:	08 95       	ret
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
    267c:	81 e0       	ldi	r24, 0x01	; 1
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
            }
        }

        return xProcessTimerNow;
    }
    267e:	08 95       	ret

00002680 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
    2680:	ef 92       	push	r14
    2682:	ff 92       	push	r15
    2684:	0f 93       	push	r16
    2686:	1f 93       	push	r17
    2688:	cf 93       	push	r28
    268a:	df 93       	push	r29
    268c:	ec 01       	movw	r28, r24
    268e:	8b 01       	movw	r16, r22
    2690:	7a 01       	movw	r14, r20
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
    2692:	6c 85       	ldd	r22, Y+12	; 0x0c
    2694:	7d 85       	ldd	r23, Y+13	; 0x0d
    2696:	60 0f       	add	r22, r16
    2698:	71 1f       	adc	r23, r17
    269a:	98 01       	movw	r18, r16
    269c:	a7 01       	movw	r20, r14
    269e:	ce 01       	movw	r24, r28
    26a0:	c6 df       	rcall	.-116    	; 0x262e <prvInsertTimerInActiveList>
    26a2:	88 23       	and	r24, r24
    26a4:	49 f0       	breq	.+18     	; 0x26b8 <prvReloadTimer+0x38>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
    26a6:	8c 85       	ldd	r24, Y+12	; 0x0c
    26a8:	9d 85       	ldd	r25, Y+13	; 0x0d
    26aa:	08 0f       	add	r16, r24
    26ac:	19 1f       	adc	r17, r25

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    26ae:	e8 89       	ldd	r30, Y+16	; 0x10
    26b0:	f9 89       	ldd	r31, Y+17	; 0x11
    26b2:	ce 01       	movw	r24, r28
    26b4:	19 95       	eicall
    26b6:	ed cf       	rjmp	.-38     	; 0x2692 <prvReloadTimer+0x12>
        }
    }
    26b8:	df 91       	pop	r29
    26ba:	cf 91       	pop	r28
    26bc:	1f 91       	pop	r17
    26be:	0f 91       	pop	r16
    26c0:	ff 90       	pop	r15
    26c2:	ef 90       	pop	r14
    26c4:	08 95       	ret

000026c6 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    26c6:	ef 92       	push	r14
    26c8:	ff 92       	push	r15
    26ca:	0f 93       	push	r16
    26cc:	1f 93       	push	r17
    26ce:	cf 93       	push	r28
    26d0:	df 93       	push	r29
    26d2:	8c 01       	movw	r16, r24
    26d4:	7b 01       	movw	r14, r22
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    26d6:	e0 91 53 04 	lds	r30, 0x0453	; 0x800453 <pxCurrentTimerList>
    26da:	f0 91 54 04 	lds	r31, 0x0454	; 0x800454 <pxCurrentTimerList+0x1>
    26de:	05 80       	ldd	r0, Z+5	; 0x05
    26e0:	f6 81       	ldd	r31, Z+6	; 0x06
    26e2:	e0 2d       	mov	r30, r0
    26e4:	c6 81       	ldd	r28, Z+6	; 0x06
    26e6:	d7 81       	ldd	r29, Z+7	; 0x07

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    26e8:	ce 01       	movw	r24, r28
    26ea:	02 96       	adiw	r24, 0x02	; 2
    26ec:	b3 d1       	rcall	.+870    	; 0x2a54 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    26ee:	8a 89       	ldd	r24, Y+18	; 0x12
    26f0:	82 ff       	sbrs	r24, 2
    26f2:	05 c0       	rjmp	.+10     	; 0x26fe <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
    26f4:	a7 01       	movw	r20, r14
    26f6:	b8 01       	movw	r22, r16
    26f8:	ce 01       	movw	r24, r28
    26fa:	c2 df       	rcall	.-124    	; 0x2680 <prvReloadTimer>
    26fc:	02 c0       	rjmp	.+4      	; 0x2702 <prvProcessExpiredTimer+0x3c>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    26fe:	8e 7f       	andi	r24, 0xFE	; 254
    2700:	8a 8b       	std	Y+18, r24	; 0x12
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2702:	e8 89       	ldd	r30, Y+16	; 0x10
    2704:	f9 89       	ldd	r31, Y+17	; 0x11
    2706:	ce 01       	movw	r24, r28
    }
    2708:	df 91       	pop	r29
    270a:	cf 91       	pop	r28
    270c:	1f 91       	pop	r17
    270e:	0f 91       	pop	r16
    2710:	ff 90       	pop	r15
    2712:	ef 90       	pop	r14
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2714:	19 94       	eijmp

00002716 <prvSwitchTimerLists>:

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2716:	e0 91 53 04 	lds	r30, 0x0453	; 0x800453 <pxCurrentTimerList>
    271a:	f0 91 54 04 	lds	r31, 0x0454	; 0x800454 <pxCurrentTimerList+0x1>
    271e:	80 81       	ld	r24, Z
    2720:	88 23       	and	r24, r24
    2722:	49 f0       	breq	.+18     	; 0x2736 <prvSwitchTimerLists+0x20>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2724:	05 80       	ldd	r0, Z+5	; 0x05
    2726:	f6 81       	ldd	r31, Z+6	; 0x06
    2728:	e0 2d       	mov	r30, r0

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
    272a:	6f ef       	ldi	r22, 0xFF	; 255
    272c:	7f ef       	ldi	r23, 0xFF	; 255
    272e:	80 81       	ld	r24, Z
    2730:	91 81       	ldd	r25, Z+1	; 0x01
    2732:	c9 df       	rcall	.-110    	; 0x26c6 <prvProcessExpiredTimer>
    2734:	f0 cf       	rjmp	.-32     	; 0x2716 <prvSwitchTimerLists>
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    2736:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <pxOverflowTimerList>
    273a:	90 91 52 04 	lds	r25, 0x0452	; 0x800452 <pxOverflowTimerList+0x1>
    273e:	90 93 54 04 	sts	0x0454, r25	; 0x800454 <pxCurrentTimerList+0x1>
    2742:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    2746:	f0 93 52 04 	sts	0x0452, r31	; 0x800452 <pxOverflowTimerList+0x1>
    274a:	e0 93 51 04 	sts	0x0451, r30	; 0x800451 <pxOverflowTimerList>
    274e:	08 95       	ret

00002750 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
    2750:	cf 92       	push	r12
    2752:	df 92       	push	r13
    2754:	ef 92       	push	r14
    2756:	ff 92       	push	r15
    2758:	0f 93       	push	r16
    275a:	cf 93       	push	r28
    275c:	df 93       	push	r29
    275e:	00 d0       	rcall	.+0      	; 0x2760 <xTimerCreateTimerTask+0x10>
    2760:	00 d0       	rcall	.+0      	; 0x2762 <xTimerCreateTimerTask+0x12>
    2762:	cd b7       	in	r28, 0x3d	; 61
    2764:	de b7       	in	r29, 0x3e	; 62

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
    2766:	37 df       	rcall	.-402    	; 0x25d6 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
    2768:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <xTimerQueue>
    276c:	90 91 50 04 	lds	r25, 0x0450	; 0x800450 <xTimerQueue+0x1>
    2770:	89 2b       	or	r24, r25
    2772:	19 f1       	breq	.+70     	; 0x27ba <xTimerCreateTimerTask+0x6a>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
    2774:	1e 82       	std	Y+6, r1	; 0x06
    2776:	1d 82       	std	Y+5, r1	; 0x05
                StackType_t * pxTimerTaskStackBuffer = NULL;
    2778:	1c 82       	std	Y+4, r1	; 0x04
    277a:	1b 82       	std	Y+3, r1	; 0x03
                configSTACK_DEPTH_TYPE uxTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &uxTimerTaskStackSize );
    277c:	ae 01       	movw	r20, r28
    277e:	4f 5f       	subi	r20, 0xFF	; 255
    2780:	5f 4f       	sbci	r21, 0xFF	; 255
    2782:	be 01       	movw	r22, r28
    2784:	6d 5f       	subi	r22, 0xFD	; 253
    2786:	7f 4f       	sbci	r23, 0xFF	; 255
    2788:	ce 01       	movw	r24, r28
    278a:	05 96       	adiw	r24, 0x05	; 5
    278c:	d2 d0       	rcall	.+420    	; 0x2932 <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
    278e:	cd 80       	ldd	r12, Y+5	; 0x05
    2790:	de 80       	ldd	r13, Y+6	; 0x06
    2792:	eb 80       	ldd	r14, Y+3	; 0x03
    2794:	fc 80       	ldd	r15, Y+4	; 0x04
    2796:	49 81       	ldd	r20, Y+1	; 0x01
    2798:	5a 81       	ldd	r21, Y+2	; 0x02
    279a:	03 e0       	ldi	r16, 0x03	; 3
    279c:	20 e0       	ldi	r18, 0x00	; 0
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	6e e3       	ldi	r22, 0x3E	; 62
    27a2:	72 e0       	ldi	r23, 0x02	; 2
    27a4:	8f e6       	ldi	r24, 0x6F	; 111
    27a6:	91 e0       	ldi	r25, 0x01	; 1
    27a8:	ef d9       	rcall	.-3106   	; 0x1b88 <xTaskCreateStatic>
    27aa:	9c 01       	movw	r18, r24
    27ac:	90 93 4e 04 	sts	0x044E, r25	; 0x80044e <xTimerTaskHandle+0x1>
    27b0:	80 93 4d 04 	sts	0x044D, r24	; 0x80044d <xTimerTaskHandle>
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
        BaseType_t xReturn = pdFAIL;
    27b4:	81 e0       	ldi	r24, 0x01	; 1
    27b6:	23 2b       	or	r18, r19
    27b8:	09 f4       	brne	.+2      	; 0x27bc <xTimerCreateTimerTask+0x6c>
    27ba:	80 e0       	ldi	r24, 0x00	; 0
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
        return xReturn;
    }
    27bc:	26 96       	adiw	r28, 0x06	; 6
    27be:	0f b6       	in	r0, 0x3f	; 63
    27c0:	f8 94       	cli
    27c2:	de bf       	out	0x3e, r29	; 62
    27c4:	0f be       	out	0x3f, r0	; 63
    27c6:	cd bf       	out	0x3d, r28	; 61
    27c8:	df 91       	pop	r29
    27ca:	cf 91       	pop	r28
    27cc:	0f 91       	pop	r16
    27ce:	ff 90       	pop	r15
    27d0:	ef 90       	pop	r14
    27d2:	df 90       	pop	r13
    27d4:	cf 90       	pop	r12
    27d6:	08 95       	ret

000027d8 <xTimerCreateStatic>:
                                          const TickType_t xTimerPeriodInTicks,
                                          const BaseType_t xAutoReload,
                                          void * const pvTimerID,
                                          TimerCallbackFunction_t pxCallbackFunction,
                                          StaticTimer_t * pxTimerBuffer )
        {
    27d8:	7f 92       	push	r7
    27da:	8f 92       	push	r8
    27dc:	9f 92       	push	r9
    27de:	af 92       	push	r10
    27e0:	bf 92       	push	r11
    27e2:	cf 92       	push	r12
    27e4:	df 92       	push	r13
    27e6:	ef 92       	push	r14
    27e8:	ff 92       	push	r15
    27ea:	0f 93       	push	r16
    27ec:	1f 93       	push	r17
    27ee:	cf 93       	push	r28
    27f0:	df 93       	push	r29
    27f2:	4c 01       	movw	r8, r24
    27f4:	5b 01       	movw	r10, r22
    27f6:	74 2e       	mov	r7, r20
    27f8:	69 01       	movw	r12, r18
    27fa:	e7 01       	movw	r28, r14

            /* A pointer to a StaticTimer_t structure MUST be provided, use it. */
            configASSERT( pxTimerBuffer );
            pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */

            if( pxNewTimer != NULL )
    27fc:	20 97       	sbiw	r28, 0x00	; 0
    27fe:	99 f0       	breq	.+38     	; 0x2826 <xTimerCreateStatic+0x4e>
            {
                /* Timers can be created statically or dynamically so note this
                 * timer was created statically in case it is later deleted.  The
                 * auto-reload bit may get set in prvInitialiseNewTimer(). */
                pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
    2800:	82 e0       	ldi	r24, 0x02	; 2
    2802:	8a 8b       	std	Y+18, r24	; 0x12
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
    2804:	e8 de       	rcall	.-560    	; 0x25d6 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
    2806:	99 82       	std	Y+1, r9	; 0x01
    2808:	88 82       	st	Y, r8
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    280a:	bd 86       	std	Y+13, r11	; 0x0d
    280c:	ac 86       	std	Y+12, r10	; 0x0c
        pxNewTimer->pvTimerID = pvTimerID;
    280e:	df 86       	std	Y+15, r13	; 0x0f
    2810:	ce 86       	std	Y+14, r12	; 0x0e
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    2812:	19 8b       	std	Y+17, r17	; 0x11
    2814:	08 8b       	std	Y+16, r16	; 0x10
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    2816:	c7 01       	movw	r24, r14
    2818:	02 96       	adiw	r24, 0x02	; 2
    281a:	e0 d0       	rcall	.+448    	; 0x29dc <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
    281c:	77 20       	and	r7, r7
    281e:	19 f0       	breq	.+6      	; 0x2826 <xTimerCreateStatic+0x4e>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
    2820:	8a 89       	ldd	r24, Y+18	; 0x12
    2822:	84 60       	ori	r24, 0x04	; 4
    2824:	8a 8b       	std	Y+18, r24	; 0x12

                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
    2826:	ce 01       	movw	r24, r28
    2828:	df 91       	pop	r29
    282a:	cf 91       	pop	r28
    282c:	1f 91       	pop	r17
    282e:	0f 91       	pop	r16
    2830:	ff 90       	pop	r15
    2832:	ef 90       	pop	r14
    2834:	df 90       	pop	r13
    2836:	cf 90       	pop	r12
    2838:	bf 90       	pop	r11
    283a:	af 90       	pop	r10
    283c:	9f 90       	pop	r9
    283e:	8f 90       	pop	r8
    2840:	7f 90       	pop	r7
    2842:	08 95       	ret

00002844 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    2844:	0f 93       	push	r16
    2846:	1f 93       	push	r17
    2848:	cf 93       	push	r28
    284a:	df 93       	push	r29
    284c:	00 d0       	rcall	.+0      	; 0x284e <xTimerGenericCommand+0xa>
    284e:	1f 92       	push	r1
    2850:	1f 92       	push	r1
    2852:	cd b7       	in	r28, 0x3d	; 61
    2854:	de b7       	in	r29, 0x3e	; 62

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2856:	a0 91 4f 04 	lds	r26, 0x044F	; 0x80044f <xTimerQueue>
    285a:	b0 91 50 04 	lds	r27, 0x0450	; 0x800450 <xTimerQueue+0x1>
    285e:	10 97       	sbiw	r26, 0x00	; 0
    2860:	19 f1       	breq	.+70     	; 0x28a8 <xTimerGenericCommand+0x64>
    2862:	f9 01       	movw	r30, r18
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2864:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2866:	5b 83       	std	Y+3, r21	; 0x03
    2868:	4a 83       	std	Y+2, r20	; 0x02
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    286a:	9d 83       	std	Y+5, r25	; 0x05
    286c:	8c 83       	std	Y+4, r24	; 0x04

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    286e:	66 30       	cpi	r22, 0x06	; 6
    2870:	9c f4       	brge	.+38     	; 0x2898 <xTimerGenericCommand+0x54>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2872:	52 de       	rcall	.-860    	; 0x2518 <xTaskGetSchedulerState>
    2874:	e0 91 4f 04 	lds	r30, 0x044F	; 0x80044f <xTimerQueue>
    2878:	f0 91 50 04 	lds	r31, 0x0450	; 0x800450 <xTimerQueue+0x1>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    287c:	20 e0       	ldi	r18, 0x00	; 0
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
            xMessage.u.xTimerParameters.pxTimer = xTimer;

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    287e:	82 30       	cpi	r24, 0x02	; 2
    2880:	11 f4       	brne	.+4      	; 0x2886 <xTimerGenericCommand+0x42>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2882:	a8 01       	movw	r20, r16
    2884:	02 c0       	rjmp	.+4      	; 0x288a <xTimerGenericCommand+0x46>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2886:	40 e0       	ldi	r20, 0x00	; 0
    2888:	50 e0       	ldi	r21, 0x00	; 0
    288a:	be 01       	movw	r22, r28
    288c:	6f 5f       	subi	r22, 0xFF	; 255
    288e:	7f 4f       	sbci	r23, 0xFF	; 255
    2890:	cf 01       	movw	r24, r30
    2892:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <xQueueGenericSend>
    2896:	09 c0       	rjmp	.+18     	; 0x28aa <xTimerGenericCommand+0x66>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2898:	20 e0       	ldi	r18, 0x00	; 0
    289a:	af 01       	movw	r20, r30
    289c:	be 01       	movw	r22, r28
    289e:	6f 5f       	subi	r22, 0xFF	; 255
    28a0:	7f 4f       	sbci	r23, 0xFF	; 255
    28a2:	cd 01       	movw	r24, r26
    28a4:	0a d8       	rcall	.-4076   	; 0x18ba <xQueueGenericSendFromISR>
    28a6:	01 c0       	rjmp	.+2      	; 0x28aa <xTimerGenericCommand+0x66>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    28a8:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    28aa:	0f 90       	pop	r0
    28ac:	0f 90       	pop	r0
    28ae:	0f 90       	pop	r0
    28b0:	0f 90       	pop	r0
    28b2:	0f 90       	pop	r0
    28b4:	df 91       	pop	r29
    28b6:	cf 91       	pop	r28
    28b8:	1f 91       	pop	r17
    28ba:	0f 91       	pop	r16
    28bc:	08 95       	ret

000028be <initVariant>:
    prvSetMainLedOn(); // Main LED on.
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    28be:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <__malloc_margin>
    28c2:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <__malloc_margin+0x1>
    28c6:	8f ef       	ldi	r24, 0xFF	; 255
    28c8:	91 e2       	ldi	r25, 0x21	; 33
    28ca:	82 1b       	sub	r24, r18
    28cc:	93 0b       	sbc	r25, r19
    28ce:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    28d2:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    28d6:	0e 94 56 04 	call	0x8ac	; 0x8ac <setup>
    28da:	56 ca       	rjmp	.-2900   	; 0x1d88 <vTaskStartScheduler>
    28dc:	08 95       	ret

000028de <vApplicationIdleHook>:
    28de:	0e 94 87 04 	call	0x90e	; 0x90e <loop>
    28e2:	80 e0       	ldi	r24, 0x00	; 0
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	89 2b       	or	r24, r25
    28e8:	11 f0       	breq	.+4      	; 0x28ee <vApplicationIdleHook+0x10>
    28ea:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    28ee:	08 95       	ret

000028f0 <_Z15prvSetMainLedOnv>:
    28f0:	27 9a       	sbi	0x04, 7	; 4
    28f2:	2f 9a       	sbi	0x05, 7	; 5
    28f4:	08 95       	ret

000028f6 <_Z15prvBlinkMainLedv>:
    28f6:	1f 9a       	sbi	0x03, 7	; 3
    28f8:	08 95       	ret

000028fa <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__ ((unused)),
                                    char * pcTaskName __attribute__ ((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    28fa:	fa df       	rcall	.-12     	; 0x28f0 <_Z15prvSetMainLedOnv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    28fc:	2f ef       	ldi	r18, 0xFF	; 255
    28fe:	87 ea       	ldi	r24, 0xA7	; 167
    2900:	91 e6       	ldi	r25, 0x61	; 97
    2902:	21 50       	subi	r18, 0x01	; 1
    2904:	80 40       	sbci	r24, 0x00	; 0
    2906:	90 40       	sbci	r25, 0x00	; 0
    2908:	e1 f7       	brne	.-8      	; 0x2902 <vApplicationStackOverflowHook+0x8>
    290a:	00 c0       	rjmp	.+0      	; 0x290c <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    290c:	00 00       	nop
    290e:	f3 df       	rcall	.-26     	; 0x28f6 <_Z15prvBlinkMainLedv>
    2910:	f5 cf       	rjmp	.-22     	; 0x28fc <vApplicationStackOverflowHook+0x2>

00002912 <vApplicationGetIdleTaskMemory>:
                                    configSTACK_DEPTH_TYPE * puxIdleTaskStackSize )
{
    static StaticTask_t xIdleTaskTCB;
    static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
    2912:	24 ea       	ldi	r18, 0xA4	; 164
    2914:	35 e0       	ldi	r19, 0x05	; 5
    2916:	fc 01       	movw	r30, r24
    2918:	31 83       	std	Z+1, r19	; 0x01
    291a:	20 83       	st	Z, r18
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
    291c:	84 ee       	ldi	r24, 0xE4	; 228
    291e:	94 e0       	ldi	r25, 0x04	; 4
    2920:	fb 01       	movw	r30, r22
    2922:	91 83       	std	Z+1, r25	; 0x01
    2924:	80 83       	st	Z, r24
    *puxIdleTaskStackSize = configMINIMAL_STACK_SIZE;
    2926:	80 ec       	ldi	r24, 0xC0	; 192
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	fa 01       	movw	r30, r20
    292c:	91 83       	std	Z+1, r25	; 0x01
    292e:	80 83       	st	Z, r24
    2930:	08 95       	ret

00002932 <vApplicationGetTimerTaskMemory>:
                                     configSTACK_DEPTH_TYPE * puxTimerTaskStackSize )
{
    static StaticTask_t xTimerTaskTCB;
    static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
    2932:	2c eb       	ldi	r18, 0xBC	; 188
    2934:	34 e0       	ldi	r19, 0x04	; 4
    2936:	fc 01       	movw	r30, r24
    2938:	31 83       	std	Z+1, r19	; 0x01
    293a:	20 83       	st	Z, r18
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
    293c:	87 e6       	ldi	r24, 0x67	; 103
    293e:	94 e0       	ldi	r25, 0x04	; 4
    2940:	fb 01       	movw	r30, r22
    2942:	91 83       	std	Z+1, r25	; 0x01
    2944:	80 83       	st	Z, r24
    *puxTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
    2946:	85 e5       	ldi	r24, 0x55	; 85
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	fa 01       	movw	r30, r20
    294c:	91 83       	std	Z+1, r25	; 0x01
    294e:	80 83       	st	Z, r24
    2950:	08 95       	ret

00002952 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    2952:	cf 93       	push	r28
  uint8_t sreg = SREG;
    2954:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    2956:	f8 94       	cli
  if (!initialized) {
    2958:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <_ZN8SPIClass11initializedE>
    295c:	81 11       	cpse	r24, r1
    295e:	27 c0       	rjmp	.+78     	; 0x29ae <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    2960:	e3 e3       	ldi	r30, 0x33	; 51
    2962:	f2 e0       	ldi	r31, 0x02	; 2
    2964:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    2966:	ed ee       	ldi	r30, 0xED	; 237
    2968:	f1 e0       	ldi	r31, 0x01	; 1
    296a:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    296c:	e8 2f       	mov	r30, r24
    296e:	f0 e0       	ldi	r31, 0x00	; 0
    2970:	ee 0f       	add	r30, r30
    2972:	ff 1f       	adc	r31, r31
    2974:	e8 58       	subi	r30, 0x88	; 136
    2976:	fd 4f       	sbci	r31, 0xFD	; 253
    2978:	a5 91       	lpm	r26, Z+
    297a:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    297c:	ec 91       	ld	r30, X
    297e:	e9 23       	and	r30, r25
    2980:	21 f4       	brne	.+8      	; 0x298a <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    2982:	61 e0       	ldi	r22, 0x01	; 1
    2984:	85 e3       	ldi	r24, 0x35	; 53
    2986:	0e 94 3d 06 	call	0xc7a	; 0xc7a <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    298a:	61 e0       	ldi	r22, 0x01	; 1
    298c:	85 e3       	ldi	r24, 0x35	; 53
    298e:	0e 94 01 06 	call	0xc02	; 0xc02 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    2992:	8c b5       	in	r24, 0x2c	; 44
    2994:	80 61       	ori	r24, 0x10	; 16
    2996:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    2998:	8c b5       	in	r24, 0x2c	; 44
    299a:	80 64       	ori	r24, 0x40	; 64
    299c:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    299e:	61 e0       	ldi	r22, 0x01	; 1
    29a0:	84 e3       	ldi	r24, 0x34	; 52
    29a2:	0e 94 01 06 	call	0xc02	; 0xc02 <pinMode>
    pinMode(MOSI, OUTPUT);
    29a6:	61 e0       	ldi	r22, 0x01	; 1
    29a8:	83 e3       	ldi	r24, 0x33	; 51
    29aa:	0e 94 01 06 	call	0xc02	; 0xc02 <pinMode>
  }
  initialized++; // reference count
    29ae:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <_ZN8SPIClass11initializedE>
    29b2:	8f 5f       	subi	r24, 0xFF	; 255
    29b4:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <_ZN8SPIClass11initializedE>
  SREG = sreg;
    29b8:	cf bf       	out	0x3f, r28	; 63
}
    29ba:	cf 91       	pop	r28
    29bc:	08 95       	ret

000029be <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    29be:	08 95       	ret

000029c0 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
    29c0:	fc 01       	movw	r30, r24
    29c2:	03 96       	adiw	r24, 0x03	; 3
    29c4:	92 83       	std	Z+2, r25	; 0x02
    29c6:	81 83       	std	Z+1, r24	; 0x01
    29c8:	2f ef       	ldi	r18, 0xFF	; 255
    29ca:	3f ef       	ldi	r19, 0xFF	; 255
    29cc:	34 83       	std	Z+4, r19	; 0x04
    29ce:	23 83       	std	Z+3, r18	; 0x03
    29d0:	96 83       	std	Z+6, r25	; 0x06
    29d2:	85 83       	std	Z+5, r24	; 0x05
    29d4:	90 87       	std	Z+8, r25	; 0x08
    29d6:	87 83       	std	Z+7, r24	; 0x07
    29d8:	10 82       	st	Z, r1
    29da:	08 95       	ret

000029dc <vListInitialiseItem>:
    29dc:	fc 01       	movw	r30, r24
    29de:	11 86       	std	Z+9, r1	; 0x09
    29e0:	10 86       	std	Z+8, r1	; 0x08
    29e2:	08 95       	ret

000029e4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
    29e4:	0f 93       	push	r16
    29e6:	1f 93       	push	r17
    29e8:	cf 93       	push	r28
    29ea:	df 93       	push	r29
    29ec:	8c 01       	movw	r16, r24
    29ee:	fb 01       	movw	r30, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    29f0:	80 81       	ld	r24, Z
    29f2:	91 81       	ldd	r25, Z+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    29f4:	8f 3f       	cpi	r24, 0xFF	; 255
    29f6:	2f ef       	ldi	r18, 0xFF	; 255
    29f8:	92 07       	cpc	r25, r18
    29fa:	21 f4       	brne	.+8      	; 0x2a04 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    29fc:	e8 01       	movw	r28, r16
    29fe:	af 81       	ldd	r26, Y+7	; 0x07
    2a00:	b8 85       	ldd	r27, Y+8	; 0x08
    2a02:	0e c0       	rjmp	.+28     	; 0x2a20 <vListInsert+0x3c>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    2a04:	d8 01       	movw	r26, r16
    2a06:	13 96       	adiw	r26, 0x03	; 3
    2a08:	12 96       	adiw	r26, 0x02	; 2
    2a0a:	2d 91       	ld	r18, X+
    2a0c:	3c 91       	ld	r19, X
    2a0e:	13 97       	sbiw	r26, 0x03	; 3
    2a10:	e9 01       	movw	r28, r18
    2a12:	48 81       	ld	r20, Y
    2a14:	59 81       	ldd	r21, Y+1	; 0x01
    2a16:	84 17       	cp	r24, r20
    2a18:	95 07       	cpc	r25, r21
    2a1a:	10 f0       	brcs	.+4      	; 0x2a20 <vListInsert+0x3c>
    2a1c:	d9 01       	movw	r26, r18
    2a1e:	f4 cf       	rjmp	.-24     	; 0x2a08 <vListInsert+0x24>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    2a20:	12 96       	adiw	r26, 0x02	; 2
    2a22:	8d 91       	ld	r24, X+
    2a24:	9c 91       	ld	r25, X
    2a26:	13 97       	sbiw	r26, 0x03	; 3
    2a28:	93 83       	std	Z+3, r25	; 0x03
    2a2a:	82 83       	std	Z+2, r24	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    2a2c:	ec 01       	movw	r28, r24
    2a2e:	fd 83       	std	Y+5, r31	; 0x05
    2a30:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
    2a32:	b5 83       	std	Z+5, r27	; 0x05
    2a34:	a4 83       	std	Z+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
    2a36:	13 96       	adiw	r26, 0x03	; 3
    2a38:	fc 93       	st	X, r31
    2a3a:	ee 93       	st	-X, r30
    2a3c:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
    2a3e:	11 87       	std	Z+9, r17	; 0x09
    2a40:	00 87       	std	Z+8, r16	; 0x08

    ( pxList->uxNumberOfItems )++;
    2a42:	f8 01       	movw	r30, r16
    2a44:	80 81       	ld	r24, Z
    2a46:	8f 5f       	subi	r24, 0xFF	; 255
    2a48:	80 83       	st	Z, r24
}
    2a4a:	df 91       	pop	r29
    2a4c:	cf 91       	pop	r28
    2a4e:	1f 91       	pop	r17
    2a50:	0f 91       	pop	r16
    2a52:	08 95       	ret

00002a54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    2a54:	cf 93       	push	r28
    2a56:	df 93       	push	r29
    2a58:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
    2a5a:	a0 85       	ldd	r26, Z+8	; 0x08
    2a5c:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2a5e:	82 81       	ldd	r24, Z+2	; 0x02
    2a60:	93 81       	ldd	r25, Z+3	; 0x03
    2a62:	24 81       	ldd	r18, Z+4	; 0x04
    2a64:	35 81       	ldd	r19, Z+5	; 0x05
    2a66:	ec 01       	movw	r28, r24
    2a68:	3d 83       	std	Y+5, r19	; 0x05
    2a6a:	2c 83       	std	Y+4, r18	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2a6c:	c4 81       	ldd	r28, Z+4	; 0x04
    2a6e:	d5 81       	ldd	r29, Z+5	; 0x05
    2a70:	9b 83       	std	Y+3, r25	; 0x03
    2a72:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    2a74:	11 96       	adiw	r26, 0x01	; 1
    2a76:	8d 91       	ld	r24, X+
    2a78:	9c 91       	ld	r25, X
    2a7a:	12 97       	sbiw	r26, 0x02	; 2
    2a7c:	e8 17       	cp	r30, r24
    2a7e:	f9 07       	cpc	r31, r25
    2a80:	21 f4       	brne	.+8      	; 0x2a8a <uxListRemove+0x36>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    2a82:	12 96       	adiw	r26, 0x02	; 2
    2a84:	dc 93       	st	X, r29
    2a86:	ce 93       	st	-X, r28
    2a88:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    2a8a:	11 86       	std	Z+9, r1	; 0x09
    2a8c:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
    2a8e:	8c 91       	ld	r24, X
    2a90:	81 50       	subi	r24, 0x01	; 1
    2a92:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    2a94:	8c 91       	ld	r24, X
}
    2a96:	df 91       	pop	r29
    2a98:	cf 91       	pop	r28
    2a9a:	08 95       	ret

00002a9c <pxPortInitialiseStack>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
    2a9c:	fc 01       	movw	r30, r24
    2a9e:	60 83       	st	Z, r22
    2aa0:	31 97       	sbiw	r30, 0x01	; 1
    2aa2:	70 83       	st	Z, r23
    2aa4:	31 97       	sbiw	r30, 0x01	; 1
    2aa6:	10 82       	st	Z, r1
    2aa8:	31 97       	sbiw	r30, 0x01	; 1
    2aaa:	10 82       	st	Z, r1
    2aac:	31 97       	sbiw	r30, 0x01	; 1
    2aae:	20 e8       	ldi	r18, 0x80	; 128
    2ab0:	20 83       	st	Z, r18
    2ab2:	31 97       	sbiw	r30, 0x01	; 1
    2ab4:	10 82       	st	Z, r1
    2ab6:	31 97       	sbiw	r30, 0x01	; 1
    2ab8:	10 82       	st	Z, r1
    2aba:	31 97       	sbiw	r30, 0x01	; 1
    2abc:	10 82       	st	Z, r1
    2abe:	77 97       	sbiw	r30, 0x17	; 23
    2ac0:	40 83       	st	Z, r20
    2ac2:	31 97       	sbiw	r30, 0x01	; 1
    2ac4:	50 83       	st	Z, r21
    2ac6:	86 97       	sbiw	r24, 0x26	; 38
    2ac8:	08 95       	ret

00002aca <vPortYield>:
    2aca:	0f 92       	push	r0
    2acc:	0f b6       	in	r0, 0x3f	; 63
    2ace:	f8 94       	cli
    2ad0:	0f 92       	push	r0
    2ad2:	0b b6       	in	r0, 0x3b	; 59
    2ad4:	0f 92       	push	r0
    2ad6:	0c b6       	in	r0, 0x3c	; 60
    2ad8:	0f 92       	push	r0
    2ada:	1f 92       	push	r1
    2adc:	11 24       	eor	r1, r1
    2ade:	2f 92       	push	r2
    2ae0:	3f 92       	push	r3
    2ae2:	4f 92       	push	r4
    2ae4:	5f 92       	push	r5
    2ae6:	6f 92       	push	r6
    2ae8:	7f 92       	push	r7
    2aea:	8f 92       	push	r8
    2aec:	9f 92       	push	r9
    2aee:	af 92       	push	r10
    2af0:	bf 92       	push	r11
    2af2:	cf 92       	push	r12
    2af4:	df 92       	push	r13
    2af6:	ef 92       	push	r14
    2af8:	ff 92       	push	r15
    2afa:	0f 93       	push	r16
    2afc:	1f 93       	push	r17
    2afe:	2f 93       	push	r18
    2b00:	3f 93       	push	r19
    2b02:	4f 93       	push	r20
    2b04:	5f 93       	push	r21
    2b06:	6f 93       	push	r22
    2b08:	7f 93       	push	r23
    2b0a:	8f 93       	push	r24
    2b0c:	9f 93       	push	r25
    2b0e:	af 93       	push	r26
    2b10:	bf 93       	push	r27
    2b12:	cf 93       	push	r28
    2b14:	df 93       	push	r29
    2b16:	ef 93       	push	r30
    2b18:	ff 93       	push	r31
    2b1a:	a0 91 f8 03 	lds	r26, 0x03F8	; 0x8003f8 <pxCurrentTCB>
    2b1e:	b0 91 f9 03 	lds	r27, 0x03F9	; 0x8003f9 <pxCurrentTCB+0x1>
    2b22:	0d b6       	in	r0, 0x3d	; 61
    2b24:	0d 92       	st	X+, r0
    2b26:	0e b6       	in	r0, 0x3e	; 62
    2b28:	0d 92       	st	X+, r0
    2b2a:	59 db       	rcall	.-2382   	; 0x21de <vTaskSwitchContext>
    2b2c:	a0 91 f8 03 	lds	r26, 0x03F8	; 0x8003f8 <pxCurrentTCB>
    2b30:	b0 91 f9 03 	lds	r27, 0x03F9	; 0x8003f9 <pxCurrentTCB+0x1>
    2b34:	cd 91       	ld	r28, X+
    2b36:	cd bf       	out	0x3d, r28	; 61
    2b38:	dd 91       	ld	r29, X+
    2b3a:	de bf       	out	0x3e, r29	; 62
    2b3c:	ff 91       	pop	r31
    2b3e:	ef 91       	pop	r30
    2b40:	df 91       	pop	r29
    2b42:	cf 91       	pop	r28
    2b44:	bf 91       	pop	r27
    2b46:	af 91       	pop	r26
    2b48:	9f 91       	pop	r25
    2b4a:	8f 91       	pop	r24
    2b4c:	7f 91       	pop	r23
    2b4e:	6f 91       	pop	r22
    2b50:	5f 91       	pop	r21
    2b52:	4f 91       	pop	r20
    2b54:	3f 91       	pop	r19
    2b56:	2f 91       	pop	r18
    2b58:	1f 91       	pop	r17
    2b5a:	0f 91       	pop	r16
    2b5c:	ff 90       	pop	r15
    2b5e:	ef 90       	pop	r14
    2b60:	df 90       	pop	r13
    2b62:	cf 90       	pop	r12
    2b64:	bf 90       	pop	r11
    2b66:	af 90       	pop	r10
    2b68:	9f 90       	pop	r9
    2b6a:	8f 90       	pop	r8
    2b6c:	7f 90       	pop	r7
    2b6e:	6f 90       	pop	r6
    2b70:	5f 90       	pop	r5
    2b72:	4f 90       	pop	r4
    2b74:	3f 90       	pop	r3
    2b76:	2f 90       	pop	r2
    2b78:	1f 90       	pop	r1
    2b7a:	0f 90       	pop	r0
    2b7c:	0c be       	out	0x3c, r0	; 60
    2b7e:	0f 90       	pop	r0
    2b80:	0b be       	out	0x3b, r0	; 59
    2b82:	0f 90       	pop	r0
    2b84:	0f be       	out	0x3f, r0	; 63
    2b86:	0f 90       	pop	r0
    2b88:	08 95       	ret

00002b8a <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ((hot, flatten, naked));
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    2b8a:	0f 92       	push	r0
    2b8c:	0f b6       	in	r0, 0x3f	; 63
    2b8e:	f8 94       	cli
    2b90:	0f 92       	push	r0
    2b92:	0b b6       	in	r0, 0x3b	; 59
    2b94:	0f 92       	push	r0
    2b96:	0c b6       	in	r0, 0x3c	; 60
    2b98:	0f 92       	push	r0
    2b9a:	1f 92       	push	r1
    2b9c:	11 24       	eor	r1, r1
    2b9e:	2f 92       	push	r2
    2ba0:	3f 92       	push	r3
    2ba2:	4f 92       	push	r4
    2ba4:	5f 92       	push	r5
    2ba6:	6f 92       	push	r6
    2ba8:	7f 92       	push	r7
    2baa:	8f 92       	push	r8
    2bac:	9f 92       	push	r9
    2bae:	af 92       	push	r10
    2bb0:	bf 92       	push	r11
    2bb2:	cf 92       	push	r12
    2bb4:	df 92       	push	r13
    2bb6:	ef 92       	push	r14
    2bb8:	ff 92       	push	r15
    2bba:	0f 93       	push	r16
    2bbc:	1f 93       	push	r17
    2bbe:	2f 93       	push	r18
    2bc0:	3f 93       	push	r19
    2bc2:	4f 93       	push	r20
    2bc4:	5f 93       	push	r21
    2bc6:	6f 93       	push	r22
    2bc8:	7f 93       	push	r23
    2bca:	8f 93       	push	r24
    2bcc:	9f 93       	push	r25
    2bce:	af 93       	push	r26
    2bd0:	bf 93       	push	r27
    2bd2:	cf 93       	push	r28
    2bd4:	df 93       	push	r29
    2bd6:	ef 93       	push	r30
    2bd8:	ff 93       	push	r31
    2bda:	a0 91 f8 03 	lds	r26, 0x03F8	; 0x8003f8 <pxCurrentTCB>
    2bde:	b0 91 f9 03 	lds	r27, 0x03F9	; 0x8003f9 <pxCurrentTCB+0x1>
    2be2:	0d b6       	in	r0, 0x3d	; 61
    2be4:	0d 92       	st	X+, r0
    2be6:	0e b6       	in	r0, 0x3e	; 62
    2be8:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
    2bea:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
    2bec:	29 d9       	rcall	.-3502   	; 0x1e40 <xTaskIncrementTick>
    2bee:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    2bf0:	f6 da       	rcall	.-2580   	; 0x21de <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
    2bf2:	a0 91 f8 03 	lds	r26, 0x03F8	; 0x8003f8 <pxCurrentTCB>
    2bf6:	b0 91 f9 03 	lds	r27, 0x03F9	; 0x8003f9 <pxCurrentTCB+0x1>
    2bfa:	cd 91       	ld	r28, X+
    2bfc:	cd bf       	out	0x3d, r28	; 61
    2bfe:	dd 91       	ld	r29, X+
    2c00:	de bf       	out	0x3e, r29	; 62
    2c02:	ff 91       	pop	r31
    2c04:	ef 91       	pop	r30
    2c06:	df 91       	pop	r29
    2c08:	cf 91       	pop	r28
    2c0a:	bf 91       	pop	r27
    2c0c:	af 91       	pop	r26
    2c0e:	9f 91       	pop	r25
    2c10:	8f 91       	pop	r24
    2c12:	7f 91       	pop	r23
    2c14:	6f 91       	pop	r22
    2c16:	5f 91       	pop	r21
    2c18:	4f 91       	pop	r20
    2c1a:	3f 91       	pop	r19
    2c1c:	2f 91       	pop	r18
    2c1e:	1f 91       	pop	r17
    2c20:	0f 91       	pop	r16
    2c22:	ff 90       	pop	r15
    2c24:	ef 90       	pop	r14
    2c26:	df 90       	pop	r13
    2c28:	cf 90       	pop	r12
    2c2a:	bf 90       	pop	r11
    2c2c:	af 90       	pop	r10
    2c2e:	9f 90       	pop	r9
    2c30:	8f 90       	pop	r8
    2c32:	7f 90       	pop	r7
    2c34:	6f 90       	pop	r6
    2c36:	5f 90       	pop	r5
    2c38:	4f 90       	pop	r4
    2c3a:	3f 90       	pop	r3
    2c3c:	2f 90       	pop	r2
    2c3e:	1f 90       	pop	r1
    2c40:	0f 90       	pop	r0
    2c42:	0c be       	out	0x3c, r0	; 60
    2c44:	0f 90       	pop	r0
    2c46:	0b be       	out	0x3b, r0	; 59
    2c48:	0f 90       	pop	r0
    2c4a:	0f be       	out	0x3f, r0	; 63
    2c4c:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    2c4e:	08 95       	ret

00002c50 <prvSetupTimerInterrupt>:
 * Setup WDT to generate a tick interrupt.
 */
void prvSetupTimerInterrupt( void )
{
    /* reset watchdog */
    wdt_reset();
    2c50:	a8 95       	wdr
                : "r0"
        );
    }
    else
    {
        __asm__ __volatile__ (
    2c52:	90 ec       	ldi	r25, 0xC0	; 192
    2c54:	88 e1       	ldi	r24, 0x18	; 24
    2c56:	0f b6       	in	r0, 0x3f	; 63
    2c58:	f8 94       	cli
    2c5a:	a8 95       	wdr
    2c5c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    2c60:	0f be       	out	0x3f, r0	; 63
    2c62:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    2c66:	08 95       	ret

00002c68 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void )
{
    /* Setup the relevant timer hardware to generate the tick. */
    prvSetupTimerInterrupt();
    2c68:	f3 df       	rcall	.-26     	; 0x2c50 <prvSetupTimerInterrupt>

    /* Restore the context of the first task that is going to run. */
    portRESTORE_CONTEXT();
    2c6a:	a0 91 f8 03 	lds	r26, 0x03F8	; 0x8003f8 <pxCurrentTCB>
    2c6e:	b0 91 f9 03 	lds	r27, 0x03F9	; 0x8003f9 <pxCurrentTCB+0x1>
    2c72:	cd 91       	ld	r28, X+
    2c74:	cd bf       	out	0x3d, r28	; 61
    2c76:	dd 91       	ld	r29, X+
    2c78:	de bf       	out	0x3e, r29	; 62
    2c7a:	ff 91       	pop	r31
    2c7c:	ef 91       	pop	r30
    2c7e:	df 91       	pop	r29
    2c80:	cf 91       	pop	r28
    2c82:	bf 91       	pop	r27
    2c84:	af 91       	pop	r26
    2c86:	9f 91       	pop	r25
    2c88:	8f 91       	pop	r24
    2c8a:	7f 91       	pop	r23
    2c8c:	6f 91       	pop	r22
    2c8e:	5f 91       	pop	r21
    2c90:	4f 91       	pop	r20
    2c92:	3f 91       	pop	r19
    2c94:	2f 91       	pop	r18
    2c96:	1f 91       	pop	r17
    2c98:	0f 91       	pop	r16
    2c9a:	ff 90       	pop	r15
    2c9c:	ef 90       	pop	r14
    2c9e:	df 90       	pop	r13
    2ca0:	cf 90       	pop	r12
    2ca2:	bf 90       	pop	r11
    2ca4:	af 90       	pop	r10
    2ca6:	9f 90       	pop	r9
    2ca8:	8f 90       	pop	r8
    2caa:	7f 90       	pop	r7
    2cac:	6f 90       	pop	r6
    2cae:	5f 90       	pop	r5
    2cb0:	4f 90       	pop	r4
    2cb2:	3f 90       	pop	r3
    2cb4:	2f 90       	pop	r2
    2cb6:	1f 90       	pop	r1
    2cb8:	0f 90       	pop	r0
    2cba:	0c be       	out	0x3c, r0	; 60
    2cbc:	0f 90       	pop	r0
    2cbe:	0b be       	out	0x3b, r0	; 59
    2cc0:	0f 90       	pop	r0
    2cc2:	0f be       	out	0x3f, r0	; 63
    2cc4:	0f 90       	pop	r0

    /* Simulate a function call end as generated by the compiler. We will now
    jump to the start of the task the context of which we have just restored. */
    __asm__ __volatile__ ( "ret" );
    2cc6:	08 95       	ret

    /* Should not get here. */
    return pdTRUE;
}
    2cc8:	81 e0       	ldi	r24, 0x01	; 1
    2cca:	08 95       	ret

00002ccc <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    2ccc:	5e df       	rcall	.-324    	; 0x2b8a <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    2cce:	18 95       	reti

00002cd0 <__tablejump2__>:
    2cd0:	ee 0f       	add	r30, r30
    2cd2:	ff 1f       	adc	r31, r31
    2cd4:	88 1f       	adc	r24, r24
    2cd6:	8b bf       	out	0x3b, r24	; 59
    2cd8:	07 90       	elpm	r0, Z+
    2cda:	f6 91       	elpm	r31, Z
    2cdc:	e0 2d       	mov	r30, r0
    2cde:	19 94       	eijmp

00002ce0 <memcpy>:
    2ce0:	fb 01       	movw	r30, r22
    2ce2:	dc 01       	movw	r26, r24
    2ce4:	02 c0       	rjmp	.+4      	; 0x2cea <memcpy+0xa>
    2ce6:	01 90       	ld	r0, Z+
    2ce8:	0d 92       	st	X+, r0
    2cea:	41 50       	subi	r20, 0x01	; 1
    2cec:	50 40       	sbci	r21, 0x00	; 0
    2cee:	d8 f7       	brcc	.-10     	; 0x2ce6 <memcpy+0x6>
    2cf0:	08 95       	ret

00002cf2 <memset>:
    2cf2:	dc 01       	movw	r26, r24
    2cf4:	01 c0       	rjmp	.+2      	; 0x2cf8 <memset+0x6>
    2cf6:	6d 93       	st	X+, r22
    2cf8:	41 50       	subi	r20, 0x01	; 1
    2cfa:	50 40       	sbci	r21, 0x00	; 0
    2cfc:	e0 f7       	brcc	.-8      	; 0x2cf6 <memset+0x4>
    2cfe:	08 95       	ret

00002d00 <_exit>:
    2d00:	f8 94       	cli

00002d02 <__stop_program>:
    2d02:	ff cf       	rjmp	.-2      	; 0x2d02 <__stop_program>
