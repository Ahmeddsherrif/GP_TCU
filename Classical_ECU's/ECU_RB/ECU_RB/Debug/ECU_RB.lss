
ECU_RB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000070  00800200  00002fee  00003088  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002fee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003b9  00800270  00800270  000030f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000030f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003128  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007f8  00000000  00000000  00003168  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e8f6  00000000  00000000  00003960  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000031e9  00000000  00000000  00012256  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005479  00000000  00000000  0001543f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000018dc  00000000  00000000  0001a8b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004358  00000000  00000000  0001c194  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009be8  00000000  00000000  000204ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007e0  00000000  00000000  0002a0d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4a c2       	rjmp	.+1172   	; 0x496 <__ctors_end>
       2:	00 00       	nop
       4:	78 c2       	rjmp	.+1264   	; 0x4f6 <__bad_interrupt>
       6:	00 00       	nop
       8:	76 c2       	rjmp	.+1260   	; 0x4f6 <__bad_interrupt>
       a:	00 00       	nop
       c:	74 c2       	rjmp	.+1256   	; 0x4f6 <__bad_interrupt>
       e:	00 00       	nop
      10:	72 c2       	rjmp	.+1252   	; 0x4f6 <__bad_interrupt>
      12:	00 00       	nop
      14:	70 c2       	rjmp	.+1248   	; 0x4f6 <__bad_interrupt>
      16:	00 00       	nop
      18:	6e c2       	rjmp	.+1244   	; 0x4f6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6c c2       	rjmp	.+1240   	; 0x4f6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	6a c2       	rjmp	.+1236   	; 0x4f6 <__bad_interrupt>
      22:	00 00       	nop
      24:	68 c2       	rjmp	.+1232   	; 0x4f6 <__bad_interrupt>
      26:	00 00       	nop
      28:	66 c2       	rjmp	.+1228   	; 0x4f6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	64 c2       	rjmp	.+1224   	; 0x4f6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 db 17 	jmp	0x2fb6	; 0x2fb6 <__vector_12>
      34:	60 c2       	rjmp	.+1216   	; 0x4f6 <__bad_interrupt>
      36:	00 00       	nop
      38:	5e c2       	rjmp	.+1212   	; 0x4f6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5c c2       	rjmp	.+1208   	; 0x4f6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	5a c2       	rjmp	.+1204   	; 0x4f6 <__bad_interrupt>
      42:	00 00       	nop
      44:	58 c2       	rjmp	.+1200   	; 0x4f6 <__bad_interrupt>
      46:	00 00       	nop
      48:	56 c2       	rjmp	.+1196   	; 0x4f6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	54 c2       	rjmp	.+1192   	; 0x4f6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	52 c2       	rjmp	.+1188   	; 0x4f6 <__bad_interrupt>
      52:	00 00       	nop
      54:	50 c2       	rjmp	.+1184   	; 0x4f6 <__bad_interrupt>
      56:	00 00       	nop
      58:	4e c2       	rjmp	.+1180   	; 0x4f6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f5 c4       	rjmp	.+2538   	; 0xa48 <__vector_23>
      5e:	00 00       	nop
      60:	4a c2       	rjmp	.+1172   	; 0x4f6 <__bad_interrupt>
      62:	00 00       	nop
      64:	48 c2       	rjmp	.+1168   	; 0x4f6 <__bad_interrupt>
      66:	00 00       	nop
      68:	46 c2       	rjmp	.+1164   	; 0x4f6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	44 c2       	rjmp	.+1160   	; 0x4f6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	42 c2       	rjmp	.+1156   	; 0x4f6 <__bad_interrupt>
      72:	00 00       	nop
      74:	40 c2       	rjmp	.+1152   	; 0x4f6 <__bad_interrupt>
      76:	00 00       	nop
      78:	3e c2       	rjmp	.+1148   	; 0x4f6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	3c c2       	rjmp	.+1144   	; 0x4f6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	3a c2       	rjmp	.+1140   	; 0x4f6 <__bad_interrupt>
      82:	00 00       	nop
      84:	38 c2       	rjmp	.+1136   	; 0x4f6 <__bad_interrupt>
      86:	00 00       	nop
      88:	36 c2       	rjmp	.+1132   	; 0x4f6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	34 c2       	rjmp	.+1128   	; 0x4f6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	32 c2       	rjmp	.+1124   	; 0x4f6 <__bad_interrupt>
      92:	00 00       	nop
      94:	30 c2       	rjmp	.+1120   	; 0x4f6 <__bad_interrupt>
      96:	00 00       	nop
      98:	2e c2       	rjmp	.+1116   	; 0x4f6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	2c c2       	rjmp	.+1112   	; 0x4f6 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	2a c2       	rjmp	.+1108   	; 0x4f6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	28 c2       	rjmp	.+1104   	; 0x4f6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	26 c2       	rjmp	.+1100   	; 0x4f6 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	24 c2       	rjmp	.+1096   	; 0x4f6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	22 c2       	rjmp	.+1092   	; 0x4f6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	20 c2       	rjmp	.+1088   	; 0x4f6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	1e c2       	rjmp	.+1084   	; 0x4f6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	1c c2       	rjmp	.+1080   	; 0x4f6 <__bad_interrupt>
      be:	00 00       	nop
      c0:	1a c2       	rjmp	.+1076   	; 0x4f6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	18 c2       	rjmp	.+1072   	; 0x4f6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	16 c2       	rjmp	.+1068   	; 0x4f6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	14 c2       	rjmp	.+1064   	; 0x4f6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	12 c2       	rjmp	.+1060   	; 0x4f6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	10 c2       	rjmp	.+1056   	; 0x4f6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0e c2       	rjmp	.+1052   	; 0x4f6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	0c c2       	rjmp	.+1048   	; 0x4f6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	0a c2       	rjmp	.+1044   	; 0x4f6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	56 06       	cpc	r5, r22
      e6:	59 06       	cpc	r5, r25
      e8:	48 06       	cpc	r4, r24
      ea:	4c 06       	cpc	r4, r28
      ec:	52 06       	cpc	r5, r18
      ee:	90 06       	cpc	r9, r16
      f0:	5d 06       	cpc	r5, r29
      f2:	61 06       	cpc	r6, r17
      f4:	67 06       	cpc	r6, r23
      f6:	6b 06       	cpc	r6, r27
      f8:	6f 06       	cpc	r6, r31
      fa:	75 06       	cpc	r7, r21
      fc:	79 06       	cpc	r7, r25
      fe:	7d 06       	cpc	r7, r29
     100:	90 06       	cpc	r9, r16
     102:	83 06       	cpc	r8, r19
     104:	87 06       	cpc	r8, r23
     106:	8b 06       	cpc	r8, r27
     108:	21 09       	sbc	r18, r1
     10a:	93 08       	sbc	r9, r3
     10c:	25 09       	sbc	r18, r5
     10e:	96 08       	sbc	r9, r6
     110:	99 08       	sbc	r9, r9
     112:	9d 08       	sbc	r9, r13
     114:	a0 08       	sbc	r10, r0
     116:	a3 08       	sbc	r10, r3
     118:	1f 09       	sbc	r17, r15
     11a:	1f 09       	sbc	r17, r15
     11c:	a6 08       	sbc	r10, r6
     11e:	a9 08       	sbc	r10, r9
     120:	ac 08       	sbc	r10, r12
     122:	af 08       	sbc	r10, r15
     124:	b2 08       	sbc	r11, r2
     126:	b5 08       	sbc	r11, r5
     128:	29 09       	sbc	r18, r9
     12a:	c5 08       	sbc	r12, r5
     12c:	c8 08       	sbc	r12, r8
     12e:	1f 09       	sbc	r17, r15
     130:	cc 08       	sbc	r12, r12
     132:	d0 08       	sbc	r13, r0
     134:	d3 08       	sbc	r13, r3
     136:	d6 08       	sbc	r13, r6
     138:	d9 08       	sbc	r13, r9
     13a:	dc 08       	sbc	r13, r12
     13c:	0c 09       	sbc	r16, r12
     13e:	df 08       	sbc	r13, r15
     140:	e2 08       	sbc	r14, r2
     142:	e5 08       	sbc	r14, r5
     144:	e8 08       	sbc	r14, r8
     146:	eb 08       	sbc	r14, r11
     148:	2d 09       	sbc	r18, r13
     14a:	fb 08       	sbc	r15, r11
     14c:	fe 08       	sbc	r15, r14
     14e:	02 09       	sbc	r16, r2
     150:	05 09       	sbc	r16, r5
     152:	1f 09       	sbc	r17, r15
     154:	09 09       	sbc	r16, r9
     156:	0c 09       	sbc	r16, r12
     158:	10 09       	sbc	r17, r0
     15a:	14 09       	sbc	r17, r4
     15c:	18 09       	sbc	r17, r8
     15e:	1c 09       	sbc	r17, r12
     160:	05 02       	muls	r16, r21
     162:	05 02       	muls	r16, r21
     164:	46 02       	muls	r20, r22
     166:	33 02       	muls	r19, r19
     168:	46 02       	muls	r20, r22
     16a:	05 02       	muls	r16, r21
     16c:	05 02       	muls	r16, r21
     16e:	46 02       	muls	r20, r22
     170:	33 02       	muls	r19, r19

00000172 <__trampolines_end>:
     172:	00 00       	nop
     174:	0a 0b       	sbc	r16, r26
     176:	02 09       	sbc	r16, r2
     178:	0c 0d       	add	r16, r12
     17a:	0e 08       	sbc	r0, r14
     17c:	07 03       	mulsu	r16, r23
     17e:	04 01       	movw	r0, r8
	...
     19c:	00 00       	nop
     19e:	12 11       	cpse	r17, r2
     1a0:	10 00       	.word	0x0010	; ????
	...

000001b8 <digital_pin_to_bit_mask_PGM>:
     1b8:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     1c8:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     1d8:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     1e8:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     1f8:	04 08 10 20 40 80                                   ... @.

000001fe <digital_pin_to_port_PGM>:
     1fe:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     20e:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     21e:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     22e:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     23e:	0b 0b 0b 0b 0b 0b                                   ......

00000244 <port_to_input_PGM>:
     244:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     254:	00 01 00 00 03 01 06 01 09 01                       ..........

0000025e <port_to_output_PGM>:
     25e:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     26e:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000278 <port_to_mode_PGM>:
     278:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     288:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000292 <prvIdleTask>:
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
     292:	80 91 03 04 	lds	r24, 0x0403	; 0x800403 <uxDeletedTasksWaitingCleanUp>
     296:	88 23       	and	r24, r24
     298:	c9 f0       	breq	.+50     	; 0x2cc <prvIdleTask+0x3a>
     29a:	0f b6       	in	r0, 0x3f	; 63
     29c:	f8 94       	cli
     29e:	0f 92       	push	r0
     2a0:	e0 91 09 04 	lds	r30, 0x0409	; 0x800409 <xTasksWaitingTermination+0x5>
     2a4:	f0 91 0a 04 	lds	r31, 0x040A	; 0x80040a <xTasksWaitingTermination+0x6>
     2a8:	86 81       	ldd	r24, Z+6	; 0x06
     2aa:	97 81       	ldd	r25, Z+7	; 0x07
     2ac:	02 96       	adiw	r24, 0x02	; 2
     2ae:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <uxListRemove>
     2b2:	80 91 f9 03 	lds	r24, 0x03F9	; 0x8003f9 <uxCurrentNumberOfTasks>
     2b6:	81 50       	subi	r24, 0x01	; 1
     2b8:	80 93 f9 03 	sts	0x03F9, r24	; 0x8003f9 <uxCurrentNumberOfTasks>
     2bc:	80 91 03 04 	lds	r24, 0x0403	; 0x800403 <uxDeletedTasksWaitingCleanUp>
     2c0:	81 50       	subi	r24, 0x01	; 1
     2c2:	80 93 03 04 	sts	0x0403, r24	; 0x800403 <uxDeletedTasksWaitingCleanUp>
     2c6:	0f 90       	pop	r0
     2c8:	0f be       	out	0x3f, r0	; 63
     2ca:	e3 cf       	rjmp	.-58     	; 0x292 <prvIdleTask>
     2cc:	80 91 2c 04 	lds	r24, 0x042C	; 0x80042c <pxReadyTasksLists>
     2d0:	82 30       	cpi	r24, 0x02	; 2
     2d2:	10 f0       	brcs	.+4      	; 0x2d8 <prvIdleTask+0x46>
     2d4:	0e 94 da 16 	call	0x2db4	; 0x2db4 <vPortYield>
     2d8:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <vApplicationIdleHook>
     2dc:	da cf       	rjmp	.-76     	; 0x292 <prvIdleTask>

000002de <prvTimerTask>:
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    }
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
     2de:	cf 93       	push	r28
     2e0:	df 93       	push	r29
     2e2:	00 d0       	rcall	.+0      	; 0x2e4 <prvTimerTask+0x6>
     2e4:	1f 92       	push	r1
     2e6:	1f 92       	push	r1
     2e8:	cd b7       	in	r28, 0x3d	; 61
     2ea:	de b7       	in	r29, 0x3e	; 62
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
     2ec:	e0 91 ab 04 	lds	r30, 0x04AB	; 0x8004ab <pxCurrentTimerList>
     2f0:	f0 91 ac 04 	lds	r31, 0x04AC	; 0x8004ac <pxCurrentTimerList+0x1>
     2f4:	d0 80       	ld	r13, Z

        if( *pxListWasEmpty == pdFALSE )
     2f6:	dd 20       	and	r13, r13
     2f8:	31 f0       	breq	.+12     	; 0x306 <prvTimerTask+0x28>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
     2fa:	05 80       	ldd	r0, Z+5	; 0x05
     2fc:	f6 81       	ldd	r31, Z+6	; 0x06
     2fe:	e0 2d       	mov	r30, r0
     300:	00 81       	ld	r16, Z
     302:	11 81       	ldd	r17, Z+1	; 0x01
     304:	02 c0       	rjmp	.+4      	; 0x30a <prvTimerTask+0x2c>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
     306:	00 e0       	ldi	r16, 0x00	; 0
     308:	10 e0       	ldi	r17, 0x00	; 0
                                            BaseType_t xListWasEmpty )
    {
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
     30a:	0e 94 82 10 	call	0x2104	; 0x2104 <vTaskSuspendAll>
    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
     30e:	0e 94 88 10 	call	0x2110	; 0x2110 <xTaskGetTickCount>
     312:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
     314:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <xLastTime.2488>
     318:	90 91 a4 04 	lds	r25, 0x04A4	; 0x8004a4 <xLastTime.2488+0x1>
     31c:	e8 16       	cp	r14, r24
     31e:	f9 06       	cpc	r15, r25
     320:	20 f4       	brcc	.+8      	; 0x32a <prvTimerTask+0x4c>
        {
            prvSwitchTimerLists();
     322:	0e 94 00 15 	call	0x2a00	; 0x2a00 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
     326:	81 e0       	ldi	r24, 0x01	; 1
     328:	01 c0       	rjmp	.+2      	; 0x32c <prvTimerTask+0x4e>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
     32a:	80 e0       	ldi	r24, 0x00	; 0
        }

        xLastTime = xTimeNow;
     32c:	f0 92 a4 04 	sts	0x04A4, r15	; 0x8004a4 <xLastTime.2488+0x1>
     330:	e0 92 a3 04 	sts	0x04A3, r14	; 0x8004a3 <xLastTime.2488>
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

            if( xTimerListsWereSwitched == pdFALSE )
     334:	81 11       	cpse	r24, r1
     336:	24 c0       	rjmp	.+72     	; 0x380 <prvTimerTask+0xa2>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
     338:	dd 20       	and	r13, r13
     33a:	51 f0       	breq	.+20     	; 0x350 <prvTimerTask+0x72>
     33c:	e0 16       	cp	r14, r16
     33e:	f1 06       	cpc	r15, r17
     340:	70 f0       	brcs	.+28     	; 0x35e <prvTimerTask+0x80>
                {
                    ( void ) xTaskResumeAll();
     342:	0e 94 9b 11 	call	0x2336	; 0x2336 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
     346:	b7 01       	movw	r22, r14
     348:	c8 01       	movw	r24, r16
     34a:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <prvProcessExpiredTimer>
     34e:	1e c0       	rjmp	.+60     	; 0x38c <prvTimerTask+0xae>
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
     350:	e0 91 a9 04 	lds	r30, 0x04A9	; 0x8004a9 <pxOverflowTimerList>
     354:	f0 91 aa 04 	lds	r31, 0x04AA	; 0x8004aa <pxOverflowTimerList+0x1>
     358:	80 81       	ld	r24, Z
     35a:	41 e0       	ldi	r20, 0x01	; 1
     35c:	81 11       	cpse	r24, r1
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

            if( xTimerListsWereSwitched == pdFALSE )
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
     35e:	40 e0       	ldi	r20, 0x00	; 0
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
     360:	b8 01       	movw	r22, r16
     362:	6e 19       	sub	r22, r14
     364:	7f 09       	sbc	r23, r15
     366:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <xTimerQueue>
     36a:	90 91 a8 04 	lds	r25, 0x04A8	; 0x8004a8 <xTimerQueue+0x1>
     36e:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
     372:	0e 94 9b 11 	call	0x2336	; 0x2336 <xTaskResumeAll>
     376:	81 11       	cpse	r24, r1
     378:	09 c0       	rjmp	.+18     	; 0x38c <prvTimerTask+0xae>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
     37a:	0e 94 da 16 	call	0x2db4	; 0x2db4 <vPortYield>
     37e:	06 c0       	rjmp	.+12     	; 0x38c <prvTimerTask+0xae>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
     380:	0e 94 9b 11 	call	0x2336	; 0x2336 <xTaskResumeAll>
     384:	03 c0       	rjmp	.+6      	; 0x38c <prvTimerTask+0xae>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
     386:	89 81       	ldd	r24, Y+1	; 0x01
     388:	87 ff       	sbrs	r24, 7
     38a:	0e c0       	rjmp	.+28     	; 0x3a8 <prvTimerTask+0xca>
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
     38c:	40 e0       	ldi	r20, 0x00	; 0
     38e:	50 e0       	ldi	r21, 0x00	; 0
     390:	be 01       	movw	r22, r28
     392:	6f 5f       	subi	r22, 0xFF	; 255
     394:	7f 4f       	sbci	r23, 0xFF	; 255
     396:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <xTimerQueue>
     39a:	90 91 a8 04 	lds	r25, 0x04A8	; 0x8004a8 <xTimerQueue+0x1>
     39e:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <xQueueReceive>
     3a2:	81 11       	cpse	r24, r1
     3a4:	f0 cf       	rjmp	.-32     	; 0x386 <prvTimerTask+0xa8>
     3a6:	a2 cf       	rjmp	.-188    	; 0x2ec <prvTimerTask+0xe>
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
     3a8:	0c 81       	ldd	r16, Y+4	; 0x04
     3aa:	1d 81       	ldd	r17, Y+5	; 0x05

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
     3ac:	d8 01       	movw	r26, r16
     3ae:	1a 96       	adiw	r26, 0x0a	; 10
     3b0:	8d 91       	ld	r24, X+
     3b2:	9c 91       	ld	r25, X
     3b4:	1b 97       	sbiw	r26, 0x0b	; 11
     3b6:	89 2b       	or	r24, r25
     3b8:	21 f0       	breq	.+8      	; 0x3c2 <prvTimerTask+0xe4>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
     3ba:	c8 01       	movw	r24, r16
     3bc:	02 96       	adiw	r24, 0x02	; 2
     3be:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <uxListRemove>
    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
     3c2:	0e 94 88 10 	call	0x2110	; 0x2110 <xTaskGetTickCount>
     3c6:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
     3c8:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <xLastTime.2488>
     3cc:	90 91 a4 04 	lds	r25, 0x04A4	; 0x8004a4 <xLastTime.2488+0x1>
     3d0:	e8 16       	cp	r14, r24
     3d2:	f9 06       	cpc	r15, r25
     3d4:	10 f4       	brcc	.+4      	; 0x3da <prvTimerTask+0xfc>
        {
            prvSwitchTimerLists();
     3d6:	0e 94 00 15 	call	0x2a00	; 0x2a00 <prvSwitchTimerLists>
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
        }

        xLastTime = xTimeNow;
     3da:	f0 92 a4 04 	sts	0x04A4, r15	; 0x8004a4 <xLastTime.2488+0x1>
     3de:	e0 92 a3 04 	sts	0x04A3, r14	; 0x8004a3 <xLastTime.2488>
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

                switch( xMessage.xMessageID )
     3e2:	e9 81       	ldd	r30, Y+1	; 0x01
     3e4:	8e 2f       	mov	r24, r30
     3e6:	ee 0f       	add	r30, r30
     3e8:	99 0b       	sbc	r25, r25
     3ea:	aa 0b       	sbc	r26, r26
     3ec:	bb 0b       	sbc	r27, r27
     3ee:	fc 01       	movw	r30, r24
     3f0:	31 97       	sbiw	r30, 0x01	; 1
     3f2:	e9 30       	cpi	r30, 0x09	; 9
     3f4:	f1 05       	cpc	r31, r1
     3f6:	50 f6       	brcc	.-108    	; 0x38c <prvTimerTask+0xae>
     3f8:	d8 01       	movw	r26, r16
     3fa:	52 96       	adiw	r26, 0x12	; 18
     3fc:	9c 91       	ld	r25, X
     3fe:	88 27       	eor	r24, r24
     400:	e0 55       	subi	r30, 0x50	; 80
     402:	ff 4f       	sbci	r31, 0xFF	; 255
     404:	8f 4f       	sbci	r24, 0xFF	; 255
     406:	0c 94 dd 17 	jmp	0x2fba	; 0x2fba <__tablejump2__>
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
     40a:	91 60       	ori	r25, 0x01	; 1
     40c:	f8 01       	movw	r30, r16
     40e:	92 8b       	std	Z+18, r25	; 0x12

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
     410:	2a 81       	ldd	r18, Y+2	; 0x02
     412:	3b 81       	ldd	r19, Y+3	; 0x03
     414:	64 85       	ldd	r22, Z+12	; 0x0c
     416:	75 85       	ldd	r23, Z+13	; 0x0d
     418:	62 0f       	add	r22, r18
     41a:	73 1f       	adc	r23, r19
     41c:	a7 01       	movw	r20, r14
     41e:	c8 01       	movw	r24, r16
     420:	0e 94 8c 14 	call	0x2918	; 0x2918 <prvInsertTimerInActiveList>
     424:	88 23       	and	r24, r24
     426:	09 f4       	brne	.+2      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     428:	b1 cf       	rjmp	.-158    	; 0x38c <prvTimerTask+0xae>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
     42a:	d8 01       	movw	r26, r16
     42c:	52 96       	adiw	r26, 0x12	; 18
     42e:	8c 91       	ld	r24, X
     430:	52 97       	sbiw	r26, 0x12	; 18
     432:	82 ff       	sbrs	r24, 2
     434:	0d c0       	rjmp	.+26     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
     436:	6a 81       	ldd	r22, Y+2	; 0x02
     438:	7b 81       	ldd	r23, Y+3	; 0x03
     43a:	1c 96       	adiw	r26, 0x0c	; 12
     43c:	8d 91       	ld	r24, X+
     43e:	9c 91       	ld	r25, X
     440:	1d 97       	sbiw	r26, 0x0d	; 13
     442:	68 0f       	add	r22, r24
     444:	79 1f       	adc	r23, r25
     446:	a7 01       	movw	r20, r14
     448:	c8 01       	movw	r24, r16
     44a:	0e 94 b5 14 	call	0x296a	; 0x296a <prvReloadTimer>
     44e:	03 c0       	rjmp	.+6      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
     450:	8e 7f       	andi	r24, 0xFE	; 254
     452:	f8 01       	movw	r30, r16
     454:	82 8b       	std	Z+18, r24	; 0x12
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
     456:	d8 01       	movw	r26, r16
     458:	50 96       	adiw	r26, 0x10	; 16
     45a:	ed 91       	ld	r30, X+
     45c:	fc 91       	ld	r31, X
     45e:	51 97       	sbiw	r26, 0x11	; 17
     460:	c8 01       	movw	r24, r16
     462:	19 95       	eicall
     464:	93 cf       	rjmp	.-218    	; 0x38c <prvTimerTask+0xae>
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        break;

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
     466:	91 60       	ori	r25, 0x01	; 1
     468:	d8 01       	movw	r26, r16
     46a:	52 96       	adiw	r26, 0x12	; 18
     46c:	9c 93       	st	X, r25
     46e:	52 97       	sbiw	r26, 0x12	; 18
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
     470:	6a 81       	ldd	r22, Y+2	; 0x02
     472:	7b 81       	ldd	r23, Y+3	; 0x03
     474:	1d 96       	adiw	r26, 0x0d	; 13
     476:	7c 93       	st	X, r23
     478:	6e 93       	st	-X, r22
     47a:	1c 97       	sbiw	r26, 0x0c	; 12
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
     47c:	6e 0d       	add	r22, r14
     47e:	7f 1d       	adc	r23, r15
     480:	97 01       	movw	r18, r14
     482:	a7 01       	movw	r20, r14
     484:	c8 01       	movw	r24, r16
     486:	0e 94 8c 14 	call	0x2918	; 0x2918 <prvInsertTimerInActiveList>
     48a:	80 cf       	rjmp	.-256    	; 0x38c <prvTimerTask+0xae>
                        {
                            /* If dynamic allocation is not enabled, the memory
                             * could not have been dynamically allocated. So there is
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
     48c:	9e 7f       	andi	r25, 0xFE	; 254
     48e:	f8 01       	movw	r30, r16
     490:	92 8b       	std	Z+18, r25	; 0x12
     492:	7c cf       	rjmp	.-264    	; 0x38c <prvTimerTask+0xae>

00000494 <__ctors_start>:
     494:	f3 02       	muls	r31, r19

00000496 <__ctors_end>:
     496:	11 24       	eor	r1, r1
     498:	1f be       	out	0x3f, r1	; 63
     49a:	cf ef       	ldi	r28, 0xFF	; 255
     49c:	d1 e2       	ldi	r29, 0x21	; 33
     49e:	de bf       	out	0x3e, r29	; 62
     4a0:	cd bf       	out	0x3d, r28	; 61
     4a2:	00 e0       	ldi	r16, 0x00	; 0
     4a4:	0c bf       	out	0x3c, r16	; 60

000004a6 <__do_copy_data>:
     4a6:	12 e0       	ldi	r17, 0x02	; 2
     4a8:	a0 e0       	ldi	r26, 0x00	; 0
     4aa:	b2 e0       	ldi	r27, 0x02	; 2
     4ac:	ee ee       	ldi	r30, 0xEE	; 238
     4ae:	ff e2       	ldi	r31, 0x2F	; 47
     4b0:	00 e0       	ldi	r16, 0x00	; 0
     4b2:	0b bf       	out	0x3b, r16	; 59
     4b4:	02 c0       	rjmp	.+4      	; 0x4ba <__do_copy_data+0x14>
     4b6:	07 90       	elpm	r0, Z+
     4b8:	0d 92       	st	X+, r0
     4ba:	a0 37       	cpi	r26, 0x70	; 112
     4bc:	b1 07       	cpc	r27, r17
     4be:	d9 f7       	brne	.-10     	; 0x4b6 <__do_copy_data+0x10>

000004c0 <__do_clear_bss>:
     4c0:	26 e0       	ldi	r18, 0x06	; 6
     4c2:	a0 e7       	ldi	r26, 0x70	; 112
     4c4:	b2 e0       	ldi	r27, 0x02	; 2
     4c6:	01 c0       	rjmp	.+2      	; 0x4ca <.do_clear_bss_start>

000004c8 <.do_clear_bss_loop>:
     4c8:	1d 92       	st	X+, r1

000004ca <.do_clear_bss_start>:
     4ca:	a9 32       	cpi	r26, 0x29	; 41
     4cc:	b2 07       	cpc	r27, r18
     4ce:	e1 f7       	brne	.-8      	; 0x4c8 <.do_clear_bss_loop>

000004d0 <__do_global_ctors>:
     4d0:	12 e0       	ldi	r17, 0x02	; 2
     4d2:	cb e4       	ldi	r28, 0x4B	; 75
     4d4:	d2 e0       	ldi	r29, 0x02	; 2
     4d6:	00 e0       	ldi	r16, 0x00	; 0
     4d8:	06 c0       	rjmp	.+12     	; 0x4e6 <__do_global_ctors+0x16>
     4da:	21 97       	sbiw	r28, 0x01	; 1
     4dc:	01 09       	sbc	r16, r1
     4de:	80 2f       	mov	r24, r16
     4e0:	fe 01       	movw	r30, r28
     4e2:	0e 94 dd 17 	call	0x2fba	; 0x2fba <__tablejump2__>
     4e6:	ca 34       	cpi	r28, 0x4A	; 74
     4e8:	d1 07       	cpc	r29, r17
     4ea:	80 e0       	ldi	r24, 0x00	; 0
     4ec:	08 07       	cpc	r16, r24
     4ee:	a9 f7       	brne	.-22     	; 0x4da <__do_global_ctors+0xa>
     4f0:	9f d2       	rcall	.+1342   	; 0xa30 <main>
     4f2:	0c 94 f5 17 	jmp	0x2fea	; 0x2fea <_exit>

000004f6 <__bad_interrupt>:
     4f6:	84 cd       	rjmp	.-1272   	; 0x0 <__vectors>

000004f8 <_Z8BSP_initv>:
void BSP_buzzer_on(void){
	digitalWrite(PIN_BUZZER, HIGH);
}

void BSP_buzzer_off(void){
	digitalWrite(PIN_BUZZER, LOW);
     4f8:	61 e0       	ldi	r22, 0x01	; 1
     4fa:	89 e2       	ldi	r24, 0x29	; 41
     4fc:	12 d4       	rcall	.+2084   	; 0xd22 <pinMode>
     4fe:	61 e0       	ldi	r22, 0x01	; 1
     500:	8c e2       	ldi	r24, 0x2C	; 44
     502:	0f d4       	rcall	.+2078   	; 0xd22 <pinMode>
     504:	61 e0       	ldi	r22, 0x01	; 1
     506:	8a e2       	ldi	r24, 0x2A	; 42
     508:	0c d4       	rcall	.+2072   	; 0xd22 <pinMode>
     50a:	61 e0       	ldi	r22, 0x01	; 1
     50c:	8d e2       	ldi	r24, 0x2D	; 45
     50e:	09 d4       	rcall	.+2066   	; 0xd22 <pinMode>
     510:	62 e0       	ldi	r22, 0x02	; 2
     512:	80 e3       	ldi	r24, 0x30	; 48
     514:	06 d4       	rcall	.+2060   	; 0xd22 <pinMode>
     516:	81 e7       	ldi	r24, 0x71	; 113
     518:	92 e0       	ldi	r25, 0x02	; 2
     51a:	7d d7       	rcall	.+3834   	; 0x1416 <_ZN7MCP25155resetEv>
     51c:	42 e0       	ldi	r20, 0x02	; 2
     51e:	6b e0       	ldi	r22, 0x0B	; 11
     520:	81 e7       	ldi	r24, 0x71	; 113
     522:	92 e0       	ldi	r25, 0x02	; 2
     524:	e2 d5       	rcall	.+3012   	; 0x10ea <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK>
     526:	81 e7       	ldi	r24, 0x71	; 113
     528:	92 e0       	ldi	r25, 0x02	; 2
     52a:	dd c5       	rjmp	.+3002   	; 0x10e6 <_ZN7MCP251513setNormalModeEv>

0000052c <_Z14BSP_led_red_onv>:
     52c:	61 e0       	ldi	r22, 0x01	; 1
     52e:	8c e2       	ldi	r24, 0x2C	; 44
     530:	34 c4       	rjmp	.+2152   	; 0xd9a <digitalWrite>

00000532 <_Z15BSP_led_red_offv>:
     532:	60 e0       	ldi	r22, 0x00	; 0
     534:	8c e2       	ldi	r24, 0x2C	; 44
     536:	31 c4       	rjmp	.+2146   	; 0xd9a <digitalWrite>

00000538 <_Z17BSP_led_yellow_onv>:
     538:	61 e0       	ldi	r22, 0x01	; 1
     53a:	8a e2       	ldi	r24, 0x2A	; 42
     53c:	2e c4       	rjmp	.+2140   	; 0xd9a <digitalWrite>

0000053e <_Z18BSP_led_yellow_offv>:
     53e:	60 e0       	ldi	r22, 0x00	; 0
     540:	8a e2       	ldi	r24, 0x2A	; 42
     542:	2b c4       	rjmp	.+2134   	; 0xd9a <digitalWrite>

00000544 <_Z16BSP_led_green_onv>:
     544:	61 e0       	ldi	r22, 0x01	; 1
     546:	89 e2       	ldi	r24, 0x29	; 41
     548:	28 c4       	rjmp	.+2128   	; 0xd9a <digitalWrite>

0000054a <_Z17BSP_led_green_offv>:
     54a:	60 e0       	ldi	r22, 0x00	; 0
     54c:	89 e2       	ldi	r24, 0x29	; 41
     54e:	25 c4       	rjmp	.+2122   	; 0xd9a <digitalWrite>

00000550 <_Z14BSP_get_switchv>:
}


int BSP_get_switch(void){
	return digitalRead(PIN_SWITCH);
     550:	80 e3       	ldi	r24, 0x30	; 48
     552:	51 c4       	rjmp	.+2210   	; 0xdf6 <digitalRead>

00000554 <_Z18BSP_send_can_frameP9can_frame>:
}

void BSP_send_can_frame(Can_frame_t * frame){
	mcp2515.sendMessage(frame);
     554:	bc 01       	movw	r22, r24
     556:	81 e7       	ldi	r24, 0x71	; 113
     558:	92 e0       	ldi	r25, 0x02	; 2
     55a:	0c 94 26 0b 	jmp	0x164c	; 0x164c <_ZN7MCP251511sendMessageEPK9can_frame>

0000055e <_Z17BSP_get_can_frameP9can_frame>:
}

int BSP_get_can_frame(Can_frame_t *frame){
	int rtnValue = 0;
	if (mcp2515.readMessage(frame) == MCP2515::ERROR_OK){
     55e:	bc 01       	movw	r22, r24
     560:	81 e7       	ldi	r24, 0x71	; 113
     562:	92 e0       	ldi	r25, 0x02	; 2
     564:	0e 94 14 0c 	call	0x1828	; 0x1828 <_ZN7MCP251511readMessageEP9can_frame>
		rtnValue = 1;
	}
	return rtnValue;
     568:	21 e0       	ldi	r18, 0x01	; 1
     56a:	30 e0       	ldi	r19, 0x00	; 0
     56c:	88 23       	and	r24, r24
     56e:	11 f0       	breq	.+4      	; 0x574 <_Z17BSP_get_can_frameP9can_frame+0x16>
     570:	20 e0       	ldi	r18, 0x00	; 0
     572:	30 e0       	ldi	r19, 0x00	; 0
}
     574:	c9 01       	movw	r24, r18
     576:	08 95       	ret

00000578 <vApplicationTickHook>:
		Active_postFromISR(AO_blinkyButton, &switchPressedEvt, xHigherPriorityTaskWoken);
		state_switch = STATE_SWITCH_PRESSED;
	}
}

void vApplicationTickHook(void) {
     578:	cf 93       	push	r28
     57a:	df 93       	push	r29
     57c:	1f 92       	push	r1
     57e:	cd b7       	in	r28, 0x3d	; 61
     580:	de b7       	in	r29, 0x3e	; 62
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
     582:	19 82       	std	Y+1, r1	; 0x01
	int current = BSP_get_switch();
     584:	e5 df       	rcall	.-54     	; 0x550 <_Z14BSP_get_switchv>
	
	switch(state_switch){
     586:	20 91 70 02 	lds	r18, 0x0270	; 0x800270 <__data_end>
     58a:	21 30       	cpi	r18, 0x01	; 1
     58c:	19 f1       	breq	.+70     	; 0x5d4 <vApplicationTickHook+0x5c>
     58e:	18 f0       	brcs	.+6      	; 0x596 <vApplicationTickHook+0x1e>
     590:	22 30       	cpi	r18, 0x02	; 2
     592:	81 f0       	breq	.+32     	; 0x5b4 <vApplicationTickHook+0x3c>
     594:	21 c0       	rjmp	.+66     	; 0x5d8 <vApplicationTickHook+0x60>

static State_switch_t state_switch = STATE_SWITCH_INIT;


static void state_switch_pressed_handler(const int * reading, BaseType_t * xHigherPriorityTaskWoken){
	if(*reading == SWITCH_NOT_PRESSED){
     596:	81 30       	cpi	r24, 0x01	; 1
     598:	91 05       	cpc	r25, r1
     59a:	61 f4       	brne	.+24     	; 0x5b4 <vApplicationTickHook+0x3c>
		static Event const switchRelasedEvt = {SWITCH_RELEASED_SIG};
		Active_postFromISR(AO_blinkyButton, &switchRelasedEvt, xHigherPriorityTaskWoken);
     59c:	ae 01       	movw	r20, r28
     59e:	4f 5f       	subi	r20, 0xFF	; 255
     5a0:	5f 4f       	sbci	r21, 0xFF	; 255
     5a2:	66 e4       	ldi	r22, 0x46	; 70
     5a4:	72 e0       	ldi	r23, 0x02	; 2
     5a6:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <AO_blinkyButton>
     5aa:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <AO_blinkyButton+0x1>
     5ae:	ee d0       	rcall	.+476    	; 0x78c <_Z18Active_postFromISRP6ActivePK5EventPa>
		state_switch = STATE_SWITCH_NOT_PRESSED;
     5b0:	82 e0       	ldi	r24, 0x02	; 2
     5b2:	0d c0       	rjmp	.+26     	; 0x5ce <vApplicationTickHook+0x56>
	}
}
static void state_switch_not_pressed_handler(const int * reading, BaseType_t * xHigherPriorityTaskWoken){
	if(*reading == SWITCH_PRESSED){
     5b4:	89 2b       	or	r24, r25
     5b6:	81 f4       	brne	.+32     	; 0x5d8 <vApplicationTickHook+0x60>
		static Event const switchPressedEvt = {SWITCH_PRESSED_SIG};
		Active_postFromISR(AO_blinkyButton, &switchPressedEvt, xHigherPriorityTaskWoken);
     5b8:	ae 01       	movw	r20, r28
     5ba:	4f 5f       	subi	r20, 0xFF	; 255
     5bc:	5f 4f       	sbci	r21, 0xFF	; 255
     5be:	64 e4       	ldi	r22, 0x44	; 68
     5c0:	72 e0       	ldi	r23, 0x02	; 2
     5c2:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <AO_blinkyButton>
     5c6:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <AO_blinkyButton+0x1>
     5ca:	e0 d0       	rcall	.+448    	; 0x78c <_Z18Active_postFromISRP6ActivePK5EventPa>
		state_switch = STATE_SWITCH_PRESSED;
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <__data_end>
     5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <vApplicationTickHook+0x60>

static State_switch_t state_switch = STATE_SWITCH_INIT;


static void state_switch_pressed_handler(const int * reading, BaseType_t * xHigherPriorityTaskWoken){
	if(*reading == SWITCH_NOT_PRESSED){
     5d4:	01 97       	sbiw	r24, 0x01	; 1
			state_switch_not_pressed_handler(&current, &xHigherPriorityTaskWoken);
			break;
		}
	}
	
	CanFrameEvent_fromISR(&xHigherPriorityTaskWoken);
     5d6:	11 f3       	breq	.-60     	; 0x59c <vApplicationTickHook+0x24>
     5d8:	ce 01       	movw	r24, r28
     5da:	01 96       	adiw	r24, 0x01	; 1
     5dc:	45 d1       	rcall	.+650    	; 0x868 <_Z21CanFrameEvent_fromISRPa>

}
     5de:	0f 90       	pop	r0
     5e0:	df 91       	pop	r29
     5e2:	cf 91       	pop	r28
     5e4:	08 95       	ret

000005e6 <_GLOBAL__sub_I__Z8BSP_initv>:
     5e6:	0f 93       	push	r16
     5e8:	1f 93       	push	r17
#define PIN_LED_RED						44
#define PIN_LED_YELLOW					42
#define PIN_LED_GREEN					41


static MCP2515 mcp2515(SS_PIN);
     5ea:	00 e0       	ldi	r16, 0x00	; 0
     5ec:	10 e0       	ldi	r17, 0x00	; 0
     5ee:	20 e8       	ldi	r18, 0x80	; 128
     5f0:	36 e9       	ldi	r19, 0x96	; 150
     5f2:	48 e9       	ldi	r20, 0x98	; 152
     5f4:	50 e0       	ldi	r21, 0x00	; 0
     5f6:	61 e3       	ldi	r22, 0x31	; 49
     5f8:	81 e7       	ldi	r24, 0x71	; 113
     5fa:	92 e0       	ldi	r25, 0x02	; 2
     5fc:	79 d4       	rcall	.+2290   	; 0xef0 <_ZN7MCP2515C1EhmP8SPIClass>
		}
	}
	
	CanFrameEvent_fromISR(&xHigherPriorityTaskWoken);

}
     5fe:	1f 91       	pop	r17
     600:	0f 91       	pop	r16
     602:	08 95       	ret

00000604 <_Z14areFramesEqualP9can_frameS0_>:
		CAN_REQUEST_SEAT_BELT
	}
};


int areFramesEqual(can_frame * const frame1, can_frame * const frame2){
     604:	cf 92       	push	r12
     606:	df 92       	push	r13
     608:	ef 92       	push	r14
     60a:	ff 92       	push	r15
     60c:	0f 93       	push	r16
     60e:	1f 93       	push	r17
	int rtnValue = false;
	if( frame1->can_id == frame2->can_id &&
     610:	fc 01       	movw	r30, r24
     612:	c0 80       	ld	r12, Z
     614:	d1 80       	ldd	r13, Z+1	; 0x01
     616:	e2 80       	ldd	r14, Z+2	; 0x02
     618:	f3 80       	ldd	r15, Z+3	; 0x03
     61a:	fb 01       	movw	r30, r22
     61c:	00 81       	ld	r16, Z
     61e:	11 81       	ldd	r17, Z+1	; 0x01
     620:	22 81       	ldd	r18, Z+2	; 0x02
     622:	33 81       	ldd	r19, Z+3	; 0x03
     624:	c0 16       	cp	r12, r16
     626:	d1 06       	cpc	r13, r17
     628:	e2 06       	cpc	r14, r18
     62a:	f3 06       	cpc	r15, r19
     62c:	f1 f4       	brne	.+60     	; 0x66a <_Z14areFramesEqualP9can_frameS0_+0x66>
	frame1->can_dlc == frame2->can_dlc)
     62e:	fc 01       	movw	r30, r24
     630:	24 81       	ldd	r18, Z+4	; 0x04
};


int areFramesEqual(can_frame * const frame1, can_frame * const frame2){
	int rtnValue = false;
	if( frame1->can_id == frame2->can_id &&
     632:	fb 01       	movw	r30, r22
     634:	34 81       	ldd	r19, Z+4	; 0x04
     636:	23 13       	cpse	r18, r19
     638:	18 c0       	rjmp	.+48     	; 0x66a <_Z14areFramesEqualP9can_frameS0_+0x66>
     63a:	fc 01       	movw	r30, r24
     63c:	38 96       	adiw	r30, 0x08	; 8
     63e:	db 01       	movw	r26, r22
     640:	18 96       	adiw	r26, 0x08	; 8
     642:	40 e0       	ldi	r20, 0x00	; 0
     644:	50 e0       	ldi	r21, 0x00	; 0
	frame1->can_dlc == frame2->can_dlc)
	{
		int i;
		for(i=0; i< frame1->can_dlc; i++){
     646:	30 e0       	ldi	r19, 0x00	; 0
     648:	42 17       	cp	r20, r18
     64a:	53 07       	cpc	r21, r19
     64c:	3c f4       	brge	.+14     	; 0x65c <_Z14areFramesEqualP9can_frameS0_+0x58>
			if(frame1->data[i] != frame2->data[i]){
     64e:	91 91       	ld	r25, Z+
     650:	8d 91       	ld	r24, X+
     652:	98 13       	cpse	r25, r24
     654:	03 c0       	rjmp	.+6      	; 0x65c <_Z14areFramesEqualP9can_frameS0_+0x58>
	int rtnValue = false;
	if( frame1->can_id == frame2->can_id &&
	frame1->can_dlc == frame2->can_dlc)
	{
		int i;
		for(i=0; i< frame1->can_dlc; i++){
     656:	4f 5f       	subi	r20, 0xFF	; 255
     658:	5f 4f       	sbci	r21, 0xFF	; 255
     65a:	f6 cf       	rjmp	.-20     	; 0x648 <_Z14areFramesEqualP9can_frameS0_+0x44>
	}
};


int areFramesEqual(can_frame * const frame1, can_frame * const frame2){
	int rtnValue = false;
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	42 17       	cp	r20, r18
     662:	53 07       	cpc	r21, r19
     664:	21 f0       	breq	.+8      	; 0x66e <_Z14areFramesEqualP9can_frameS0_+0x6a>
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	02 c0       	rjmp	.+4      	; 0x66e <_Z14areFramesEqualP9can_frameS0_+0x6a>
     66a:	80 e0       	ldi	r24, 0x00	; 0
     66c:	90 e0       	ldi	r25, 0x00	; 0
			rtnValue = true;
		}
	}
	
	return rtnValue;
}
     66e:	1f 91       	pop	r17
     670:	0f 91       	pop	r16
     672:	ff 90       	pop	r15
     674:	ef 90       	pop	r14
     676:	df 90       	pop	r13
     678:	cf 90       	pop	r12
     67a:	08 95       	ret

0000067c <_ZL16Active_eventLoopPv>:
    me->dispatch = dispatch; /* assign the dispatch handler */
}

/*..........................................................................*/
/* thread function for all Active Objects (FreeRTOS task signature) */
static void Active_eventLoop(void *pvParameters) {
     67c:	cf 93       	push	r28
     67e:	df 93       	push	r29
     680:	1f 92       	push	r1
     682:	1f 92       	push	r1
     684:	cd b7       	in	r28, 0x3d	; 61
     686:	de b7       	in	r29, 0x3e	; 62
     688:	8c 01       	movw	r16, r24
    static Event const initEvt = { INIT_SIG };

    configASSERT(me); /* Active object must be provided */

    /* initialize the AO */
    (*me->dispatch)(me, &initEvt);
     68a:	7c 01       	movw	r14, r24
     68c:	8b e4       	ldi	r24, 0x4B	; 75
     68e:	e8 0e       	add	r14, r24
     690:	f1 1c       	adc	r15, r1
     692:	d7 01       	movw	r26, r14
     694:	ed 91       	ld	r30, X+
     696:	fc 91       	ld	r31, X
     698:	6e e4       	ldi	r22, 0x4E	; 78
     69a:	72 e0       	ldi	r23, 0x02	; 2
     69c:	c8 01       	movw	r24, r16
     69e:	19 95       	eicall

    for (;;) {   /* for-ever "superloop" */
        Event const *e; /* pointer to event object ("message") */

        /* wait for any event and receive it into object 'e' */
        xQueueReceive(me->queue, &e, portMAX_DELAY); /* BLOCKING! */
     6a0:	4f ef       	ldi	r20, 0xFF	; 255
     6a2:	5f ef       	ldi	r21, 0xFF	; 255
     6a4:	be 01       	movw	r22, r28
     6a6:	6f 5f       	subi	r22, 0xFF	; 255
     6a8:	7f 4f       	sbci	r23, 0xFF	; 255
     6aa:	f8 01       	movw	r30, r16
     6ac:	82 a5       	ldd	r24, Z+42	; 0x2a
     6ae:	93 a5       	ldd	r25, Z+43	; 0x2b
     6b0:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <xQueueReceive>
        configASSERT(e != (Event const *)0);

        /* dispatch event to the active object 'me' */
        (*me->dispatch)(me, e); /* NO BLOCKING! */
     6b4:	69 81       	ldd	r22, Y+1	; 0x01
     6b6:	7a 81       	ldd	r23, Y+2	; 0x02
     6b8:	d7 01       	movw	r26, r14
     6ba:	ed 91       	ld	r30, X+
     6bc:	fc 91       	ld	r31, X
     6be:	ee cf       	rjmp	.-36     	; 0x69c <_ZL16Active_eventLoopPv+0x20>

000006c0 <_Z11Active_ctorP6ActivePFvS0_PK5EventE>:



/*..........................................................................*/
void Active_ctor(Active * const me, DispatchHandler dispatch) {
    me->dispatch = dispatch; /* assign the dispatch handler */
     6c0:	85 5b       	subi	r24, 0xB5	; 181
     6c2:	9f 4f       	sbci	r25, 0xFF	; 255
     6c4:	fc 01       	movw	r30, r24
     6c6:	71 83       	std	Z+1, r23	; 0x01
     6c8:	60 83       	st	Z, r22
     6ca:	08 95       	ret

000006cc <_Z12Active_startP6ActivehPP5EventmPvmj>:
                  Event **queueSto,
                  uint32_t queueLen,
                  void *stackSto,
                  uint32_t stackSize,
                  uint16_t opt)
{
     6cc:	4f 92       	push	r4
     6ce:	5f 92       	push	r5
     6d0:	6f 92       	push	r6
     6d2:	7f 92       	push	r7
     6d4:	8f 92       	push	r8
     6d6:	9f 92       	push	r9
     6d8:	af 92       	push	r10
     6da:	bf 92       	push	r11
     6dc:	cf 92       	push	r12
     6de:	df 92       	push	r13
     6e0:	ef 92       	push	r14
     6e2:	ff 92       	push	r15
     6e4:	0f 93       	push	r16
     6e6:	1f 93       	push	r17
     6e8:	cf 93       	push	r28
     6ea:	df 93       	push	r29
     6ec:	cd b7       	in	r28, 0x3d	; 61
     6ee:	de b7       	in	r29, 0x3e	; 62
     6f0:	4c 01       	movw	r8, r24
     6f2:	16 2f       	mov	r17, r22
     6f4:	80 2f       	mov	r24, r16
     6f6:	25 01       	movw	r4, r10
     6f8:	36 01       	movw	r6, r12
    StackType_t *stk_sto = (StackType_t *)stackSto;
    uint32_t stk_depth = (stackSize / sizeof(StackType_t));

    (void)opt; /* unused parameter */
    me->queue = xQueueCreateStatic(
     6fa:	94 01       	movw	r18, r8
     6fc:	24 5d       	subi	r18, 0xD4	; 212
     6fe:	3f 4f       	sbci	r19, 0xFF	; 255
     700:	00 e0       	ldi	r16, 0x00	; 0
     702:	62 e0       	ldi	r22, 0x02	; 2
     704:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <xQueueGenericCreateStatic>
                   queueLen,            /* queue length - provided by user */
                   sizeof(Event *),     /* item size */
                   (uint8_t *)queueSto, /* queue storage - provided by user */
                   &me->queue_cb);      /* queue control block */
     708:	f4 01       	movw	r30, r8
     70a:	93 a7       	std	Z+43, r25	; 0x2b
     70c:	82 a7       	std	Z+42, r24	; 0x2a
    configASSERT(me->queue);            /* queue must be created */

    me->thread = xTaskCreateStatic(
     70e:	64 01       	movw	r12, r8
     710:	f2 e0       	ldi	r31, 0x02	; 2
     712:	cf 0e       	add	r12, r31
     714:	d1 1c       	adc	r13, r1
     716:	01 2f       	mov	r16, r17
     718:	94 01       	movw	r18, r8
     71a:	a2 01       	movw	r20, r4
     71c:	68 e4       	ldi	r22, 0x48	; 72
     71e:	72 e0       	ldi	r23, 0x02	; 2
     720:	8e e3       	ldi	r24, 0x3E	; 62
     722:	93 e0       	ldi	r25, 0x03	; 3
     724:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <xTaskCreateStatic>
              "AO" ,                    /* the name of the task */
              stk_depth,                /* stack depth */
              me,                       /* the 'pvParameters' parameter */
              prio + tskIDLE_PRIORITY,  /* FreeRTOS priority */
              stk_sto,                  /* stack storage - provided by user */
              &me->thread_cb);          /* task control block */
     728:	f4 01       	movw	r30, r8
     72a:	91 83       	std	Z+1, r25	; 0x01
     72c:	80 83       	st	Z, r24
    configASSERT(me->thread);           /* thread must be created */
}
     72e:	df 91       	pop	r29
     730:	cf 91       	pop	r28
     732:	1f 91       	pop	r17
     734:	0f 91       	pop	r16
     736:	ff 90       	pop	r15
     738:	ef 90       	pop	r14
     73a:	df 90       	pop	r13
     73c:	cf 90       	pop	r12
     73e:	bf 90       	pop	r11
     740:	af 90       	pop	r10
     742:	9f 90       	pop	r9
     744:	8f 90       	pop	r8
     746:	7f 90       	pop	r7
     748:	6f 90       	pop	r6
     74a:	5f 90       	pop	r5
     74c:	4f 90       	pop	r4
     74e:	08 95       	ret

00000750 <_Z11Active_postP6ActivePK5Event>:

/*..........................................................................*/
void Active_post(Active * const me, Event const * const e) {
     750:	cf 93       	push	r28
     752:	df 93       	push	r29
     754:	1f 92       	push	r1
     756:	1f 92       	push	r1
     758:	cd b7       	in	r28, 0x3d	; 61
     75a:	de b7       	in	r29, 0x3e	; 62
     75c:	7a 83       	std	Y+2, r23	; 0x02
     75e:	69 83       	std	Y+1, r22	; 0x01
    BaseType_t status = xQueueSend(me->queue, (void *)&e, (TickType_t)0);
     760:	20 e0       	ldi	r18, 0x00	; 0
     762:	40 e0       	ldi	r20, 0x00	; 0
     764:	50 e0       	ldi	r21, 0x00	; 0
     766:	be 01       	movw	r22, r28
     768:	6f 5f       	subi	r22, 0xFF	; 255
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	fc 01       	movw	r30, r24
     76e:	82 a5       	ldd	r24, Z+42	; 0x2a
     770:	93 a5       	ldd	r25, Z+43	; 0x2b
     772:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <xQueueGenericSend>
    configASSERT(status == pdTRUE);
}
     776:	0f 90       	pop	r0
     778:	0f 90       	pop	r0
     77a:	df 91       	pop	r29
     77c:	cf 91       	pop	r28
     77e:	08 95       	ret

00000780 <_ZL18TimeEvent_callbackP10TimerDef_t>:
#define GET_TIME_EVENT_HEAD(ptr) \
    (TimeEvent*)((uintptr_t)(ptr) - offsetof(TimeEvent, timer_cb))

static void TimeEvent_callback(TimerHandle_t xTimer) {
    /* Also can use pvTimerGetTimerID(xTimer) */
    TimeEvent * const t = GET_TIME_EVENT_HEAD(xTimer);
     780:	06 97       	sbiw	r24, 0x06	; 6

    /* Callback always called from non-interrupt context so no need
     * to check xPortIsInsideInterrupt
     */
    Active_post(t->act, &t->super);
     782:	bc 01       	movw	r22, r24
     784:	fc 01       	movw	r30, r24
     786:	82 81       	ldd	r24, Z+2	; 0x02
     788:	93 81       	ldd	r25, Z+3	; 0x03
     78a:	e2 cf       	rjmp	.-60     	; 0x750 <_Z11Active_postP6ActivePK5Event>

0000078c <_Z18Active_postFromISRP6ActivePK5EventPa>:
}

/*..........................................................................*/
void Active_postFromISR(Active * const me, Event const * const e,
                        BaseType_t *pxHigherPriorityTaskWoken)
{
     78c:	cf 93       	push	r28
     78e:	df 93       	push	r29
     790:	1f 92       	push	r1
     792:	1f 92       	push	r1
     794:	cd b7       	in	r28, 0x3d	; 61
     796:	de b7       	in	r29, 0x3e	; 62
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	69 83       	std	Y+1, r22	; 0x01
    BaseType_t status = xQueueSendFromISR(me->queue, (void *)&e,
     79c:	20 e0       	ldi	r18, 0x00	; 0
     79e:	be 01       	movw	r22, r28
     7a0:	6f 5f       	subi	r22, 0xFF	; 255
     7a2:	7f 4f       	sbci	r23, 0xFF	; 255
     7a4:	fc 01       	movw	r30, r24
     7a6:	82 a5       	ldd	r24, Z+42	; 0x2a
     7a8:	93 a5       	ldd	r25, Z+43	; 0x2b
     7aa:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <xQueueGenericSendFromISR>
                                          pxHigherPriorityTaskWoken);
    configASSERT(status == pdTRUE);
}
     7ae:	0f 90       	pop	r0
     7b0:	0f 90       	pop	r0
     7b2:	df 91       	pop	r29
     7b4:	cf 91       	pop	r28
     7b6:	08 95       	ret

000007b8 <_Z14TimeEvent_ctorP9TimeEventjP6Active>:
/*--------------------------------------------------------------------------*/
/* Time Event services... */
static void TimeEvent_callback(TimerHandle_t xTimer);

/*..........................................................................*/
void TimeEvent_ctor(TimeEvent * const me, Signal sig, Active *act) {
     7b8:	ef 92       	push	r14
     7ba:	ff 92       	push	r15
     7bc:	0f 93       	push	r16
     7be:	1f 93       	push	r17
     7c0:	cf 93       	push	r28
     7c2:	df 93       	push	r29
     7c4:	ec 01       	movw	r28, r24
    /* no critical section because it is presumed that all TimeEvents
     * are created *before* multitasking has started.
     */
    me->super.sig = sig;
     7c6:	79 83       	std	Y+1, r23	; 0x01
     7c8:	68 83       	st	Y, r22
    me->act = act;
     7ca:	5b 83       	std	Y+3, r21	; 0x03
     7cc:	4a 83       	std	Y+2, r20	; 0x02

    /* Create a timer object */
    me->timer = xTimerCreateStatic("TE", 1U, me->type, me,
     7ce:	7c 01       	movw	r14, r24
     7d0:	86 e0       	ldi	r24, 0x06	; 6
     7d2:	e8 0e       	add	r14, r24
     7d4:	f1 1c       	adc	r15, r1
     7d6:	00 ec       	ldi	r16, 0xC0	; 192
     7d8:	13 e0       	ldi	r17, 0x03	; 3
     7da:	9e 01       	movw	r18, r28
     7dc:	49 8d       	ldd	r20, Y+25	; 0x19
     7de:	61 e0       	ldi	r22, 0x01	; 1
     7e0:	70 e0       	ldi	r23, 0x00	; 0
     7e2:	8b e4       	ldi	r24, 0x4B	; 75
     7e4:	92 e0       	ldi	r25, 0x02	; 2
     7e6:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <xTimerCreateStatic>
                                   TimeEvent_callback, &me->timer_cb);
     7ea:	9d 83       	std	Y+5, r25	; 0x05
     7ec:	8c 83       	std	Y+4, r24	; 0x04
    configASSERT(me->timer);            /* timer must be created */
}
     7ee:	df 91       	pop	r29
     7f0:	cf 91       	pop	r28
     7f2:	1f 91       	pop	r17
     7f4:	0f 91       	pop	r16
     7f6:	ff 90       	pop	r15
     7f8:	ef 90       	pop	r14
     7fa:	08 95       	ret

000007fc <_Z13TimeEvent_armP9TimeEventm>:

/*..........................................................................*/
void TimeEvent_arm(TimeEvent * const me, uint32_t millisec) {
     7fc:	0f 93       	push	r16
     7fe:	1f 93       	push	r17
    TickType_t ticks;
    BaseType_t status;
    BaseType_t xHigherPriorityTaskWoken;

    ticks = (millisec / portTICK_PERIOD_MS);
     800:	24 e0       	ldi	r18, 0x04	; 4
     802:	76 95       	lsr	r23
     804:	67 95       	ror	r22
     806:	57 95       	ror	r21
     808:	47 95       	ror	r20
     80a:	2a 95       	dec	r18
     80c:	d1 f7       	brne	.-12     	; 0x802 <_Z13TimeEvent_armP9TimeEventm+0x6>
    if (ticks == 0U) {
     80e:	41 15       	cp	r20, r1
     810:	51 05       	cpc	r21, r1
     812:	11 f4       	brne	.+4      	; 0x818 <_Z13TimeEvent_armP9TimeEventm+0x1c>
        ticks = 1U;
     814:	41 e0       	ldi	r20, 0x01	; 1
     816:	50 e0       	ldi	r21, 0x00	; 0
    }

    
    status = xTimerChangePeriod(me->timer, ticks, 0);
     818:	00 e0       	ldi	r16, 0x00	; 0
     81a:	10 e0       	ldi	r17, 0x00	; 0
     81c:	20 e0       	ldi	r18, 0x00	; 0
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	64 e0       	ldi	r22, 0x04	; 4
     822:	fc 01       	movw	r30, r24
     824:	84 81       	ldd	r24, Z+4	; 0x04
     826:	95 81       	ldd	r25, Z+5	; 0x05
     828:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <xTimerGenericCommand>
    configASSERT(status == pdPASS);
    
}
     82c:	1f 91       	pop	r17
     82e:	0f 91       	pop	r16
     830:	08 95       	ret

00000832 <_Z16TimeEvent_disarmP9TimeEvent>:

/*..........................................................................*/
void TimeEvent_disarm(TimeEvent * const me) {
     832:	0f 93       	push	r16
     834:	1f 93       	push	r17
    BaseType_t xHigherPriorityTaskWoken;
    BaseType_t status;

   
    status = xTimerStop(me->timer, 0);
     836:	00 e0       	ldi	r16, 0x00	; 0
     838:	10 e0       	ldi	r17, 0x00	; 0
     83a:	20 e0       	ldi	r18, 0x00	; 0
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	40 e0       	ldi	r20, 0x00	; 0
     840:	50 e0       	ldi	r21, 0x00	; 0
     842:	63 e0       	ldi	r22, 0x03	; 3
     844:	fc 01       	movw	r30, r24
     846:	84 81       	ldd	r24, Z+4	; 0x04
     848:	95 81       	ldd	r25, Z+5	; 0x05
     84a:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <xTimerGenericCommand>
    configASSERT(status == pdPASS);
    
}
     84e:	1f 91       	pop	r17
     850:	0f 91       	pop	r16
     852:	08 95       	ret

00000854 <_Z18CanFrameEvent_ctorP13CanFrameEventjP6Active>:


static CanFrameEvent * cfevt;

void CanFrameEvent_ctor(CanFrameEvent * const me, Signal sig, Active *act){
	me->super.sig = sig;
     854:	fc 01       	movw	r30, r24
     856:	71 83       	std	Z+1, r23	; 0x01
     858:	60 83       	st	Z, r22
	me->act = act;
     85a:	53 83       	std	Z+3, r21	; 0x03
     85c:	42 83       	std	Z+2, r20	; 0x02
	cfevt = me;
     85e:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <_ZL5cfevt+0x1>
     862:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <_ZL5cfevt>
     866:	08 95       	ret

00000868 <_Z21CanFrameEvent_fromISRPa>:
}


void CanFrameEvent_fromISR(BaseType_t *pxHigherPriorityTaskWoken){
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	ec 01       	movw	r28, r24
	if(BSP_get_can_frame(&cfevt->frame) == true){
     86e:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <_ZL5cfevt>
     872:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <_ZL5cfevt+0x1>
     876:	04 96       	adiw	r24, 0x04	; 4
     878:	72 de       	rcall	.-796    	; 0x55e <_Z17BSP_get_can_frameP9can_frame>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	59 f4       	brne	.+22     	; 0x894 <_Z21CanFrameEvent_fromISRPa+0x2c>
		Active_postFromISR(cfevt->act, &cfevt->super, pxHigherPriorityTaskWoken);
     87e:	e0 91 78 02 	lds	r30, 0x0278	; 0x800278 <_ZL5cfevt>
     882:	f0 91 79 02 	lds	r31, 0x0279	; 0x800279 <_ZL5cfevt+0x1>
     886:	ae 01       	movw	r20, r28
     888:	bf 01       	movw	r22, r30
     88a:	82 81       	ldd	r24, Z+2	; 0x02
     88c:	93 81       	ldd	r25, Z+3	; 0x03
	}
}
     88e:	df 91       	pop	r29
}


void CanFrameEvent_fromISR(BaseType_t *pxHigherPriorityTaskWoken){
	if(BSP_get_can_frame(&cfevt->frame) == true){
		Active_postFromISR(cfevt->act, &cfevt->super, pxHigherPriorityTaskWoken);
     890:	cf 91       	pop	r28
     892:	7c cf       	rjmp	.-264    	; 0x78c <_Z18Active_postFromISRP6ActivePK5EventPa>
	}
}
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
     898:	08 95       	ret

0000089a <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event>:

/* Function Prototype ============================================================*/
void BlinkyButton_ctor(BlinkyButton * const me);


static void BlinkyButton_dispatch(BlinkyButton * const me, Event const * const e) {
     89a:	0f 93       	push	r16
     89c:	1f 93       	push	r17
     89e:	cf 93       	push	r28
     8a0:	df 93       	push	r29
     8a2:	ec 01       	movw	r28, r24
	switch (e->sig) {
     8a4:	fb 01       	movw	r30, r22
     8a6:	80 81       	ld	r24, Z
     8a8:	91 81       	ldd	r25, Z+1	; 0x01
     8aa:	83 30       	cpi	r24, 0x03	; 3
     8ac:	91 05       	cpc	r25, r1
     8ae:	f1 f0       	breq	.+60     	; 0x8ec <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0x52>
     8b0:	b0 f4       	brcc	.+44     	; 0x8de <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0x44>
     8b2:	81 30       	cpi	r24, 0x01	; 1
     8b4:	91 05       	cpc	r25, r1
     8b6:	31 f1       	breq	.+76     	; 0x904 <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0x6a>
     8b8:	02 97       	sbiw	r24, 0x02	; 2
     8ba:	09 f0       	breq	.+2      	; 0x8be <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0x24>
     8bc:	5d c0       	rjmp	.+186    	; 0x978 <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0xde>
		case INIT_SIG:{
			break;
		}
		
		case SWITCH_PRESSED_SIG:{
			BSP_led_red_off();
     8be:	39 de       	rcall	.-910    	; 0x532 <_Z15BSP_led_red_offv>
			TimeEvent_disarm(&me->te);
     8c0:	ce 01       	movw	r24, r28
     8c2:	83 5b       	subi	r24, 0xB3	; 179
     8c4:	9f 4f       	sbci	r25, 0xFF	; 255
     8c6:	b5 df       	rcall	.-150    	; 0x832 <_Z16TimeEvent_disarmP9TimeEvent>
			me->isLedOn = false;
     8c8:	cb 56       	subi	r28, 0x6B	; 107
     8ca:	df 4f       	sbci	r29, 0xFF	; 255
			
			BSP_led_green_on();
     8cc:	18 82       	st	Y, r1
     8ce:	3a de       	rcall	.-908    	; 0x544 <_Z16BSP_led_green_onv>
			BSP_send_can_frame(&frame_right_seatbelt_hoocked);
     8d0:	88 e2       	ldi	r24, 0x28	; 40
     8d2:	92 e0       	ldi	r25, 0x02	; 2
		
		default: {
			break;
		}
	}
}
     8d4:	df 91       	pop	r29
     8d6:	cf 91       	pop	r28
     8d8:	1f 91       	pop	r17
			BSP_led_red_off();
			TimeEvent_disarm(&me->te);
			me->isLedOn = false;
			
			BSP_led_green_on();
			BSP_send_can_frame(&frame_right_seatbelt_hoocked);
     8da:	0f 91       	pop	r16
     8dc:	3b ce       	rjmp	.-906    	; 0x554 <_Z18BSP_send_can_frameP9can_frame>
/* Function Prototype ============================================================*/
void BlinkyButton_ctor(BlinkyButton * const me);


static void BlinkyButton_dispatch(BlinkyButton * const me, Event const * const e) {
	switch (e->sig) {
     8de:	85 30       	cpi	r24, 0x05	; 5
     8e0:	91 05       	cpc	r25, r1
     8e2:	39 f1       	breq	.+78     	; 0x932 <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0x98>
     8e4:	58 f1       	brcs	.+86     	; 0x93c <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0xa2>
     8e6:	06 97       	sbiw	r24, 0x06	; 6
     8e8:	69 f0       	breq	.+26     	; 0x904 <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0x6a>
			break;
		}
		
		
		case SWITCH_RELEASED_SIG: {
			BSP_send_can_frame(&frame_right_seatbelt_unhoocked);
     8ea:	46 c0       	rjmp	.+140    	; 0x978 <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0xde>
     8ec:	88 e1       	ldi	r24, 0x18	; 24
     8ee:	92 e0       	ldi	r25, 0x02	; 2
     8f0:	31 de       	rcall	.-926    	; 0x554 <_Z18BSP_send_can_frameP9can_frame>
			BSP_led_green_off();
     8f2:	2b de       	rcall	.-938    	; 0x54a <_Z17BSP_led_green_offv>
     8f4:	60 e5       	ldi	r22, 0x50	; 80
			
			static Event const initLedRedBlinkEvt = {INIT_LED_RED_BLINK_SIG};
			Active_post(&me->super, &initLedRedBlinkEvt);
     8f6:	72 e0       	ldi	r23, 0x02	; 2
     8f8:	ce 01       	movw	r24, r28
		
		default: {
			break;
		}
	}
}
     8fa:	df 91       	pop	r29
     8fc:	cf 91       	pop	r28
     8fe:	1f 91       	pop	r17
     900:	0f 91       	pop	r16
		case SWITCH_RELEASED_SIG: {
			BSP_send_can_frame(&frame_right_seatbelt_unhoocked);
			BSP_led_green_off();
			
			static Event const initLedRedBlinkEvt = {INIT_LED_RED_BLINK_SIG};
			Active_post(&me->super, &initLedRedBlinkEvt);
     902:	26 cf       	rjmp	.-436    	; 0x750 <_Z11Active_postP6ActivePK5Event>
     904:	8e 01       	movw	r16, r28
		}
		
		
		case INIT_LED_RED_BLINK_SIG:
		case TIMEOUT_LED_RED_SIG: {
			if (!me->isLedOn) { /* LED not on */
     906:	0b 56       	subi	r16, 0x6B	; 107
     908:	1f 4f       	sbci	r17, 0xFF	; 255
     90a:	f8 01       	movw	r30, r16
     90c:	80 81       	ld	r24, Z
     90e:	c3 5b       	subi	r28, 0xB3	; 179
     910:	df 4f       	sbci	r29, 0xFF	; 255
     912:	81 11       	cpse	r24, r1
				BSP_led_red_on();
     914:	05 c0       	rjmp	.+10     	; 0x920 <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0x86>
     916:	0a de       	rcall	.-1004   	; 0x52c <_Z14BSP_led_red_onv>
				me->isLedOn = true;
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	f8 01       	movw	r30, r16
     91c:	80 83       	st	Z, r24
     91e:	03 c0       	rjmp	.+6      	; 0x926 <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0x8c>
				TimeEvent_arm(&me->te, 1000);
			}
			else {  /* LED is on */
				BSP_led_red_off();
     920:	08 de       	rcall	.-1008   	; 0x532 <_Z15BSP_led_red_offv>
     922:	f8 01       	movw	r30, r16
				me->isLedOn = false;
     924:	10 82       	st	Z, r1
     926:	48 ee       	ldi	r20, 0xE8	; 232
				TimeEvent_arm(&me->te, 1000);
     928:	53 e0       	ldi	r21, 0x03	; 3
     92a:	60 e0       	ldi	r22, 0x00	; 0
     92c:	70 e0       	ldi	r23, 0x00	; 0
     92e:	ce 01       	movw	r24, r28
     930:	1e c0       	rjmp	.+60     	; 0x96e <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0xd4>
		
		default: {
			break;
		}
	}
}
     932:	df 91       	pop	r29
     934:	cf 91       	pop	r28
     936:	1f 91       	pop	r17
		}
		
		
		
		case TIMEOUT_LED_YELLOW_SIG: {
			BSP_led_yellow_off();
     938:	0f 91       	pop	r16
			break;
		}
		
		case CAN_FRAME_RECIVED_SIG:{
			if(areFramesEqual(&me->cfe.frame, &frame_request_seatbelt) == true){
     93a:	01 ce       	rjmp	.-1022   	; 0x53e <_Z18BSP_led_yellow_offv>
     93c:	68 e0       	ldi	r22, 0x08	; 8
     93e:	72 e0       	ldi	r23, 0x02	; 2
     940:	ce 01       	movw	r24, r28
     942:	8b 57       	subi	r24, 0x7B	; 123
     944:	9f 4f       	sbci	r25, 0xFF	; 255
     946:	5e de       	rcall	.-836    	; 0x604 <_Z14areFramesEqualP9can_frameS0_>
     948:	01 97       	sbiw	r24, 0x01	; 1
				BSP_led_yellow_on();
     94a:	b1 f4       	brne	.+44     	; 0x978 <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0xde>
     94c:	f5 dd       	rcall	.-1046   	; 0x538 <_Z17BSP_led_yellow_onv>
				
				if(BSP_get_switch() == SWITCH_PRESSED){
     94e:	00 de       	rcall	.-1024   	; 0x550 <_Z14BSP_get_switchv>
     950:	89 2b       	or	r24, r25
     952:	19 f4       	brne	.+6      	; 0x95a <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0xc0>
     954:	88 e2       	ldi	r24, 0x28	; 40
					BSP_send_can_frame(&frame_right_seatbelt_hoocked);
     956:	92 e0       	ldi	r25, 0x02	; 2
     958:	02 c0       	rjmp	.+4      	; 0x95e <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0xc4>
     95a:	88 e1       	ldi	r24, 0x18	; 24
				} else {
					BSP_send_can_frame(&frame_right_seatbelt_unhoocked);
     95c:	92 e0       	ldi	r25, 0x02	; 2
     95e:	fa dd       	rcall	.-1036   	; 0x554 <_Z18BSP_send_can_frameP9can_frame>
     960:	48 ee       	ldi	r20, 0xE8	; 232
				}
				
				TimeEvent_arm(&me->te2, 1000);
     962:	53 e0       	ldi	r21, 0x03	; 3
     964:	60 e0       	ldi	r22, 0x00	; 0
     966:	70 e0       	ldi	r23, 0x00	; 0
     968:	ce 01       	movw	r24, r28
     96a:	89 59       	subi	r24, 0x99	; 153
     96c:	9f 4f       	sbci	r25, 0xFF	; 255
     96e:	df 91       	pop	r29
		
		default: {
			break;
		}
	}
}
     970:	cf 91       	pop	r28
     972:	1f 91       	pop	r17
     974:	0f 91       	pop	r16
     976:	42 cf       	rjmp	.-380    	; 0x7fc <_Z13TimeEvent_armP9TimeEventm>
					BSP_send_can_frame(&frame_right_seatbelt_hoocked);
				} else {
					BSP_send_can_frame(&frame_right_seatbelt_unhoocked);
				}
				
				TimeEvent_arm(&me->te2, 1000);
     978:	df 91       	pop	r29
     97a:	cf 91       	pop	r28
		
		default: {
			break;
		}
	}
}
     97c:	1f 91       	pop	r17
     97e:	0f 91       	pop	r16
     980:	08 95       	ret

00000982 <_Z17BlinkyButton_ctorP12BlinkyButton>:
     982:	cf 93       	push	r28
     984:	df 93       	push	r29
void BlinkyButton_ctor(BlinkyButton * const me) {
     986:	ec 01       	movw	r28, r24
	Active_ctor(&me->super, (DispatchHandler)&BlinkyButton_dispatch);
     988:	6d e4       	ldi	r22, 0x4D	; 77
     98a:	74 e0       	ldi	r23, 0x04	; 4
     98c:	99 de       	rcall	.-718    	; 0x6c0 <_Z11Active_ctorP6ActivePFvS0_PK5EventE>
	me->te.type = TYPE_ONE_SHOT;
     98e:	fe 01       	movw	r30, r28
     990:	ea 59       	subi	r30, 0x9A	; 154
     992:	ff 4f       	sbci	r31, 0xFF	; 255
     994:	10 82       	st	Z, r1
	TimeEvent_ctor(&me->te, TIMEOUT_LED_RED_SIG, &me->super);
     996:	ae 01       	movw	r20, r28
     998:	61 e0       	ldi	r22, 0x01	; 1
     99a:	70 e0       	ldi	r23, 0x00	; 0
     99c:	ce 01       	movw	r24, r28
     99e:	83 5b       	subi	r24, 0xB3	; 179
     9a0:	9f 4f       	sbci	r25, 0xFF	; 255
     9a2:	0a df       	rcall	.-492    	; 0x7b8 <_Z14TimeEvent_ctorP9TimeEventjP6Active>
	TimeEvent_ctor(&me->te2, TIMEOUT_LED_YELLOW_SIG, &me->super);
     9a4:	ae 01       	movw	r20, r28
     9a6:	65 e0       	ldi	r22, 0x05	; 5
     9a8:	70 e0       	ldi	r23, 0x00	; 0
     9aa:	ce 01       	movw	r24, r28
     9ac:	89 59       	subi	r24, 0x99	; 153
     9ae:	9f 4f       	sbci	r25, 0xFF	; 255
     9b0:	03 df       	rcall	.-506    	; 0x7b8 <_Z14TimeEvent_ctorP9TimeEventjP6Active>
	me->isLedOn = false;
     9b2:	fe 01       	movw	r30, r28
     9b4:	eb 56       	subi	r30, 0x6B	; 107
     9b6:	ff 4f       	sbci	r31, 0xFF	; 255
     9b8:	10 82       	st	Z, r1
	
	CanFrameEvent_ctor(&me->cfe, CAN_FRAME_RECIVED_SIG, &me->super);
     9ba:	ae 01       	movw	r20, r28
     9bc:	64 e0       	ldi	r22, 0x04	; 4
     9be:	70 e0       	ldi	r23, 0x00	; 0
     9c0:	ce 01       	movw	r24, r28
     9c2:	8f 57       	subi	r24, 0x7F	; 127
}
     9c4:	9f 4f       	sbci	r25, 0xFF	; 255
     9c6:	df 91       	pop	r29
	me->te.type = TYPE_ONE_SHOT;
	TimeEvent_ctor(&me->te, TIMEOUT_LED_RED_SIG, &me->super);
	TimeEvent_ctor(&me->te2, TIMEOUT_LED_YELLOW_SIG, &me->super);
	me->isLedOn = false;
	
	CanFrameEvent_ctor(&me->cfe, CAN_FRAME_RECIVED_SIG, &me->super);
     9c8:	cf 91       	pop	r28
     9ca:	44 cf       	rjmp	.-376    	; 0x854 <_Z18CanFrameEvent_ctorP13CanFrameEventjP6Active>

000009cc <setup>:
static StackType_t blinkyButton_stack[configMINIMAL_STACK_SIZE]; /* task stack */
static Event *blinkyButton_queue[10];
static BlinkyButton blinkyButton;
Active *AO_blinkyButton = &blinkyButton.super;

void setup() {
     9cc:	8f 92       	push	r8
     9ce:	9f 92       	push	r9
     9d0:	af 92       	push	r10
     9d2:	bf 92       	push	r11
     9d4:	cf 92       	push	r12
     9d6:	df 92       	push	r13
     9d8:	ef 92       	push	r14
     9da:	ff 92       	push	r15
     9dc:	0f 93       	push	r16
     9de:	1f 93       	push	r17
	BSP_init();
     9e0:	8b dd       	rcall	.-1258   	; 0x4f8 <_Z8BSP_initv>
	
	   /* create and start the BlinkyButton AO */
	   BlinkyButton_ctor(&blinkyButton);
     9e2:	8a e7       	ldi	r24, 0x7A	; 122
     9e4:	92 e0       	ldi	r25, 0x02	; 2
     9e6:	cd df       	rcall	.-102    	; 0x982 <_Z17BlinkyButton_ctorP12BlinkyButton>
					1U,
					blinkyButton_queue,
					sizeof(blinkyButton_queue)/sizeof(blinkyButton_queue[0]),
					blinkyButton_stack,
					sizeof(blinkyButton_stack),
					0U);
     9e8:	81 2c       	mov	r8, r1
     9ea:	91 2c       	mov	r9, r1
     9ec:	80 ec       	ldi	r24, 0xC0	; 192
     9ee:	a8 2e       	mov	r10, r24
     9f0:	b1 2c       	mov	r11, r1
     9f2:	c1 2c       	mov	r12, r1
     9f4:	d1 2c       	mov	r13, r1
     9f6:	94 e2       	ldi	r25, 0x24	; 36
     9f8:	e9 2e       	mov	r14, r25
     9fa:	93 e0       	ldi	r25, 0x03	; 3
     9fc:	f9 2e       	mov	r15, r25
     9fe:	0a e0       	ldi	r16, 0x0A	; 10
     a00:	10 e0       	ldi	r17, 0x00	; 0
     a02:	20 e0       	ldi	r18, 0x00	; 0
     a04:	30 e0       	ldi	r19, 0x00	; 0
     a06:	40 e1       	ldi	r20, 0x10	; 16
     a08:	53 e0       	ldi	r21, 0x03	; 3
     a0a:	61 e0       	ldi	r22, 0x01	; 1
     a0c:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <AO_blinkyButton>
     a10:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <AO_blinkyButton+0x1>
     a14:	5b de       	rcall	.-842    	; 0x6cc <_Z12Active_startP6ActivehPP5EventmPvmj>
	   
	vTaskStartScheduler();
}
     a16:	1f 91       	pop	r17
     a18:	0f 91       	pop	r16
     a1a:	ff 90       	pop	r15
     a1c:	ef 90       	pop	r14
     a1e:	df 90       	pop	r13
     a20:	cf 90       	pop	r12
     a22:	bf 90       	pop	r11
     a24:	af 90       	pop	r10
     a26:	9f 90       	pop	r9
     a28:	8f 90       	pop	r8
					sizeof(blinkyButton_queue)/sizeof(blinkyButton_queue[0]),
					blinkyButton_stack,
					sizeof(blinkyButton_stack),
					0U);
	   
	vTaskStartScheduler();
     a2a:	0c 94 39 10 	jmp	0x2072	; 0x2072 <vTaskStartScheduler>

00000a2e <loop>:
}

void loop() {
     a2e:	08 95       	ret

00000a30 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     a30:	c0 d0       	rcall	.+384    	; 0xbb2 <init>

	initVariant();
     a32:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     a36:	ca df       	rcall	.-108    	; 0x9cc <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     a38:	c0 e0       	ldi	r28, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
     a3a:	d0 e0       	ldi	r29, 0x00	; 0
     a3c:	f8 df       	rcall	.-16     	; 0xa2e <loop>
		if (serialEventRun) serialEventRun();
     a3e:	20 97       	sbiw	r28, 0x00	; 0
     a40:	e9 f3       	breq	.-6      	; 0xa3c <main+0xc>
     a42:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     a46:	fa cf       	rjmp	.-12     	; 0xa3c <main+0xc>

00000a48 <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     a48:	1f 92       	push	r1
     a4a:	0f 92       	push	r0
     a4c:	0f b6       	in	r0, 0x3f	; 63
     a4e:	0f 92       	push	r0
     a50:	11 24       	eor	r1, r1
     a52:	2f 93       	push	r18
     a54:	3f 93       	push	r19
     a56:	8f 93       	push	r24
     a58:	9f 93       	push	r25
     a5a:	af 93       	push	r26
     a5c:	bf 93       	push	r27
     a5e:	80 91 e5 03 	lds	r24, 0x03E5	; 0x8003e5 <timer0_millis>
     a62:	90 91 e6 03 	lds	r25, 0x03E6	; 0x8003e6 <timer0_millis+0x1>
     a66:	a0 91 e7 03 	lds	r26, 0x03E7	; 0x8003e7 <timer0_millis+0x2>
     a6a:	b0 91 e8 03 	lds	r27, 0x03E8	; 0x8003e8 <timer0_millis+0x3>
     a6e:	30 91 e4 03 	lds	r19, 0x03E4	; 0x8003e4 <timer0_fract>
     a72:	23 e0       	ldi	r18, 0x03	; 3
     a74:	23 0f       	add	r18, r19
     a76:	2d 37       	cpi	r18, 0x7D	; 125
     a78:	20 f4       	brcc	.+8      	; 0xa82 <__vector_23+0x3a>
     a7a:	01 96       	adiw	r24, 0x01	; 1
     a7c:	a1 1d       	adc	r26, r1
     a7e:	b1 1d       	adc	r27, r1
     a80:	05 c0       	rjmp	.+10     	; 0xa8c <__vector_23+0x44>
     a82:	26 e8       	ldi	r18, 0x86	; 134
     a84:	23 0f       	add	r18, r19
     a86:	02 96       	adiw	r24, 0x02	; 2
     a88:	a1 1d       	adc	r26, r1
     a8a:	b1 1d       	adc	r27, r1
     a8c:	20 93 e4 03 	sts	0x03E4, r18	; 0x8003e4 <timer0_fract>
     a90:	80 93 e5 03 	sts	0x03E5, r24	; 0x8003e5 <timer0_millis>
     a94:	90 93 e6 03 	sts	0x03E6, r25	; 0x8003e6 <timer0_millis+0x1>
     a98:	a0 93 e7 03 	sts	0x03E7, r26	; 0x8003e7 <timer0_millis+0x2>
     a9c:	b0 93 e8 03 	sts	0x03E8, r27	; 0x8003e8 <timer0_millis+0x3>
     aa0:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <timer0_overflow_count>
     aa4:	90 91 ea 03 	lds	r25, 0x03EA	; 0x8003ea <timer0_overflow_count+0x1>
     aa8:	a0 91 eb 03 	lds	r26, 0x03EB	; 0x8003eb <timer0_overflow_count+0x2>
     aac:	b0 91 ec 03 	lds	r27, 0x03EC	; 0x8003ec <timer0_overflow_count+0x3>
     ab0:	01 96       	adiw	r24, 0x01	; 1
     ab2:	a1 1d       	adc	r26, r1
     ab4:	b1 1d       	adc	r27, r1
     ab6:	80 93 e9 03 	sts	0x03E9, r24	; 0x8003e9 <timer0_overflow_count>
     aba:	90 93 ea 03 	sts	0x03EA, r25	; 0x8003ea <timer0_overflow_count+0x1>
     abe:	a0 93 eb 03 	sts	0x03EB, r26	; 0x8003eb <timer0_overflow_count+0x2>
     ac2:	b0 93 ec 03 	sts	0x03EC, r27	; 0x8003ec <timer0_overflow_count+0x3>
     ac6:	bf 91       	pop	r27
     ac8:	af 91       	pop	r26
     aca:	9f 91       	pop	r25
     acc:	8f 91       	pop	r24
     ace:	3f 91       	pop	r19
     ad0:	2f 91       	pop	r18
     ad2:	0f 90       	pop	r0
     ad4:	0f be       	out	0x3f, r0	; 63
     ad6:	0f 90       	pop	r0
     ad8:	1f 90       	pop	r1
     ada:	18 95       	reti

00000adc <millis>:
     adc:	2f b7       	in	r18, 0x3f	; 63
     ade:	f8 94       	cli
     ae0:	60 91 e5 03 	lds	r22, 0x03E5	; 0x8003e5 <timer0_millis>
     ae4:	70 91 e6 03 	lds	r23, 0x03E6	; 0x8003e6 <timer0_millis+0x1>
     ae8:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <timer0_millis+0x2>
     aec:	90 91 e8 03 	lds	r25, 0x03E8	; 0x8003e8 <timer0_millis+0x3>
     af0:	2f bf       	out	0x3f, r18	; 63
     af2:	08 95       	ret

00000af4 <micros>:
     af4:	3f b7       	in	r19, 0x3f	; 63
     af6:	f8 94       	cli
     af8:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <timer0_overflow_count>
     afc:	90 91 ea 03 	lds	r25, 0x03EA	; 0x8003ea <timer0_overflow_count+0x1>
     b00:	a0 91 eb 03 	lds	r26, 0x03EB	; 0x8003eb <timer0_overflow_count+0x2>
     b04:	b0 91 ec 03 	lds	r27, 0x03EC	; 0x8003ec <timer0_overflow_count+0x3>
     b08:	26 b5       	in	r18, 0x26	; 38
     b0a:	a8 9b       	sbis	0x15, 0	; 21
     b0c:	05 c0       	rjmp	.+10     	; 0xb18 <micros+0x24>
     b0e:	2f 3f       	cpi	r18, 0xFF	; 255
     b10:	19 f0       	breq	.+6      	; 0xb18 <micros+0x24>
     b12:	01 96       	adiw	r24, 0x01	; 1
     b14:	a1 1d       	adc	r26, r1
     b16:	b1 1d       	adc	r27, r1
     b18:	3f bf       	out	0x3f, r19	; 63
     b1a:	ba 2f       	mov	r27, r26
     b1c:	a9 2f       	mov	r26, r25
     b1e:	98 2f       	mov	r25, r24
     b20:	88 27       	eor	r24, r24
     b22:	82 0f       	add	r24, r18
     b24:	91 1d       	adc	r25, r1
     b26:	a1 1d       	adc	r26, r1
     b28:	b1 1d       	adc	r27, r1
     b2a:	bc 01       	movw	r22, r24
     b2c:	cd 01       	movw	r24, r26
     b2e:	42 e0       	ldi	r20, 0x02	; 2
     b30:	66 0f       	add	r22, r22
     b32:	77 1f       	adc	r23, r23
     b34:	88 1f       	adc	r24, r24
     b36:	99 1f       	adc	r25, r25
     b38:	4a 95       	dec	r20
     b3a:	d1 f7       	brne	.-12     	; 0xb30 <micros+0x3c>
     b3c:	08 95       	ret

00000b3e <delay>:
     b3e:	8f 92       	push	r8
     b40:	9f 92       	push	r9
     b42:	af 92       	push	r10
     b44:	bf 92       	push	r11
     b46:	cf 92       	push	r12
     b48:	df 92       	push	r13
     b4a:	ef 92       	push	r14
     b4c:	ff 92       	push	r15
     b4e:	6b 01       	movw	r12, r22
     b50:	7c 01       	movw	r14, r24
     b52:	d0 df       	rcall	.-96     	; 0xaf4 <micros>
     b54:	4b 01       	movw	r8, r22
     b56:	5c 01       	movw	r10, r24
     b58:	c1 14       	cp	r12, r1
     b5a:	d1 04       	cpc	r13, r1
     b5c:	e1 04       	cpc	r14, r1
     b5e:	f1 04       	cpc	r15, r1
     b60:	f9 f0       	breq	.+62     	; 0xba0 <delay+0x62>
     b62:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <yield>
     b66:	c6 df       	rcall	.-116    	; 0xaf4 <micros>
     b68:	dc 01       	movw	r26, r24
     b6a:	cb 01       	movw	r24, r22
     b6c:	88 19       	sub	r24, r8
     b6e:	99 09       	sbc	r25, r9
     b70:	aa 09       	sbc	r26, r10
     b72:	bb 09       	sbc	r27, r11
     b74:	88 3e       	cpi	r24, 0xE8	; 232
     b76:	93 40       	sbci	r25, 0x03	; 3
     b78:	a1 05       	cpc	r26, r1
     b7a:	b1 05       	cpc	r27, r1
     b7c:	68 f3       	brcs	.-38     	; 0xb58 <delay+0x1a>
     b7e:	21 e0       	ldi	r18, 0x01	; 1
     b80:	c2 1a       	sub	r12, r18
     b82:	d1 08       	sbc	r13, r1
     b84:	e1 08       	sbc	r14, r1
     b86:	f1 08       	sbc	r15, r1
     b88:	88 ee       	ldi	r24, 0xE8	; 232
     b8a:	88 0e       	add	r8, r24
     b8c:	83 e0       	ldi	r24, 0x03	; 3
     b8e:	98 1e       	adc	r9, r24
     b90:	a1 1c       	adc	r10, r1
     b92:	b1 1c       	adc	r11, r1
     b94:	c1 14       	cp	r12, r1
     b96:	d1 04       	cpc	r13, r1
     b98:	e1 04       	cpc	r14, r1
     b9a:	f1 04       	cpc	r15, r1
     b9c:	21 f7       	brne	.-56     	; 0xb66 <delay+0x28>
     b9e:	dc cf       	rjmp	.-72     	; 0xb58 <delay+0x1a>
     ba0:	ff 90       	pop	r15
     ba2:	ef 90       	pop	r14
     ba4:	df 90       	pop	r13
     ba6:	cf 90       	pop	r12
     ba8:	bf 90       	pop	r11
     baa:	af 90       	pop	r10
     bac:	9f 90       	pop	r9
     bae:	8f 90       	pop	r8
     bb0:	08 95       	ret

00000bb2 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     bb2:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     bb4:	84 b5       	in	r24, 0x24	; 36
     bb6:	82 60       	ori	r24, 0x02	; 2
     bb8:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     bba:	84 b5       	in	r24, 0x24	; 36
     bbc:	81 60       	ori	r24, 0x01	; 1
     bbe:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     bc0:	85 b5       	in	r24, 0x25	; 37
     bc2:	82 60       	ori	r24, 0x02	; 2
     bc4:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     bc6:	85 b5       	in	r24, 0x25	; 37
     bc8:	81 60       	ori	r24, 0x01	; 1
     bca:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     bcc:	ee e6       	ldi	r30, 0x6E	; 110
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	80 81       	ld	r24, Z
     bd2:	81 60       	ori	r24, 0x01	; 1
     bd4:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     bd6:	e1 e8       	ldi	r30, 0x81	; 129
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     bdc:	80 81       	ld	r24, Z
     bde:	82 60       	ori	r24, 0x02	; 2
     be0:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     be2:	80 81       	ld	r24, Z
     be4:	81 60       	ori	r24, 0x01	; 1
     be6:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     be8:	e0 e8       	ldi	r30, 0x80	; 128
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	80 81       	ld	r24, Z
     bee:	81 60       	ori	r24, 0x01	; 1
     bf0:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     bf2:	e1 eb       	ldi	r30, 0xB1	; 177
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	80 81       	ld	r24, Z
     bf8:	84 60       	ori	r24, 0x04	; 4
     bfa:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     bfc:	e0 eb       	ldi	r30, 0xB0	; 176
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	80 81       	ld	r24, Z
     c02:	81 60       	ori	r24, 0x01	; 1
     c04:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
     c06:	e1 e9       	ldi	r30, 0x91	; 145
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	80 81       	ld	r24, Z
     c0c:	82 60       	ori	r24, 0x02	; 2
     c0e:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
     c10:	80 81       	ld	r24, Z
     c12:	81 60       	ori	r24, 0x01	; 1
     c14:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
     c16:	e0 e9       	ldi	r30, 0x90	; 144
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	81 60       	ori	r24, 0x01	; 1
     c1e:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
     c20:	e1 ea       	ldi	r30, 0xA1	; 161
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	80 81       	ld	r24, Z
     c26:	82 60       	ori	r24, 0x02	; 2
     c28:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
     c2a:	80 81       	ld	r24, Z
     c2c:	81 60       	ori	r24, 0x01	; 1
     c2e:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
     c30:	e0 ea       	ldi	r30, 0xA0	; 160
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	80 81       	ld	r24, Z
     c36:	81 60       	ori	r24, 0x01	; 1
     c38:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
     c3a:	e1 e2       	ldi	r30, 0x21	; 33
     c3c:	f1 e0       	ldi	r31, 0x01	; 1
     c3e:	80 81       	ld	r24, Z
     c40:	82 60       	ori	r24, 0x02	; 2
     c42:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
     c44:	80 81       	ld	r24, Z
     c46:	81 60       	ori	r24, 0x01	; 1
     c48:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
     c4a:	e0 e2       	ldi	r30, 0x20	; 32
     c4c:	f1 e0       	ldi	r31, 0x01	; 1
     c4e:	80 81       	ld	r24, Z
     c50:	81 60       	ori	r24, 0x01	; 1
     c52:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     c54:	ea e7       	ldi	r30, 0x7A	; 122
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	80 81       	ld	r24, Z
     c5a:	84 60       	ori	r24, 0x04	; 4
     c5c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     c5e:	80 81       	ld	r24, Z
     c60:	82 60       	ori	r24, 0x02	; 2
     c62:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     c64:	80 81       	ld	r24, Z
     c66:	81 60       	ori	r24, 0x01	; 1
     c68:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     c6a:	80 81       	ld	r24, Z
     c6c:	80 68       	ori	r24, 0x80	; 128
     c6e:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     c70:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
     c74:	08 95       	ret

00000c76 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	fc 01       	movw	r30, r24
     c7a:	31 97       	sbiw	r30, 0x01	; 1
     c7c:	e2 31       	cpi	r30, 0x12	; 18
     c7e:	f1 05       	cpc	r31, r1
     c80:	08 f0       	brcs	.+2      	; 0xc84 <turnOffPWM+0xe>
     c82:	4e c0       	rjmp	.+156    	; 0xd20 <turnOffPWM+0xaa>
     c84:	88 27       	eor	r24, r24
     c86:	ee 58       	subi	r30, 0x8E	; 142
     c88:	ff 4f       	sbci	r31, 0xFF	; 255
     c8a:	8f 4f       	sbci	r24, 0xFF	; 255
     c8c:	0c 94 dd 17 	jmp	0x2fba	; 0x2fba <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     c90:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
     c94:	8f 77       	andi	r24, 0x7F	; 127
     c96:	03 c0       	rjmp	.+6      	; 0xc9e <turnOffPWM+0x28>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     c98:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
     c9c:	8f 7d       	andi	r24, 0xDF	; 223
     c9e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
     ca2:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
     ca4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
     ca8:	87 7f       	andi	r24, 0xF7	; 247
     caa:	f9 cf       	rjmp	.-14     	; 0xc9e <turnOffPWM+0x28>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     cac:	84 b5       	in	r24, 0x24	; 36
     cae:	8f 77       	andi	r24, 0x7F	; 127
     cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <turnOffPWM+0x40>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     cb2:	84 b5       	in	r24, 0x24	; 36
     cb4:	8f 7d       	andi	r24, 0xDF	; 223
     cb6:	84 bd       	out	0x24, r24	; 36
     cb8:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     cba:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
     cbe:	8f 77       	andi	r24, 0x7F	; 127
     cc0:	03 c0       	rjmp	.+6      	; 0xcc8 <turnOffPWM+0x52>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     cc2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
     cc6:	8f 7d       	andi	r24, 0xDF	; 223
     cc8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
     ccc:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
     cce:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
     cd2:	8f 77       	andi	r24, 0x7F	; 127
     cd4:	07 c0       	rjmp	.+14     	; 0xce4 <turnOffPWM+0x6e>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
     cd6:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
     cda:	8f 7d       	andi	r24, 0xDF	; 223
     cdc:	03 c0       	rjmp	.+6      	; 0xce4 <turnOffPWM+0x6e>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
     cde:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
     ce2:	87 7f       	andi	r24, 0xF7	; 247
     ce4:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
     ce8:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
     cea:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
     cee:	8f 77       	andi	r24, 0x7F	; 127
     cf0:	07 c0       	rjmp	.+14     	; 0xd00 <turnOffPWM+0x8a>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
     cf2:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
     cf6:	8f 7d       	andi	r24, 0xDF	; 223
     cf8:	03 c0       	rjmp	.+6      	; 0xd00 <turnOffPWM+0x8a>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
     cfa:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
     cfe:	87 7f       	andi	r24, 0xF7	; 247
     d00:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
     d04:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
     d06:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
     d0a:	8f 77       	andi	r24, 0x7F	; 127
     d0c:	07 c0       	rjmp	.+14     	; 0xd1c <turnOffPWM+0xa6>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
     d0e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
     d12:	8f 7d       	andi	r24, 0xDF	; 223
     d14:	03 c0       	rjmp	.+6      	; 0xd1c <turnOffPWM+0xa6>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
     d16:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
     d1a:	87 7f       	andi	r24, 0xF7	; 247
     d1c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
     d20:	08 95       	ret

00000d22 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     d22:	cf 93       	push	r28
     d24:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	fc 01       	movw	r30, r24
     d2a:	e8 54       	subi	r30, 0x48	; 72
     d2c:	fe 4f       	sbci	r31, 0xFE	; 254
     d2e:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     d30:	fc 01       	movw	r30, r24
     d32:	e2 50       	subi	r30, 0x02	; 2
     d34:	fe 4f       	sbci	r31, 0xFE	; 254
     d36:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     d38:	88 23       	and	r24, r24
     d3a:	61 f1       	breq	.+88     	; 0xd94 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	88 0f       	add	r24, r24
     d40:	99 1f       	adc	r25, r25
     d42:	fc 01       	movw	r30, r24
     d44:	e8 58       	subi	r30, 0x88	; 136
     d46:	fd 4f       	sbci	r31, 0xFD	; 253
     d48:	c5 91       	lpm	r28, Z+
     d4a:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
     d4c:	fc 01       	movw	r30, r24
     d4e:	e2 5a       	subi	r30, 0xA2	; 162
     d50:	fd 4f       	sbci	r31, 0xFD	; 253
     d52:	a5 91       	lpm	r26, Z+
     d54:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
     d56:	61 11       	cpse	r22, r1
     d58:	09 c0       	rjmp	.+18     	; 0xd6c <pinMode+0x4a>
		uint8_t oldSREG = SREG;
     d5a:	9f b7       	in	r25, 0x3f	; 63
                cli();
     d5c:	f8 94       	cli
		*reg &= ~bit;
     d5e:	88 81       	ld	r24, Y
     d60:	20 95       	com	r18
     d62:	82 23       	and	r24, r18
     d64:	88 83       	st	Y, r24
		*out &= ~bit;
     d66:	ec 91       	ld	r30, X
     d68:	2e 23       	and	r18, r30
     d6a:	0b c0       	rjmp	.+22     	; 0xd82 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     d6c:	62 30       	cpi	r22, 0x02	; 2
     d6e:	61 f4       	brne	.+24     	; 0xd88 <pinMode+0x66>
		uint8_t oldSREG = SREG;
     d70:	9f b7       	in	r25, 0x3f	; 63
                cli();
     d72:	f8 94       	cli
		*reg &= ~bit;
     d74:	88 81       	ld	r24, Y
     d76:	32 2f       	mov	r19, r18
     d78:	30 95       	com	r19
     d7a:	83 23       	and	r24, r19
     d7c:	88 83       	st	Y, r24
		*out |= bit;
     d7e:	ec 91       	ld	r30, X
     d80:	2e 2b       	or	r18, r30
     d82:	2c 93       	st	X, r18
		SREG = oldSREG;
     d84:	9f bf       	out	0x3f, r25	; 63
     d86:	06 c0       	rjmp	.+12     	; 0xd94 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
     d88:	8f b7       	in	r24, 0x3f	; 63
                cli();
     d8a:	f8 94       	cli
		*reg |= bit;
     d8c:	e8 81       	ld	r30, Y
     d8e:	2e 2b       	or	r18, r30
     d90:	28 83       	st	Y, r18
		SREG = oldSREG;
     d92:	8f bf       	out	0x3f, r24	; 63
	}
}
     d94:	df 91       	pop	r29
     d96:	cf 91       	pop	r28
     d98:	08 95       	ret

00000d9a <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     d9a:	1f 93       	push	r17
     d9c:	cf 93       	push	r28
     d9e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     da0:	28 2f       	mov	r18, r24
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	f9 01       	movw	r30, r18
     da6:	ee 58       	subi	r30, 0x8E	; 142
     da8:	fe 4f       	sbci	r31, 0xFE	; 254
     daa:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     dac:	f9 01       	movw	r30, r18
     dae:	e8 54       	subi	r30, 0x48	; 72
     db0:	fe 4f       	sbci	r31, 0xFE	; 254
     db2:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     db4:	f9 01       	movw	r30, r18
     db6:	e2 50       	subi	r30, 0x02	; 2
     db8:	fe 4f       	sbci	r31, 0xFE	; 254
     dba:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     dbc:	cc 23       	and	r28, r28
     dbe:	b9 f0       	breq	.+46     	; 0xdee <digitalWrite+0x54>
     dc0:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     dc2:	81 11       	cpse	r24, r1
     dc4:	58 df       	rcall	.-336    	; 0xc76 <turnOffPWM>

	out = portOutputRegister(port);
     dc6:	ec 2f       	mov	r30, r28
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	ee 0f       	add	r30, r30
     dcc:	ff 1f       	adc	r31, r31
     dce:	e2 5a       	subi	r30, 0xA2	; 162
     dd0:	fd 4f       	sbci	r31, 0xFD	; 253
     dd2:	a5 91       	lpm	r26, Z+
     dd4:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     dd6:	9f b7       	in	r25, 0x3f	; 63
	cli();
     dd8:	f8 94       	cli

	if (val == LOW) {
     dda:	11 11       	cpse	r17, r1
     ddc:	04 c0       	rjmp	.+8      	; 0xde6 <digitalWrite+0x4c>
		*out &= ~bit;
     dde:	8c 91       	ld	r24, X
     de0:	d0 95       	com	r29
     de2:	d8 23       	and	r29, r24
     de4:	02 c0       	rjmp	.+4      	; 0xdea <digitalWrite+0x50>
	} else {
		*out |= bit;
     de6:	ec 91       	ld	r30, X
     de8:	de 2b       	or	r29, r30
     dea:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
     dec:	9f bf       	out	0x3f, r25	; 63
}
     dee:	df 91       	pop	r29
     df0:	cf 91       	pop	r28
     df2:	1f 91       	pop	r17
     df4:	08 95       	ret

00000df6 <digitalRead>:

int digitalRead(uint8_t pin)
{
     df6:	cf 93       	push	r28
     df8:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     dfa:	28 2f       	mov	r18, r24
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	f9 01       	movw	r30, r18
     e00:	ee 58       	subi	r30, 0x8E	; 142
     e02:	fe 4f       	sbci	r31, 0xFE	; 254
     e04:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     e06:	f9 01       	movw	r30, r18
     e08:	e8 54       	subi	r30, 0x48	; 72
     e0a:	fe 4f       	sbci	r31, 0xFE	; 254
     e0c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     e0e:	f9 01       	movw	r30, r18
     e10:	e2 50       	subi	r30, 0x02	; 2
     e12:	fe 4f       	sbci	r31, 0xFE	; 254
     e14:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
     e16:	cc 23       	and	r28, r28
     e18:	89 f0       	breq	.+34     	; 0xe3c <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     e1a:	81 11       	cpse	r24, r1
     e1c:	2c df       	rcall	.-424    	; 0xc76 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
     e1e:	ec 2f       	mov	r30, r28
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	ee 0f       	add	r30, r30
     e24:	ff 1f       	adc	r31, r31
     e26:	ec 5b       	subi	r30, 0xBC	; 188
     e28:	fd 4f       	sbci	r31, 0xFD	; 253
     e2a:	a5 91       	lpm	r26, Z+
     e2c:	b4 91       	lpm	r27, Z
     e2e:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
     e30:	ed 23       	and	r30, r29
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	21 f4       	brne	.+8      	; 0xe40 <digitalRead+0x4a>
     e38:	80 e0       	ldi	r24, 0x00	; 0
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <digitalRead+0x4a>
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
     e40:	df 91       	pop	r29
     e42:	cf 91       	pop	r28
     e44:	08 95       	ret

00000e46 <_ZN8SPIClass8transferEh>:
    modifyRegister(MCP_CANCTRL, CANCTRL_CLKEN, CANCTRL_CLKEN);

    /* Turn off CLKOUT for SOF */
    modifyRegister(MCP_CNF3, CNF3_SOF, 0x00);
    return ERROR_OK;
}
     e46:	8e bd       	out	0x2e, r24	; 46
     e48:	00 00       	nop
     e4a:	0d b4       	in	r0, 0x2d	; 45
     e4c:	07 fe       	sbrs	r0, 7
     e4e:	fd cf       	rjmp	.-6      	; 0xe4a <_ZN8SPIClass8transferEh+0x4>
     e50:	8e b5       	in	r24, 0x2e	; 46
     e52:	08 95       	ret

00000e54 <_ZN7MCP25158startSPIEv>:
     e54:	fc 01       	movw	r30, r24
     e56:	41 81       	ldd	r20, Z+1	; 0x01
     e58:	52 81       	ldd	r21, Z+2	; 0x02
     e5a:	63 81       	ldd	r22, Z+3	; 0x03
     e5c:	74 81       	ldd	r23, Z+4	; 0x04
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	92 e1       	ldi	r25, 0x12	; 18
     e62:	aa e7       	ldi	r26, 0x7A	; 122
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	20 e0       	ldi	r18, 0x00	; 0
     e68:	48 17       	cp	r20, r24
     e6a:	59 07       	cpc	r21, r25
     e6c:	6a 07       	cpc	r22, r26
     e6e:	7b 07       	cpc	r23, r27
     e70:	40 f4       	brcc	.+16     	; 0xe82 <_ZN7MCP25158startSPIEv+0x2e>
     e72:	b6 95       	lsr	r27
     e74:	a7 95       	ror	r26
     e76:	97 95       	ror	r25
     e78:	87 95       	ror	r24
     e7a:	2f 5f       	subi	r18, 0xFF	; 255
     e7c:	26 30       	cpi	r18, 0x06	; 6
     e7e:	a1 f7       	brne	.-24     	; 0xe68 <_ZN7MCP25158startSPIEv+0x14>
     e80:	27 e0       	ldi	r18, 0x07	; 7
     e82:	91 e0       	ldi	r25, 0x01	; 1
     e84:	92 27       	eor	r25, r18
     e86:	29 2f       	mov	r18, r25
     e88:	20 6a       	ori	r18, 0xA0	; 160
     e8a:	26 95       	lsr	r18
     e8c:	91 70       	andi	r25, 0x01	; 1
     e8e:	80 91 26 06 	lds	r24, 0x0626	; 0x800626 <_ZN8SPIClass13interruptModeE>
     e92:	88 23       	and	r24, r24
     e94:	99 f0       	breq	.+38     	; 0xebc <_ZN7MCP25158startSPIEv+0x68>
     e96:	8f b7       	in	r24, 0x3f	; 63
     e98:	f8 94       	cli
     e9a:	30 91 26 06 	lds	r19, 0x0626	; 0x800626 <_ZN8SPIClass13interruptModeE>
     e9e:	31 30       	cpi	r19, 0x01	; 1
     ea0:	59 f4       	brne	.+22     	; 0xeb8 <_ZN7MCP25158startSPIEv+0x64>
     ea2:	3d b3       	in	r19, 0x1d	; 29
     ea4:	30 93 24 06 	sts	0x0624, r19	; 0x800624 <_ZN8SPIClass13interruptSaveE>
     ea8:	4d b3       	in	r20, 0x1d	; 29
     eaa:	30 91 25 06 	lds	r19, 0x0625	; 0x800625 <_ZN8SPIClass13interruptMaskE>
     eae:	30 95       	com	r19
     eb0:	34 23       	and	r19, r20
     eb2:	3d bb       	out	0x1d, r19	; 29
     eb4:	8f bf       	out	0x3f, r24	; 63
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <_ZN7MCP25158startSPIEv+0x68>
     eb8:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <_ZN8SPIClass13interruptSaveE>
     ebc:	2c bd       	out	0x2c, r18	; 44
     ebe:	9d bd       	out	0x2d, r25	; 45
     ec0:	60 e0       	ldi	r22, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	6a cf       	rjmp	.-300    	; 0xd9a <digitalWrite>

00000ec6 <_ZN7MCP25156endSPIEv>:
     ec6:	61 e0       	ldi	r22, 0x01	; 1
     ec8:	fc 01       	movw	r30, r24
     eca:	80 81       	ld	r24, Z
     ecc:	66 df       	rcall	.-308    	; 0xd9a <digitalWrite>
     ece:	80 91 26 06 	lds	r24, 0x0626	; 0x800626 <_ZN8SPIClass13interruptModeE>
     ed2:	88 23       	and	r24, r24
     ed4:	61 f0       	breq	.+24     	; 0xeee <_ZN7MCP25156endSPIEv+0x28>
     ed6:	9f b7       	in	r25, 0x3f	; 63
     ed8:	f8 94       	cli
     eda:	20 91 26 06 	lds	r18, 0x0626	; 0x800626 <_ZN8SPIClass13interruptModeE>
     ede:	80 91 24 06 	lds	r24, 0x0624	; 0x800624 <_ZN8SPIClass13interruptSaveE>
     ee2:	21 30       	cpi	r18, 0x01	; 1
     ee4:	19 f4       	brne	.+6      	; 0xeec <_ZN7MCP25156endSPIEv+0x26>
     ee6:	8d bb       	out	0x1d, r24	; 29
     ee8:	9f bf       	out	0x3f, r25	; 63
     eea:	08 95       	ret
     eec:	8f bf       	out	0x3f, r24	; 63
     eee:	08 95       	ret

00000ef0 <_ZN7MCP2515C1EhmP8SPIClass>:
     ef0:	8f 92       	push	r8
     ef2:	9f 92       	push	r9
     ef4:	af 92       	push	r10
     ef6:	bf 92       	push	r11
     ef8:	ff 92       	push	r15
     efa:	0f 93       	push	r16
     efc:	1f 93       	push	r17
     efe:	cf 93       	push	r28
     f00:	df 93       	push	r29
     f02:	ec 01       	movw	r28, r24
     f04:	f6 2e       	mov	r15, r22
     f06:	49 01       	movw	r8, r18
     f08:	5a 01       	movw	r10, r20
     f0a:	01 15       	cp	r16, r1
     f0c:	11 05       	cpc	r17, r1
     f0e:	19 f0       	breq	.+6      	; 0xf16 <_ZN7MCP2515C1EhmP8SPIClass+0x26>
     f10:	1e 83       	std	Y+6, r17	; 0x06
     f12:	0d 83       	std	Y+5, r16	; 0x05
     f14:	06 c0       	rjmp	.+12     	; 0xf22 <_ZN7MCP2515C1EhmP8SPIClass+0x32>
     f16:	88 e2       	ldi	r24, 0x28	; 40
     f18:	96 e0       	ldi	r25, 0x06	; 6
     f1a:	9e 83       	std	Y+6, r25	; 0x06
     f1c:	8d 83       	std	Y+5, r24	; 0x05
     f1e:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <_ZN8SPIClass5beginEv>
     f22:	f8 82       	st	Y, r15
     f24:	89 82       	std	Y+1, r8	; 0x01
     f26:	9a 82       	std	Y+2, r9	; 0x02
     f28:	ab 82       	std	Y+3, r10	; 0x03
     f2a:	bc 82       	std	Y+4, r11	; 0x04
     f2c:	61 e0       	ldi	r22, 0x01	; 1
     f2e:	8f 2d       	mov	r24, r15
     f30:	f8 de       	rcall	.-528    	; 0xd22 <pinMode>
     f32:	ce 01       	movw	r24, r28
     f34:	df 91       	pop	r29
     f36:	cf 91       	pop	r28
     f38:	1f 91       	pop	r17
     f3a:	0f 91       	pop	r16
     f3c:	ff 90       	pop	r15
     f3e:	bf 90       	pop	r11
     f40:	af 90       	pop	r10
     f42:	9f 90       	pop	r9
     f44:	8f 90       	pop	r8
     f46:	bf cf       	rjmp	.-130    	; 0xec6 <_ZN7MCP25156endSPIEv>

00000f48 <_ZN7MCP251512readRegisterENS_8REGISTERE>:
     f48:	1f 93       	push	r17
     f4a:	cf 93       	push	r28
     f4c:	df 93       	push	r29
     f4e:	ec 01       	movw	r28, r24
     f50:	16 2f       	mov	r17, r22
     f52:	80 df       	rcall	.-256    	; 0xe54 <_ZN7MCP25158startSPIEv>
     f54:	83 e0       	ldi	r24, 0x03	; 3
     f56:	77 df       	rcall	.-274    	; 0xe46 <_ZN8SPIClass8transferEh>
     f58:	81 2f       	mov	r24, r17
     f5a:	75 df       	rcall	.-278    	; 0xe46 <_ZN8SPIClass8transferEh>
     f5c:	80 e0       	ldi	r24, 0x00	; 0
     f5e:	73 df       	rcall	.-282    	; 0xe46 <_ZN8SPIClass8transferEh>
     f60:	18 2f       	mov	r17, r24
     f62:	ce 01       	movw	r24, r28
     f64:	b0 df       	rcall	.-160    	; 0xec6 <_ZN7MCP25156endSPIEv>
     f66:	81 2f       	mov	r24, r17
     f68:	df 91       	pop	r29
     f6a:	cf 91       	pop	r28
     f6c:	1f 91       	pop	r17
     f6e:	08 95       	ret

00000f70 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>:
     f70:	df 92       	push	r13
     f72:	ef 92       	push	r14
     f74:	ff 92       	push	r15
     f76:	0f 93       	push	r16
     f78:	1f 93       	push	r17
     f7a:	cf 93       	push	r28
     f7c:	df 93       	push	r29
     f7e:	8c 01       	movw	r16, r24
     f80:	c6 2f       	mov	r28, r22
     f82:	d4 2e       	mov	r13, r20
     f84:	e5 2e       	mov	r14, r21
     f86:	f2 2e       	mov	r15, r18
     f88:	65 df       	rcall	.-310    	; 0xe54 <_ZN7MCP25158startSPIEv>
     f8a:	83 e0       	ldi	r24, 0x03	; 3
     f8c:	5c df       	rcall	.-328    	; 0xe46 <_ZN8SPIClass8transferEh>
     f8e:	8c 2f       	mov	r24, r28
     f90:	5a df       	rcall	.-332    	; 0xe46 <_ZN8SPIClass8transferEh>
     f92:	cd 2d       	mov	r28, r13
     f94:	de 2d       	mov	r29, r14
     f96:	ce 01       	movw	r24, r28
     f98:	8f 0d       	add	r24, r15
     f9a:	91 1d       	adc	r25, r1
     f9c:	7c 01       	movw	r14, r24
     f9e:	ce 15       	cp	r28, r14
     fa0:	df 05       	cpc	r29, r15
     fa2:	21 f0       	breq	.+8      	; 0xfac <_ZN7MCP251513readRegistersENS_8REGISTEREPhh+0x3c>
     fa4:	80 e0       	ldi	r24, 0x00	; 0
     fa6:	4f df       	rcall	.-354    	; 0xe46 <_ZN8SPIClass8transferEh>
     fa8:	89 93       	st	Y+, r24
     faa:	f9 cf       	rjmp	.-14     	; 0xf9e <_ZN7MCP251513readRegistersENS_8REGISTEREPhh+0x2e>
     fac:	c8 01       	movw	r24, r16
     fae:	df 91       	pop	r29
     fb0:	cf 91       	pop	r28
     fb2:	1f 91       	pop	r17
     fb4:	0f 91       	pop	r16
     fb6:	ff 90       	pop	r15
     fb8:	ef 90       	pop	r14
     fba:	df 90       	pop	r13
     fbc:	84 cf       	rjmp	.-248    	; 0xec6 <_ZN7MCP25156endSPIEv>

00000fbe <_ZN7MCP251511setRegisterENS_8REGISTEREh>:
     fbe:	0f 93       	push	r16
     fc0:	1f 93       	push	r17
     fc2:	cf 93       	push	r28
     fc4:	df 93       	push	r29
     fc6:	ec 01       	movw	r28, r24
     fc8:	06 2f       	mov	r16, r22
     fca:	14 2f       	mov	r17, r20
     fcc:	43 df       	rcall	.-378    	; 0xe54 <_ZN7MCP25158startSPIEv>
     fce:	82 e0       	ldi	r24, 0x02	; 2
     fd0:	3a df       	rcall	.-396    	; 0xe46 <_ZN8SPIClass8transferEh>
     fd2:	80 2f       	mov	r24, r16
     fd4:	38 df       	rcall	.-400    	; 0xe46 <_ZN8SPIClass8transferEh>
     fd6:	81 2f       	mov	r24, r17
     fd8:	36 df       	rcall	.-404    	; 0xe46 <_ZN8SPIClass8transferEh>
     fda:	ce 01       	movw	r24, r28
     fdc:	df 91       	pop	r29
     fde:	cf 91       	pop	r28
     fe0:	1f 91       	pop	r17
     fe2:	0f 91       	pop	r16
     fe4:	70 cf       	rjmp	.-288    	; 0xec6 <_ZN7MCP25156endSPIEv>

00000fe6 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>:
     fe6:	df 92       	push	r13
     fe8:	ef 92       	push	r14
     fea:	ff 92       	push	r15
     fec:	0f 93       	push	r16
     fee:	1f 93       	push	r17
     ff0:	cf 93       	push	r28
     ff2:	df 93       	push	r29
     ff4:	8c 01       	movw	r16, r24
     ff6:	c6 2f       	mov	r28, r22
     ff8:	d4 2e       	mov	r13, r20
     ffa:	e5 2e       	mov	r14, r21
     ffc:	f2 2e       	mov	r15, r18
     ffe:	2a df       	rcall	.-428    	; 0xe54 <_ZN7MCP25158startSPIEv>
    1000:	82 e0       	ldi	r24, 0x02	; 2
    1002:	21 df       	rcall	.-446    	; 0xe46 <_ZN8SPIClass8transferEh>
    1004:	8c 2f       	mov	r24, r28
    1006:	1f df       	rcall	.-450    	; 0xe46 <_ZN8SPIClass8transferEh>
    1008:	cd 2d       	mov	r28, r13
    100a:	de 2d       	mov	r29, r14
    100c:	ce 01       	movw	r24, r28
    100e:	8f 0d       	add	r24, r15
    1010:	91 1d       	adc	r25, r1
    1012:	7c 01       	movw	r14, r24
    1014:	ce 15       	cp	r28, r14
    1016:	df 05       	cpc	r29, r15
    1018:	19 f0       	breq	.+6      	; 0x1020 <__EEPROM_REGION_LENGTH__+0x20>
    101a:	89 91       	ld	r24, Y+
    101c:	14 df       	rcall	.-472    	; 0xe46 <_ZN8SPIClass8transferEh>
    101e:	fa cf       	rjmp	.-12     	; 0x1014 <__EEPROM_REGION_LENGTH__+0x14>
    1020:	c8 01       	movw	r24, r16
    1022:	df 91       	pop	r29
    1024:	cf 91       	pop	r28
    1026:	1f 91       	pop	r17
    1028:	0f 91       	pop	r16
    102a:	ff 90       	pop	r15
    102c:	ef 90       	pop	r14
    102e:	df 90       	pop	r13
    1030:	4a cf       	rjmp	.-364    	; 0xec6 <_ZN7MCP25156endSPIEv>

00001032 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>:
    1032:	ff 92       	push	r15
    1034:	0f 93       	push	r16
    1036:	1f 93       	push	r17
    1038:	cf 93       	push	r28
    103a:	df 93       	push	r29
    103c:	ec 01       	movw	r28, r24
    103e:	f6 2e       	mov	r15, r22
    1040:	04 2f       	mov	r16, r20
    1042:	12 2f       	mov	r17, r18
    1044:	07 df       	rcall	.-498    	; 0xe54 <_ZN7MCP25158startSPIEv>
    1046:	85 e0       	ldi	r24, 0x05	; 5
    1048:	fe de       	rcall	.-516    	; 0xe46 <_ZN8SPIClass8transferEh>
    104a:	8f 2d       	mov	r24, r15
    104c:	fc de       	rcall	.-520    	; 0xe46 <_ZN8SPIClass8transferEh>
    104e:	80 2f       	mov	r24, r16
    1050:	fa de       	rcall	.-524    	; 0xe46 <_ZN8SPIClass8transferEh>
    1052:	81 2f       	mov	r24, r17
    1054:	f8 de       	rcall	.-528    	; 0xe46 <_ZN8SPIClass8transferEh>
    1056:	ce 01       	movw	r24, r28
    1058:	df 91       	pop	r29
    105a:	cf 91       	pop	r28
    105c:	1f 91       	pop	r17
    105e:	0f 91       	pop	r16
    1060:	ff 90       	pop	r15
    1062:	31 cf       	rjmp	.-414    	; 0xec6 <_ZN7MCP25156endSPIEv>

00001064 <_ZN7MCP25159getStatusEv>:
    1064:	1f 93       	push	r17
    1066:	cf 93       	push	r28
    1068:	df 93       	push	r29
    106a:	ec 01       	movw	r28, r24
    106c:	f3 de       	rcall	.-538    	; 0xe54 <_ZN7MCP25158startSPIEv>
    106e:	80 ea       	ldi	r24, 0xA0	; 160
    1070:	ea de       	rcall	.-556    	; 0xe46 <_ZN8SPIClass8transferEh>
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	e8 de       	rcall	.-560    	; 0xe46 <_ZN8SPIClass8transferEh>
    1076:	18 2f       	mov	r17, r24
    1078:	ce 01       	movw	r24, r28
    107a:	25 df       	rcall	.-438    	; 0xec6 <_ZN7MCP25156endSPIEv>
    107c:	81 2f       	mov	r24, r17
    107e:	df 91       	pop	r29
    1080:	cf 91       	pop	r28
    1082:	1f 91       	pop	r17
    1084:	08 95       	ret

00001086 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>:
    1086:	cf 92       	push	r12
    1088:	df 92       	push	r13
    108a:	ef 92       	push	r14
    108c:	ff 92       	push	r15
    108e:	1f 93       	push	r17
    1090:	cf 93       	push	r28
    1092:	df 93       	push	r29
    1094:	ec 01       	movw	r28, r24
    1096:	16 2f       	mov	r17, r22
    1098:	26 2f       	mov	r18, r22
    109a:	40 ee       	ldi	r20, 0xE0	; 224
    109c:	6f e0       	ldi	r22, 0x0F	; 15
    109e:	c9 df       	rcall	.-110    	; 0x1032 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
    10a0:	1d dd       	rcall	.-1478   	; 0xadc <millis>
    10a2:	6b 01       	movw	r12, r22
    10a4:	7c 01       	movw	r14, r24
    10a6:	2a e0       	ldi	r18, 0x0A	; 10
    10a8:	c2 0e       	add	r12, r18
    10aa:	d1 1c       	adc	r13, r1
    10ac:	e1 1c       	adc	r14, r1
    10ae:	f1 1c       	adc	r15, r1
    10b0:	15 dd       	rcall	.-1494   	; 0xadc <millis>
    10b2:	6c 15       	cp	r22, r12
    10b4:	7d 05       	cpc	r23, r13
    10b6:	8e 05       	cpc	r24, r14
    10b8:	9f 05       	cpc	r25, r15
    10ba:	40 f4       	brcc	.+16     	; 0x10cc <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x46>
    10bc:	6e e0       	ldi	r22, 0x0E	; 14
    10be:	ce 01       	movw	r24, r28
    10c0:	43 df       	rcall	.-378    	; 0xf48 <_ZN7MCP251512readRegisterENS_8REGISTERE>
    10c2:	80 7e       	andi	r24, 0xE0	; 224
    10c4:	18 13       	cpse	r17, r24
    10c6:	f4 cf       	rjmp	.-24     	; 0x10b0 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x2a>
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	01 c0       	rjmp	.+2      	; 0x10ce <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x48>
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	91 e0       	ldi	r25, 0x01	; 1
    10d0:	89 27       	eor	r24, r25
    10d2:	df 91       	pop	r29
    10d4:	cf 91       	pop	r28
    10d6:	1f 91       	pop	r17
    10d8:	ff 90       	pop	r15
    10da:	ef 90       	pop	r14
    10dc:	df 90       	pop	r13
    10de:	cf 90       	pop	r12
    10e0:	08 95       	ret

000010e2 <_ZN7MCP251513setConfigModeEv>:
    10e2:	60 e8       	ldi	r22, 0x80	; 128
    10e4:	d0 cf       	rjmp	.-96     	; 0x1086 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>

000010e6 <_ZN7MCP251513setNormalModeEv>:
    10e6:	60 e0       	ldi	r22, 0x00	; 0
    10e8:	ce cf       	rjmp	.-100    	; 0x1086 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>

000010ea <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK>:
    10ea:	0f 93       	push	r16
    10ec:	1f 93       	push	r17
    10ee:	cf 93       	push	r28
    10f0:	df 93       	push	r29
    10f2:	8c 01       	movw	r16, r24
    10f4:	c6 2f       	mov	r28, r22
    10f6:	d4 2f       	mov	r29, r20
    10f8:	f4 df       	rcall	.-24     	; 0x10e2 <_ZN7MCP251513setConfigModeEv>
    10fa:	81 11       	cpse	r24, r1
    10fc:	bd c0       	rjmp	.+378    	; 0x1278 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x18e>
    10fe:	d1 30       	cpi	r29, 0x01	; 1
    1100:	b9 f1       	breq	.+110    	; 0x1170 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x86>
    1102:	08 f4       	brcc	.+2      	; 0x1106 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x1c>
    1104:	6b c0       	rjmp	.+214    	; 0x11dc <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0xf2>
    1106:	d2 30       	cpi	r29, 0x02	; 2
    1108:	09 f0       	breq	.+2      	; 0x110c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x22>
    110a:	99 c0       	rjmp	.+306    	; 0x123e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x154>
    110c:	8c 2f       	mov	r24, r28
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	80 31       	cpi	r24, 0x10	; 16
    1112:	91 05       	cpc	r25, r1
    1114:	08 f0       	brcs	.+2      	; 0x1118 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x2e>
    1116:	93 c0       	rjmp	.+294    	; 0x123e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x154>
    1118:	fc 01       	movw	r30, r24
    111a:	88 27       	eor	r24, r24
    111c:	ec 57       	subi	r30, 0x7C	; 124
    111e:	ff 4f       	sbci	r31, 0xFF	; 255
    1120:	8f 4f       	sbci	r24, 0xFF	; 255
    1122:	0c 94 dd 17 	jmp	0x2fba	; 0x2fba <__tablejump2__>
    1126:	c7 e8       	ldi	r28, 0x87	; 135
    1128:	df eb       	ldi	r29, 0xBF	; 191
    112a:	34 c0       	rjmp	.+104    	; 0x1194 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0xaa>
    112c:	c4 e8       	ldi	r28, 0x84	; 132
    112e:	d4 ea       	ldi	r29, 0xA4	; 164
    1130:	8e c0       	rjmp	.+284    	; 0x124e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x164>
    1132:	c5 e8       	ldi	r28, 0x85	; 133
    1134:	d2 ee       	ldi	r29, 0xE2	; 226
    1136:	47 e4       	ldi	r20, 0x47	; 71
    1138:	93 c0       	rjmp	.+294    	; 0x1260 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x176>
    113a:	c7 e8       	ldi	r28, 0x87	; 135
    113c:	df eb       	ldi	r29, 0xBF	; 191
    113e:	6e c0       	rjmp	.+220    	; 0x121c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x132>
    1140:	c6 e8       	ldi	r28, 0x86	; 134
    1142:	d4 eb       	ldi	r29, 0xB4	; 180
    1144:	6b c0       	rjmp	.+214    	; 0x121c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x132>
    1146:	c7 e8       	ldi	r28, 0x87	; 135
    1148:	df eb       	ldi	r29, 0xBF	; 191
    114a:	6c c0       	rjmp	.+216    	; 0x1224 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x13a>
    114c:	c6 e8       	ldi	r28, 0x86	; 134
    114e:	d4 eb       	ldi	r29, 0xB4	; 180
    1150:	69 c0       	rjmp	.+210    	; 0x1224 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x13a>
    1152:	c5 e8       	ldi	r28, 0x85	; 133
    1154:	d1 eb       	ldi	r29, 0xB1	; 177
    1156:	66 c0       	rjmp	.+204    	; 0x1224 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x13a>
    1158:	c6 e8       	ldi	r28, 0x86	; 134
    115a:	d4 eb       	ldi	r29, 0xB4	; 180
    115c:	6b c0       	rjmp	.+214    	; 0x1234 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x14a>
    115e:	c5 e8       	ldi	r28, 0x85	; 133
    1160:	d1 eb       	ldi	r29, 0xB1	; 177
    1162:	68 c0       	rjmp	.+208    	; 0x1234 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x14a>
    1164:	c2 e8       	ldi	r28, 0x82	; 130
    1166:	d0 e9       	ldi	r29, 0x90	; 144
    1168:	65 c0       	rjmp	.+202    	; 0x1234 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x14a>
    116a:	c0 e8       	ldi	r28, 0x80	; 128
    116c:	d0 e8       	ldi	r29, 0x80	; 128
    116e:	62 c0       	rjmp	.+196    	; 0x1234 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x14a>
    1170:	8c 2f       	mov	r24, r28
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	80 31       	cpi	r24, 0x10	; 16
    1176:	91 05       	cpc	r25, r1
    1178:	08 f0       	brcs	.+2      	; 0x117c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x92>
    117a:	61 c0       	rjmp	.+194    	; 0x123e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x154>
    117c:	fc 01       	movw	r30, r24
    117e:	88 27       	eor	r24, r24
    1180:	ec 56       	subi	r30, 0x6C	; 108
    1182:	ff 4f       	sbci	r31, 0xFF	; 255
    1184:	8f 4f       	sbci	r24, 0xFF	; 255
    1186:	0c 94 dd 17 	jmp	0x2fba	; 0x2fba <__tablejump2__>
    118a:	c7 e8       	ldi	r28, 0x87	; 135
    118c:	df ef       	ldi	r29, 0xFF	; 255
    118e:	5b c0       	rjmp	.+182    	; 0x1246 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15c>
    1190:	c7 e8       	ldi	r28, 0x87	; 135
    1192:	df ef       	ldi	r29, 0xFF	; 255
    1194:	4f e0       	ldi	r20, 0x0F	; 15
    1196:	64 c0       	rjmp	.+200    	; 0x1260 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x176>
    1198:	c5 e8       	ldi	r28, 0x85	; 133
    119a:	d1 ef       	ldi	r29, 0xF1	; 241
    119c:	4e e4       	ldi	r20, 0x4E	; 78
    119e:	60 c0       	rjmp	.+192    	; 0x1260 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x176>
    11a0:	c7 e8       	ldi	r28, 0x87	; 135
    11a2:	df ef       	ldi	r29, 0xFF	; 255
    11a4:	54 c0       	rjmp	.+168    	; 0x124e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x164>
    11a6:	c7 e8       	ldi	r28, 0x87	; 135
    11a8:	da ef       	ldi	r29, 0xFA	; 250
    11aa:	51 c0       	rjmp	.+162    	; 0x124e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x164>
    11ac:	c7 e8       	ldi	r28, 0x87	; 135
    11ae:	df ef       	ldi	r29, 0xFF	; 255
    11b0:	35 c0       	rjmp	.+106    	; 0x121c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x132>
    11b2:	c7 e0       	ldi	r28, 0x07	; 7
    11b4:	de eb       	ldi	r29, 0xBE	; 190
    11b6:	32 c0       	rjmp	.+100    	; 0x121c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x132>
    11b8:	c7 e0       	ldi	r28, 0x07	; 7
    11ba:	dd ea       	ldi	r29, 0xAD	; 173
    11bc:	2f c0       	rjmp	.+94     	; 0x121c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x132>
    11be:	c6 e8       	ldi	r28, 0x86	; 134
    11c0:	d0 ef       	ldi	r29, 0xF0	; 240
    11c2:	2c c0       	rjmp	.+88     	; 0x121c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x132>
    11c4:	c7 e8       	ldi	r28, 0x87	; 135
    11c6:	da ef       	ldi	r29, 0xFA	; 250
    11c8:	2d c0       	rjmp	.+90     	; 0x1224 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x13a>
    11ca:	c5 e8       	ldi	r28, 0x85	; 133
    11cc:	d1 ef       	ldi	r29, 0xF1	; 241
    11ce:	2e c0       	rjmp	.+92     	; 0x122c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x142>
    11d0:	c6 e8       	ldi	r28, 0x86	; 134
    11d2:	d0 ef       	ldi	r29, 0xF0	; 240
    11d4:	2f c0       	rjmp	.+94     	; 0x1234 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x14a>
    11d6:	c2 e8       	ldi	r28, 0x82	; 130
    11d8:	d0 ed       	ldi	r29, 0xD0	; 208
    11da:	2c c0       	rjmp	.+88     	; 0x1234 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x14a>
    11dc:	8c 2f       	mov	r24, r28
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	fc 01       	movw	r30, r24
    11e2:	34 97       	sbiw	r30, 0x04	; 4
    11e4:	ec 30       	cpi	r30, 0x0C	; 12
    11e6:	f1 05       	cpc	r31, r1
    11e8:	50 f5       	brcc	.+84     	; 0x123e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x154>
    11ea:	88 27       	eor	r24, r24
    11ec:	ec 55       	subi	r30, 0x5C	; 92
    11ee:	ff 4f       	sbci	r31, 0xFF	; 255
    11f0:	8f 4f       	sbci	r24, 0xFF	; 255
    11f2:	0c 94 dd 17 	jmp	0x2fba	; 0x2fba <__tablejump2__>
    11f6:	c7 e8       	ldi	r28, 0x87	; 135
    11f8:	df ef       	ldi	r29, 0xFF	; 255
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x116>
    11fc:	c7 e8       	ldi	r28, 0x87	; 135
    11fe:	da ef       	ldi	r29, 0xFA	; 250
    1200:	49 e0       	ldi	r20, 0x09	; 9
    1202:	2e c0       	rjmp	.+92     	; 0x1260 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x176>
    1204:	c7 e8       	ldi	r28, 0x87	; 135
    1206:	df ef       	ldi	r29, 0xFF	; 255
    1208:	02 c0       	rjmp	.+4      	; 0x120e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x124>
    120a:	c7 e8       	ldi	r28, 0x87	; 135
    120c:	de ef       	ldi	r29, 0xFE	; 254
    120e:	44 e0       	ldi	r20, 0x04	; 4
    1210:	27 c0       	rjmp	.+78     	; 0x1260 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x176>
    1212:	c7 e8       	ldi	r28, 0x87	; 135
    1214:	da ef       	ldi	r29, 0xFA	; 250
    1216:	fb cf       	rjmp	.-10     	; 0x120e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x124>
    1218:	c7 e8       	ldi	r28, 0x87	; 135
    121a:	da ef       	ldi	r29, 0xFA	; 250
    121c:	43 e0       	ldi	r20, 0x03	; 3
    121e:	20 c0       	rjmp	.+64     	; 0x1260 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x176>
    1220:	c7 e8       	ldi	r28, 0x87	; 135
    1222:	df ef       	ldi	r29, 0xFF	; 255
    1224:	41 e0       	ldi	r20, 0x01	; 1
    1226:	1c c0       	rjmp	.+56     	; 0x1260 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x176>
    1228:	c6 e8       	ldi	r28, 0x86	; 134
    122a:	db ef       	ldi	r29, 0xFB	; 251
    122c:	41 e4       	ldi	r20, 0x41	; 65
    122e:	18 c0       	rjmp	.+48     	; 0x1260 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x176>
    1230:	c7 e8       	ldi	r28, 0x87	; 135
    1232:	da ef       	ldi	r29, 0xFA	; 250
    1234:	40 e0       	ldi	r20, 0x00	; 0
    1236:	14 c0       	rjmp	.+40     	; 0x1260 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x176>
    1238:	c2 e8       	ldi	r28, 0x82	; 130
    123a:	d9 ed       	ldi	r29, 0xD9	; 217
    123c:	fb cf       	rjmp	.-10     	; 0x1234 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x14a>
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	1b c0       	rjmp	.+54     	; 0x1278 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x18e>
    1242:	c7 e8       	ldi	r28, 0x87	; 135
    1244:	df eb       	ldi	r29, 0xBF	; 191
    1246:	4f e1       	ldi	r20, 0x1F	; 31
    1248:	0b c0       	rjmp	.+22     	; 0x1260 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x176>
    124a:	c7 e8       	ldi	r28, 0x87	; 135
    124c:	df eb       	ldi	r29, 0xBF	; 191
    124e:	47 e0       	ldi	r20, 0x07	; 7
    1250:	07 c0       	rjmp	.+14     	; 0x1260 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x176>
    1252:	c7 e8       	ldi	r28, 0x87	; 135
    1254:	df ef       	ldi	r29, 0xFF	; 255
    1256:	4f e3       	ldi	r20, 0x3F	; 63
    1258:	03 c0       	rjmp	.+6      	; 0x1260 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x176>
    125a:	c7 e8       	ldi	r28, 0x87	; 135
    125c:	df ef       	ldi	r29, 0xFF	; 255
    125e:	4b e0       	ldi	r20, 0x0B	; 11
    1260:	6a e2       	ldi	r22, 0x2A	; 42
    1262:	c8 01       	movw	r24, r16
    1264:	ac de       	rcall	.-680    	; 0xfbe <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    1266:	4d 2f       	mov	r20, r29
    1268:	69 e2       	ldi	r22, 0x29	; 41
    126a:	c8 01       	movw	r24, r16
    126c:	a8 de       	rcall	.-688    	; 0xfbe <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    126e:	4c 2f       	mov	r20, r28
    1270:	68 e2       	ldi	r22, 0x28	; 40
    1272:	c8 01       	movw	r24, r16
    1274:	a4 de       	rcall	.-696    	; 0xfbe <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    1276:	80 e0       	ldi	r24, 0x00	; 0
    1278:	df 91       	pop	r29
    127a:	cf 91       	pop	r28
    127c:	1f 91       	pop	r17
    127e:	0f 91       	pop	r16
    1280:	08 95       	ret

00001282 <_ZN7MCP25159prepareIdEPhbm>:

void MCP2515::prepareId(uint8_t *buffer, const bool ext, const uint32_t id)
{
    1282:	0f 93       	push	r16
    1284:	1f 93       	push	r17
    1286:	fb 01       	movw	r30, r22
    uint16_t canid = (uint16_t)(id & 0x0FFFF);

    if (ext) {
    1288:	44 23       	and	r20, r20
    128a:	b1 f0       	breq	.+44     	; 0x12b8 <_ZN7MCP25159prepareIdEPhbm+0x36>
        buffer[MCP_EID0] = (uint8_t) (canid & 0xFF);
    128c:	03 83       	std	Z+3, r16	; 0x03
        buffer[MCP_EID8] = (uint8_t) (canid >> 8);
    128e:	12 83       	std	Z+2, r17	; 0x02
        canid = (uint16_t)(id >> 16);
    1290:	89 01       	movw	r16, r18
    1292:	22 27       	eor	r18, r18
    1294:	33 27       	eor	r19, r19
        buffer[MCP_SIDL] = (uint8_t) (canid & 0x03);
        buffer[MCP_SIDL] += (uint8_t) ((canid & 0x1C) << 3);
        buffer[MCP_SIDL] |= TXB_EXIDE_MASK;
    1296:	90 2f       	mov	r25, r16
    1298:	9c 71       	andi	r25, 0x1C	; 28
    129a:	80 2f       	mov	r24, r16
    129c:	83 70       	andi	r24, 0x03	; 3
    129e:	48 e0       	ldi	r20, 0x08	; 8
    12a0:	94 9f       	mul	r25, r20
    12a2:	80 0d       	add	r24, r0
    12a4:	11 24       	eor	r1, r1
    12a6:	88 60       	ori	r24, 0x08	; 8
    12a8:	81 83       	std	Z+1, r24	; 0x01
        buffer[MCP_SIDH] = (uint8_t) (canid >> 5);
    12aa:	55 e0       	ldi	r21, 0x05	; 5
    12ac:	16 95       	lsr	r17
    12ae:	07 95       	ror	r16
    12b0:	5a 95       	dec	r21
    12b2:	e1 f7       	brne	.-8      	; 0x12ac <_ZN7MCP25159prepareIdEPhbm+0x2a>
    12b4:	00 83       	st	Z, r16
    12b6:	0d c0       	rjmp	.+26     	; 0x12d2 <_ZN7MCP25159prepareIdEPhbm+0x50>
    } else {
        buffer[MCP_SIDH] = (uint8_t) (canid >> 3);
    12b8:	c8 01       	movw	r24, r16
    12ba:	23 e0       	ldi	r18, 0x03	; 3
    12bc:	96 95       	lsr	r25
    12be:	87 95       	ror	r24
    12c0:	2a 95       	dec	r18
    12c2:	e1 f7       	brne	.-8      	; 0x12bc <_ZN7MCP25159prepareIdEPhbm+0x3a>
    12c4:	80 83       	st	Z, r24
        buffer[MCP_SIDL] = (uint8_t) ((canid & 0x07 ) << 5);
    12c6:	02 95       	swap	r16
    12c8:	00 0f       	add	r16, r16
    12ca:	00 7e       	andi	r16, 0xE0	; 224
    12cc:	01 83       	std	Z+1, r16	; 0x01
        buffer[MCP_EID0] = 0;
    12ce:	13 82       	std	Z+3, r1	; 0x03
        buffer[MCP_EID8] = 0;
    12d0:	12 82       	std	Z+2, r1	; 0x02
    }
}
    12d2:	1f 91       	pop	r17
    12d4:	0f 91       	pop	r16
    12d6:	08 95       	ret

000012d8 <_ZN7MCP251513setFilterMaskENS_4MASKEbm>:

MCP2515::ERROR MCP2515::setFilterMask(const MASK mask, const bool ext, const uint32_t ulData)
{
    12d8:	8f 92       	push	r8
    12da:	9f 92       	push	r9
    12dc:	af 92       	push	r10
    12de:	bf 92       	push	r11
    12e0:	cf 92       	push	r12
    12e2:	df 92       	push	r13
    12e4:	ef 92       	push	r14
    12e6:	ff 92       	push	r15
    12e8:	0f 93       	push	r16
    12ea:	1f 93       	push	r17
    12ec:	cf 93       	push	r28
    12ee:	df 93       	push	r29
    12f0:	00 d0       	rcall	.+0      	; 0x12f2 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x1a>
    12f2:	1f 92       	push	r1
    12f4:	cd b7       	in	r28, 0x3d	; 61
    12f6:	de b7       	in	r29, 0x3e	; 62
    12f8:	7c 01       	movw	r14, r24
    12fa:	d6 2e       	mov	r13, r22
    12fc:	c4 2e       	mov	r12, r20
    12fe:	48 01       	movw	r8, r16
    1300:	59 01       	movw	r10, r18
    ERROR res = setConfigMode();
    1302:	ef de       	rcall	.-546    	; 0x10e2 <_ZN7MCP251513setConfigModeEv>
    if (res != ERROR_OK) {
    1304:	81 11       	cpse	r24, r1
    1306:	19 c0       	rjmp	.+50     	; 0x133a <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x62>
        return res;
    }
    
    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
    1308:	95 01       	movw	r18, r10
    130a:	84 01       	movw	r16, r8
    130c:	4c 2d       	mov	r20, r12
    130e:	be 01       	movw	r22, r28
    1310:	6f 5f       	subi	r22, 0xFF	; 255
    1312:	7f 4f       	sbci	r23, 0xFF	; 255
    1314:	c7 01       	movw	r24, r14
    1316:	b5 df       	rcall	.-150    	; 0x1282 <_ZN7MCP25159prepareIdEPhbm>

    REGISTER reg;
    switch (mask) {
    1318:	dd 20       	and	r13, r13
    131a:	29 f0       	breq	.+10     	; 0x1326 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x4e>
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	d8 12       	cpse	r13, r24
    1320:	0b c0       	rjmp	.+22     	; 0x1338 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x60>
        case MASK0: reg = MCP_RXM0SIDH; break;
        case MASK1: reg = MCP_RXM1SIDH; break;
    1322:	64 e2       	ldi	r22, 0x24	; 36
    1324:	01 c0       	rjmp	.+2      	; 0x1328 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x50>
    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);

    REGISTER reg;
    switch (mask) {
        case MASK0: reg = MCP_RXM0SIDH; break;
    1326:	60 e2       	ldi	r22, 0x20	; 32
        case MASK1: reg = MCP_RXM1SIDH; break;
        default:
            return ERROR_FAIL;
    }

    setRegisters(reg, tbufdata, 4);
    1328:	24 e0       	ldi	r18, 0x04	; 4
    132a:	ae 01       	movw	r20, r28
    132c:	4f 5f       	subi	r20, 0xFF	; 255
    132e:	5f 4f       	sbci	r21, 0xFF	; 255
    1330:	c7 01       	movw	r24, r14
    1332:	59 de       	rcall	.-846    	; 0xfe6 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    
    return ERROR_OK;
    1334:	80 e0       	ldi	r24, 0x00	; 0
    1336:	01 c0       	rjmp	.+2      	; 0x133a <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x62>
    REGISTER reg;
    switch (mask) {
        case MASK0: reg = MCP_RXM0SIDH; break;
        case MASK1: reg = MCP_RXM1SIDH; break;
        default:
            return ERROR_FAIL;
    1338:	81 e0       	ldi	r24, 0x01	; 1
    }

    setRegisters(reg, tbufdata, 4);
    
    return ERROR_OK;
}
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	0f 90       	pop	r0
    1342:	df 91       	pop	r29
    1344:	cf 91       	pop	r28
    1346:	1f 91       	pop	r17
    1348:	0f 91       	pop	r16
    134a:	ff 90       	pop	r15
    134c:	ef 90       	pop	r14
    134e:	df 90       	pop	r13
    1350:	cf 90       	pop	r12
    1352:	bf 90       	pop	r11
    1354:	af 90       	pop	r10
    1356:	9f 90       	pop	r9
    1358:	8f 90       	pop	r8
    135a:	08 95       	ret

0000135c <_ZN7MCP25159setFilterENS_3RXFEbm>:

MCP2515::ERROR MCP2515::setFilter(const RXF num, const bool ext, const uint32_t ulData)
{
    135c:	8f 92       	push	r8
    135e:	9f 92       	push	r9
    1360:	af 92       	push	r10
    1362:	bf 92       	push	r11
    1364:	cf 92       	push	r12
    1366:	df 92       	push	r13
    1368:	ef 92       	push	r14
    136a:	ff 92       	push	r15
    136c:	0f 93       	push	r16
    136e:	1f 93       	push	r17
    1370:	cf 93       	push	r28
    1372:	df 93       	push	r29
    1374:	00 d0       	rcall	.+0      	; 0x1376 <_ZN7MCP25159setFilterENS_3RXFEbm+0x1a>
    1376:	1f 92       	push	r1
    1378:	cd b7       	in	r28, 0x3d	; 61
    137a:	de b7       	in	r29, 0x3e	; 62
    137c:	6c 01       	movw	r12, r24
    137e:	f6 2e       	mov	r15, r22
    1380:	e4 2e       	mov	r14, r20
    1382:	48 01       	movw	r8, r16
    1384:	59 01       	movw	r10, r18
    ERROR res = setConfigMode();
    1386:	ad de       	rcall	.-678    	; 0x10e2 <_ZN7MCP251513setConfigModeEv>
    if (res != ERROR_OK) {
    1388:	81 11       	cpse	r24, r1
    138a:	34 c0       	rjmp	.+104    	; 0x13f4 <_ZN7MCP25159setFilterENS_3RXFEbm+0x98>
        return res;
    }

    REGISTER reg;

    switch (num) {
    138c:	82 e0       	ldi	r24, 0x02	; 2
    138e:	f8 16       	cp	r15, r24
    1390:	a9 f0       	breq	.+42     	; 0x13bc <_ZN7MCP25159setFilterENS_3RXFEbm+0x60>
    1392:	8f 15       	cp	r24, r15
    1394:	40 f0       	brcs	.+16     	; 0x13a6 <_ZN7MCP25159setFilterENS_3RXFEbm+0x4a>
    1396:	ff 20       	and	r15, r15
    1398:	d1 f0       	breq	.+52     	; 0x13ce <_ZN7MCP25159setFilterENS_3RXFEbm+0x72>
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	f8 12       	cpse	r15, r24
    139e:	29 c0       	rjmp	.+82     	; 0x13f2 <_ZN7MCP25159setFilterENS_3RXFEbm+0x96>
        case RXF0: reg = MCP_RXF0SIDH; break;
        case RXF1: reg = MCP_RXF1SIDH; break;
    13a0:	44 e0       	ldi	r20, 0x04	; 4
    13a2:	f4 2e       	mov	r15, r20
    13a4:	15 c0       	rjmp	.+42     	; 0x13d0 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        return res;
    }

    REGISTER reg;

    switch (num) {
    13a6:	84 e0       	ldi	r24, 0x04	; 4
    13a8:	f8 16       	cp	r15, r24
    13aa:	71 f0       	breq	.+28     	; 0x13c8 <_ZN7MCP25159setFilterENS_3RXFEbm+0x6c>
    13ac:	f8 16       	cp	r15, r24
    13ae:	48 f0       	brcs	.+18     	; 0x13c2 <_ZN7MCP25159setFilterENS_3RXFEbm+0x66>
    13b0:	85 e0       	ldi	r24, 0x05	; 5
    13b2:	f8 12       	cpse	r15, r24
    13b4:	1e c0       	rjmp	.+60     	; 0x13f2 <_ZN7MCP25159setFilterENS_3RXFEbm+0x96>
        case RXF0: reg = MCP_RXF0SIDH; break;
        case RXF1: reg = MCP_RXF1SIDH; break;
        case RXF2: reg = MCP_RXF2SIDH; break;
        case RXF3: reg = MCP_RXF3SIDH; break;
        case RXF4: reg = MCP_RXF4SIDH; break;
        case RXF5: reg = MCP_RXF5SIDH; break;
    13b6:	88 e1       	ldi	r24, 0x18	; 24
    13b8:	f8 2e       	mov	r15, r24
    13ba:	0a c0       	rjmp	.+20     	; 0x13d0 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
    REGISTER reg;

    switch (num) {
        case RXF0: reg = MCP_RXF0SIDH; break;
        case RXF1: reg = MCP_RXF1SIDH; break;
        case RXF2: reg = MCP_RXF2SIDH; break;
    13bc:	38 e0       	ldi	r19, 0x08	; 8
    13be:	f3 2e       	mov	r15, r19
    13c0:	07 c0       	rjmp	.+14     	; 0x13d0 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF3: reg = MCP_RXF3SIDH; break;
    13c2:	20 e1       	ldi	r18, 0x10	; 16
    13c4:	f2 2e       	mov	r15, r18
    13c6:	04 c0       	rjmp	.+8      	; 0x13d0 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF4: reg = MCP_RXF4SIDH; break;
    13c8:	94 e1       	ldi	r25, 0x14	; 20
    13ca:	f9 2e       	mov	r15, r25
    13cc:	01 c0       	rjmp	.+2      	; 0x13d0 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
    }

    REGISTER reg;

    switch (num) {
        case RXF0: reg = MCP_RXF0SIDH; break;
    13ce:	f1 2c       	mov	r15, r1
        default:
            return ERROR_FAIL;
    }

    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
    13d0:	95 01       	movw	r18, r10
    13d2:	84 01       	movw	r16, r8
    13d4:	4e 2d       	mov	r20, r14
    13d6:	be 01       	movw	r22, r28
    13d8:	6f 5f       	subi	r22, 0xFF	; 255
    13da:	7f 4f       	sbci	r23, 0xFF	; 255
    13dc:	c6 01       	movw	r24, r12
    13de:	51 df       	rcall	.-350    	; 0x1282 <_ZN7MCP25159prepareIdEPhbm>
    setRegisters(reg, tbufdata, 4);
    13e0:	24 e0       	ldi	r18, 0x04	; 4
    13e2:	ae 01       	movw	r20, r28
    13e4:	4f 5f       	subi	r20, 0xFF	; 255
    13e6:	5f 4f       	sbci	r21, 0xFF	; 255
    13e8:	6f 2d       	mov	r22, r15
    13ea:	c6 01       	movw	r24, r12
    13ec:	fc dd       	rcall	.-1032   	; 0xfe6 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    return ERROR_OK;
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	01 c0       	rjmp	.+2      	; 0x13f4 <_ZN7MCP25159setFilterENS_3RXFEbm+0x98>
        case RXF2: reg = MCP_RXF2SIDH; break;
        case RXF3: reg = MCP_RXF3SIDH; break;
        case RXF4: reg = MCP_RXF4SIDH; break;
        case RXF5: reg = MCP_RXF5SIDH; break;
        default:
            return ERROR_FAIL;
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
    setRegisters(reg, tbufdata, 4);

    return ERROR_OK;
}
    13f4:	0f 90       	pop	r0
    13f6:	0f 90       	pop	r0
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	df 91       	pop	r29
    13fe:	cf 91       	pop	r28
    1400:	1f 91       	pop	r17
    1402:	0f 91       	pop	r16
    1404:	ff 90       	pop	r15
    1406:	ef 90       	pop	r14
    1408:	df 90       	pop	r13
    140a:	cf 90       	pop	r12
    140c:	bf 90       	pop	r11
    140e:	af 90       	pop	r10
    1410:	9f 90       	pop	r9
    1412:	8f 90       	pop	r8
    1414:	08 95       	ret

00001416 <_ZN7MCP25155resetEv>:
    digitalWrite(SPICS, HIGH);
    SPIn->endTransaction();
}

MCP2515::ERROR MCP2515::reset(void)
{
    1416:	af 92       	push	r10
    1418:	bf 92       	push	r11
    141a:	cf 92       	push	r12
    141c:	df 92       	push	r13
    141e:	ef 92       	push	r14
    1420:	ff 92       	push	r15
    1422:	0f 93       	push	r16
    1424:	1f 93       	push	r17
    1426:	cf 93       	push	r28
    1428:	df 93       	push	r29
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62
    142e:	64 97       	sbiw	r28, 0x14	; 20
    1430:	0f b6       	in	r0, 0x3f	; 63
    1432:	f8 94       	cli
    1434:	de bf       	out	0x3e, r29	; 62
    1436:	0f be       	out	0x3f, r0	; 63
    1438:	cd bf       	out	0x3d, r28	; 61
    143a:	7c 01       	movw	r14, r24
    startSPI();
    143c:	0b dd       	rcall	.-1514   	; 0xe54 <_ZN7MCP25158startSPIEv>
    SPIn->transfer(INSTRUCTION_RESET);
    143e:	80 ec       	ldi	r24, 0xC0	; 192
    1440:	02 dd       	rcall	.-1532   	; 0xe46 <_ZN8SPIClass8transferEh>
    endSPI();
    1442:	c7 01       	movw	r24, r14
    1444:	40 dd       	rcall	.-1408   	; 0xec6 <_ZN7MCP25156endSPIEv>
    1446:	6a e0       	ldi	r22, 0x0A	; 10

    delay(10);
    1448:	70 e0       	ldi	r23, 0x00	; 0
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	77 db       	rcall	.-2322   	; 0xb3e <delay>
    1450:	8e 01       	movw	r16, r28

    uint8_t zeros[14];
    memset(zeros, 0, sizeof(zeros));
    1452:	0f 5f       	subi	r16, 0xFF	; 255
    1454:	1f 4f       	sbci	r17, 0xFF	; 255
    1456:	8e e0       	ldi	r24, 0x0E	; 14
    1458:	f8 01       	movw	r30, r16
    145a:	11 92       	st	Z+, r1
    145c:	8a 95       	dec	r24
    145e:	e9 f7       	brne	.-6      	; 0x145a <_ZN7MCP25155resetEv+0x44>
    1460:	2e e0       	ldi	r18, 0x0E	; 14
    setRegisters(MCP_TXB0CTRL, zeros, 14);
    1462:	a8 01       	movw	r20, r16
    1464:	60 e3       	ldi	r22, 0x30	; 48
    1466:	c7 01       	movw	r24, r14
    1468:	be dd       	rcall	.-1156   	; 0xfe6 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    146a:	2e e0       	ldi	r18, 0x0E	; 14
    setRegisters(MCP_TXB1CTRL, zeros, 14);
    146c:	a8 01       	movw	r20, r16
    146e:	60 e4       	ldi	r22, 0x40	; 64
    1470:	c7 01       	movw	r24, r14
    1472:	b9 dd       	rcall	.-1166   	; 0xfe6 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    1474:	2e e0       	ldi	r18, 0x0E	; 14
    setRegisters(MCP_TXB2CTRL, zeros, 14);
    1476:	a8 01       	movw	r20, r16
    1478:	60 e5       	ldi	r22, 0x50	; 80
    147a:	c7 01       	movw	r24, r14
    147c:	b4 dd       	rcall	.-1176   	; 0xfe6 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    147e:	40 e0       	ldi	r20, 0x00	; 0

    setRegister(MCP_RXB0CTRL, 0);
    1480:	60 e6       	ldi	r22, 0x60	; 96
    1482:	c7 01       	movw	r24, r14
    1484:	9c dd       	rcall	.-1224   	; 0xfbe <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    1486:	40 e0       	ldi	r20, 0x00	; 0
    setRegister(MCP_RXB1CTRL, 0);
    1488:	60 e7       	ldi	r22, 0x70	; 112
    148a:	c7 01       	movw	r24, r14
    148c:	98 dd       	rcall	.-1232   	; 0xfbe <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    148e:	43 ea       	ldi	r20, 0xA3	; 163

    setRegister(MCP_CANINTE, CANINTF_RX0IF | CANINTF_RX1IF | CANINTF_ERRIF | CANINTF_MERRF);
    1490:	6b e2       	ldi	r22, 0x2B	; 43
    1492:	c7 01       	movw	r24, r14
    1494:	94 dd       	rcall	.-1240   	; 0xfbe <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    1496:	24 e0       	ldi	r18, 0x04	; 4

    // receives all valid messages using either Standard or Extended Identifiers that
    // meet filter criteria. RXF0 is applied for RXB0, RXF1 is applied for RXB1
    modifyRegister(MCP_RXB0CTRL,
                   RXBnCTRL_RXM_MASK | RXB0CTRL_BUKT | RXB0CTRL_FILHIT_MASK,
                   RXBnCTRL_RXM_STDEXT | RXB0CTRL_BUKT | RXB0CTRL_FILHIT);
    1498:	47 e6       	ldi	r20, 0x67	; 103
    149a:	60 e6       	ldi	r22, 0x60	; 96
    149c:	c7 01       	movw	r24, r14
    149e:	c9 dd       	rcall	.-1134   	; 0x1032 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
    14a0:	21 e0       	ldi	r18, 0x01	; 1
    14a2:	47 e6       	ldi	r20, 0x67	; 103
    modifyRegister(MCP_RXB1CTRL,
                   RXBnCTRL_RXM_MASK | RXB1CTRL_FILHIT_MASK,
                   RXBnCTRL_RXM_STDEXT | RXB1CTRL_FILHIT);
    14a4:	60 e7       	ldi	r22, 0x70	; 112
    14a6:	c7 01       	movw	r24, r14
    14a8:	c4 dd       	rcall	.-1144   	; 0x1032 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
    14aa:	86 e0       	ldi	r24, 0x06	; 6
    14ac:	eb e3       	ldi	r30, 0x3B	; 59
    14ae:	f2 e0       	ldi	r31, 0x02	; 2

    // clear filters and masks
    // do not filter any standard frames for RXF0 used by RXB0
    // do not filter any extended frames for RXF1 used by RXB1
    RXF filters[] = {RXF0, RXF1, RXF2, RXF3, RXF4, RXF5};
    14b0:	de 01       	movw	r26, r28
    14b2:	1f 96       	adiw	r26, 0x0f	; 15
    14b4:	01 90       	ld	r0, Z+
    14b6:	0d 92       	st	X+, r0
    14b8:	8a 95       	dec	r24
    14ba:	e1 f7       	brne	.-8      	; 0x14b4 <_ZN7MCP25155resetEv+0x9e>
    14bc:	5e 01       	movw	r10, r28
    14be:	ff e0       	ldi	r31, 0x0F	; 15
    14c0:	af 0e       	add	r10, r31
    14c2:	b1 1c       	adc	r11, r1
    14c4:	c1 2c       	mov	r12, r1
    14c6:	d1 2c       	mov	r13, r1
    14c8:	f5 01       	movw	r30, r10
    for (int i=0; i<6; i++) {
    14ca:	61 91       	ld	r22, Z+
    14cc:	5f 01       	movw	r10, r30
        bool ext = (i == 1);
        ERROR result = setFilter(filters[i], ext, 0);
    14ce:	41 e0       	ldi	r20, 0x01	; 1
    14d0:	f1 e0       	ldi	r31, 0x01	; 1
    14d2:	cf 16       	cp	r12, r31
    14d4:	d1 04       	cpc	r13, r1
    14d6:	09 f0       	breq	.+2      	; 0x14da <_ZN7MCP25155resetEv+0xc4>
    14d8:	40 e0       	ldi	r20, 0x00	; 0
    14da:	00 e0       	ldi	r16, 0x00	; 0
    14dc:	10 e0       	ldi	r17, 0x00	; 0
    14de:	98 01       	movw	r18, r16
    14e0:	c7 01       	movw	r24, r14
    14e2:	3c df       	rcall	.-392    	; 0x135c <_ZN7MCP25159setFilterENS_3RXFEbm>
    14e4:	81 11       	cpse	r24, r1
    14e6:	17 c0       	rjmp	.+46     	; 0x1516 <_ZN7MCP25155resetEv+0x100>
    14e8:	8f ef       	ldi	r24, 0xFF	; 255
        if (result != ERROR_OK) {
    14ea:	c8 1a       	sub	r12, r24
    14ec:	d8 0a       	sbc	r13, r24

    // clear filters and masks
    // do not filter any standard frames for RXF0 used by RXB0
    // do not filter any extended frames for RXF1 used by RXB1
    RXF filters[] = {RXF0, RXF1, RXF2, RXF3, RXF4, RXF5};
    for (int i=0; i<6; i++) {
    14ee:	e6 e0       	ldi	r30, 0x06	; 6
    14f0:	ce 16       	cp	r12, r30
    14f2:	d1 04       	cpc	r13, r1
    14f4:	49 f7       	brne	.-46     	; 0x14c8 <_ZN7MCP25155resetEv+0xb2>
    14f6:	00 e0       	ldi	r16, 0x00	; 0
    14f8:	10 e0       	ldi	r17, 0x00	; 0
        }
    }

    MASK masks[] = {MASK0, MASK1};
    for (int i=0; i<2; i++) {
        ERROR result = setFilterMask(masks[i], true, 0);
    14fa:	98 01       	movw	r18, r16
    14fc:	41 e0       	ldi	r20, 0x01	; 1
    14fe:	60 e0       	ldi	r22, 0x00	; 0
    1500:	c7 01       	movw	r24, r14
    1502:	ea de       	rcall	.-556    	; 0x12d8 <_ZN7MCP251513setFilterMaskENS_4MASKEbm>
    1504:	81 11       	cpse	r24, r1
    1506:	07 c0       	rjmp	.+14     	; 0x1516 <_ZN7MCP25155resetEv+0x100>
        if (result != ERROR_OK) {
    1508:	00 e0       	ldi	r16, 0x00	; 0
    150a:	10 e0       	ldi	r17, 0x00	; 0
        }
    }

    MASK masks[] = {MASK0, MASK1};
    for (int i=0; i<2; i++) {
        ERROR result = setFilterMask(masks[i], true, 0);
    150c:	98 01       	movw	r18, r16
    150e:	41 e0       	ldi	r20, 0x01	; 1
    1510:	61 e0       	ldi	r22, 0x01	; 1
    1512:	c7 01       	movw	r24, r14
    1514:	e1 de       	rcall	.-574    	; 0x12d8 <_ZN7MCP251513setFilterMaskENS_4MASKEbm>
    1516:	64 96       	adiw	r28, 0x14	; 20
    1518:	0f b6       	in	r0, 0x3f	; 63
    151a:	f8 94       	cli
            return result;
        }
    }

    return ERROR_OK;
}
    151c:	de bf       	out	0x3e, r29	; 62
    151e:	0f be       	out	0x3f, r0	; 63
    1520:	cd bf       	out	0x3d, r28	; 61
    1522:	df 91       	pop	r29
    1524:	cf 91       	pop	r28
    1526:	1f 91       	pop	r17
    1528:	0f 91       	pop	r16
    152a:	ff 90       	pop	r15
    152c:	ef 90       	pop	r14
    152e:	df 90       	pop	r13
    1530:	cf 90       	pop	r12
    1532:	bf 90       	pop	r11
    1534:	af 90       	pop	r10
    1536:	08 95       	ret

00001538 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame>:
    1538:	4f 92       	push	r4
    153a:	5f 92       	push	r5
    153c:	6f 92       	push	r6

    return ERROR_OK;
}

MCP2515::ERROR MCP2515::sendMessage(const TXBn txbn, const struct can_frame *frame)
{
    153e:	7f 92       	push	r7
    1540:	af 92       	push	r10
    1542:	bf 92       	push	r11
    1544:	cf 92       	push	r12
    1546:	df 92       	push	r13
    1548:	ef 92       	push	r14
    154a:	ff 92       	push	r15
    154c:	0f 93       	push	r16
    154e:	1f 93       	push	r17
    1550:	cf 93       	push	r28
    1552:	df 93       	push	r29
    1554:	cd b7       	in	r28, 0x3d	; 61
    1556:	de b7       	in	r29, 0x3e	; 62
    1558:	2d 97       	sbiw	r28, 0x0d	; 13
    155a:	0f b6       	in	r0, 0x3f	; 63
    155c:	f8 94       	cli
    155e:	de bf       	out	0x3e, r29	; 62
    1560:	0f be       	out	0x3f, r0	; 63
    1562:	cd bf       	out	0x3d, r28	; 61
    1564:	5c 01       	movw	r10, r24
    1566:	fa 01       	movw	r30, r20
    if (frame->can_dlc > CAN_MAX_DLEN) {
    1568:	24 81       	ldd	r18, Z+4	; 0x04
    156a:	29 30       	cpi	r18, 0x09	; 9
    156c:	08 f0       	brcs	.+2      	; 0x1570 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0x38>
    156e:	58 c0       	rjmp	.+176    	; 0x1620 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0xe8>
        return ERROR_FAILTX;
    }

    const struct TXBn_REGS *txbuf = &TXB[txbn];
    1570:	e6 2e       	mov	r14, r22
    1572:	f1 2c       	mov	r15, r1

    uint8_t data[13];

    bool ext = (frame->can_id & CAN_EFF_FLAG);
    1574:	80 81       	ld	r24, Z
    1576:	91 81       	ldd	r25, Z+1	; 0x01
    1578:	a2 81       	ldd	r26, Z+2	; 0x02
    157a:	b3 81       	ldd	r27, Z+3	; 0x03
    157c:	ac 01       	movw	r20, r24
    157e:	bd 01       	movw	r22, r26
    1580:	44 27       	eor	r20, r20
    1582:	77 fd       	sbrc	r23, 7
    1584:	43 95       	inc	r20
    1586:	55 27       	eor	r21, r21
    1588:	66 27       	eor	r22, r22
    158a:	77 27       	eor	r23, r23
    bool rtr = (frame->can_id & CAN_RTR_FLAG);
    158c:	2c 01       	movw	r4, r24
    158e:	3d 01       	movw	r6, r26
    1590:	44 24       	eor	r4, r4
    1592:	55 24       	eor	r5, r5
    1594:	66 24       	eor	r6, r6
    1596:	20 e4       	ldi	r18, 0x40	; 64
    1598:	72 22       	and	r7, r18
    uint32_t id = (frame->can_id & (ext ? CAN_EFF_MASK : CAN_SFF_MASK));
    159a:	b7 fd       	sbrc	r27, 7
    159c:	05 c0       	rjmp	.+10     	; 0x15a8 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0x70>
    159e:	0f ef       	ldi	r16, 0xFF	; 255
    15a0:	17 e0       	ldi	r17, 0x07	; 7
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	04 c0       	rjmp	.+8      	; 0x15b0 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0x78>
    15a8:	0f ef       	ldi	r16, 0xFF	; 255
    15aa:	1f ef       	ldi	r17, 0xFF	; 255
    15ac:	2f ef       	ldi	r18, 0xFF	; 255
    15ae:	3f e1       	ldi	r19, 0x1F	; 31
    15b0:	6f 01       	movw	r12, r30

    prepareId(data, ext, id);
    15b2:	08 23       	and	r16, r24
    15b4:	19 23       	and	r17, r25
    15b6:	2a 23       	and	r18, r26
    15b8:	3b 23       	and	r19, r27
    15ba:	be 01       	movw	r22, r28
    15bc:	6f 5f       	subi	r22, 0xFF	; 255
    15be:	7f 4f       	sbci	r23, 0xFF	; 255
    15c0:	c5 01       	movw	r24, r10
    15c2:	5f de       	rcall	.-834    	; 0x1282 <_ZN7MCP25159prepareIdEPhbm>
    15c4:	f6 01       	movw	r30, r12
    15c6:	14 81       	ldd	r17, Z+4	; 0x04

    data[MCP_DLC] = rtr ? (frame->can_dlc | RTR_MASK) : frame->can_dlc;
    15c8:	81 2f       	mov	r24, r17
    15ca:	45 28       	or	r4, r5
    15cc:	46 28       	or	r4, r6
    15ce:	47 28       	or	r4, r7
    15d0:	09 f0       	breq	.+2      	; 0x15d4 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0x9c>
    15d2:	80 64       	ori	r24, 0x40	; 64
    15d4:	8d 83       	std	Y+5, r24	; 0x05

    memcpy(&data[MCP_DATA], frame->data, frame->can_dlc);
    15d6:	41 2f       	mov	r20, r17
    15d8:	50 e0       	ldi	r21, 0x00	; 0
    15da:	b6 01       	movw	r22, r12
    15dc:	68 5f       	subi	r22, 0xF8	; 248
    15de:	7f 4f       	sbci	r23, 0xFF	; 255
    15e0:	ce 01       	movw	r24, r28
    15e2:	06 96       	adiw	r24, 0x06	; 6
    15e4:	0e 94 e5 17 	call	0x2fca	; 0x2fca <memcpy>

    setRegisters(txbuf->SIDH, data, 5 + frame->can_dlc);
    15e8:	25 e0       	ldi	r18, 0x05	; 5
    15ea:	21 0f       	add	r18, r17
    15ec:	87 01       	movw	r16, r14
    15ee:	00 0f       	add	r16, r16
    15f0:	11 1f       	adc	r17, r17
    15f2:	0e 0d       	add	r16, r14
    15f4:	1f 1d       	adc	r17, r15
    15f6:	06 5a       	subi	r16, 0xA6	; 166
    15f8:	1d 4f       	sbci	r17, 0xFD	; 253
    15fa:	ae 01       	movw	r20, r28
    15fc:	4f 5f       	subi	r20, 0xFF	; 255
    15fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1600:	f8 01       	movw	r30, r16
    1602:	61 81       	ldd	r22, Z+1	; 0x01
    1604:	c5 01       	movw	r24, r10
    1606:	ef dc       	rcall	.-1570   	; 0xfe6 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    modifyRegister(txbuf->CTRL, TXB_TXREQ, TXB_TXREQ);
    1608:	f8 01       	movw	r30, r16
    160a:	10 81       	ld	r17, Z
    160c:	28 e0       	ldi	r18, 0x08	; 8
    160e:	48 e0       	ldi	r20, 0x08	; 8
    1610:	61 2f       	mov	r22, r17
    1612:	c5 01       	movw	r24, r10
    1614:	0e dd       	rcall	.-1508   	; 0x1032 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>

    uint8_t ctrl = readRegister(txbuf->CTRL);
    1616:	61 2f       	mov	r22, r17
    1618:	c5 01       	movw	r24, r10
    161a:	96 dc       	rcall	.-1748   	; 0xf48 <_ZN7MCP251512readRegisterENS_8REGISTERE>
    161c:	80 77       	andi	r24, 0x70	; 112
    if ((ctrl & (TXB_ABTF | TXB_MLOA | TXB_TXERR)) != 0) {
    161e:	09 f0       	breq	.+2      	; 0x1622 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0xea>
    1620:	84 e0       	ldi	r24, 0x04	; 4
}

MCP2515::ERROR MCP2515::sendMessage(const TXBn txbn, const struct can_frame *frame)
{
    if (frame->can_dlc > CAN_MAX_DLEN) {
        return ERROR_FAILTX;
    1622:	2d 96       	adiw	r28, 0x0d	; 13
    uint8_t ctrl = readRegister(txbuf->CTRL);
    if ((ctrl & (TXB_ABTF | TXB_MLOA | TXB_TXERR)) != 0) {
        return ERROR_FAILTX;
    }
    return ERROR_OK;
}
    1624:	0f b6       	in	r0, 0x3f	; 63
    1626:	f8 94       	cli
    1628:	de bf       	out	0x3e, r29	; 62
    162a:	0f be       	out	0x3f, r0	; 63
    162c:	cd bf       	out	0x3d, r28	; 61
    162e:	df 91       	pop	r29
    1630:	cf 91       	pop	r28
    1632:	1f 91       	pop	r17
    1634:	0f 91       	pop	r16
    1636:	ff 90       	pop	r15
    1638:	ef 90       	pop	r14
    163a:	df 90       	pop	r13
    163c:	cf 90       	pop	r12
    163e:	bf 90       	pop	r11
    1640:	af 90       	pop	r10
    1642:	7f 90       	pop	r7
    1644:	6f 90       	pop	r6
    1646:	5f 90       	pop	r5
    1648:	4f 90       	pop	r4
    164a:	08 95       	ret

0000164c <_ZN7MCP251511sendMessageEPK9can_frame>:
    164c:	9f 92       	push	r9

MCP2515::ERROR MCP2515::sendMessage(const struct can_frame *frame)
{
    164e:	af 92       	push	r10
    1650:	bf 92       	push	r11
    1652:	cf 92       	push	r12
    1654:	df 92       	push	r13
    1656:	ef 92       	push	r14
    1658:	ff 92       	push	r15
    165a:	0f 93       	push	r16
    165c:	1f 93       	push	r17
    165e:	cf 93       	push	r28
    1660:	df 93       	push	r29
    1662:	00 d0       	rcall	.+0      	; 0x1664 <_ZN7MCP251511sendMessageEPK9can_frame+0x18>
    1664:	cd b7       	in	r28, 0x3d	; 61
    1666:	de b7       	in	r29, 0x3e	; 62
    if (frame->can_dlc > CAN_MAX_DLEN) {
    1668:	fb 01       	movw	r30, r22
    166a:	24 81       	ldd	r18, Z+4	; 0x04
    166c:	29 30       	cpi	r18, 0x09	; 9
    166e:	d8 f5       	brcc	.+118    	; 0x16e6 <_ZN7MCP251511sendMessageEPK9can_frame+0x9a>
    1670:	7b 01       	movw	r14, r22
    1672:	8c 01       	movw	r16, r24
        return ERROR_FAILTX;
    }

    TXBn txBuffers[N_TXBUFFERS] = {TXB0, TXB1, TXB2};
    1674:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <uxTopUsedPriority+0x7>
    1678:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <uxTopUsedPriority+0x8>
    167c:	a0 91 43 02 	lds	r26, 0x0243	; 0x800243 <uxTopUsedPriority+0x9>
    1680:	89 83       	std	Y+1, r24	; 0x01
    1682:	9a 83       	std	Y+2, r25	; 0x02
    1684:	ab 83       	std	Y+3, r26	; 0x03
    1686:	ce 01       	movw	r24, r28
    1688:	01 96       	adiw	r24, 0x01	; 1
    168a:	6c 01       	movw	r12, r24
    168c:	5e 01       	movw	r10, r28
    168e:	94 e0       	ldi	r25, 0x04	; 4
    1690:	a9 0e       	add	r10, r25
    1692:	b1 1c       	adc	r11, r1

    for (int i=0; i<N_TXBUFFERS; i++) {
        const struct TXBn_REGS *txbuf = &TXB[txBuffers[i]];
    1694:	f6 01       	movw	r30, r12
    1696:	91 90       	ld	r9, Z+
    1698:	6f 01       	movw	r12, r30
        uint8_t ctrlval = readRegister(txbuf->CTRL);
    169a:	29 2d       	mov	r18, r9
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	f9 01       	movw	r30, r18
    16a0:	ee 0f       	add	r30, r30
    16a2:	ff 1f       	adc	r31, r31
    16a4:	2e 0f       	add	r18, r30
    16a6:	3f 1f       	adc	r19, r31
    16a8:	f9 01       	movw	r30, r18
    16aa:	e6 5a       	subi	r30, 0xA6	; 166
    16ac:	fd 4f       	sbci	r31, 0xFD	; 253
    16ae:	60 81       	ld	r22, Z
    16b0:	c8 01       	movw	r24, r16
    16b2:	4a dc       	rcall	.-1900   	; 0xf48 <_ZN7MCP251512readRegisterENS_8REGISTERE>
        if ( (ctrlval & TXB_TXREQ) == 0 ) {
    16b4:	83 fd       	sbrc	r24, 3
    16b6:	12 c0       	rjmp	.+36     	; 0x16dc <_ZN7MCP251511sendMessageEPK9can_frame+0x90>
            return sendMessage(txBuffers[i], frame);
    16b8:	a7 01       	movw	r20, r14
    16ba:	69 2d       	mov	r22, r9
    16bc:	c8 01       	movw	r24, r16
        }
    }

    return ERROR_ALLTXBUSY;
}
    16be:	0f 90       	pop	r0
    16c0:	0f 90       	pop	r0
    16c2:	0f 90       	pop	r0
    16c4:	df 91       	pop	r29
    16c6:	cf 91       	pop	r28
    16c8:	1f 91       	pop	r17
    16ca:	0f 91       	pop	r16
    16cc:	ff 90       	pop	r15
    16ce:	ef 90       	pop	r14
    16d0:	df 90       	pop	r13
    16d2:	cf 90       	pop	r12
    16d4:	bf 90       	pop	r11
    16d6:	af 90       	pop	r10

    for (int i=0; i<N_TXBUFFERS; i++) {
        const struct TXBn_REGS *txbuf = &TXB[txBuffers[i]];
        uint8_t ctrlval = readRegister(txbuf->CTRL);
        if ( (ctrlval & TXB_TXREQ) == 0 ) {
            return sendMessage(txBuffers[i], frame);
    16d8:	9f 90       	pop	r9
    16da:	2e cf       	rjmp	.-420    	; 0x1538 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame>
        return ERROR_FAILTX;
    }

    TXBn txBuffers[N_TXBUFFERS] = {TXB0, TXB1, TXB2};

    for (int i=0; i<N_TXBUFFERS; i++) {
    16dc:	ca 14       	cp	r12, r10
    16de:	db 04       	cpc	r13, r11
    16e0:	c9 f6       	brne	.-78     	; 0x1694 <_ZN7MCP251511sendMessageEPK9can_frame+0x48>
        if ( (ctrlval & TXB_TXREQ) == 0 ) {
            return sendMessage(txBuffers[i], frame);
        }
    }

    return ERROR_ALLTXBUSY;
    16e2:	82 e0       	ldi	r24, 0x02	; 2
    16e4:	01 c0       	rjmp	.+2      	; 0x16e8 <_ZN7MCP251511sendMessageEPK9can_frame+0x9c>
}

MCP2515::ERROR MCP2515::sendMessage(const struct can_frame *frame)
{
    if (frame->can_dlc > CAN_MAX_DLEN) {
        return ERROR_FAILTX;
    16e6:	84 e0       	ldi	r24, 0x04	; 4
            return sendMessage(txBuffers[i], frame);
        }
    }

    return ERROR_ALLTXBUSY;
}
    16e8:	0f 90       	pop	r0
    16ea:	0f 90       	pop	r0
    16ec:	0f 90       	pop	r0
    16ee:	df 91       	pop	r29
    16f0:	cf 91       	pop	r28
    16f2:	1f 91       	pop	r17
    16f4:	0f 91       	pop	r16
    16f6:	ff 90       	pop	r15
    16f8:	ef 90       	pop	r14
    16fa:	df 90       	pop	r13
    16fc:	cf 90       	pop	r12
    16fe:	bf 90       	pop	r11
    1700:	af 90       	pop	r10
    1702:	9f 90       	pop	r9
    1704:	08 95       	ret

00001706 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>:

MCP2515::ERROR MCP2515::readMessage(const RXBn rxbn, struct can_frame *frame)
{
    1706:	7f 92       	push	r7
    1708:	8f 92       	push	r8
    170a:	9f 92       	push	r9
    170c:	af 92       	push	r10
    170e:	bf 92       	push	r11
    1710:	cf 92       	push	r12
    1712:	df 92       	push	r13
    1714:	ef 92       	push	r14
    1716:	ff 92       	push	r15
    1718:	0f 93       	push	r16
    171a:	1f 93       	push	r17
    171c:	cf 93       	push	r28
    171e:	df 93       	push	r29
    1720:	00 d0       	rcall	.+0      	; 0x1722 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x1c>
    1722:	1f 92       	push	r1
    1724:	1f 92       	push	r1
    1726:	cd b7       	in	r28, 0x3d	; 61
    1728:	de b7       	in	r29, 0x3e	; 62
    172a:	4c 01       	movw	r8, r24
    172c:	5a 01       	movw	r10, r20
    const struct RXBn_REGS *rxb = &RXB[rxbn];

    uint8_t tbufdata[5];

    readRegisters(rxb->SIDH, tbufdata, 5);
    172e:	24 e0       	ldi	r18, 0x04	; 4
    1730:	62 9f       	mul	r22, r18
    1732:	80 01       	movw	r16, r0
    1734:	11 24       	eor	r1, r1
    1736:	f8 01       	movw	r30, r16
    1738:	ee 5a       	subi	r30, 0xAE	; 174
    173a:	fd 4f       	sbci	r31, 0xFD	; 253
    173c:	25 e0       	ldi	r18, 0x05	; 5
    173e:	ae 01       	movw	r20, r28
    1740:	4f 5f       	subi	r20, 0xFF	; 255
    1742:	5f 4f       	sbci	r21, 0xFF	; 255
    1744:	61 81       	ldd	r22, Z+1	; 0x01
    1746:	14 dc       	rcall	.-2008   	; 0xf70 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>

    uint32_t id = (tbufdata[MCP_SIDH]<<3) + (tbufdata[MCP_SIDL]>>5);
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	99 81       	ldd	r25, Y+1	; 0x01
    174c:	c8 2e       	mov	r12, r24
    174e:	d1 2c       	mov	r13, r1
    1750:	45 e0       	ldi	r20, 0x05	; 5
    1752:	d5 94       	asr	r13
    1754:	c7 94       	ror	r12
    1756:	4a 95       	dec	r20
    1758:	e1 f7       	brne	.-8      	; 0x1752 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x4c>
    175a:	e8 e0       	ldi	r30, 0x08	; 8
    175c:	9e 9f       	mul	r25, r30
    175e:	c0 0c       	add	r12, r0
    1760:	d1 1c       	adc	r13, r1
    1762:	11 24       	eor	r1, r1
    1764:	0d 2c       	mov	r0, r13
    1766:	00 0c       	add	r0, r0
    1768:	ee 08       	sbc	r14, r14
    176a:	ff 08       	sbc	r15, r15

    if ( (tbufdata[MCP_SIDL] & TXB_EXIDE_MASK) ==  TXB_EXIDE_MASK ) {
    176c:	83 ff       	sbrs	r24, 3
    176e:	20 c0       	rjmp	.+64     	; 0x17b0 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xaa>
        id = (id<<2) + (tbufdata[MCP_SIDL] & 0x03);
    1770:	92 e0       	ldi	r25, 0x02	; 2
    1772:	cc 0c       	add	r12, r12
    1774:	dd 1c       	adc	r13, r13
    1776:	ee 1c       	adc	r14, r14
    1778:	ff 1c       	adc	r15, r15
    177a:	9a 95       	dec	r25
    177c:	d1 f7       	brne	.-12     	; 0x1772 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x6c>
        id = (id<<8) + tbufdata[MCP_EID8];
    177e:	83 70       	andi	r24, 0x03	; 3
    1780:	c8 0e       	add	r12, r24
    1782:	d1 1c       	adc	r13, r1
    1784:	e1 1c       	adc	r14, r1
    1786:	f1 1c       	adc	r15, r1
    1788:	fe 2c       	mov	r15, r14
    178a:	ed 2c       	mov	r14, r13
    178c:	dc 2c       	mov	r13, r12
    178e:	cc 24       	eor	r12, r12
        id = (id<<8) + tbufdata[MCP_EID0];
    1790:	8b 81       	ldd	r24, Y+3	; 0x03
    1792:	c8 0e       	add	r12, r24
    1794:	d1 1c       	adc	r13, r1
    1796:	e1 1c       	adc	r14, r1
    1798:	f1 1c       	adc	r15, r1
    179a:	fe 2c       	mov	r15, r14
    179c:	ed 2c       	mov	r14, r13
    179e:	dc 2c       	mov	r13, r12
    17a0:	cc 24       	eor	r12, r12
    17a2:	8c 81       	ldd	r24, Y+4	; 0x04
    17a4:	c8 0e       	add	r12, r24
    17a6:	d1 1c       	adc	r13, r1
    17a8:	e1 1c       	adc	r14, r1
    17aa:	f1 1c       	adc	r15, r1
        id |= CAN_EFF_FLAG;
    17ac:	68 94       	set
    17ae:	f7 f8       	bld	r15, 7
    }

    uint8_t dlc = (tbufdata[MCP_DLC] & DLC_MASK);
    17b0:	8d 81       	ldd	r24, Y+5	; 0x05
    17b2:	8f 70       	andi	r24, 0x0F	; 15
    17b4:	78 2e       	mov	r7, r24
    if (dlc > CAN_MAX_DLEN) {
    17b6:	f8 e0       	ldi	r31, 0x08	; 8
    17b8:	f8 17       	cp	r31, r24
    17ba:	10 f1       	brcs	.+68     	; 0x1800 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xfa>
        return ERROR_FAIL;
    }

    uint8_t ctrl = readRegister(rxb->CTRL);
    17bc:	f8 01       	movw	r30, r16
    17be:	ee 5a       	subi	r30, 0xAE	; 174
    17c0:	fd 4f       	sbci	r31, 0xFD	; 253
    17c2:	60 81       	ld	r22, Z
    17c4:	c4 01       	movw	r24, r8
    17c6:	c0 db       	rcall	.-2176   	; 0xf48 <_ZN7MCP251512readRegisterENS_8REGISTERE>
    if (ctrl & RXBnCTRL_RTR) {
    17c8:	83 ff       	sbrs	r24, 3
    17ca:	02 c0       	rjmp	.+4      	; 0x17d0 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xca>
        id |= CAN_RTR_FLAG;
    17cc:	68 94       	set
    17ce:	f6 f8       	bld	r15, 6
    }

    frame->can_id = id;
    17d0:	f5 01       	movw	r30, r10
    17d2:	c0 82       	st	Z, r12
    17d4:	d1 82       	std	Z+1, r13	; 0x01
    17d6:	e2 82       	std	Z+2, r14	; 0x02
    17d8:	f3 82       	std	Z+3, r15	; 0x03
    frame->can_dlc = dlc;
    17da:	74 82       	std	Z+4, r7	; 0x04

    readRegisters(rxb->DATA, frame->data, dlc);
    17dc:	a5 01       	movw	r20, r10
    17de:	48 5f       	subi	r20, 0xF8	; 248
    17e0:	5f 4f       	sbci	r21, 0xFF	; 255
    17e2:	0e 5a       	subi	r16, 0xAE	; 174
    17e4:	1d 4f       	sbci	r17, 0xFD	; 253
    17e6:	27 2d       	mov	r18, r7
    17e8:	f8 01       	movw	r30, r16
    17ea:	62 81       	ldd	r22, Z+2	; 0x02
    17ec:	c4 01       	movw	r24, r8
    17ee:	c0 db       	rcall	.-2176   	; 0xf70 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>

    modifyRegister(MCP_CANINTF, rxb->CANINTF_RXnIF, 0);
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	f8 01       	movw	r30, r16
    17f4:	43 81       	ldd	r20, Z+3	; 0x03
    17f6:	6c e2       	ldi	r22, 0x2C	; 44
    17f8:	c4 01       	movw	r24, r8
    17fa:	1b dc       	rcall	.-1994   	; 0x1032 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>

    return ERROR_OK;
    17fc:	80 e0       	ldi	r24, 0x00	; 0
    17fe:	01 c0       	rjmp	.+2      	; 0x1802 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xfc>
        id |= CAN_EFF_FLAG;
    }

    uint8_t dlc = (tbufdata[MCP_DLC] & DLC_MASK);
    if (dlc > CAN_MAX_DLEN) {
        return ERROR_FAIL;
    1800:	81 e0       	ldi	r24, 0x01	; 1
    readRegisters(rxb->DATA, frame->data, dlc);

    modifyRegister(MCP_CANINTF, rxb->CANINTF_RXnIF, 0);

    return ERROR_OK;
}
    1802:	0f 90       	pop	r0
    1804:	0f 90       	pop	r0
    1806:	0f 90       	pop	r0
    1808:	0f 90       	pop	r0
    180a:	0f 90       	pop	r0
    180c:	df 91       	pop	r29
    180e:	cf 91       	pop	r28
    1810:	1f 91       	pop	r17
    1812:	0f 91       	pop	r16
    1814:	ff 90       	pop	r15
    1816:	ef 90       	pop	r14
    1818:	df 90       	pop	r13
    181a:	cf 90       	pop	r12
    181c:	bf 90       	pop	r11
    181e:	af 90       	pop	r10
    1820:	9f 90       	pop	r9
    1822:	8f 90       	pop	r8
    1824:	7f 90       	pop	r7
    1826:	08 95       	ret

00001828 <_ZN7MCP251511readMessageEP9can_frame>:

MCP2515::ERROR MCP2515::readMessage(struct can_frame *frame)
{
    1828:	0f 93       	push	r16
    182a:	1f 93       	push	r17
    182c:	cf 93       	push	r28
    182e:	df 93       	push	r29
    1830:	ec 01       	movw	r28, r24
    1832:	8b 01       	movw	r16, r22
    ERROR rc;
    uint8_t stat = getStatus();
    1834:	17 dc       	rcall	.-2002   	; 0x1064 <_ZN7MCP25159getStatusEv>

    if ( stat & STAT_RX0IF ) {
    1836:	80 ff       	sbrs	r24, 0
    1838:	03 c0       	rjmp	.+6      	; 0x1840 <_ZN7MCP251511readMessageEP9can_frame+0x18>
        rc = readMessage(RXB0, frame);
    183a:	a8 01       	movw	r20, r16
    183c:	60 e0       	ldi	r22, 0x00	; 0
    183e:	04 c0       	rjmp	.+8      	; 0x1848 <_ZN7MCP251511readMessageEP9can_frame+0x20>
    } else if ( stat & STAT_RX1IF ) {
    1840:	81 ff       	sbrs	r24, 1
    1842:	08 c0       	rjmp	.+16     	; 0x1854 <_ZN7MCP251511readMessageEP9can_frame+0x2c>
        rc = readMessage(RXB1, frame);
    1844:	a8 01       	movw	r20, r16
    1846:	61 e0       	ldi	r22, 0x01	; 1
    1848:	ce 01       	movw	r24, r28
    } else {
        rc = ERROR_NOMSG;
    }

    return rc;
}
    184a:	df 91       	pop	r29
    184c:	cf 91       	pop	r28
    184e:	1f 91       	pop	r17
    uint8_t stat = getStatus();

    if ( stat & STAT_RX0IF ) {
        rc = readMessage(RXB0, frame);
    } else if ( stat & STAT_RX1IF ) {
        rc = readMessage(RXB1, frame);
    1850:	0f 91       	pop	r16
    1852:	59 cf       	rjmp	.-334    	; 0x1706 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>
    } else {
        rc = ERROR_NOMSG;
    }

    return rc;
}
    1854:	85 e0       	ldi	r24, 0x05	; 5
    1856:	df 91       	pop	r29
    1858:	cf 91       	pop	r28
    185a:	1f 91       	pop	r17
    185c:	0f 91       	pop	r16
    185e:	08 95       	ret

00001860 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1860:	0f b6       	in	r0, 0x3f	; 63
    1862:	f8 94       	cli
    1864:	0f 92       	push	r0
    1866:	fc 01       	movw	r30, r24
    1868:	92 8d       	ldd	r25, Z+26	; 0x1a
    186a:	0f 90       	pop	r0
    186c:	0f be       	out	0x3f, r0	; 63
    186e:	81 e0       	ldi	r24, 0x01	; 1
    1870:	91 11       	cpse	r25, r1
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	08 95       	ret

00001876 <prvCopyDataToQueue>:
    1876:	0f 93       	push	r16
    1878:	1f 93       	push	r17
    187a:	cf 93       	push	r28
    187c:	df 93       	push	r29
    187e:	ec 01       	movw	r28, r24
    1880:	04 2f       	mov	r16, r20
    1882:	1a 8d       	ldd	r17, Y+26	; 0x1a
    1884:	4c 8d       	ldd	r20, Y+28	; 0x1c
    1886:	41 11       	cpse	r20, r1
    1888:	0a c0       	rjmp	.+20     	; 0x189e <prvCopyDataToQueue+0x28>
    188a:	88 81       	ld	r24, Y
    188c:	99 81       	ldd	r25, Y+1	; 0x01
    188e:	89 2b       	or	r24, r25
    1890:	e1 f5       	brne	.+120    	; 0x190a <prvCopyDataToQueue+0x94>
    1892:	8c 81       	ldd	r24, Y+4	; 0x04
    1894:	9d 81       	ldd	r25, Y+5	; 0x05
    1896:	c3 d7       	rcall	.+3974   	; 0x281e <xTaskPriorityDisinherit>
    1898:	1d 82       	std	Y+5, r1	; 0x05
    189a:	1c 82       	std	Y+4, r1	; 0x04
    189c:	37 c0       	rjmp	.+110    	; 0x190c <prvCopyDataToQueue+0x96>
    189e:	50 e0       	ldi	r21, 0x00	; 0
    18a0:	01 11       	cpse	r16, r1
    18a2:	15 c0       	rjmp	.+42     	; 0x18ce <prvCopyDataToQueue+0x58>
    18a4:	8a 81       	ldd	r24, Y+2	; 0x02
    18a6:	9b 81       	ldd	r25, Y+3	; 0x03
    18a8:	0e 94 e5 17 	call	0x2fca	; 0x2fca <memcpy>
    18ac:	2c 8d       	ldd	r18, Y+28	; 0x1c
    18ae:	8a 81       	ldd	r24, Y+2	; 0x02
    18b0:	9b 81       	ldd	r25, Y+3	; 0x03
    18b2:	82 0f       	add	r24, r18
    18b4:	91 1d       	adc	r25, r1
    18b6:	9b 83       	std	Y+3, r25	; 0x03
    18b8:	8a 83       	std	Y+2, r24	; 0x02
    18ba:	2c 81       	ldd	r18, Y+4	; 0x04
    18bc:	3d 81       	ldd	r19, Y+5	; 0x05
    18be:	82 17       	cp	r24, r18
    18c0:	93 07       	cpc	r25, r19
    18c2:	18 f1       	brcs	.+70     	; 0x190a <prvCopyDataToQueue+0x94>
    18c4:	88 81       	ld	r24, Y
    18c6:	99 81       	ldd	r25, Y+1	; 0x01
    18c8:	9b 83       	std	Y+3, r25	; 0x03
    18ca:	8a 83       	std	Y+2, r24	; 0x02
    18cc:	1e c0       	rjmp	.+60     	; 0x190a <prvCopyDataToQueue+0x94>
    18ce:	8e 81       	ldd	r24, Y+6	; 0x06
    18d0:	9f 81       	ldd	r25, Y+7	; 0x07
    18d2:	0e 94 e5 17 	call	0x2fca	; 0x2fca <memcpy>
    18d6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	91 95       	neg	r25
    18dc:	81 95       	neg	r24
    18de:	91 09       	sbc	r25, r1
    18e0:	2e 81       	ldd	r18, Y+6	; 0x06
    18e2:	3f 81       	ldd	r19, Y+7	; 0x07
    18e4:	28 0f       	add	r18, r24
    18e6:	39 1f       	adc	r19, r25
    18e8:	3f 83       	std	Y+7, r19	; 0x07
    18ea:	2e 83       	std	Y+6, r18	; 0x06
    18ec:	48 81       	ld	r20, Y
    18ee:	59 81       	ldd	r21, Y+1	; 0x01
    18f0:	24 17       	cp	r18, r20
    18f2:	35 07       	cpc	r19, r21
    18f4:	30 f4       	brcc	.+12     	; 0x1902 <prvCopyDataToQueue+0x8c>
    18f6:	2c 81       	ldd	r18, Y+4	; 0x04
    18f8:	3d 81       	ldd	r19, Y+5	; 0x05
    18fa:	82 0f       	add	r24, r18
    18fc:	93 1f       	adc	r25, r19
    18fe:	9f 83       	std	Y+7, r25	; 0x07
    1900:	8e 83       	std	Y+6, r24	; 0x06
    1902:	02 30       	cpi	r16, 0x02	; 2
    1904:	11 f4       	brne	.+4      	; 0x190a <prvCopyDataToQueue+0x94>
    1906:	11 11       	cpse	r17, r1
    1908:	11 50       	subi	r17, 0x01	; 1
    190a:	80 e0       	ldi	r24, 0x00	; 0
    190c:	1f 5f       	subi	r17, 0xFF	; 255
    190e:	1a 8f       	std	Y+26, r17	; 0x1a
    1910:	df 91       	pop	r29
    1912:	cf 91       	pop	r28
    1914:	1f 91       	pop	r17
    1916:	0f 91       	pop	r16
    1918:	08 95       	ret

0000191a <prvCopyDataFromQueue>:
    191a:	fc 01       	movw	r30, r24
    191c:	cb 01       	movw	r24, r22
    191e:	44 8d       	ldd	r20, Z+28	; 0x1c
    1920:	44 23       	and	r20, r20
    1922:	a1 f0       	breq	.+40     	; 0x194c <prvCopyDataFromQueue+0x32>
    1924:	50 e0       	ldi	r21, 0x00	; 0
    1926:	26 81       	ldd	r18, Z+6	; 0x06
    1928:	37 81       	ldd	r19, Z+7	; 0x07
    192a:	24 0f       	add	r18, r20
    192c:	35 1f       	adc	r19, r21
    192e:	37 83       	std	Z+7, r19	; 0x07
    1930:	26 83       	std	Z+6, r18	; 0x06
    1932:	64 81       	ldd	r22, Z+4	; 0x04
    1934:	75 81       	ldd	r23, Z+5	; 0x05
    1936:	26 17       	cp	r18, r22
    1938:	37 07       	cpc	r19, r23
    193a:	20 f0       	brcs	.+8      	; 0x1944 <prvCopyDataFromQueue+0x2a>
    193c:	20 81       	ld	r18, Z
    193e:	31 81       	ldd	r19, Z+1	; 0x01
    1940:	37 83       	std	Z+7, r19	; 0x07
    1942:	26 83       	std	Z+6, r18	; 0x06
    1944:	66 81       	ldd	r22, Z+6	; 0x06
    1946:	77 81       	ldd	r23, Z+7	; 0x07
    1948:	0c 94 e5 17 	jmp	0x2fca	; 0x2fca <memcpy>
    194c:	08 95       	ret

0000194e <prvUnlockQueue>:
    194e:	ef 92       	push	r14
    1950:	ff 92       	push	r15
    1952:	1f 93       	push	r17
    1954:	cf 93       	push	r28
    1956:	df 93       	push	r29
    1958:	ec 01       	movw	r28, r24
    195a:	0f b6       	in	r0, 0x3f	; 63
    195c:	f8 94       	cli
    195e:	0f 92       	push	r0
    1960:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1962:	7c 01       	movw	r14, r24
    1964:	81 e1       	ldi	r24, 0x11	; 17
    1966:	e8 0e       	add	r14, r24
    1968:	f1 1c       	adc	r15, r1
    196a:	11 16       	cp	r1, r17
    196c:	4c f4       	brge	.+18     	; 0x1980 <prvUnlockQueue+0x32>
    196e:	89 89       	ldd	r24, Y+17	; 0x11
    1970:	88 23       	and	r24, r24
    1972:	31 f0       	breq	.+12     	; 0x1980 <prvUnlockQueue+0x32>
    1974:	c7 01       	movw	r24, r14
    1976:	59 d6       	rcall	.+3250   	; 0x262a <xTaskRemoveFromEventList>
    1978:	81 11       	cpse	r24, r1
    197a:	3f d7       	rcall	.+3710   	; 0x27fa <vTaskMissedYield>
    197c:	11 50       	subi	r17, 0x01	; 1
    197e:	f5 cf       	rjmp	.-22     	; 0x196a <prvUnlockQueue+0x1c>
    1980:	8f ef       	ldi	r24, 0xFF	; 255
    1982:	8e 8f       	std	Y+30, r24	; 0x1e
    1984:	0f 90       	pop	r0
    1986:	0f be       	out	0x3f, r0	; 63
    1988:	0f b6       	in	r0, 0x3f	; 63
    198a:	f8 94       	cli
    198c:	0f 92       	push	r0
    198e:	1d 8d       	ldd	r17, Y+29	; 0x1d
    1990:	7e 01       	movw	r14, r28
    1992:	88 e0       	ldi	r24, 0x08	; 8
    1994:	e8 0e       	add	r14, r24
    1996:	f1 1c       	adc	r15, r1
    1998:	11 16       	cp	r1, r17
    199a:	4c f4       	brge	.+18     	; 0x19ae <prvUnlockQueue+0x60>
    199c:	88 85       	ldd	r24, Y+8	; 0x08
    199e:	88 23       	and	r24, r24
    19a0:	31 f0       	breq	.+12     	; 0x19ae <prvUnlockQueue+0x60>
    19a2:	c7 01       	movw	r24, r14
    19a4:	42 d6       	rcall	.+3204   	; 0x262a <xTaskRemoveFromEventList>
    19a6:	81 11       	cpse	r24, r1
    19a8:	28 d7       	rcall	.+3664   	; 0x27fa <vTaskMissedYield>
    19aa:	11 50       	subi	r17, 0x01	; 1
    19ac:	f5 cf       	rjmp	.-22     	; 0x1998 <prvUnlockQueue+0x4a>
    19ae:	8f ef       	ldi	r24, 0xFF	; 255
    19b0:	8d 8f       	std	Y+29, r24	; 0x1d
    19b2:	0f 90       	pop	r0
    19b4:	0f be       	out	0x3f, r0	; 63
    19b6:	df 91       	pop	r29
    19b8:	cf 91       	pop	r28
    19ba:	1f 91       	pop	r17
    19bc:	ff 90       	pop	r15
    19be:	ef 90       	pop	r14
    19c0:	08 95       	ret

000019c2 <xQueueGenericReset>:
    19c2:	cf 93       	push	r28
    19c4:	df 93       	push	r29
    19c6:	00 97       	sbiw	r24, 0x00	; 0
    19c8:	09 f4       	brne	.+2      	; 0x19cc <xQueueGenericReset+0xa>
    19ca:	3f c0       	rjmp	.+126    	; 0x1a4a <xQueueGenericReset+0x88>
    19cc:	fc 01       	movw	r30, r24
    19ce:	23 8d       	ldd	r18, Z+27	; 0x1b
    19d0:	22 23       	and	r18, r18
    19d2:	09 f4       	brne	.+2      	; 0x19d6 <xQueueGenericReset+0x14>
    19d4:	3a c0       	rjmp	.+116    	; 0x1a4a <xQueueGenericReset+0x88>
    19d6:	ec 01       	movw	r28, r24
    19d8:	0f b6       	in	r0, 0x3f	; 63
    19da:	f8 94       	cli
    19dc:	0f 92       	push	r0
    19de:	40 81       	ld	r20, Z
    19e0:	51 81       	ldd	r21, Z+1	; 0x01
    19e2:	83 8d       	ldd	r24, Z+27	; 0x1b
    19e4:	74 8d       	ldd	r23, Z+28	; 0x1c
    19e6:	9a 01       	movw	r18, r20
    19e8:	87 9f       	mul	r24, r23
    19ea:	20 0d       	add	r18, r0
    19ec:	31 1d       	adc	r19, r1
    19ee:	11 24       	eor	r1, r1
    19f0:	35 83       	std	Z+5, r19	; 0x05
    19f2:	24 83       	std	Z+4, r18	; 0x04
    19f4:	12 8e       	std	Z+26, r1	; 0x1a
    19f6:	53 83       	std	Z+3, r21	; 0x03
    19f8:	42 83       	std	Z+2, r20	; 0x02
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	01 97       	sbiw	r24, 0x01	; 1
    19fe:	78 9f       	mul	r23, r24
    1a00:	90 01       	movw	r18, r0
    1a02:	79 9f       	mul	r23, r25
    1a04:	30 0d       	add	r19, r0
    1a06:	11 24       	eor	r1, r1
    1a08:	ca 01       	movw	r24, r20
    1a0a:	82 0f       	add	r24, r18
    1a0c:	93 1f       	adc	r25, r19
    1a0e:	97 83       	std	Z+7, r25	; 0x07
    1a10:	86 83       	std	Z+6, r24	; 0x06
    1a12:	8f ef       	ldi	r24, 0xFF	; 255
    1a14:	85 8f       	std	Z+29, r24	; 0x1d
    1a16:	86 8f       	std	Z+30, r24	; 0x1e
    1a18:	61 11       	cpse	r22, r1
    1a1a:	0b c0       	rjmp	.+22     	; 0x1a32 <xQueueGenericReset+0x70>
    1a1c:	80 85       	ldd	r24, Z+8	; 0x08
    1a1e:	88 23       	and	r24, r24
    1a20:	81 f0       	breq	.+32     	; 0x1a42 <xQueueGenericReset+0x80>
    1a22:	cf 01       	movw	r24, r30
    1a24:	08 96       	adiw	r24, 0x08	; 8
    1a26:	01 d6       	rcall	.+3074   	; 0x262a <xTaskRemoveFromEventList>
    1a28:	88 23       	and	r24, r24
    1a2a:	59 f0       	breq	.+22     	; 0x1a42 <xQueueGenericReset+0x80>
    1a2c:	0e 94 da 16 	call	0x2db4	; 0x2db4 <vPortYield>
    1a30:	08 c0       	rjmp	.+16     	; 0x1a42 <xQueueGenericReset+0x80>
    1a32:	cf 01       	movw	r24, r30
    1a34:	08 96       	adiw	r24, 0x08	; 8
    1a36:	0e 94 55 16 	call	0x2caa	; 0x2caa <vListInitialise>
    1a3a:	ce 01       	movw	r24, r28
    1a3c:	41 96       	adiw	r24, 0x11	; 17
    1a3e:	0e 94 55 16 	call	0x2caa	; 0x2caa <vListInitialise>
    1a42:	0f 90       	pop	r0
    1a44:	0f be       	out	0x3f, r0	; 63
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	01 c0       	rjmp	.+2      	; 0x1a4c <xQueueGenericReset+0x8a>
    1a4a:	80 e0       	ldi	r24, 0x00	; 0
    1a4c:	df 91       	pop	r29
    1a4e:	cf 91       	pop	r28
    1a50:	08 95       	ret

00001a52 <xQueueGenericCreateStatic>:
    1a52:	cf 93       	push	r28
    1a54:	df 93       	push	r29
    1a56:	e9 01       	movw	r28, r18
    1a58:	88 23       	and	r24, r24
    1a5a:	a1 f0       	breq	.+40     	; 0x1a84 <xQueueGenericCreateStatic+0x32>
    1a5c:	20 97       	sbiw	r28, 0x00	; 0
    1a5e:	a1 f0       	breq	.+40     	; 0x1a88 <xQueueGenericCreateStatic+0x36>
    1a60:	41 15       	cp	r20, r1
    1a62:	51 05       	cpc	r21, r1
    1a64:	29 f0       	breq	.+10     	; 0x1a70 <xQueueGenericCreateStatic+0x1e>
    1a66:	66 23       	and	r22, r22
    1a68:	69 f0       	breq	.+26     	; 0x1a84 <xQueueGenericCreateStatic+0x32>
    1a6a:	59 83       	std	Y+1, r21	; 0x01
    1a6c:	48 83       	st	Y, r20
    1a6e:	04 c0       	rjmp	.+8      	; 0x1a78 <xQueueGenericCreateStatic+0x26>
    1a70:	61 11       	cpse	r22, r1
    1a72:	08 c0       	rjmp	.+16     	; 0x1a84 <xQueueGenericCreateStatic+0x32>
    1a74:	39 83       	std	Y+1, r19	; 0x01
    1a76:	28 83       	st	Y, r18
    1a78:	8b 8f       	std	Y+27, r24	; 0x1b
    1a7a:	6c 8f       	std	Y+28, r22	; 0x1c
    1a7c:	61 e0       	ldi	r22, 0x01	; 1
    1a7e:	ce 01       	movw	r24, r28
    1a80:	a0 df       	rcall	.-192    	; 0x19c2 <xQueueGenericReset>
    1a82:	02 c0       	rjmp	.+4      	; 0x1a88 <xQueueGenericCreateStatic+0x36>
    1a84:	c0 e0       	ldi	r28, 0x00	; 0
    1a86:	d0 e0       	ldi	r29, 0x00	; 0
    1a88:	ce 01       	movw	r24, r28
    1a8a:	df 91       	pop	r29
    1a8c:	cf 91       	pop	r28
    1a8e:	08 95       	ret

00001a90 <xQueueGenericSend>:
    1a90:	af 92       	push	r10
    1a92:	bf 92       	push	r11
    1a94:	cf 92       	push	r12
    1a96:	df 92       	push	r13
    1a98:	ff 92       	push	r15
    1a9a:	0f 93       	push	r16
    1a9c:	1f 93       	push	r17
    1a9e:	cf 93       	push	r28
    1aa0:	df 93       	push	r29
    1aa2:	00 d0       	rcall	.+0      	; 0x1aa4 <xQueueGenericSend+0x14>
    1aa4:	1f 92       	push	r1
    1aa6:	1f 92       	push	r1
    1aa8:	cd b7       	in	r28, 0x3d	; 61
    1aaa:	de b7       	in	r29, 0x3e	; 62
    1aac:	8c 01       	movw	r16, r24
    1aae:	6b 01       	movw	r12, r22
    1ab0:	5d 83       	std	Y+5, r21	; 0x05
    1ab2:	4c 83       	std	Y+4, r20	; 0x04
    1ab4:	f2 2e       	mov	r15, r18
    1ab6:	80 e0       	ldi	r24, 0x00	; 0
    1ab8:	58 01       	movw	r10, r16
    1aba:	98 e0       	ldi	r25, 0x08	; 8
    1abc:	a9 0e       	add	r10, r25
    1abe:	b1 1c       	adc	r11, r1
    1ac0:	0f b6       	in	r0, 0x3f	; 63
    1ac2:	f8 94       	cli
    1ac4:	0f 92       	push	r0
    1ac6:	f8 01       	movw	r30, r16
    1ac8:	22 8d       	ldd	r18, Z+26	; 0x1a
    1aca:	93 8d       	ldd	r25, Z+27	; 0x1b
    1acc:	29 17       	cp	r18, r25
    1ace:	18 f0       	brcs	.+6      	; 0x1ad6 <xQueueGenericSend+0x46>
    1ad0:	f2 e0       	ldi	r31, 0x02	; 2
    1ad2:	ff 12       	cpse	r15, r31
    1ad4:	12 c0       	rjmp	.+36     	; 0x1afa <xQueueGenericSend+0x6a>
    1ad6:	4f 2d       	mov	r20, r15
    1ad8:	b6 01       	movw	r22, r12
    1ada:	c8 01       	movw	r24, r16
    1adc:	cc de       	rcall	.-616    	; 0x1876 <prvCopyDataToQueue>
    1ade:	f8 01       	movw	r30, r16
    1ae0:	91 89       	ldd	r25, Z+17	; 0x11
    1ae2:	99 23       	and	r25, r25
    1ae4:	19 f0       	breq	.+6      	; 0x1aec <xQueueGenericSend+0x5c>
    1ae6:	c8 01       	movw	r24, r16
    1ae8:	41 96       	adiw	r24, 0x11	; 17
    1aea:	9f d5       	rcall	.+2878   	; 0x262a <xTaskRemoveFromEventList>
    1aec:	81 11       	cpse	r24, r1
    1aee:	0e 94 da 16 	call	0x2db4	; 0x2db4 <vPortYield>
    1af2:	0f 90       	pop	r0
    1af4:	0f be       	out	0x3f, r0	; 63
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	46 c0       	rjmp	.+140    	; 0x1b86 <xQueueGenericSend+0xf6>
    1afa:	2c 81       	ldd	r18, Y+4	; 0x04
    1afc:	3d 81       	ldd	r19, Y+5	; 0x05
    1afe:	23 2b       	or	r18, r19
    1b00:	19 f4       	brne	.+6      	; 0x1b08 <xQueueGenericSend+0x78>
    1b02:	0f 90       	pop	r0
    1b04:	0f be       	out	0x3f, r0	; 63
    1b06:	3e c0       	rjmp	.+124    	; 0x1b84 <xQueueGenericSend+0xf4>
    1b08:	81 11       	cpse	r24, r1
    1b0a:	03 c0       	rjmp	.+6      	; 0x1b12 <xQueueGenericSend+0x82>
    1b0c:	ce 01       	movw	r24, r28
    1b0e:	01 96       	adiw	r24, 0x01	; 1
    1b10:	38 d6       	rcall	.+3184   	; 0x2782 <vTaskInternalSetTimeOutState>
    1b12:	0f 90       	pop	r0
    1b14:	0f be       	out	0x3f, r0	; 63
    1b16:	f6 d2       	rcall	.+1516   	; 0x2104 <vTaskSuspendAll>
    1b18:	0f b6       	in	r0, 0x3f	; 63
    1b1a:	f8 94       	cli
    1b1c:	0f 92       	push	r0
    1b1e:	f8 01       	movw	r30, r16
    1b20:	85 8d       	ldd	r24, Z+29	; 0x1d
    1b22:	8f 3f       	cpi	r24, 0xFF	; 255
    1b24:	09 f4       	brne	.+2      	; 0x1b28 <xQueueGenericSend+0x98>
    1b26:	15 8e       	std	Z+29, r1	; 0x1d
    1b28:	f8 01       	movw	r30, r16
    1b2a:	86 8d       	ldd	r24, Z+30	; 0x1e
    1b2c:	8f 3f       	cpi	r24, 0xFF	; 255
    1b2e:	09 f4       	brne	.+2      	; 0x1b32 <xQueueGenericSend+0xa2>
    1b30:	16 8e       	std	Z+30, r1	; 0x1e
    1b32:	0f 90       	pop	r0
    1b34:	0f be       	out	0x3f, r0	; 63
    1b36:	be 01       	movw	r22, r28
    1b38:	6c 5f       	subi	r22, 0xFC	; 252
    1b3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b3c:	ce 01       	movw	r24, r28
    1b3e:	01 96       	adiw	r24, 0x01	; 1
    1b40:	2b d6       	rcall	.+3158   	; 0x2798 <xTaskCheckForTimeOut>
    1b42:	81 11       	cpse	r24, r1
    1b44:	1c c0       	rjmp	.+56     	; 0x1b7e <xQueueGenericSend+0xee>
    1b46:	0f b6       	in	r0, 0x3f	; 63
    1b48:	f8 94       	cli
    1b4a:	0f 92       	push	r0
    1b4c:	f8 01       	movw	r30, r16
    1b4e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1b50:	83 8d       	ldd	r24, Z+27	; 0x1b
    1b52:	0f 90       	pop	r0
    1b54:	0f be       	out	0x3f, r0	; 63
    1b56:	98 13       	cpse	r25, r24
    1b58:	0e c0       	rjmp	.+28     	; 0x1b76 <xQueueGenericSend+0xe6>
    1b5a:	6c 81       	ldd	r22, Y+4	; 0x04
    1b5c:	7d 81       	ldd	r23, Y+5	; 0x05
    1b5e:	c5 01       	movw	r24, r10
    1b60:	0e d5       	rcall	.+2588   	; 0x257e <vTaskPlaceOnEventList>
    1b62:	c8 01       	movw	r24, r16
    1b64:	f4 de       	rcall	.-536    	; 0x194e <prvUnlockQueue>
    1b66:	e7 d3       	rcall	.+1998   	; 0x2336 <xTaskResumeAll>
    1b68:	88 23       	and	r24, r24
    1b6a:	11 f0       	breq	.+4      	; 0x1b70 <xQueueGenericSend+0xe0>
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	a8 cf       	rjmp	.-176    	; 0x1ac0 <xQueueGenericSend+0x30>
    1b70:	0e 94 da 16 	call	0x2db4	; 0x2db4 <vPortYield>
    1b74:	fb cf       	rjmp	.-10     	; 0x1b6c <xQueueGenericSend+0xdc>
    1b76:	c8 01       	movw	r24, r16
    1b78:	ea de       	rcall	.-556    	; 0x194e <prvUnlockQueue>
    1b7a:	dd d3       	rcall	.+1978   	; 0x2336 <xTaskResumeAll>
    1b7c:	f7 cf       	rjmp	.-18     	; 0x1b6c <xQueueGenericSend+0xdc>
    1b7e:	c8 01       	movw	r24, r16
    1b80:	e6 de       	rcall	.-564    	; 0x194e <prvUnlockQueue>
    1b82:	d9 d3       	rcall	.+1970   	; 0x2336 <xTaskResumeAll>
    1b84:	80 e0       	ldi	r24, 0x00	; 0
    1b86:	0f 90       	pop	r0
    1b88:	0f 90       	pop	r0
    1b8a:	0f 90       	pop	r0
    1b8c:	0f 90       	pop	r0
    1b8e:	0f 90       	pop	r0
    1b90:	df 91       	pop	r29
    1b92:	cf 91       	pop	r28
    1b94:	1f 91       	pop	r17
    1b96:	0f 91       	pop	r16
    1b98:	ff 90       	pop	r15
    1b9a:	df 90       	pop	r13
    1b9c:	cf 90       	pop	r12
    1b9e:	bf 90       	pop	r11
    1ba0:	af 90       	pop	r10
    1ba2:	08 95       	ret

00001ba4 <xQueueGenericSendFromISR>:
    1ba4:	ef 92       	push	r14
    1ba6:	ff 92       	push	r15
    1ba8:	1f 93       	push	r17
    1baa:	cf 93       	push	r28
    1bac:	df 93       	push	r29
    1bae:	ec 01       	movw	r28, r24
    1bb0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1bb2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bb4:	98 17       	cp	r25, r24
    1bb6:	10 f0       	brcs	.+4      	; 0x1bbc <xQueueGenericSendFromISR+0x18>
    1bb8:	22 30       	cpi	r18, 0x02	; 2
    1bba:	f1 f4       	brne	.+60     	; 0x1bf8 <xQueueGenericSendFromISR+0x54>
    1bbc:	7a 01       	movw	r14, r20
    1bbe:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1bc0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1bc2:	42 2f       	mov	r20, r18
    1bc4:	ce 01       	movw	r24, r28
    1bc6:	57 de       	rcall	.-850    	; 0x1876 <prvCopyDataToQueue>
    1bc8:	1f 3f       	cpi	r17, 0xFF	; 255
    1bca:	79 f4       	brne	.+30     	; 0x1bea <xQueueGenericSendFromISR+0x46>
    1bcc:	89 89       	ldd	r24, Y+17	; 0x11
    1bce:	88 23       	and	r24, r24
    1bd0:	89 f0       	breq	.+34     	; 0x1bf4 <xQueueGenericSendFromISR+0x50>
    1bd2:	ce 01       	movw	r24, r28
    1bd4:	41 96       	adiw	r24, 0x11	; 17
    1bd6:	29 d5       	rcall	.+2642   	; 0x262a <xTaskRemoveFromEventList>
    1bd8:	88 23       	and	r24, r24
    1bda:	61 f0       	breq	.+24     	; 0x1bf4 <xQueueGenericSendFromISR+0x50>
    1bdc:	e1 14       	cp	r14, r1
    1bde:	f1 04       	cpc	r15, r1
    1be0:	49 f0       	breq	.+18     	; 0x1bf4 <xQueueGenericSendFromISR+0x50>
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	f7 01       	movw	r30, r14
    1be6:	80 83       	st	Z, r24
    1be8:	08 c0       	rjmp	.+16     	; 0x1bfa <xQueueGenericSendFromISR+0x56>
    1bea:	9c d2       	rcall	.+1336   	; 0x2124 <uxTaskGetNumberOfTasks>
    1bec:	18 17       	cp	r17, r24
    1bee:	10 f4       	brcc	.+4      	; 0x1bf4 <xQueueGenericSendFromISR+0x50>
    1bf0:	1f 5f       	subi	r17, 0xFF	; 255
    1bf2:	1e 8f       	std	Y+30, r17	; 0x1e
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	01 c0       	rjmp	.+2      	; 0x1bfa <xQueueGenericSendFromISR+0x56>
    1bf8:	80 e0       	ldi	r24, 0x00	; 0
    1bfa:	df 91       	pop	r29
    1bfc:	cf 91       	pop	r28
    1bfe:	1f 91       	pop	r17
    1c00:	ff 90       	pop	r15
    1c02:	ef 90       	pop	r14
    1c04:	08 95       	ret

00001c06 <xQueueReceive>:
    1c06:	af 92       	push	r10
    1c08:	bf 92       	push	r11
    1c0a:	cf 92       	push	r12
    1c0c:	df 92       	push	r13
    1c0e:	ff 92       	push	r15
    1c10:	0f 93       	push	r16
    1c12:	1f 93       	push	r17
    1c14:	cf 93       	push	r28
    1c16:	df 93       	push	r29
    1c18:	00 d0       	rcall	.+0      	; 0x1c1a <xQueueReceive+0x14>
    1c1a:	1f 92       	push	r1
    1c1c:	1f 92       	push	r1
    1c1e:	cd b7       	in	r28, 0x3d	; 61
    1c20:	de b7       	in	r29, 0x3e	; 62
    1c22:	8c 01       	movw	r16, r24
    1c24:	6b 01       	movw	r12, r22
    1c26:	5d 83       	std	Y+5, r21	; 0x05
    1c28:	4c 83       	std	Y+4, r20	; 0x04
    1c2a:	80 e0       	ldi	r24, 0x00	; 0
    1c2c:	58 01       	movw	r10, r16
    1c2e:	91 e1       	ldi	r25, 0x11	; 17
    1c30:	a9 0e       	add	r10, r25
    1c32:	b1 1c       	adc	r11, r1
    1c34:	0f b6       	in	r0, 0x3f	; 63
    1c36:	f8 94       	cli
    1c38:	0f 92       	push	r0
    1c3a:	f8 01       	movw	r30, r16
    1c3c:	f2 8c       	ldd	r15, Z+26	; 0x1a
    1c3e:	ff 20       	and	r15, r15
    1c40:	99 f0       	breq	.+38     	; 0x1c68 <xQueueReceive+0x62>
    1c42:	b6 01       	movw	r22, r12
    1c44:	c8 01       	movw	r24, r16
    1c46:	69 de       	rcall	.-814    	; 0x191a <prvCopyDataFromQueue>
    1c48:	fa 94       	dec	r15
    1c4a:	f8 01       	movw	r30, r16
    1c4c:	f2 8e       	std	Z+26, r15	; 0x1a
    1c4e:	80 85       	ldd	r24, Z+8	; 0x08
    1c50:	88 23       	and	r24, r24
    1c52:	31 f0       	breq	.+12     	; 0x1c60 <xQueueReceive+0x5a>
    1c54:	c8 01       	movw	r24, r16
    1c56:	08 96       	adiw	r24, 0x08	; 8
    1c58:	e8 d4       	rcall	.+2512   	; 0x262a <xTaskRemoveFromEventList>
    1c5a:	81 11       	cpse	r24, r1
    1c5c:	0e 94 da 16 	call	0x2db4	; 0x2db4 <vPortYield>
    1c60:	0f 90       	pop	r0
    1c62:	0f be       	out	0x3f, r0	; 63
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	44 c0       	rjmp	.+136    	; 0x1cf0 <xQueueReceive+0xea>
    1c68:	2c 81       	ldd	r18, Y+4	; 0x04
    1c6a:	3d 81       	ldd	r19, Y+5	; 0x05
    1c6c:	23 2b       	or	r18, r19
    1c6e:	19 f4       	brne	.+6      	; 0x1c76 <xQueueReceive+0x70>
    1c70:	0f 90       	pop	r0
    1c72:	0f be       	out	0x3f, r0	; 63
    1c74:	3c c0       	rjmp	.+120    	; 0x1cee <xQueueReceive+0xe8>
    1c76:	81 11       	cpse	r24, r1
    1c78:	03 c0       	rjmp	.+6      	; 0x1c80 <xQueueReceive+0x7a>
    1c7a:	ce 01       	movw	r24, r28
    1c7c:	01 96       	adiw	r24, 0x01	; 1
    1c7e:	81 d5       	rcall	.+2818   	; 0x2782 <vTaskInternalSetTimeOutState>
    1c80:	0f 90       	pop	r0
    1c82:	0f be       	out	0x3f, r0	; 63
    1c84:	3f d2       	rcall	.+1150   	; 0x2104 <vTaskSuspendAll>
    1c86:	0f b6       	in	r0, 0x3f	; 63
    1c88:	f8 94       	cli
    1c8a:	0f 92       	push	r0
    1c8c:	f8 01       	movw	r30, r16
    1c8e:	85 8d       	ldd	r24, Z+29	; 0x1d
    1c90:	8f 3f       	cpi	r24, 0xFF	; 255
    1c92:	09 f4       	brne	.+2      	; 0x1c96 <xQueueReceive+0x90>
    1c94:	15 8e       	std	Z+29, r1	; 0x1d
    1c96:	f8 01       	movw	r30, r16
    1c98:	86 8d       	ldd	r24, Z+30	; 0x1e
    1c9a:	8f 3f       	cpi	r24, 0xFF	; 255
    1c9c:	09 f4       	brne	.+2      	; 0x1ca0 <xQueueReceive+0x9a>
    1c9e:	16 8e       	std	Z+30, r1	; 0x1e
    1ca0:	0f 90       	pop	r0
    1ca2:	0f be       	out	0x3f, r0	; 63
    1ca4:	be 01       	movw	r22, r28
    1ca6:	6c 5f       	subi	r22, 0xFC	; 252
    1ca8:	7f 4f       	sbci	r23, 0xFF	; 255
    1caa:	ce 01       	movw	r24, r28
    1cac:	01 96       	adiw	r24, 0x01	; 1
    1cae:	74 d5       	rcall	.+2792   	; 0x2798 <xTaskCheckForTimeOut>
    1cb0:	81 11       	cpse	r24, r1
    1cb2:	16 c0       	rjmp	.+44     	; 0x1ce0 <xQueueReceive+0xda>
    1cb4:	c8 01       	movw	r24, r16
    1cb6:	d4 dd       	rcall	.-1112   	; 0x1860 <prvIsQueueEmpty>
    1cb8:	88 23       	and	r24, r24
    1cba:	71 f0       	breq	.+28     	; 0x1cd8 <xQueueReceive+0xd2>
    1cbc:	6c 81       	ldd	r22, Y+4	; 0x04
    1cbe:	7d 81       	ldd	r23, Y+5	; 0x05
    1cc0:	c5 01       	movw	r24, r10
    1cc2:	5d d4       	rcall	.+2234   	; 0x257e <vTaskPlaceOnEventList>
    1cc4:	c8 01       	movw	r24, r16
    1cc6:	43 de       	rcall	.-890    	; 0x194e <prvUnlockQueue>
    1cc8:	36 d3       	rcall	.+1644   	; 0x2336 <xTaskResumeAll>
    1cca:	88 23       	and	r24, r24
    1ccc:	11 f0       	breq	.+4      	; 0x1cd2 <xQueueReceive+0xcc>
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	b1 cf       	rjmp	.-158    	; 0x1c34 <xQueueReceive+0x2e>
    1cd2:	0e 94 da 16 	call	0x2db4	; 0x2db4 <vPortYield>
    1cd6:	fb cf       	rjmp	.-10     	; 0x1cce <xQueueReceive+0xc8>
    1cd8:	c8 01       	movw	r24, r16
    1cda:	39 de       	rcall	.-910    	; 0x194e <prvUnlockQueue>
    1cdc:	2c d3       	rcall	.+1624   	; 0x2336 <xTaskResumeAll>
    1cde:	f7 cf       	rjmp	.-18     	; 0x1cce <xQueueReceive+0xc8>
    1ce0:	c8 01       	movw	r24, r16
    1ce2:	35 de       	rcall	.-918    	; 0x194e <prvUnlockQueue>
    1ce4:	28 d3       	rcall	.+1616   	; 0x2336 <xTaskResumeAll>
    1ce6:	c8 01       	movw	r24, r16
    1ce8:	bb dd       	rcall	.-1162   	; 0x1860 <prvIsQueueEmpty>
    1cea:	88 23       	and	r24, r24
    1cec:	81 f3       	breq	.-32     	; 0x1cce <xQueueReceive+0xc8>
    1cee:	80 e0       	ldi	r24, 0x00	; 0
    1cf0:	0f 90       	pop	r0
    1cf2:	0f 90       	pop	r0
    1cf4:	0f 90       	pop	r0
    1cf6:	0f 90       	pop	r0
    1cf8:	0f 90       	pop	r0
    1cfa:	df 91       	pop	r29
    1cfc:	cf 91       	pop	r28
    1cfe:	1f 91       	pop	r17
    1d00:	0f 91       	pop	r16
    1d02:	ff 90       	pop	r15
    1d04:	df 90       	pop	r13
    1d06:	cf 90       	pop	r12
    1d08:	bf 90       	pop	r11
    1d0a:	af 90       	pop	r10
    1d0c:	08 95       	ret

00001d0e <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    1d0e:	cf 93       	push	r28
    1d10:	df 93       	push	r29
    1d12:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1d14:	0f b6       	in	r0, 0x3f	; 63
    1d16:	f8 94       	cli
    1d18:	0f 92       	push	r0
    1d1a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d1c:	8f 3f       	cpi	r24, 0xFF	; 255
    1d1e:	09 f4       	brne	.+2      	; 0x1d22 <vQueueWaitForMessageRestricted+0x14>
    1d20:	1d 8e       	std	Y+29, r1	; 0x1d
    1d22:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d24:	8f 3f       	cpi	r24, 0xFF	; 255
    1d26:	09 f4       	brne	.+2      	; 0x1d2a <vQueueWaitForMessageRestricted+0x1c>
    1d28:	1e 8e       	std	Y+30, r1	; 0x1e
    1d2a:	0f 90       	pop	r0
    1d2c:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1d2e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1d30:	81 11       	cpse	r24, r1
    1d32:	03 c0       	rjmp	.+6      	; 0x1d3a <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1d34:	ce 01       	movw	r24, r28
    1d36:	41 96       	adiw	r24, 0x11	; 17
    1d38:	31 d4       	rcall	.+2146   	; 0x259c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    1d3a:	ce 01       	movw	r24, r28
    }
    1d3c:	df 91       	pop	r29
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    1d3e:	cf 91       	pop	r28
    1d40:	06 ce       	rjmp	.-1012   	; 0x194e <prvUnlockQueue>

00001d42 <prvResetNextTaskUnblockTime>:
    1d42:	e0 91 18 04 	lds	r30, 0x0418	; 0x800418 <pxDelayedTaskList>
    1d46:	f0 91 19 04 	lds	r31, 0x0419	; 0x800419 <pxDelayedTaskList+0x1>
    1d4a:	80 81       	ld	r24, Z
    1d4c:	81 11       	cpse	r24, r1
    1d4e:	03 c0       	rjmp	.+6      	; 0x1d56 <prvResetNextTaskUnblockTime+0x14>
    1d50:	8f ef       	ldi	r24, 0xFF	; 255
    1d52:	9f ef       	ldi	r25, 0xFF	; 255
    1d54:	09 c0       	rjmp	.+18     	; 0x1d68 <prvResetNextTaskUnblockTime+0x26>
    1d56:	e0 91 18 04 	lds	r30, 0x0418	; 0x800418 <pxDelayedTaskList>
    1d5a:	f0 91 19 04 	lds	r31, 0x0419	; 0x800419 <pxDelayedTaskList+0x1>
    1d5e:	05 80       	ldd	r0, Z+5	; 0x05
    1d60:	f6 81       	ldd	r31, Z+6	; 0x06
    1d62:	e0 2d       	mov	r30, r0
    1d64:	80 81       	ld	r24, Z
    1d66:	91 81       	ldd	r25, Z+1	; 0x01
    1d68:	90 93 ef 03 	sts	0x03EF, r25	; 0x8003ef <xNextTaskUnblockTime+0x1>
    1d6c:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <xNextTaskUnblockTime>
    1d70:	08 95       	ret

00001d72 <prvAddCurrentTaskToDelayedList>:
    1d72:	ff 92       	push	r15
    1d74:	0f 93       	push	r16
    1d76:	1f 93       	push	r17
    1d78:	cf 93       	push	r28
    1d7a:	df 93       	push	r29
    1d7c:	ec 01       	movw	r28, r24
    1d7e:	f6 2e       	mov	r15, r22
    1d80:	00 91 f7 03 	lds	r16, 0x03F7	; 0x8003f7 <xTickCount>
    1d84:	10 91 f8 03 	lds	r17, 0x03F8	; 0x8003f8 <xTickCount+0x1>
    1d88:	80 91 50 04 	lds	r24, 0x0450	; 0x800450 <pxCurrentTCB>
    1d8c:	90 91 51 04 	lds	r25, 0x0451	; 0x800451 <pxCurrentTCB+0x1>
    1d90:	02 96       	adiw	r24, 0x02	; 2
    1d92:	d5 d7       	rcall	.+4010   	; 0x2d3e <uxListRemove>
    1d94:	cf 3f       	cpi	r28, 0xFF	; 255
    1d96:	8f ef       	ldi	r24, 0xFF	; 255
    1d98:	d8 07       	cpc	r29, r24
    1d9a:	c1 f5       	brne	.+112    	; 0x1e0c <prvAddCurrentTaskToDelayedList+0x9a>
    1d9c:	ff 20       	and	r15, r15
    1d9e:	b1 f1       	breq	.+108    	; 0x1e0c <prvAddCurrentTaskToDelayedList+0x9a>
    1da0:	e0 91 fb 03 	lds	r30, 0x03FB	; 0x8003fb <xSuspendedTaskList+0x1>
    1da4:	f0 91 fc 03 	lds	r31, 0x03FC	; 0x8003fc <xSuspendedTaskList+0x2>
    1da8:	a0 91 50 04 	lds	r26, 0x0450	; 0x800450 <pxCurrentTCB>
    1dac:	b0 91 51 04 	lds	r27, 0x0451	; 0x800451 <pxCurrentTCB+0x1>
    1db0:	15 96       	adiw	r26, 0x05	; 5
    1db2:	fc 93       	st	X, r31
    1db4:	ee 93       	st	-X, r30
    1db6:	14 97       	sbiw	r26, 0x04	; 4
    1db8:	a0 91 50 04 	lds	r26, 0x0450	; 0x800450 <pxCurrentTCB>
    1dbc:	b0 91 51 04 	lds	r27, 0x0451	; 0x800451 <pxCurrentTCB+0x1>
    1dc0:	84 81       	ldd	r24, Z+4	; 0x04
    1dc2:	95 81       	ldd	r25, Z+5	; 0x05
    1dc4:	17 96       	adiw	r26, 0x07	; 7
    1dc6:	9c 93       	st	X, r25
    1dc8:	8e 93       	st	-X, r24
    1dca:	16 97       	sbiw	r26, 0x06	; 6
    1dcc:	80 91 50 04 	lds	r24, 0x0450	; 0x800450 <pxCurrentTCB>
    1dd0:	90 91 51 04 	lds	r25, 0x0451	; 0x800451 <pxCurrentTCB+0x1>
    1dd4:	a4 81       	ldd	r26, Z+4	; 0x04
    1dd6:	b5 81       	ldd	r27, Z+5	; 0x05
    1dd8:	02 96       	adiw	r24, 0x02	; 2
    1dda:	13 96       	adiw	r26, 0x03	; 3
    1ddc:	9c 93       	st	X, r25
    1dde:	8e 93       	st	-X, r24
    1de0:	12 97       	sbiw	r26, 0x02	; 2
    1de2:	80 91 50 04 	lds	r24, 0x0450	; 0x800450 <pxCurrentTCB>
    1de6:	90 91 51 04 	lds	r25, 0x0451	; 0x800451 <pxCurrentTCB+0x1>
    1dea:	02 96       	adiw	r24, 0x02	; 2
    1dec:	95 83       	std	Z+5, r25	; 0x05
    1dee:	84 83       	std	Z+4, r24	; 0x04
    1df0:	e0 91 50 04 	lds	r30, 0x0450	; 0x800450 <pxCurrentTCB>
    1df4:	f0 91 51 04 	lds	r31, 0x0451	; 0x800451 <pxCurrentTCB+0x1>
    1df8:	8a ef       	ldi	r24, 0xFA	; 250
    1dfa:	93 e0       	ldi	r25, 0x03	; 3
    1dfc:	93 87       	std	Z+11, r25	; 0x0b
    1dfe:	82 87       	std	Z+10, r24	; 0x0a
    1e00:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <xSuspendedTaskList>
    1e04:	8f 5f       	subi	r24, 0xFF	; 255
    1e06:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <xSuspendedTaskList>
    1e0a:	2d c0       	rjmp	.+90     	; 0x1e66 <prvAddCurrentTaskToDelayedList+0xf4>
    1e0c:	c0 0f       	add	r28, r16
    1e0e:	d1 1f       	adc	r29, r17
    1e10:	e0 91 50 04 	lds	r30, 0x0450	; 0x800450 <pxCurrentTCB>
    1e14:	f0 91 51 04 	lds	r31, 0x0451	; 0x800451 <pxCurrentTCB+0x1>
    1e18:	d3 83       	std	Z+3, r29	; 0x03
    1e1a:	c2 83       	std	Z+2, r28	; 0x02
    1e1c:	60 91 50 04 	lds	r22, 0x0450	; 0x800450 <pxCurrentTCB>
    1e20:	70 91 51 04 	lds	r23, 0x0451	; 0x800451 <pxCurrentTCB+0x1>
    1e24:	c0 17       	cp	r28, r16
    1e26:	d1 07       	cpc	r29, r17
    1e28:	60 f4       	brcc	.+24     	; 0x1e42 <prvAddCurrentTaskToDelayedList+0xd0>
    1e2a:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <pxOverflowDelayedTaskList>
    1e2e:	90 91 17 04 	lds	r25, 0x0417	; 0x800417 <pxOverflowDelayedTaskList+0x1>
    1e32:	6e 5f       	subi	r22, 0xFE	; 254
    1e34:	7f 4f       	sbci	r23, 0xFF	; 255
    1e36:	df 91       	pop	r29
    1e38:	cf 91       	pop	r28
    1e3a:	1f 91       	pop	r17
    1e3c:	0f 91       	pop	r16
    1e3e:	ff 90       	pop	r15
    1e40:	46 c7       	rjmp	.+3724   	; 0x2cce <vListInsert>
    1e42:	80 91 18 04 	lds	r24, 0x0418	; 0x800418 <pxDelayedTaskList>
    1e46:	90 91 19 04 	lds	r25, 0x0419	; 0x800419 <pxDelayedTaskList+0x1>
    1e4a:	6e 5f       	subi	r22, 0xFE	; 254
    1e4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e4e:	3f d7       	rcall	.+3710   	; 0x2cce <vListInsert>
    1e50:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <xNextTaskUnblockTime>
    1e54:	90 91 ef 03 	lds	r25, 0x03EF	; 0x8003ef <xNextTaskUnblockTime+0x1>
    1e58:	c8 17       	cp	r28, r24
    1e5a:	d9 07       	cpc	r29, r25
    1e5c:	20 f4       	brcc	.+8      	; 0x1e66 <prvAddCurrentTaskToDelayedList+0xf4>
    1e5e:	d0 93 ef 03 	sts	0x03EF, r29	; 0x8003ef <xNextTaskUnblockTime+0x1>
    1e62:	c0 93 ee 03 	sts	0x03EE, r28	; 0x8003ee <xNextTaskUnblockTime>
    1e66:	df 91       	pop	r29
    1e68:	cf 91       	pop	r28
    1e6a:	1f 91       	pop	r17
    1e6c:	0f 91       	pop	r16
    1e6e:	ff 90       	pop	r15
    1e70:	08 95       	ret

00001e72 <xTaskCreateStatic>:
    1e72:	6f 92       	push	r6
    1e74:	7f 92       	push	r7
    1e76:	8f 92       	push	r8
    1e78:	9f 92       	push	r9
    1e7a:	af 92       	push	r10
    1e7c:	bf 92       	push	r11
    1e7e:	cf 92       	push	r12
    1e80:	df 92       	push	r13
    1e82:	ef 92       	push	r14
    1e84:	ff 92       	push	r15
    1e86:	0f 93       	push	r16
    1e88:	cf 93       	push	r28
    1e8a:	df 93       	push	r29
    1e8c:	c1 14       	cp	r12, r1
    1e8e:	d1 04       	cpc	r13, r1
    1e90:	09 f4       	brne	.+2      	; 0x1e94 <xTaskCreateStatic+0x22>
    1e92:	dd c0       	rjmp	.+442    	; 0x204e <__DATA_REGION_LENGTH__+0x4e>
    1e94:	e1 14       	cp	r14, r1
    1e96:	f1 04       	cpc	r15, r1
    1e98:	09 f4       	brne	.+2      	; 0x1e9c <xTaskCreateStatic+0x2a>
    1e9a:	d9 c0       	rjmp	.+434    	; 0x204e <__DATA_REGION_LENGTH__+0x4e>
    1e9c:	e6 01       	movw	r28, r12
    1e9e:	59 01       	movw	r10, r18
    1ea0:	3a 01       	movw	r6, r20
    1ea2:	4b 01       	movw	r8, r22
    1ea4:	6c 01       	movw	r12, r24
    1ea6:	88 e2       	ldi	r24, 0x28	; 40
    1ea8:	de 01       	movw	r26, r28
    1eaa:	1d 92       	st	X+, r1
    1eac:	8a 95       	dec	r24
    1eae:	e9 f7       	brne	.-6      	; 0x1eaa <xTaskCreateStatic+0x38>
    1eb0:	f8 8e       	std	Y+24, r15	; 0x18
    1eb2:	ef 8a       	std	Y+23, r14	; 0x17
    1eb4:	65 ea       	ldi	r22, 0xA5	; 165
    1eb6:	70 e0       	ldi	r23, 0x00	; 0
    1eb8:	c7 01       	movw	r24, r14
    1eba:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <memset>
    1ebe:	b1 e0       	ldi	r27, 0x01	; 1
    1ec0:	6b 1a       	sub	r6, r27
    1ec2:	71 08       	sbc	r7, r1
    1ec4:	ef 88       	ldd	r14, Y+23	; 0x17
    1ec6:	f8 8c       	ldd	r15, Y+24	; 0x18
    1ec8:	e6 0c       	add	r14, r6
    1eca:	f7 1c       	adc	r15, r7
    1ecc:	81 14       	cp	r8, r1
    1ece:	91 04       	cpc	r9, r1
    1ed0:	99 f0       	breq	.+38     	; 0x1ef8 <xTaskCreateStatic+0x86>
    1ed2:	be 01       	movw	r22, r28
    1ed4:	67 5e       	subi	r22, 0xE7	; 231
    1ed6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ed8:	f4 01       	movw	r30, r8
    1eda:	c4 01       	movw	r24, r8
    1edc:	08 96       	adiw	r24, 0x08	; 8
    1ede:	9f 01       	movw	r18, r30
    1ee0:	41 91       	ld	r20, Z+
    1ee2:	db 01       	movw	r26, r22
    1ee4:	4d 93       	st	X+, r20
    1ee6:	bd 01       	movw	r22, r26
    1ee8:	d9 01       	movw	r26, r18
    1eea:	2c 91       	ld	r18, X
    1eec:	22 23       	and	r18, r18
    1eee:	19 f0       	breq	.+6      	; 0x1ef6 <xTaskCreateStatic+0x84>
    1ef0:	e8 17       	cp	r30, r24
    1ef2:	f9 07       	cpc	r31, r25
    1ef4:	a1 f7       	brne	.-24     	; 0x1ede <xTaskCreateStatic+0x6c>
    1ef6:	18 a2       	std	Y+32, r1	; 0x20
    1ef8:	04 30       	cpi	r16, 0x04	; 4
    1efa:	08 f0       	brcs	.+2      	; 0x1efe <xTaskCreateStatic+0x8c>
    1efc:	03 e0       	ldi	r16, 0x03	; 3
    1efe:	0e 8b       	std	Y+22, r16	; 0x16
    1f00:	09 a3       	std	Y+33, r16	; 0x21
    1f02:	4e 01       	movw	r8, r28
    1f04:	b2 e0       	ldi	r27, 0x02	; 2
    1f06:	8b 0e       	add	r8, r27
    1f08:	91 1c       	adc	r9, r1
    1f0a:	c4 01       	movw	r24, r8
    1f0c:	dc d6       	rcall	.+3512   	; 0x2cc6 <vListInitialiseItem>
    1f0e:	ce 01       	movw	r24, r28
    1f10:	0c 96       	adiw	r24, 0x0c	; 12
    1f12:	d9 d6       	rcall	.+3506   	; 0x2cc6 <vListInitialiseItem>
    1f14:	d9 87       	std	Y+9, r29	; 0x09
    1f16:	c8 87       	std	Y+8, r28	; 0x08
    1f18:	84 e0       	ldi	r24, 0x04	; 4
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	80 1b       	sub	r24, r16
    1f1e:	91 09       	sbc	r25, r1
    1f20:	9d 87       	std	Y+13, r25	; 0x0d
    1f22:	8c 87       	std	Y+12, r24	; 0x0c
    1f24:	db 8b       	std	Y+19, r29	; 0x13
    1f26:	ca 8b       	std	Y+18, r28	; 0x12
    1f28:	a5 01       	movw	r20, r10
    1f2a:	b6 01       	movw	r22, r12
    1f2c:	c7 01       	movw	r24, r14
    1f2e:	2b d7       	rcall	.+3670   	; 0x2d86 <pxPortInitialiseStack>
    1f30:	99 83       	std	Y+1, r25	; 0x01
    1f32:	88 83       	st	Y, r24
    1f34:	0f b6       	in	r0, 0x3f	; 63
    1f36:	f8 94       	cli
    1f38:	0f 92       	push	r0
    1f3a:	80 91 f9 03 	lds	r24, 0x03F9	; 0x8003f9 <uxCurrentNumberOfTasks>
    1f3e:	8f 5f       	subi	r24, 0xFF	; 255
    1f40:	80 93 f9 03 	sts	0x03F9, r24	; 0x8003f9 <uxCurrentNumberOfTasks>
    1f44:	80 91 50 04 	lds	r24, 0x0450	; 0x800450 <pxCurrentTCB>
    1f48:	90 91 51 04 	lds	r25, 0x0451	; 0x800451 <pxCurrentTCB+0x1>
    1f4c:	89 2b       	or	r24, r25
    1f4e:	89 f5       	brne	.+98     	; 0x1fb2 <xTaskCreateStatic+0x140>
    1f50:	d0 93 51 04 	sts	0x0451, r29	; 0x800451 <pxCurrentTCB+0x1>
    1f54:	c0 93 50 04 	sts	0x0450, r28	; 0x800450 <pxCurrentTCB>
    1f58:	80 91 f9 03 	lds	r24, 0x03F9	; 0x8003f9 <uxCurrentNumberOfTasks>
    1f5c:	81 30       	cpi	r24, 0x01	; 1
    1f5e:	09 f0       	breq	.+2      	; 0x1f62 <xTaskCreateStatic+0xf0>
    1f60:	38 c0       	rjmp	.+112    	; 0x1fd2 <xTaskCreateStatic+0x160>
    1f62:	8c e2       	ldi	r24, 0x2C	; 44
    1f64:	94 e0       	ldi	r25, 0x04	; 4
    1f66:	a1 d6       	rcall	.+3394   	; 0x2caa <vListInitialise>
    1f68:	85 e3       	ldi	r24, 0x35	; 53
    1f6a:	94 e0       	ldi	r25, 0x04	; 4
    1f6c:	9e d6       	rcall	.+3388   	; 0x2caa <vListInitialise>
    1f6e:	8e e3       	ldi	r24, 0x3E	; 62
    1f70:	94 e0       	ldi	r25, 0x04	; 4
    1f72:	9b d6       	rcall	.+3382   	; 0x2caa <vListInitialise>
    1f74:	87 e4       	ldi	r24, 0x47	; 71
    1f76:	94 e0       	ldi	r25, 0x04	; 4
    1f78:	98 d6       	rcall	.+3376   	; 0x2caa <vListInitialise>
    1f7a:	83 e2       	ldi	r24, 0x23	; 35
    1f7c:	94 e0       	ldi	r25, 0x04	; 4
    1f7e:	95 d6       	rcall	.+3370   	; 0x2caa <vListInitialise>
    1f80:	8a e1       	ldi	r24, 0x1A	; 26
    1f82:	94 e0       	ldi	r25, 0x04	; 4
    1f84:	92 d6       	rcall	.+3364   	; 0x2caa <vListInitialise>
    1f86:	8d e0       	ldi	r24, 0x0D	; 13
    1f88:	94 e0       	ldi	r25, 0x04	; 4
    1f8a:	8f d6       	rcall	.+3358   	; 0x2caa <vListInitialise>
    1f8c:	84 e0       	ldi	r24, 0x04	; 4
    1f8e:	94 e0       	ldi	r25, 0x04	; 4
    1f90:	8c d6       	rcall	.+3352   	; 0x2caa <vListInitialise>
    1f92:	8a ef       	ldi	r24, 0xFA	; 250
    1f94:	93 e0       	ldi	r25, 0x03	; 3
    1f96:	89 d6       	rcall	.+3346   	; 0x2caa <vListInitialise>
    1f98:	83 e2       	ldi	r24, 0x23	; 35
    1f9a:	94 e0       	ldi	r25, 0x04	; 4
    1f9c:	90 93 19 04 	sts	0x0419, r25	; 0x800419 <pxDelayedTaskList+0x1>
    1fa0:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <pxDelayedTaskList>
    1fa4:	8a e1       	ldi	r24, 0x1A	; 26
    1fa6:	94 e0       	ldi	r25, 0x04	; 4
    1fa8:	90 93 17 04 	sts	0x0417, r25	; 0x800417 <pxOverflowDelayedTaskList+0x1>
    1fac:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <pxOverflowDelayedTaskList>
    1fb0:	10 c0       	rjmp	.+32     	; 0x1fd2 <xTaskCreateStatic+0x160>
    1fb2:	80 91 f5 03 	lds	r24, 0x03F5	; 0x8003f5 <xSchedulerRunning>
    1fb6:	81 11       	cpse	r24, r1
    1fb8:	0c c0       	rjmp	.+24     	; 0x1fd2 <xTaskCreateStatic+0x160>
    1fba:	e0 91 50 04 	lds	r30, 0x0450	; 0x800450 <pxCurrentTCB>
    1fbe:	f0 91 51 04 	lds	r31, 0x0451	; 0x800451 <pxCurrentTCB+0x1>
    1fc2:	96 89       	ldd	r25, Z+22	; 0x16
    1fc4:	8e 89       	ldd	r24, Y+22	; 0x16
    1fc6:	89 17       	cp	r24, r25
    1fc8:	20 f0       	brcs	.+8      	; 0x1fd2 <xTaskCreateStatic+0x160>
    1fca:	d0 93 51 04 	sts	0x0451, r29	; 0x800451 <pxCurrentTCB+0x1>
    1fce:	c0 93 50 04 	sts	0x0450, r28	; 0x800450 <pxCurrentTCB>
    1fd2:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <uxTaskNumber>
    1fd6:	8f 5f       	subi	r24, 0xFF	; 255
    1fd8:	80 93 f0 03 	sts	0x03F0, r24	; 0x8003f0 <uxTaskNumber>
    1fdc:	ee 89       	ldd	r30, Y+22	; 0x16
    1fde:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <uxTopReadyPriority>
    1fe2:	8e 17       	cp	r24, r30
    1fe4:	10 f4       	brcc	.+4      	; 0x1fea <xTaskCreateStatic+0x178>
    1fe6:	e0 93 f6 03 	sts	0x03F6, r30	; 0x8003f6 <uxTopReadyPriority>
    1fea:	89 e0       	ldi	r24, 0x09	; 9
    1fec:	8e 9f       	mul	r24, r30
    1fee:	f0 01       	movw	r30, r0
    1ff0:	11 24       	eor	r1, r1
    1ff2:	e4 5d       	subi	r30, 0xD4	; 212
    1ff4:	fb 4f       	sbci	r31, 0xFB	; 251
    1ff6:	01 80       	ldd	r0, Z+1	; 0x01
    1ff8:	f2 81       	ldd	r31, Z+2	; 0x02
    1ffa:	e0 2d       	mov	r30, r0
    1ffc:	fd 83       	std	Y+5, r31	; 0x05
    1ffe:	ec 83       	std	Y+4, r30	; 0x04
    2000:	24 81       	ldd	r18, Z+4	; 0x04
    2002:	35 81       	ldd	r19, Z+5	; 0x05
    2004:	3f 83       	std	Y+7, r19	; 0x07
    2006:	2e 83       	std	Y+6, r18	; 0x06
    2008:	a4 81       	ldd	r26, Z+4	; 0x04
    200a:	b5 81       	ldd	r27, Z+5	; 0x05
    200c:	13 96       	adiw	r26, 0x03	; 3
    200e:	9c 92       	st	X, r9
    2010:	8e 92       	st	-X, r8
    2012:	12 97       	sbiw	r26, 0x02	; 2
    2014:	95 82       	std	Z+5, r9	; 0x05
    2016:	84 82       	std	Z+4, r8	; 0x04
    2018:	ee 89       	ldd	r30, Y+22	; 0x16
    201a:	8e 9f       	mul	r24, r30
    201c:	f0 01       	movw	r30, r0
    201e:	11 24       	eor	r1, r1
    2020:	e4 5d       	subi	r30, 0xD4	; 212
    2022:	fb 4f       	sbci	r31, 0xFB	; 251
    2024:	fb 87       	std	Y+11, r31	; 0x0b
    2026:	ea 87       	std	Y+10, r30	; 0x0a
    2028:	80 81       	ld	r24, Z
    202a:	8f 5f       	subi	r24, 0xFF	; 255
    202c:	80 83       	st	Z, r24
    202e:	0f 90       	pop	r0
    2030:	0f be       	out	0x3f, r0	; 63
    2032:	80 91 f5 03 	lds	r24, 0x03F5	; 0x8003f5 <xSchedulerRunning>
    2036:	88 23       	and	r24, r24
    2038:	69 f0       	breq	.+26     	; 0x2054 <__DATA_REGION_LENGTH__+0x54>
    203a:	e0 91 50 04 	lds	r30, 0x0450	; 0x800450 <pxCurrentTCB>
    203e:	f0 91 51 04 	lds	r31, 0x0451	; 0x800451 <pxCurrentTCB+0x1>
    2042:	96 89       	ldd	r25, Z+22	; 0x16
    2044:	8e 89       	ldd	r24, Y+22	; 0x16
    2046:	98 17       	cp	r25, r24
    2048:	28 f4       	brcc	.+10     	; 0x2054 <__DATA_REGION_LENGTH__+0x54>
    204a:	b4 d6       	rcall	.+3432   	; 0x2db4 <vPortYield>
    204c:	03 c0       	rjmp	.+6      	; 0x2054 <__DATA_REGION_LENGTH__+0x54>
    204e:	80 e0       	ldi	r24, 0x00	; 0
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	01 c0       	rjmp	.+2      	; 0x2056 <__DATA_REGION_LENGTH__+0x56>
    2054:	ce 01       	movw	r24, r28
    2056:	df 91       	pop	r29
    2058:	cf 91       	pop	r28
    205a:	0f 91       	pop	r16
    205c:	ff 90       	pop	r15
    205e:	ef 90       	pop	r14
    2060:	df 90       	pop	r13
    2062:	cf 90       	pop	r12
    2064:	bf 90       	pop	r11
    2066:	af 90       	pop	r10
    2068:	9f 90       	pop	r9
    206a:	8f 90       	pop	r8
    206c:	7f 90       	pop	r7
    206e:	6f 90       	pop	r6
    2070:	08 95       	ret

00002072 <vTaskStartScheduler>:
    2072:	cf 92       	push	r12
    2074:	df 92       	push	r13
    2076:	ef 92       	push	r14
    2078:	ff 92       	push	r15
    207a:	0f 93       	push	r16
    207c:	cf 93       	push	r28
    207e:	df 93       	push	r29
    2080:	00 d0       	rcall	.+0      	; 0x2082 <vTaskStartScheduler+0x10>
    2082:	00 d0       	rcall	.+0      	; 0x2084 <vTaskStartScheduler+0x12>
    2084:	cd b7       	in	r28, 0x3d	; 61
    2086:	de b7       	in	r29, 0x3e	; 62
    2088:	1e 82       	std	Y+6, r1	; 0x06
    208a:	1d 82       	std	Y+5, r1	; 0x05
    208c:	1c 82       	std	Y+4, r1	; 0x04
    208e:	1b 82       	std	Y+3, r1	; 0x03
    2090:	ae 01       	movw	r20, r28
    2092:	4f 5f       	subi	r20, 0xFF	; 255
    2094:	5f 4f       	sbci	r21, 0xFF	; 255
    2096:	be 01       	movw	r22, r28
    2098:	6d 5f       	subi	r22, 0xFD	; 253
    209a:	7f 4f       	sbci	r23, 0xFF	; 255
    209c:	ce 01       	movw	r24, r28
    209e:	05 96       	adiw	r24, 0x05	; 5
    20a0:	ad d5       	rcall	.+2906   	; 0x2bfc <vApplicationGetIdleTaskMemory>
    20a2:	cd 80       	ldd	r12, Y+5	; 0x05
    20a4:	de 80       	ldd	r13, Y+6	; 0x06
    20a6:	eb 80       	ldd	r14, Y+3	; 0x03
    20a8:	fc 80       	ldd	r15, Y+4	; 0x04
    20aa:	49 81       	ldd	r20, Y+1	; 0x01
    20ac:	5a 81       	ldd	r21, Y+2	; 0x02
    20ae:	00 e0       	ldi	r16, 0x00	; 0
    20b0:	20 e0       	ldi	r18, 0x00	; 0
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	63 e6       	ldi	r22, 0x63	; 99
    20b6:	72 e0       	ldi	r23, 0x02	; 2
    20b8:	89 e4       	ldi	r24, 0x49	; 73
    20ba:	91 e0       	ldi	r25, 0x01	; 1
    20bc:	da de       	rcall	.-588    	; 0x1e72 <xTaskCreateStatic>
    20be:	89 2b       	or	r24, r25
    20c0:	89 f0       	breq	.+34     	; 0x20e4 <vTaskStartScheduler+0x72>
    20c2:	bb d4       	rcall	.+2422   	; 0x2a3a <xTimerCreateTimerTask>
    20c4:	81 30       	cpi	r24, 0x01	; 1
    20c6:	71 f4       	brne	.+28     	; 0x20e4 <vTaskStartScheduler+0x72>
    20c8:	f8 94       	cli
    20ca:	2f ef       	ldi	r18, 0xFF	; 255
    20cc:	3f ef       	ldi	r19, 0xFF	; 255
    20ce:	30 93 ef 03 	sts	0x03EF, r19	; 0x8003ef <xNextTaskUnblockTime+0x1>
    20d2:	20 93 ee 03 	sts	0x03EE, r18	; 0x8003ee <xNextTaskUnblockTime>
    20d6:	80 93 f5 03 	sts	0x03F5, r24	; 0x8003f5 <xSchedulerRunning>
    20da:	10 92 f8 03 	sts	0x03F8, r1	; 0x8003f8 <xTickCount+0x1>
    20de:	10 92 f7 03 	sts	0x03F7, r1	; 0x8003f7 <xTickCount>
    20e2:	37 d7       	rcall	.+3694   	; 0x2f52 <xPortStartScheduler>
    20e4:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <uxTopUsedPriority>
    20e8:	26 96       	adiw	r28, 0x06	; 6
    20ea:	0f b6       	in	r0, 0x3f	; 63
    20ec:	f8 94       	cli
    20ee:	de bf       	out	0x3e, r29	; 62
    20f0:	0f be       	out	0x3f, r0	; 63
    20f2:	cd bf       	out	0x3d, r28	; 61
    20f4:	df 91       	pop	r29
    20f6:	cf 91       	pop	r28
    20f8:	0f 91       	pop	r16
    20fa:	ff 90       	pop	r15
    20fc:	ef 90       	pop	r14
    20fe:	df 90       	pop	r13
    2100:	cf 90       	pop	r12
    2102:	08 95       	ret

00002104 <vTaskSuspendAll>:
    2104:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <uxSchedulerSuspended>
    2108:	8f 5f       	subi	r24, 0xFF	; 255
    210a:	80 93 ed 03 	sts	0x03ED, r24	; 0x8003ed <uxSchedulerSuspended>
    210e:	08 95       	ret

00002110 <xTaskGetTickCount>:
    2110:	0f b6       	in	r0, 0x3f	; 63
    2112:	f8 94       	cli
    2114:	0f 92       	push	r0
    2116:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <xTickCount>
    211a:	90 91 f8 03 	lds	r25, 0x03F8	; 0x8003f8 <xTickCount+0x1>
    211e:	0f 90       	pop	r0
    2120:	0f be       	out	0x3f, r0	; 63
    2122:	08 95       	ret

00002124 <uxTaskGetNumberOfTasks>:
    2124:	80 91 f9 03 	lds	r24, 0x03F9	; 0x8003f9 <uxCurrentNumberOfTasks>
    2128:	08 95       	ret

0000212a <xTaskIncrementTick>:
    212a:	df 92       	push	r13
    212c:	ef 92       	push	r14
    212e:	ff 92       	push	r15
    2130:	0f 93       	push	r16
    2132:	1f 93       	push	r17
    2134:	cf 93       	push	r28
    2136:	df 93       	push	r29
    2138:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <uxSchedulerSuspended>
    213c:	81 11       	cpse	r24, r1
    213e:	e6 c0       	rjmp	.+460    	; 0x230c <__stack+0x10d>
    2140:	00 91 f7 03 	lds	r16, 0x03F7	; 0x8003f7 <xTickCount>
    2144:	10 91 f8 03 	lds	r17, 0x03F8	; 0x8003f8 <xTickCount+0x1>
    2148:	0f 5f       	subi	r16, 0xFF	; 255
    214a:	1f 4f       	sbci	r17, 0xFF	; 255
    214c:	10 93 f8 03 	sts	0x03F8, r17	; 0x8003f8 <xTickCount+0x1>
    2150:	00 93 f7 03 	sts	0x03F7, r16	; 0x8003f7 <xTickCount>
    2154:	01 15       	cp	r16, r1
    2156:	11 05       	cpc	r17, r1
    2158:	b1 f4       	brne	.+44     	; 0x2186 <xTaskIncrementTick+0x5c>
    215a:	80 91 18 04 	lds	r24, 0x0418	; 0x800418 <pxDelayedTaskList>
    215e:	90 91 19 04 	lds	r25, 0x0419	; 0x800419 <pxDelayedTaskList+0x1>
    2162:	20 91 16 04 	lds	r18, 0x0416	; 0x800416 <pxOverflowDelayedTaskList>
    2166:	30 91 17 04 	lds	r19, 0x0417	; 0x800417 <pxOverflowDelayedTaskList+0x1>
    216a:	30 93 19 04 	sts	0x0419, r19	; 0x800419 <pxDelayedTaskList+0x1>
    216e:	20 93 18 04 	sts	0x0418, r18	; 0x800418 <pxDelayedTaskList>
    2172:	90 93 17 04 	sts	0x0417, r25	; 0x800417 <pxOverflowDelayedTaskList+0x1>
    2176:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <pxOverflowDelayedTaskList>
    217a:	80 91 f1 03 	lds	r24, 0x03F1	; 0x8003f1 <xNumOfOverflows>
    217e:	8f 5f       	subi	r24, 0xFF	; 255
    2180:	80 93 f1 03 	sts	0x03F1, r24	; 0x8003f1 <xNumOfOverflows>
    2184:	de dd       	rcall	.-1092   	; 0x1d42 <prvResetNextTaskUnblockTime>
    2186:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <xNextTaskUnblockTime>
    218a:	90 91 ef 03 	lds	r25, 0x03EF	; 0x8003ef <xNextTaskUnblockTime+0x1>
    218e:	d1 2c       	mov	r13, r1
    2190:	08 17       	cp	r16, r24
    2192:	19 07       	cpc	r17, r25
    2194:	08 f4       	brcc	.+2      	; 0x2198 <xTaskIncrementTick+0x6e>
    2196:	9b c0       	rjmp	.+310    	; 0x22ce <__stack+0xcf>
    2198:	49 e0       	ldi	r20, 0x09	; 9
    219a:	e0 91 18 04 	lds	r30, 0x0418	; 0x800418 <pxDelayedTaskList>
    219e:	f0 91 19 04 	lds	r31, 0x0419	; 0x800419 <pxDelayedTaskList+0x1>
    21a2:	80 81       	ld	r24, Z
    21a4:	81 11       	cpse	r24, r1
    21a6:	03 c0       	rjmp	.+6      	; 0x21ae <xTaskIncrementTick+0x84>
    21a8:	8f ef       	ldi	r24, 0xFF	; 255
    21aa:	9f ef       	ldi	r25, 0xFF	; 255
    21ac:	0f c0       	rjmp	.+30     	; 0x21cc <xTaskIncrementTick+0xa2>
    21ae:	e0 91 18 04 	lds	r30, 0x0418	; 0x800418 <pxDelayedTaskList>
    21b2:	f0 91 19 04 	lds	r31, 0x0419	; 0x800419 <pxDelayedTaskList+0x1>
    21b6:	05 80       	ldd	r0, Z+5	; 0x05
    21b8:	f6 81       	ldd	r31, Z+6	; 0x06
    21ba:	e0 2d       	mov	r30, r0
    21bc:	06 80       	ldd	r0, Z+6	; 0x06
    21be:	f7 81       	ldd	r31, Z+7	; 0x07
    21c0:	e0 2d       	mov	r30, r0
    21c2:	82 81       	ldd	r24, Z+2	; 0x02
    21c4:	93 81       	ldd	r25, Z+3	; 0x03
    21c6:	08 17       	cp	r16, r24
    21c8:	19 07       	cpc	r17, r25
    21ca:	28 f4       	brcc	.+10     	; 0x21d6 <xTaskIncrementTick+0xac>
    21cc:	90 93 ef 03 	sts	0x03EF, r25	; 0x8003ef <xNextTaskUnblockTime+0x1>
    21d0:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <xNextTaskUnblockTime>
    21d4:	7c c0       	rjmp	.+248    	; 0x22ce <__stack+0xcf>
    21d6:	a2 85       	ldd	r26, Z+10	; 0x0a
    21d8:	b3 85       	ldd	r27, Z+11	; 0x0b
    21da:	84 81       	ldd	r24, Z+4	; 0x04
    21dc:	95 81       	ldd	r25, Z+5	; 0x05
    21de:	26 81       	ldd	r18, Z+6	; 0x06
    21e0:	37 81       	ldd	r19, Z+7	; 0x07
    21e2:	ec 01       	movw	r28, r24
    21e4:	3d 83       	std	Y+5, r19	; 0x05
    21e6:	2c 83       	std	Y+4, r18	; 0x04
    21e8:	26 81       	ldd	r18, Z+6	; 0x06
    21ea:	37 81       	ldd	r19, Z+7	; 0x07
    21ec:	e9 01       	movw	r28, r18
    21ee:	9b 83       	std	Y+3, r25	; 0x03
    21f0:	8a 83       	std	Y+2, r24	; 0x02
    21f2:	cf 01       	movw	r24, r30
    21f4:	02 96       	adiw	r24, 0x02	; 2
    21f6:	11 96       	adiw	r26, 0x01	; 1
    21f8:	6d 91       	ld	r22, X+
    21fa:	7c 91       	ld	r23, X
    21fc:	12 97       	sbiw	r26, 0x02	; 2
    21fe:	68 17       	cp	r22, r24
    2200:	79 07       	cpc	r23, r25
    2202:	21 f4       	brne	.+8      	; 0x220c <__stack+0xd>
    2204:	12 96       	adiw	r26, 0x02	; 2
    2206:	3c 93       	st	X, r19
    2208:	2e 93       	st	-X, r18
    220a:	11 97       	sbiw	r26, 0x01	; 1
    220c:	13 86       	std	Z+11, r1	; 0x0b
    220e:	12 86       	std	Z+10, r1	; 0x0a
    2210:	2c 91       	ld	r18, X
    2212:	21 50       	subi	r18, 0x01	; 1
    2214:	2c 93       	st	X, r18
    2216:	a4 89       	ldd	r26, Z+20	; 0x14
    2218:	b5 89       	ldd	r27, Z+21	; 0x15
    221a:	10 97       	sbiw	r26, 0x00	; 0
    221c:	f9 f0       	breq	.+62     	; 0x225c <__stack+0x5d>
    221e:	26 85       	ldd	r18, Z+14	; 0x0e
    2220:	37 85       	ldd	r19, Z+15	; 0x0f
    2222:	60 89       	ldd	r22, Z+16	; 0x10
    2224:	71 89       	ldd	r23, Z+17	; 0x11
    2226:	e9 01       	movw	r28, r18
    2228:	7d 83       	std	Y+5, r23	; 0x05
    222a:	6c 83       	std	Y+4, r22	; 0x04
    222c:	60 89       	ldd	r22, Z+16	; 0x10
    222e:	71 89       	ldd	r23, Z+17	; 0x11
    2230:	eb 01       	movw	r28, r22
    2232:	3b 83       	std	Y+3, r19	; 0x03
    2234:	2a 83       	std	Y+2, r18	; 0x02
    2236:	11 96       	adiw	r26, 0x01	; 1
    2238:	ed 90       	ld	r14, X+
    223a:	fc 90       	ld	r15, X
    223c:	12 97       	sbiw	r26, 0x02	; 2
    223e:	9f 01       	movw	r18, r30
    2240:	24 5f       	subi	r18, 0xF4	; 244
    2242:	3f 4f       	sbci	r19, 0xFF	; 255
    2244:	e2 16       	cp	r14, r18
    2246:	f3 06       	cpc	r15, r19
    2248:	21 f4       	brne	.+8      	; 0x2252 <__stack+0x53>
    224a:	12 96       	adiw	r26, 0x02	; 2
    224c:	7c 93       	st	X, r23
    224e:	6e 93       	st	-X, r22
    2250:	11 97       	sbiw	r26, 0x01	; 1
    2252:	15 8a       	std	Z+21, r1	; 0x15
    2254:	14 8a       	std	Z+20, r1	; 0x14
    2256:	2c 91       	ld	r18, X
    2258:	21 50       	subi	r18, 0x01	; 1
    225a:	2c 93       	st	X, r18
    225c:	a6 89       	ldd	r26, Z+22	; 0x16
    225e:	20 91 f6 03 	lds	r18, 0x03F6	; 0x8003f6 <uxTopReadyPriority>
    2262:	2a 17       	cp	r18, r26
    2264:	10 f4       	brcc	.+4      	; 0x226a <__stack+0x6b>
    2266:	a0 93 f6 03 	sts	0x03F6, r26	; 0x8003f6 <uxTopReadyPriority>
    226a:	4a 9f       	mul	r20, r26
    226c:	d0 01       	movw	r26, r0
    226e:	11 24       	eor	r1, r1
    2270:	a4 5d       	subi	r26, 0xD4	; 212
    2272:	bb 4f       	sbci	r27, 0xFB	; 251
    2274:	11 96       	adiw	r26, 0x01	; 1
    2276:	0d 90       	ld	r0, X+
    2278:	bc 91       	ld	r27, X
    227a:	a0 2d       	mov	r26, r0
    227c:	b5 83       	std	Z+5, r27	; 0x05
    227e:	a4 83       	std	Z+4, r26	; 0x04
    2280:	14 96       	adiw	r26, 0x04	; 4
    2282:	2d 91       	ld	r18, X+
    2284:	3c 91       	ld	r19, X
    2286:	15 97       	sbiw	r26, 0x05	; 5
    2288:	37 83       	std	Z+7, r19	; 0x07
    228a:	26 83       	std	Z+6, r18	; 0x06
    228c:	14 96       	adiw	r26, 0x04	; 4
    228e:	2d 91       	ld	r18, X+
    2290:	3c 91       	ld	r19, X
    2292:	15 97       	sbiw	r26, 0x05	; 5
    2294:	e9 01       	movw	r28, r18
    2296:	9b 83       	std	Y+3, r25	; 0x03
    2298:	8a 83       	std	Y+2, r24	; 0x02
    229a:	15 96       	adiw	r26, 0x05	; 5
    229c:	9c 93       	st	X, r25
    229e:	8e 93       	st	-X, r24
    22a0:	14 97       	sbiw	r26, 0x04	; 4
    22a2:	96 89       	ldd	r25, Z+22	; 0x16
    22a4:	49 9f       	mul	r20, r25
    22a6:	d0 01       	movw	r26, r0
    22a8:	11 24       	eor	r1, r1
    22aa:	a4 5d       	subi	r26, 0xD4	; 212
    22ac:	bb 4f       	sbci	r27, 0xFB	; 251
    22ae:	b3 87       	std	Z+11, r27	; 0x0b
    22b0:	a2 87       	std	Z+10, r26	; 0x0a
    22b2:	8c 91       	ld	r24, X
    22b4:	8f 5f       	subi	r24, 0xFF	; 255
    22b6:	8c 93       	st	X, r24
    22b8:	e0 91 50 04 	lds	r30, 0x0450	; 0x800450 <pxCurrentTCB>
    22bc:	f0 91 51 04 	lds	r31, 0x0451	; 0x800451 <pxCurrentTCB+0x1>
    22c0:	86 89       	ldd	r24, Z+22	; 0x16
    22c2:	89 17       	cp	r24, r25
    22c4:	08 f0       	brcs	.+2      	; 0x22c8 <__stack+0xc9>
    22c6:	69 cf       	rjmp	.-302    	; 0x219a <xTaskIncrementTick+0x70>
    22c8:	dd 24       	eor	r13, r13
    22ca:	d3 94       	inc	r13
    22cc:	66 cf       	rjmp	.-308    	; 0x219a <xTaskIncrementTick+0x70>
    22ce:	e0 91 50 04 	lds	r30, 0x0450	; 0x800450 <pxCurrentTCB>
    22d2:	f0 91 51 04 	lds	r31, 0x0451	; 0x800451 <pxCurrentTCB+0x1>
    22d6:	e6 89       	ldd	r30, Z+22	; 0x16
    22d8:	d9 e0       	ldi	r29, 0x09	; 9
    22da:	ed 9f       	mul	r30, r29
    22dc:	f0 01       	movw	r30, r0
    22de:	11 24       	eor	r1, r1
    22e0:	e4 5d       	subi	r30, 0xD4	; 212
    22e2:	fb 4f       	sbci	r31, 0xFB	; 251
    22e4:	80 81       	ld	r24, Z
    22e6:	82 30       	cpi	r24, 0x02	; 2
    22e8:	10 f0       	brcs	.+4      	; 0x22ee <__stack+0xef>
    22ea:	dd 24       	eor	r13, r13
    22ec:	d3 94       	inc	r13
    22ee:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <xPendedTicks>
    22f2:	90 91 f4 03 	lds	r25, 0x03F4	; 0x8003f4 <xPendedTicks+0x1>
    22f6:	89 2b       	or	r24, r25
    22f8:	11 f4       	brne	.+4      	; 0x22fe <__stack+0xff>
    22fa:	0e 94 bc 02 	call	0x578	; 0x578 <vApplicationTickHook>
    22fe:	80 91 f2 03 	lds	r24, 0x03F2	; 0x8003f2 <xYieldPending>
    2302:	88 23       	and	r24, r24
    2304:	79 f0       	breq	.+30     	; 0x2324 <__stack+0x125>
    2306:	dd 24       	eor	r13, r13
    2308:	d3 94       	inc	r13
    230a:	0c c0       	rjmp	.+24     	; 0x2324 <__stack+0x125>
    230c:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <xPendedTicks>
    2310:	90 91 f4 03 	lds	r25, 0x03F4	; 0x8003f4 <xPendedTicks+0x1>
    2314:	01 96       	adiw	r24, 0x01	; 1
    2316:	90 93 f4 03 	sts	0x03F4, r25	; 0x8003f4 <xPendedTicks+0x1>
    231a:	80 93 f3 03 	sts	0x03F3, r24	; 0x8003f3 <xPendedTicks>
    231e:	0e 94 bc 02 	call	0x578	; 0x578 <vApplicationTickHook>
    2322:	d1 2c       	mov	r13, r1
    2324:	8d 2d       	mov	r24, r13
    2326:	df 91       	pop	r29
    2328:	cf 91       	pop	r28
    232a:	1f 91       	pop	r17
    232c:	0f 91       	pop	r16
    232e:	ff 90       	pop	r15
    2330:	ef 90       	pop	r14
    2332:	df 90       	pop	r13
    2334:	08 95       	ret

00002336 <xTaskResumeAll>:
    2336:	ef 92       	push	r14
    2338:	ff 92       	push	r15
    233a:	0f 93       	push	r16
    233c:	1f 93       	push	r17
    233e:	cf 93       	push	r28
    2340:	df 93       	push	r29
    2342:	0f b6       	in	r0, 0x3f	; 63
    2344:	f8 94       	cli
    2346:	0f 92       	push	r0
    2348:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <uxSchedulerSuspended>
    234c:	81 50       	subi	r24, 0x01	; 1
    234e:	80 93 ed 03 	sts	0x03ED, r24	; 0x8003ed <uxSchedulerSuspended>
    2352:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <uxSchedulerSuspended>
    2356:	88 23       	and	r24, r24
    2358:	11 f0       	breq	.+4      	; 0x235e <xTaskResumeAll+0x28>
    235a:	80 e0       	ldi	r24, 0x00	; 0
    235c:	ac c0       	rjmp	.+344    	; 0x24b6 <xTaskResumeAll+0x180>
    235e:	80 91 f9 03 	lds	r24, 0x03F9	; 0x8003f9 <uxCurrentNumberOfTasks>
    2362:	88 23       	and	r24, r24
    2364:	d1 f3       	breq	.-12     	; 0x235a <xTaskResumeAll+0x24>
    2366:	e0 90 12 04 	lds	r14, 0x0412	; 0x800412 <xPendingReadyList+0x5>
    236a:	f0 90 13 04 	lds	r15, 0x0413	; 0x800413 <xPendingReadyList+0x6>
    236e:	e0 e0       	ldi	r30, 0x00	; 0
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	39 e0       	ldi	r19, 0x09	; 9
    2374:	41 e0       	ldi	r20, 0x01	; 1
    2376:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <xPendingReadyList>
    237a:	88 23       	and	r24, r24
    237c:	09 f4       	brne	.+2      	; 0x2380 <xTaskResumeAll+0x4a>
    237e:	80 c0       	rjmp	.+256    	; 0x2480 <xTaskResumeAll+0x14a>
    2380:	d7 01       	movw	r26, r14
    2382:	16 96       	adiw	r26, 0x06	; 6
    2384:	ed 91       	ld	r30, X+
    2386:	fc 91       	ld	r31, X
    2388:	17 97       	sbiw	r26, 0x07	; 7
    238a:	a4 89       	ldd	r26, Z+20	; 0x14
    238c:	b5 89       	ldd	r27, Z+21	; 0x15
    238e:	66 85       	ldd	r22, Z+14	; 0x0e
    2390:	77 85       	ldd	r23, Z+15	; 0x0f
    2392:	80 89       	ldd	r24, Z+16	; 0x10
    2394:	91 89       	ldd	r25, Z+17	; 0x11
    2396:	eb 01       	movw	r28, r22
    2398:	9d 83       	std	Y+5, r25	; 0x05
    239a:	8c 83       	std	Y+4, r24	; 0x04
    239c:	80 89       	ldd	r24, Z+16	; 0x10
    239e:	91 89       	ldd	r25, Z+17	; 0x11
    23a0:	ec 01       	movw	r28, r24
    23a2:	7b 83       	std	Y+3, r23	; 0x03
    23a4:	6a 83       	std	Y+2, r22	; 0x02
    23a6:	bf 01       	movw	r22, r30
    23a8:	64 5f       	subi	r22, 0xF4	; 244
    23aa:	7f 4f       	sbci	r23, 0xFF	; 255
    23ac:	11 96       	adiw	r26, 0x01	; 1
    23ae:	0d 91       	ld	r16, X+
    23b0:	1c 91       	ld	r17, X
    23b2:	12 97       	sbiw	r26, 0x02	; 2
    23b4:	06 17       	cp	r16, r22
    23b6:	17 07       	cpc	r17, r23
    23b8:	21 f4       	brne	.+8      	; 0x23c2 <xTaskResumeAll+0x8c>
    23ba:	12 96       	adiw	r26, 0x02	; 2
    23bc:	9c 93       	st	X, r25
    23be:	8e 93       	st	-X, r24
    23c0:	11 97       	sbiw	r26, 0x01	; 1
    23c2:	15 8a       	std	Z+21, r1	; 0x15
    23c4:	14 8a       	std	Z+20, r1	; 0x14
    23c6:	8c 91       	ld	r24, X
    23c8:	81 50       	subi	r24, 0x01	; 1
    23ca:	8c 93       	st	X, r24
    23cc:	a2 85       	ldd	r26, Z+10	; 0x0a
    23ce:	b3 85       	ldd	r27, Z+11	; 0x0b
    23d0:	84 81       	ldd	r24, Z+4	; 0x04
    23d2:	95 81       	ldd	r25, Z+5	; 0x05
    23d4:	66 81       	ldd	r22, Z+6	; 0x06
    23d6:	77 81       	ldd	r23, Z+7	; 0x07
    23d8:	ec 01       	movw	r28, r24
    23da:	7d 83       	std	Y+5, r23	; 0x05
    23dc:	6c 83       	std	Y+4, r22	; 0x04
    23de:	66 81       	ldd	r22, Z+6	; 0x06
    23e0:	77 81       	ldd	r23, Z+7	; 0x07
    23e2:	eb 01       	movw	r28, r22
    23e4:	9b 83       	std	Y+3, r25	; 0x03
    23e6:	8a 83       	std	Y+2, r24	; 0x02
    23e8:	cf 01       	movw	r24, r30
    23ea:	02 96       	adiw	r24, 0x02	; 2
    23ec:	11 96       	adiw	r26, 0x01	; 1
    23ee:	0d 91       	ld	r16, X+
    23f0:	1c 91       	ld	r17, X
    23f2:	12 97       	sbiw	r26, 0x02	; 2
    23f4:	08 17       	cp	r16, r24
    23f6:	19 07       	cpc	r17, r25
    23f8:	21 f4       	brne	.+8      	; 0x2402 <xTaskResumeAll+0xcc>
    23fa:	12 96       	adiw	r26, 0x02	; 2
    23fc:	7c 93       	st	X, r23
    23fe:	6e 93       	st	-X, r22
    2400:	11 97       	sbiw	r26, 0x01	; 1
    2402:	13 86       	std	Z+11, r1	; 0x0b
    2404:	12 86       	std	Z+10, r1	; 0x0a
    2406:	2c 91       	ld	r18, X
    2408:	21 50       	subi	r18, 0x01	; 1
    240a:	2c 93       	st	X, r18
    240c:	a6 89       	ldd	r26, Z+22	; 0x16
    240e:	20 91 f6 03 	lds	r18, 0x03F6	; 0x8003f6 <uxTopReadyPriority>
    2412:	2a 17       	cp	r18, r26
    2414:	10 f4       	brcc	.+4      	; 0x241a <xTaskResumeAll+0xe4>
    2416:	a0 93 f6 03 	sts	0x03F6, r26	; 0x8003f6 <uxTopReadyPriority>
    241a:	3a 9f       	mul	r19, r26
    241c:	d0 01       	movw	r26, r0
    241e:	11 24       	eor	r1, r1
    2420:	a4 5d       	subi	r26, 0xD4	; 212
    2422:	bb 4f       	sbci	r27, 0xFB	; 251
    2424:	11 96       	adiw	r26, 0x01	; 1
    2426:	0d 90       	ld	r0, X+
    2428:	bc 91       	ld	r27, X
    242a:	a0 2d       	mov	r26, r0
    242c:	b5 83       	std	Z+5, r27	; 0x05
    242e:	a4 83       	std	Z+4, r26	; 0x04
    2430:	14 96       	adiw	r26, 0x04	; 4
    2432:	6d 91       	ld	r22, X+
    2434:	7c 91       	ld	r23, X
    2436:	15 97       	sbiw	r26, 0x05	; 5
    2438:	77 83       	std	Z+7, r23	; 0x07
    243a:	66 83       	std	Z+6, r22	; 0x06
    243c:	14 96       	adiw	r26, 0x04	; 4
    243e:	6d 91       	ld	r22, X+
    2440:	7c 91       	ld	r23, X
    2442:	15 97       	sbiw	r26, 0x05	; 5
    2444:	eb 01       	movw	r28, r22
    2446:	9b 83       	std	Y+3, r25	; 0x03
    2448:	8a 83       	std	Y+2, r24	; 0x02
    244a:	15 96       	adiw	r26, 0x05	; 5
    244c:	9c 93       	st	X, r25
    244e:	8e 93       	st	-X, r24
    2450:	14 97       	sbiw	r26, 0x04	; 4
    2452:	96 89       	ldd	r25, Z+22	; 0x16
    2454:	39 9f       	mul	r19, r25
    2456:	d0 01       	movw	r26, r0
    2458:	11 24       	eor	r1, r1
    245a:	a4 5d       	subi	r26, 0xD4	; 212
    245c:	bb 4f       	sbci	r27, 0xFB	; 251
    245e:	b3 87       	std	Z+11, r27	; 0x0b
    2460:	a2 87       	std	Z+10, r26	; 0x0a
    2462:	8c 91       	ld	r24, X
    2464:	8f 5f       	subi	r24, 0xFF	; 255
    2466:	8c 93       	st	X, r24
    2468:	a0 91 50 04 	lds	r26, 0x0450	; 0x800450 <pxCurrentTCB>
    246c:	b0 91 51 04 	lds	r27, 0x0451	; 0x800451 <pxCurrentTCB+0x1>
    2470:	56 96       	adiw	r26, 0x16	; 22
    2472:	8c 91       	ld	r24, X
    2474:	89 17       	cp	r24, r25
    2476:	08 f0       	brcs	.+2      	; 0x247a <xTaskResumeAll+0x144>
    2478:	7e cf       	rjmp	.-260    	; 0x2376 <xTaskResumeAll+0x40>
    247a:	40 93 f2 03 	sts	0x03F2, r20	; 0x8003f2 <xYieldPending>
    247e:	7b cf       	rjmp	.-266    	; 0x2376 <xTaskResumeAll+0x40>
    2480:	ef 2b       	or	r30, r31
    2482:	09 f0       	breq	.+2      	; 0x2486 <xTaskResumeAll+0x150>
    2484:	5e dc       	rcall	.-1860   	; 0x1d42 <prvResetNextTaskUnblockTime>
    2486:	c0 91 f3 03 	lds	r28, 0x03F3	; 0x8003f3 <xPendedTicks>
    248a:	d0 91 f4 03 	lds	r29, 0x03F4	; 0x8003f4 <xPendedTicks+0x1>
    248e:	20 97       	sbiw	r28, 0x00	; 0
    2490:	59 f0       	breq	.+22     	; 0x24a8 <xTaskResumeAll+0x172>
    2492:	11 e0       	ldi	r17, 0x01	; 1
    2494:	4a de       	rcall	.-876    	; 0x212a <xTaskIncrementTick>
    2496:	81 11       	cpse	r24, r1
    2498:	10 93 f2 03 	sts	0x03F2, r17	; 0x8003f2 <xYieldPending>
    249c:	21 97       	sbiw	r28, 0x01	; 1
    249e:	d1 f7       	brne	.-12     	; 0x2494 <xTaskResumeAll+0x15e>
    24a0:	10 92 f4 03 	sts	0x03F4, r1	; 0x8003f4 <xPendedTicks+0x1>
    24a4:	10 92 f3 03 	sts	0x03F3, r1	; 0x8003f3 <xPendedTicks>
    24a8:	80 91 f2 03 	lds	r24, 0x03F2	; 0x8003f2 <xYieldPending>
    24ac:	88 23       	and	r24, r24
    24ae:	09 f4       	brne	.+2      	; 0x24b2 <xTaskResumeAll+0x17c>
    24b0:	54 cf       	rjmp	.-344    	; 0x235a <xTaskResumeAll+0x24>
    24b2:	80 d4       	rcall	.+2304   	; 0x2db4 <vPortYield>
    24b4:	81 e0       	ldi	r24, 0x01	; 1
    24b6:	0f 90       	pop	r0
    24b8:	0f be       	out	0x3f, r0	; 63
    24ba:	df 91       	pop	r29
    24bc:	cf 91       	pop	r28
    24be:	1f 91       	pop	r17
    24c0:	0f 91       	pop	r16
    24c2:	ff 90       	pop	r15
    24c4:	ef 90       	pop	r14
    24c6:	08 95       	ret

000024c8 <vTaskSwitchContext>:
    24c8:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <uxSchedulerSuspended>
    24cc:	88 23       	and	r24, r24
    24ce:	21 f0       	breq	.+8      	; 0x24d8 <vTaskSwitchContext+0x10>
    24d0:	81 e0       	ldi	r24, 0x01	; 1
    24d2:	80 93 f2 03 	sts	0x03F2, r24	; 0x8003f2 <xYieldPending>
    24d6:	08 95       	ret
    24d8:	10 92 f2 03 	sts	0x03F2, r1	; 0x8003f2 <xYieldPending>
    24dc:	a0 91 50 04 	lds	r26, 0x0450	; 0x800450 <pxCurrentTCB>
    24e0:	b0 91 51 04 	lds	r27, 0x0451	; 0x800451 <pxCurrentTCB+0x1>
    24e4:	e0 91 50 04 	lds	r30, 0x0450	; 0x800450 <pxCurrentTCB>
    24e8:	f0 91 51 04 	lds	r31, 0x0451	; 0x800451 <pxCurrentTCB+0x1>
    24ec:	2d 91       	ld	r18, X+
    24ee:	3c 91       	ld	r19, X
    24f0:	87 89       	ldd	r24, Z+23	; 0x17
    24f2:	90 8d       	ldd	r25, Z+24	; 0x18
    24f4:	82 17       	cp	r24, r18
    24f6:	93 07       	cpc	r25, r19
    24f8:	58 f0       	brcs	.+22     	; 0x2510 <vTaskSwitchContext+0x48>
    24fa:	60 91 50 04 	lds	r22, 0x0450	; 0x800450 <pxCurrentTCB>
    24fe:	70 91 51 04 	lds	r23, 0x0451	; 0x800451 <pxCurrentTCB+0x1>
    2502:	80 91 50 04 	lds	r24, 0x0450	; 0x800450 <pxCurrentTCB>
    2506:	90 91 51 04 	lds	r25, 0x0451	; 0x800451 <pxCurrentTCB+0x1>
    250a:	67 5e       	subi	r22, 0xE7	; 231
    250c:	7f 4f       	sbci	r23, 0xFF	; 255
    250e:	6a d3       	rcall	.+1748   	; 0x2be4 <vApplicationStackOverflowHook>
    2510:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <uxTopReadyPriority>
    2514:	69 e0       	ldi	r22, 0x09	; 9
    2516:	48 2f       	mov	r20, r24
    2518:	50 e0       	ldi	r21, 0x00	; 0
    251a:	64 9f       	mul	r22, r20
    251c:	90 01       	movw	r18, r0
    251e:	65 9f       	mul	r22, r21
    2520:	30 0d       	add	r19, r0
    2522:	11 24       	eor	r1, r1
    2524:	f9 01       	movw	r30, r18
    2526:	e4 5d       	subi	r30, 0xD4	; 212
    2528:	fb 4f       	sbci	r31, 0xFB	; 251
    252a:	90 81       	ld	r25, Z
    252c:	91 11       	cpse	r25, r1
    252e:	02 c0       	rjmp	.+4      	; 0x2534 <vTaskSwitchContext+0x6c>
    2530:	81 50       	subi	r24, 0x01	; 1
    2532:	f1 cf       	rjmp	.-30     	; 0x2516 <vTaskSwitchContext+0x4e>
    2534:	a1 81       	ldd	r26, Z+1	; 0x01
    2536:	b2 81       	ldd	r27, Z+2	; 0x02
    2538:	12 96       	adiw	r26, 0x02	; 2
    253a:	6d 91       	ld	r22, X+
    253c:	7c 91       	ld	r23, X
    253e:	13 97       	sbiw	r26, 0x03	; 3
    2540:	72 83       	std	Z+2, r23	; 0x02
    2542:	61 83       	std	Z+1, r22	; 0x01
    2544:	21 5d       	subi	r18, 0xD1	; 209
    2546:	3b 4f       	sbci	r19, 0xFB	; 251
    2548:	62 17       	cp	r22, r18
    254a:	73 07       	cpc	r23, r19
    254c:	21 f4       	brne	.+8      	; 0x2556 <vTaskSwitchContext+0x8e>
    254e:	25 81       	ldd	r18, Z+5	; 0x05
    2550:	36 81       	ldd	r19, Z+6	; 0x06
    2552:	32 83       	std	Z+2, r19	; 0x02
    2554:	21 83       	std	Z+1, r18	; 0x01
    2556:	99 e0       	ldi	r25, 0x09	; 9
    2558:	94 9f       	mul	r25, r20
    255a:	f0 01       	movw	r30, r0
    255c:	95 9f       	mul	r25, r21
    255e:	f0 0d       	add	r31, r0
    2560:	11 24       	eor	r1, r1
    2562:	e4 5d       	subi	r30, 0xD4	; 212
    2564:	fb 4f       	sbci	r31, 0xFB	; 251
    2566:	01 80       	ldd	r0, Z+1	; 0x01
    2568:	f2 81       	ldd	r31, Z+2	; 0x02
    256a:	e0 2d       	mov	r30, r0
    256c:	26 81       	ldd	r18, Z+6	; 0x06
    256e:	37 81       	ldd	r19, Z+7	; 0x07
    2570:	30 93 51 04 	sts	0x0451, r19	; 0x800451 <pxCurrentTCB+0x1>
    2574:	20 93 50 04 	sts	0x0450, r18	; 0x800450 <pxCurrentTCB>
    2578:	80 93 f6 03 	sts	0x03F6, r24	; 0x8003f6 <uxTopReadyPriority>
    257c:	08 95       	ret

0000257e <vTaskPlaceOnEventList>:
    257e:	cf 93       	push	r28
    2580:	df 93       	push	r29
    2582:	eb 01       	movw	r28, r22
    2584:	60 91 50 04 	lds	r22, 0x0450	; 0x800450 <pxCurrentTCB>
    2588:	70 91 51 04 	lds	r23, 0x0451	; 0x800451 <pxCurrentTCB+0x1>
    258c:	64 5f       	subi	r22, 0xF4	; 244
    258e:	7f 4f       	sbci	r23, 0xFF	; 255
    2590:	9e d3       	rcall	.+1852   	; 0x2cce <vListInsert>
    2592:	61 e0       	ldi	r22, 0x01	; 1
    2594:	ce 01       	movw	r24, r28
    2596:	df 91       	pop	r29
    2598:	cf 91       	pop	r28
    259a:	eb cb       	rjmp	.-2090   	; 0x1d72 <prvAddCurrentTaskToDelayedList>

0000259c <vTaskPlaceOnEventListRestricted>:
    259c:	0f 93       	push	r16
    259e:	1f 93       	push	r17
    25a0:	cf 93       	push	r28
    25a2:	df 93       	push	r29
    25a4:	fc 01       	movw	r30, r24
    25a6:	8b 01       	movw	r16, r22
    25a8:	a1 81       	ldd	r26, Z+1	; 0x01
    25aa:	b2 81       	ldd	r27, Z+2	; 0x02
    25ac:	80 91 50 04 	lds	r24, 0x0450	; 0x800450 <pxCurrentTCB>
    25b0:	90 91 51 04 	lds	r25, 0x0451	; 0x800451 <pxCurrentTCB+0x1>
    25b4:	ec 01       	movw	r28, r24
    25b6:	bf 87       	std	Y+15, r27	; 0x0f
    25b8:	ae 87       	std	Y+14, r26	; 0x0e
    25ba:	80 91 50 04 	lds	r24, 0x0450	; 0x800450 <pxCurrentTCB>
    25be:	90 91 51 04 	lds	r25, 0x0451	; 0x800451 <pxCurrentTCB+0x1>
    25c2:	14 96       	adiw	r26, 0x04	; 4
    25c4:	2d 91       	ld	r18, X+
    25c6:	3c 91       	ld	r19, X
    25c8:	15 97       	sbiw	r26, 0x05	; 5
    25ca:	ec 01       	movw	r28, r24
    25cc:	39 8b       	std	Y+17, r19	; 0x11
    25ce:	28 8b       	std	Y+16, r18	; 0x10
    25d0:	20 91 50 04 	lds	r18, 0x0450	; 0x800450 <pxCurrentTCB>
    25d4:	30 91 51 04 	lds	r19, 0x0451	; 0x800451 <pxCurrentTCB+0x1>
    25d8:	14 96       	adiw	r26, 0x04	; 4
    25da:	8d 91       	ld	r24, X+
    25dc:	9c 91       	ld	r25, X
    25de:	15 97       	sbiw	r26, 0x05	; 5
    25e0:	24 5f       	subi	r18, 0xF4	; 244
    25e2:	3f 4f       	sbci	r19, 0xFF	; 255
    25e4:	ec 01       	movw	r28, r24
    25e6:	3b 83       	std	Y+3, r19	; 0x03
    25e8:	2a 83       	std	Y+2, r18	; 0x02
    25ea:	20 91 50 04 	lds	r18, 0x0450	; 0x800450 <pxCurrentTCB>
    25ee:	30 91 51 04 	lds	r19, 0x0451	; 0x800451 <pxCurrentTCB+0x1>
    25f2:	24 5f       	subi	r18, 0xF4	; 244
    25f4:	3f 4f       	sbci	r19, 0xFF	; 255
    25f6:	15 96       	adiw	r26, 0x05	; 5
    25f8:	3c 93       	st	X, r19
    25fa:	2e 93       	st	-X, r18
    25fc:	14 97       	sbiw	r26, 0x04	; 4
    25fe:	a0 91 50 04 	lds	r26, 0x0450	; 0x800450 <pxCurrentTCB>
    2602:	b0 91 51 04 	lds	r27, 0x0451	; 0x800451 <pxCurrentTCB+0x1>
    2606:	55 96       	adiw	r26, 0x15	; 21
    2608:	fc 93       	st	X, r31
    260a:	ee 93       	st	-X, r30
    260c:	54 97       	sbiw	r26, 0x14	; 20
    260e:	90 81       	ld	r25, Z
    2610:	9f 5f       	subi	r25, 0xFF	; 255
    2612:	90 83       	st	Z, r25
    2614:	44 23       	and	r20, r20
    2616:	11 f0       	breq	.+4      	; 0x261c <vTaskPlaceOnEventListRestricted+0x80>
    2618:	0f ef       	ldi	r16, 0xFF	; 255
    261a:	1f ef       	ldi	r17, 0xFF	; 255
    261c:	64 2f       	mov	r22, r20
    261e:	c8 01       	movw	r24, r16
    2620:	df 91       	pop	r29
    2622:	cf 91       	pop	r28
    2624:	1f 91       	pop	r17
    2626:	0f 91       	pop	r16
    2628:	a4 cb       	rjmp	.-2232   	; 0x1d72 <prvAddCurrentTaskToDelayedList>

0000262a <xTaskRemoveFromEventList>:
    262a:	cf 93       	push	r28
    262c:	df 93       	push	r29
    262e:	dc 01       	movw	r26, r24
    2630:	15 96       	adiw	r26, 0x05	; 5
    2632:	ed 91       	ld	r30, X+
    2634:	fc 91       	ld	r31, X
    2636:	16 97       	sbiw	r26, 0x06	; 6
    2638:	06 80       	ldd	r0, Z+6	; 0x06
    263a:	f7 81       	ldd	r31, Z+7	; 0x07
    263c:	e0 2d       	mov	r30, r0
    263e:	a4 89       	ldd	r26, Z+20	; 0x14
    2640:	b5 89       	ldd	r27, Z+21	; 0x15
    2642:	86 85       	ldd	r24, Z+14	; 0x0e
    2644:	97 85       	ldd	r25, Z+15	; 0x0f
    2646:	20 89       	ldd	r18, Z+16	; 0x10
    2648:	31 89       	ldd	r19, Z+17	; 0x11
    264a:	ec 01       	movw	r28, r24
    264c:	3d 83       	std	Y+5, r19	; 0x05
    264e:	2c 83       	std	Y+4, r18	; 0x04
    2650:	c0 89       	ldd	r28, Z+16	; 0x10
    2652:	d1 89       	ldd	r29, Z+17	; 0x11
    2654:	9b 83       	std	Y+3, r25	; 0x03
    2656:	8a 83       	std	Y+2, r24	; 0x02
    2658:	cf 01       	movw	r24, r30
    265a:	0c 96       	adiw	r24, 0x0c	; 12
    265c:	11 96       	adiw	r26, 0x01	; 1
    265e:	2d 91       	ld	r18, X+
    2660:	3c 91       	ld	r19, X
    2662:	12 97       	sbiw	r26, 0x02	; 2
    2664:	28 17       	cp	r18, r24
    2666:	39 07       	cpc	r19, r25
    2668:	21 f4       	brne	.+8      	; 0x2672 <xTaskRemoveFromEventList+0x48>
    266a:	12 96       	adiw	r26, 0x02	; 2
    266c:	dc 93       	st	X, r29
    266e:	ce 93       	st	-X, r28
    2670:	11 97       	sbiw	r26, 0x01	; 1
    2672:	15 8a       	std	Z+21, r1	; 0x15
    2674:	14 8a       	std	Z+20, r1	; 0x14
    2676:	2c 91       	ld	r18, X
    2678:	21 50       	subi	r18, 0x01	; 1
    267a:	2c 93       	st	X, r18
    267c:	20 91 ed 03 	lds	r18, 0x03ED	; 0x8003ed <uxSchedulerSuspended>
    2680:	21 11       	cpse	r18, r1
    2682:	4f c0       	rjmp	.+158    	; 0x2722 <xTaskRemoveFromEventList+0xf8>
    2684:	a2 85       	ldd	r26, Z+10	; 0x0a
    2686:	b3 85       	ldd	r27, Z+11	; 0x0b
    2688:	84 81       	ldd	r24, Z+4	; 0x04
    268a:	95 81       	ldd	r25, Z+5	; 0x05
    268c:	26 81       	ldd	r18, Z+6	; 0x06
    268e:	37 81       	ldd	r19, Z+7	; 0x07
    2690:	ec 01       	movw	r28, r24
    2692:	3d 83       	std	Y+5, r19	; 0x05
    2694:	2c 83       	std	Y+4, r18	; 0x04
    2696:	c6 81       	ldd	r28, Z+6	; 0x06
    2698:	d7 81       	ldd	r29, Z+7	; 0x07
    269a:	9b 83       	std	Y+3, r25	; 0x03
    269c:	8a 83       	std	Y+2, r24	; 0x02
    269e:	9f 01       	movw	r18, r30
    26a0:	2e 5f       	subi	r18, 0xFE	; 254
    26a2:	3f 4f       	sbci	r19, 0xFF	; 255
    26a4:	11 96       	adiw	r26, 0x01	; 1
    26a6:	8d 91       	ld	r24, X+
    26a8:	9c 91       	ld	r25, X
    26aa:	12 97       	sbiw	r26, 0x02	; 2
    26ac:	82 17       	cp	r24, r18
    26ae:	93 07       	cpc	r25, r19
    26b0:	21 f4       	brne	.+8      	; 0x26ba <xTaskRemoveFromEventList+0x90>
    26b2:	12 96       	adiw	r26, 0x02	; 2
    26b4:	dc 93       	st	X, r29
    26b6:	ce 93       	st	-X, r28
    26b8:	11 97       	sbiw	r26, 0x01	; 1
    26ba:	13 86       	std	Z+11, r1	; 0x0b
    26bc:	12 86       	std	Z+10, r1	; 0x0a
    26be:	8c 91       	ld	r24, X
    26c0:	81 50       	subi	r24, 0x01	; 1
    26c2:	8c 93       	st	X, r24
    26c4:	a6 89       	ldd	r26, Z+22	; 0x16
    26c6:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <uxTopReadyPriority>
    26ca:	8a 17       	cp	r24, r26
    26cc:	10 f4       	brcc	.+4      	; 0x26d2 <xTaskRemoveFromEventList+0xa8>
    26ce:	a0 93 f6 03 	sts	0x03F6, r26	; 0x8003f6 <uxTopReadyPriority>
    26d2:	89 e0       	ldi	r24, 0x09	; 9
    26d4:	8a 9f       	mul	r24, r26
    26d6:	d0 01       	movw	r26, r0
    26d8:	11 24       	eor	r1, r1
    26da:	a4 5d       	subi	r26, 0xD4	; 212
    26dc:	bb 4f       	sbci	r27, 0xFB	; 251
    26de:	11 96       	adiw	r26, 0x01	; 1
    26e0:	0d 90       	ld	r0, X+
    26e2:	bc 91       	ld	r27, X
    26e4:	a0 2d       	mov	r26, r0
    26e6:	b5 83       	std	Z+5, r27	; 0x05
    26e8:	a4 83       	std	Z+4, r26	; 0x04
    26ea:	14 96       	adiw	r26, 0x04	; 4
    26ec:	4d 91       	ld	r20, X+
    26ee:	5c 91       	ld	r21, X
    26f0:	15 97       	sbiw	r26, 0x05	; 5
    26f2:	57 83       	std	Z+7, r21	; 0x07
    26f4:	46 83       	std	Z+6, r20	; 0x06
    26f6:	14 96       	adiw	r26, 0x04	; 4
    26f8:	cd 91       	ld	r28, X+
    26fa:	dc 91       	ld	r29, X
    26fc:	15 97       	sbiw	r26, 0x05	; 5
    26fe:	3b 83       	std	Y+3, r19	; 0x03
    2700:	2a 83       	std	Y+2, r18	; 0x02
    2702:	15 96       	adiw	r26, 0x05	; 5
    2704:	3c 93       	st	X, r19
    2706:	2e 93       	st	-X, r18
    2708:	14 97       	sbiw	r26, 0x04	; 4
    270a:	a6 89       	ldd	r26, Z+22	; 0x16
    270c:	8a 9f       	mul	r24, r26
    270e:	d0 01       	movw	r26, r0
    2710:	11 24       	eor	r1, r1
    2712:	a4 5d       	subi	r26, 0xD4	; 212
    2714:	bb 4f       	sbci	r27, 0xFB	; 251
    2716:	b3 87       	std	Z+11, r27	; 0x0b
    2718:	a2 87       	std	Z+10, r26	; 0x0a
    271a:	8c 91       	ld	r24, X
    271c:	8f 5f       	subi	r24, 0xFF	; 255
    271e:	8c 93       	st	X, r24
    2720:	1f c0       	rjmp	.+62     	; 0x2760 <xTaskRemoveFromEventList+0x136>
    2722:	a0 91 0e 04 	lds	r26, 0x040E	; 0x80040e <xPendingReadyList+0x1>
    2726:	b0 91 0f 04 	lds	r27, 0x040F	; 0x80040f <xPendingReadyList+0x2>
    272a:	b7 87       	std	Z+15, r27	; 0x0f
    272c:	a6 87       	std	Z+14, r26	; 0x0e
    272e:	14 96       	adiw	r26, 0x04	; 4
    2730:	2d 91       	ld	r18, X+
    2732:	3c 91       	ld	r19, X
    2734:	15 97       	sbiw	r26, 0x05	; 5
    2736:	31 8b       	std	Z+17, r19	; 0x11
    2738:	20 8b       	std	Z+16, r18	; 0x10
    273a:	14 96       	adiw	r26, 0x04	; 4
    273c:	cd 91       	ld	r28, X+
    273e:	dc 91       	ld	r29, X
    2740:	15 97       	sbiw	r26, 0x05	; 5
    2742:	9b 83       	std	Y+3, r25	; 0x03
    2744:	8a 83       	std	Y+2, r24	; 0x02
    2746:	15 96       	adiw	r26, 0x05	; 5
    2748:	9c 93       	st	X, r25
    274a:	8e 93       	st	-X, r24
    274c:	14 97       	sbiw	r26, 0x04	; 4
    274e:	8d e0       	ldi	r24, 0x0D	; 13
    2750:	94 e0       	ldi	r25, 0x04	; 4
    2752:	95 8b       	std	Z+21, r25	; 0x15
    2754:	84 8b       	std	Z+20, r24	; 0x14
    2756:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <xPendingReadyList>
    275a:	8f 5f       	subi	r24, 0xFF	; 255
    275c:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <xPendingReadyList>
    2760:	a0 91 50 04 	lds	r26, 0x0450	; 0x800450 <pxCurrentTCB>
    2764:	b0 91 51 04 	lds	r27, 0x0451	; 0x800451 <pxCurrentTCB+0x1>
    2768:	96 89       	ldd	r25, Z+22	; 0x16
    276a:	56 96       	adiw	r26, 0x16	; 22
    276c:	8c 91       	ld	r24, X
    276e:	89 17       	cp	r24, r25
    2770:	20 f4       	brcc	.+8      	; 0x277a <xTaskRemoveFromEventList+0x150>
    2772:	81 e0       	ldi	r24, 0x01	; 1
    2774:	80 93 f2 03 	sts	0x03F2, r24	; 0x8003f2 <xYieldPending>
    2778:	01 c0       	rjmp	.+2      	; 0x277c <xTaskRemoveFromEventList+0x152>
    277a:	80 e0       	ldi	r24, 0x00	; 0
    277c:	df 91       	pop	r29
    277e:	cf 91       	pop	r28
    2780:	08 95       	ret

00002782 <vTaskInternalSetTimeOutState>:
    2782:	20 91 f1 03 	lds	r18, 0x03F1	; 0x8003f1 <xNumOfOverflows>
    2786:	fc 01       	movw	r30, r24
    2788:	20 83       	st	Z, r18
    278a:	20 91 f7 03 	lds	r18, 0x03F7	; 0x8003f7 <xTickCount>
    278e:	30 91 f8 03 	lds	r19, 0x03F8	; 0x8003f8 <xTickCount+0x1>
    2792:	32 83       	std	Z+2, r19	; 0x02
    2794:	21 83       	std	Z+1, r18	; 0x01
    2796:	08 95       	ret

00002798 <xTaskCheckForTimeOut>:
    2798:	cf 93       	push	r28
    279a:	df 93       	push	r29
    279c:	0f b6       	in	r0, 0x3f	; 63
    279e:	f8 94       	cli
    27a0:	0f 92       	push	r0
    27a2:	40 91 f7 03 	lds	r20, 0x03F7	; 0x8003f7 <xTickCount>
    27a6:	50 91 f8 03 	lds	r21, 0x03F8	; 0x8003f8 <xTickCount+0x1>
    27aa:	db 01       	movw	r26, r22
    27ac:	2d 91       	ld	r18, X+
    27ae:	3c 91       	ld	r19, X
    27b0:	2f 3f       	cpi	r18, 0xFF	; 255
    27b2:	bf ef       	ldi	r27, 0xFF	; 255
    27b4:	3b 07       	cpc	r19, r27
    27b6:	d9 f0       	breq	.+54     	; 0x27ee <xTaskCheckForTimeOut+0x56>
    27b8:	ec 01       	movw	r28, r24
    27ba:	e9 81       	ldd	r30, Y+1	; 0x01
    27bc:	fa 81       	ldd	r31, Y+2	; 0x02
    27be:	a0 91 f1 03 	lds	r26, 0x03F1	; 0x8003f1 <xNumOfOverflows>
    27c2:	b8 81       	ld	r27, Y
    27c4:	ba 17       	cp	r27, r26
    27c6:	41 f0       	breq	.+16     	; 0x27d8 <xTaskCheckForTimeOut+0x40>
    27c8:	4e 17       	cp	r20, r30
    27ca:	5f 07       	cpc	r21, r31
    27cc:	28 f0       	brcs	.+10     	; 0x27d8 <xTaskCheckForTimeOut+0x40>
    27ce:	fb 01       	movw	r30, r22
    27d0:	11 82       	std	Z+1, r1	; 0x01
    27d2:	10 82       	st	Z, r1
    27d4:	81 e0       	ldi	r24, 0x01	; 1
    27d6:	0c c0       	rjmp	.+24     	; 0x27f0 <xTaskCheckForTimeOut+0x58>
    27d8:	4e 1b       	sub	r20, r30
    27da:	5f 0b       	sbc	r21, r31
    27dc:	42 17       	cp	r20, r18
    27de:	53 07       	cpc	r21, r19
    27e0:	b0 f7       	brcc	.-20     	; 0x27ce <xTaskCheckForTimeOut+0x36>
    27e2:	fb 01       	movw	r30, r22
    27e4:	24 1b       	sub	r18, r20
    27e6:	35 0b       	sbc	r19, r21
    27e8:	31 83       	std	Z+1, r19	; 0x01
    27ea:	20 83       	st	Z, r18
    27ec:	ca df       	rcall	.-108    	; 0x2782 <vTaskInternalSetTimeOutState>
    27ee:	80 e0       	ldi	r24, 0x00	; 0
    27f0:	0f 90       	pop	r0
    27f2:	0f be       	out	0x3f, r0	; 63
    27f4:	df 91       	pop	r29
    27f6:	cf 91       	pop	r28
    27f8:	08 95       	ret

000027fa <vTaskMissedYield>:
    27fa:	81 e0       	ldi	r24, 0x01	; 1
    27fc:	80 93 f2 03 	sts	0x03F2, r24	; 0x8003f2 <xYieldPending>
    2800:	08 95       	ret

00002802 <xTaskGetSchedulerState>:
    2802:	80 91 f5 03 	lds	r24, 0x03F5	; 0x8003f5 <xSchedulerRunning>
    2806:	88 23       	and	r24, r24
    2808:	31 f0       	breq	.+12     	; 0x2816 <xTaskGetSchedulerState+0x14>
    280a:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <uxSchedulerSuspended>
    280e:	88 23       	and	r24, r24
    2810:	21 f0       	breq	.+8      	; 0x281a <xTaskGetSchedulerState+0x18>
    2812:	80 e0       	ldi	r24, 0x00	; 0
    2814:	08 95       	ret
    2816:	81 e0       	ldi	r24, 0x01	; 1
    2818:	08 95       	ret
    281a:	82 e0       	ldi	r24, 0x02	; 2
    281c:	08 95       	ret

0000281e <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    281e:	0f 93       	push	r16
    2820:	1f 93       	push	r17
    2822:	cf 93       	push	r28
    2824:	df 93       	push	r29
    2826:	ec 01       	movw	r28, r24
        TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
        BaseType_t xReturn = pdFALSE;

        if( pxMutexHolder != NULL )
    2828:	89 2b       	or	r24, r25
    282a:	11 f4       	brne	.+4      	; 0x2830 <xTaskPriorityDisinherit+0x12>
#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
        TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
        BaseType_t xReturn = pdFALSE;
    282c:	80 e0       	ldi	r24, 0x00	; 0
    282e:	43 c0       	rjmp	.+134    	; 0x28b6 <xTaskPriorityDisinherit+0x98>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
    2830:	8a a1       	ldd	r24, Y+34	; 0x22
    2832:	81 50       	subi	r24, 0x01	; 1
    2834:	8a a3       	std	Y+34, r24	; 0x22

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    2836:	2e 89       	ldd	r18, Y+22	; 0x16
    2838:	99 a1       	ldd	r25, Y+33	; 0x21
    283a:	29 17       	cp	r18, r25
    283c:	b9 f3       	breq	.-18     	; 0x282c <xTaskPriorityDisinherit+0xe>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    283e:	81 11       	cpse	r24, r1
    2840:	f5 cf       	rjmp	.-22     	; 0x282c <xTaskPriorityDisinherit+0xe>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2842:	8e 01       	movw	r16, r28
    2844:	0e 5f       	subi	r16, 0xFE	; 254
    2846:	1f 4f       	sbci	r17, 0xFF	; 255
    2848:	c8 01       	movw	r24, r16
    284a:	79 d2       	rcall	.+1266   	; 0x2d3e <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
    284c:	89 a1       	ldd	r24, Y+33	; 0x21
    284e:	8e 8b       	std	Y+22, r24	; 0x16

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2850:	48 2f       	mov	r20, r24
    2852:	50 e0       	ldi	r21, 0x00	; 0
    2854:	24 e0       	ldi	r18, 0x04	; 4
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	24 1b       	sub	r18, r20
    285a:	35 0b       	sbc	r19, r21
    285c:	3d 87       	std	Y+13, r19	; 0x0d
    285e:	2c 87       	std	Y+12, r18	; 0x0c
                    prvAddTaskToReadyList( pxTCB );
    2860:	90 91 f6 03 	lds	r25, 0x03F6	; 0x8003f6 <uxTopReadyPriority>
    2864:	98 17       	cp	r25, r24
    2866:	10 f4       	brcc	.+4      	; 0x286c <xTaskPriorityDisinherit+0x4e>
    2868:	80 93 f6 03 	sts	0x03F6, r24	; 0x8003f6 <uxTopReadyPriority>
    286c:	89 e0       	ldi	r24, 0x09	; 9
    286e:	84 9f       	mul	r24, r20
    2870:	f0 01       	movw	r30, r0
    2872:	85 9f       	mul	r24, r21
    2874:	f0 0d       	add	r31, r0
    2876:	11 24       	eor	r1, r1
    2878:	e4 5d       	subi	r30, 0xD4	; 212
    287a:	fb 4f       	sbci	r31, 0xFB	; 251
    287c:	01 80       	ldd	r0, Z+1	; 0x01
    287e:	f2 81       	ldd	r31, Z+2	; 0x02
    2880:	e0 2d       	mov	r30, r0
    2882:	fd 83       	std	Y+5, r31	; 0x05
    2884:	ec 83       	std	Y+4, r30	; 0x04
    2886:	24 81       	ldd	r18, Z+4	; 0x04
    2888:	35 81       	ldd	r19, Z+5	; 0x05
    288a:	3f 83       	std	Y+7, r19	; 0x07
    288c:	2e 83       	std	Y+6, r18	; 0x06
    288e:	a4 81       	ldd	r26, Z+4	; 0x04
    2890:	b5 81       	ldd	r27, Z+5	; 0x05
    2892:	13 96       	adiw	r26, 0x03	; 3
    2894:	1c 93       	st	X, r17
    2896:	0e 93       	st	-X, r16
    2898:	12 97       	sbiw	r26, 0x02	; 2
    289a:	15 83       	std	Z+5, r17	; 0x05
    289c:	04 83       	std	Z+4, r16	; 0x04
    289e:	ee 89       	ldd	r30, Y+22	; 0x16
    28a0:	8e 9f       	mul	r24, r30
    28a2:	f0 01       	movw	r30, r0
    28a4:	11 24       	eor	r1, r1
    28a6:	e4 5d       	subi	r30, 0xD4	; 212
    28a8:	fb 4f       	sbci	r31, 0xFB	; 251
    28aa:	fb 87       	std	Y+11, r31	; 0x0b
    28ac:	ea 87       	std	Y+10, r30	; 0x0a
    28ae:	80 81       	ld	r24, Z
    28b0:	8f 5f       	subi	r24, 0xFF	; 255
    28b2:	80 83       	st	Z, r24
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
    28b4:	81 e0       	ldi	r24, 0x01	; 1
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    28b6:	df 91       	pop	r29
    28b8:	cf 91       	pop	r28
    28ba:	1f 91       	pop	r17
    28bc:	0f 91       	pop	r16
    28be:	08 95       	ret

000028c0 <prvCheckForValidListAndQueue>:
        pxOverflowTimerList = pxTemp;
    }
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
    28c0:	0f 93       	push	r16
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
    28c2:	0f b6       	in	r0, 0x3f	; 63
    28c4:	f8 94       	cli
    28c6:	0f 92       	push	r0
        {
            if( xTimerQueue == NULL )
    28c8:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <xTimerQueue>
    28cc:	90 91 a8 04 	lds	r25, 0x04A8	; 0x8004a8 <xTimerQueue+0x1>
    28d0:	89 2b       	or	r24, r25
    28d2:	f1 f4       	brne	.+60     	; 0x2910 <prvCheckForValidListAndQueue+0x50>
            {
                vListInitialise( &xActiveTimerList1 );
    28d4:	86 eb       	ldi	r24, 0xB6	; 182
    28d6:	94 e0       	ldi	r25, 0x04	; 4
    28d8:	e8 d1       	rcall	.+976    	; 0x2caa <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
    28da:	8d ea       	ldi	r24, 0xAD	; 173
    28dc:	94 e0       	ldi	r25, 0x04	; 4
    28de:	e5 d1       	rcall	.+970    	; 0x2caa <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
    28e0:	86 eb       	ldi	r24, 0xB6	; 182
    28e2:	94 e0       	ldi	r25, 0x04	; 4
    28e4:	90 93 ac 04 	sts	0x04AC, r25	; 0x8004ac <pxCurrentTimerList+0x1>
    28e8:	80 93 ab 04 	sts	0x04AB, r24	; 0x8004ab <pxCurrentTimerList>
                pxOverflowTimerList = &xActiveTimerList2;
    28ec:	8d ea       	ldi	r24, 0xAD	; 173
    28ee:	94 e0       	ldi	r25, 0x04	; 4
    28f0:	90 93 aa 04 	sts	0x04AA, r25	; 0x8004aa <pxOverflowTimerList+0x1>
    28f4:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <pxOverflowTimerList>
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
    28f8:	00 e0       	ldi	r16, 0x00	; 0
    28fa:	22 e5       	ldi	r18, 0x52	; 82
    28fc:	34 e0       	ldi	r19, 0x04	; 4
    28fe:	41 e7       	ldi	r20, 0x71	; 113
    2900:	54 e0       	ldi	r21, 0x04	; 4
    2902:	65 e0       	ldi	r22, 0x05	; 5
    2904:	8a e0       	ldi	r24, 0x0A	; 10
    2906:	a5 d8       	rcall	.-3766   	; 0x1a52 <xQueueGenericCreateStatic>
    2908:	90 93 a8 04 	sts	0x04A8, r25	; 0x8004a8 <xTimerQueue+0x1>
    290c:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <xTimerQueue>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    2910:	0f 90       	pop	r0
    2912:	0f be       	out	0x3f, r0	; 63
    }
    2914:	0f 91       	pop	r16
    2916:	08 95       	ret

00002918 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
    2918:	fc 01       	movw	r30, r24
        BaseType_t xProcessTimerNow = pdFALSE;

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    291a:	73 83       	std	Z+3, r23	; 0x03
    291c:	62 83       	std	Z+2, r22	; 0x02
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    291e:	91 87       	std	Z+9, r25	; 0x09
    2920:	80 87       	std	Z+8, r24	; 0x08

        if( xNextExpiryTime <= xTimeNow )
    2922:	46 17       	cp	r20, r22
    2924:	57 07       	cpc	r21, r23
    2926:	78 f0       	brcs	.+30     	; 0x2946 <prvInsertTimerInActiveList+0x2e>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2928:	42 1b       	sub	r20, r18
    292a:	53 0b       	sbc	r21, r19
    292c:	84 85       	ldd	r24, Z+12	; 0x0c
    292e:	95 85       	ldd	r25, Z+13	; 0x0d
    2930:	48 17       	cp	r20, r24
    2932:	59 07       	cpc	r21, r25
    2934:	c0 f4       	brcc	.+48     	; 0x2966 <prvInsertTimerInActiveList+0x4e>
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    2936:	bf 01       	movw	r22, r30
    2938:	6e 5f       	subi	r22, 0xFE	; 254
    293a:	7f 4f       	sbci	r23, 0xFF	; 255
    293c:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <pxOverflowTimerList>
    2940:	90 91 aa 04 	lds	r25, 0x04AA	; 0x8004aa <pxOverflowTimerList+0x1>
    2944:	0d c0       	rjmp	.+26     	; 0x2960 <prvInsertTimerInActiveList+0x48>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    2946:	42 17       	cp	r20, r18
    2948:	53 07       	cpc	r21, r19
    294a:	18 f4       	brcc	.+6      	; 0x2952 <prvInsertTimerInActiveList+0x3a>
    294c:	62 17       	cp	r22, r18
    294e:	73 07       	cpc	r23, r19
    2950:	50 f4       	brcc	.+20     	; 0x2966 <prvInsertTimerInActiveList+0x4e>
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2952:	bf 01       	movw	r22, r30
    2954:	6e 5f       	subi	r22, 0xFE	; 254
    2956:	7f 4f       	sbci	r23, 0xFF	; 255
    2958:	80 91 ab 04 	lds	r24, 0x04AB	; 0x8004ab <pxCurrentTimerList>
    295c:	90 91 ac 04 	lds	r25, 0x04AC	; 0x8004ac <pxCurrentTimerList+0x1>
    2960:	b6 d1       	rcall	.+876    	; 0x2cce <vListInsert>
    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
        BaseType_t xProcessTimerNow = pdFALSE;
    2962:	80 e0       	ldi	r24, 0x00	; 0
    2964:	08 95       	ret
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
    2966:	81 e0       	ldi	r24, 0x01	; 1
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
            }
        }

        return xProcessTimerNow;
    }
    2968:	08 95       	ret

0000296a <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
    296a:	ef 92       	push	r14
    296c:	ff 92       	push	r15
    296e:	0f 93       	push	r16
    2970:	1f 93       	push	r17
    2972:	cf 93       	push	r28
    2974:	df 93       	push	r29
    2976:	ec 01       	movw	r28, r24
    2978:	8b 01       	movw	r16, r22
    297a:	7a 01       	movw	r14, r20
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
    297c:	6c 85       	ldd	r22, Y+12	; 0x0c
    297e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2980:	60 0f       	add	r22, r16
    2982:	71 1f       	adc	r23, r17
    2984:	98 01       	movw	r18, r16
    2986:	a7 01       	movw	r20, r14
    2988:	ce 01       	movw	r24, r28
    298a:	c6 df       	rcall	.-116    	; 0x2918 <prvInsertTimerInActiveList>
    298c:	88 23       	and	r24, r24
    298e:	49 f0       	breq	.+18     	; 0x29a2 <prvReloadTimer+0x38>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
    2990:	8c 85       	ldd	r24, Y+12	; 0x0c
    2992:	9d 85       	ldd	r25, Y+13	; 0x0d
    2994:	08 0f       	add	r16, r24
    2996:	19 1f       	adc	r17, r25

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2998:	e8 89       	ldd	r30, Y+16	; 0x10
    299a:	f9 89       	ldd	r31, Y+17	; 0x11
    299c:	ce 01       	movw	r24, r28
    299e:	19 95       	eicall
    29a0:	ed cf       	rjmp	.-38     	; 0x297c <prvReloadTimer+0x12>
        }
    }
    29a2:	df 91       	pop	r29
    29a4:	cf 91       	pop	r28
    29a6:	1f 91       	pop	r17
    29a8:	0f 91       	pop	r16
    29aa:	ff 90       	pop	r15
    29ac:	ef 90       	pop	r14
    29ae:	08 95       	ret

000029b0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    29b0:	ef 92       	push	r14
    29b2:	ff 92       	push	r15
    29b4:	0f 93       	push	r16
    29b6:	1f 93       	push	r17
    29b8:	cf 93       	push	r28
    29ba:	df 93       	push	r29
    29bc:	8c 01       	movw	r16, r24
    29be:	7b 01       	movw	r14, r22
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    29c0:	e0 91 ab 04 	lds	r30, 0x04AB	; 0x8004ab <pxCurrentTimerList>
    29c4:	f0 91 ac 04 	lds	r31, 0x04AC	; 0x8004ac <pxCurrentTimerList+0x1>
    29c8:	05 80       	ldd	r0, Z+5	; 0x05
    29ca:	f6 81       	ldd	r31, Z+6	; 0x06
    29cc:	e0 2d       	mov	r30, r0
    29ce:	c6 81       	ldd	r28, Z+6	; 0x06
    29d0:	d7 81       	ldd	r29, Z+7	; 0x07

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    29d2:	ce 01       	movw	r24, r28
    29d4:	02 96       	adiw	r24, 0x02	; 2
    29d6:	b3 d1       	rcall	.+870    	; 0x2d3e <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    29d8:	8a 89       	ldd	r24, Y+18	; 0x12
    29da:	82 ff       	sbrs	r24, 2
    29dc:	05 c0       	rjmp	.+10     	; 0x29e8 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
    29de:	a7 01       	movw	r20, r14
    29e0:	b8 01       	movw	r22, r16
    29e2:	ce 01       	movw	r24, r28
    29e4:	c2 df       	rcall	.-124    	; 0x296a <prvReloadTimer>
    29e6:	02 c0       	rjmp	.+4      	; 0x29ec <prvProcessExpiredTimer+0x3c>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    29e8:	8e 7f       	andi	r24, 0xFE	; 254
    29ea:	8a 8b       	std	Y+18, r24	; 0x12
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    29ec:	e8 89       	ldd	r30, Y+16	; 0x10
    29ee:	f9 89       	ldd	r31, Y+17	; 0x11
    29f0:	ce 01       	movw	r24, r28
    }
    29f2:	df 91       	pop	r29
    29f4:	cf 91       	pop	r28
    29f6:	1f 91       	pop	r17
    29f8:	0f 91       	pop	r16
    29fa:	ff 90       	pop	r15
    29fc:	ef 90       	pop	r14
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    29fe:	19 94       	eijmp

00002a00 <prvSwitchTimerLists>:

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2a00:	e0 91 ab 04 	lds	r30, 0x04AB	; 0x8004ab <pxCurrentTimerList>
    2a04:	f0 91 ac 04 	lds	r31, 0x04AC	; 0x8004ac <pxCurrentTimerList+0x1>
    2a08:	80 81       	ld	r24, Z
    2a0a:	88 23       	and	r24, r24
    2a0c:	49 f0       	breq	.+18     	; 0x2a20 <prvSwitchTimerLists+0x20>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2a0e:	05 80       	ldd	r0, Z+5	; 0x05
    2a10:	f6 81       	ldd	r31, Z+6	; 0x06
    2a12:	e0 2d       	mov	r30, r0

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
    2a14:	6f ef       	ldi	r22, 0xFF	; 255
    2a16:	7f ef       	ldi	r23, 0xFF	; 255
    2a18:	80 81       	ld	r24, Z
    2a1a:	91 81       	ldd	r25, Z+1	; 0x01
    2a1c:	c9 df       	rcall	.-110    	; 0x29b0 <prvProcessExpiredTimer>
    2a1e:	f0 cf       	rjmp	.-32     	; 0x2a00 <prvSwitchTimerLists>
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    2a20:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <pxOverflowTimerList>
    2a24:	90 91 aa 04 	lds	r25, 0x04AA	; 0x8004aa <pxOverflowTimerList+0x1>
    2a28:	90 93 ac 04 	sts	0x04AC, r25	; 0x8004ac <pxCurrentTimerList+0x1>
    2a2c:	80 93 ab 04 	sts	0x04AB, r24	; 0x8004ab <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    2a30:	f0 93 aa 04 	sts	0x04AA, r31	; 0x8004aa <pxOverflowTimerList+0x1>
    2a34:	e0 93 a9 04 	sts	0x04A9, r30	; 0x8004a9 <pxOverflowTimerList>
    2a38:	08 95       	ret

00002a3a <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
    2a3a:	cf 92       	push	r12
    2a3c:	df 92       	push	r13
    2a3e:	ef 92       	push	r14
    2a40:	ff 92       	push	r15
    2a42:	0f 93       	push	r16
    2a44:	cf 93       	push	r28
    2a46:	df 93       	push	r29
    2a48:	00 d0       	rcall	.+0      	; 0x2a4a <xTimerCreateTimerTask+0x10>
    2a4a:	00 d0       	rcall	.+0      	; 0x2a4c <xTimerCreateTimerTask+0x12>
    2a4c:	cd b7       	in	r28, 0x3d	; 61
    2a4e:	de b7       	in	r29, 0x3e	; 62

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
    2a50:	37 df       	rcall	.-402    	; 0x28c0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
    2a52:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <xTimerQueue>
    2a56:	90 91 a8 04 	lds	r25, 0x04A8	; 0x8004a8 <xTimerQueue+0x1>
    2a5a:	89 2b       	or	r24, r25
    2a5c:	19 f1       	breq	.+70     	; 0x2aa4 <xTimerCreateTimerTask+0x6a>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
    2a5e:	1e 82       	std	Y+6, r1	; 0x06
    2a60:	1d 82       	std	Y+5, r1	; 0x05
                StackType_t * pxTimerTaskStackBuffer = NULL;
    2a62:	1c 82       	std	Y+4, r1	; 0x04
    2a64:	1b 82       	std	Y+3, r1	; 0x03
                configSTACK_DEPTH_TYPE uxTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &uxTimerTaskStackSize );
    2a66:	ae 01       	movw	r20, r28
    2a68:	4f 5f       	subi	r20, 0xFF	; 255
    2a6a:	5f 4f       	sbci	r21, 0xFF	; 255
    2a6c:	be 01       	movw	r22, r28
    2a6e:	6d 5f       	subi	r22, 0xFD	; 253
    2a70:	7f 4f       	sbci	r23, 0xFF	; 255
    2a72:	ce 01       	movw	r24, r28
    2a74:	05 96       	adiw	r24, 0x05	; 5
    2a76:	d2 d0       	rcall	.+420    	; 0x2c1c <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
    2a78:	cd 80       	ldd	r12, Y+5	; 0x05
    2a7a:	de 80       	ldd	r13, Y+6	; 0x06
    2a7c:	eb 80       	ldd	r14, Y+3	; 0x03
    2a7e:	fc 80       	ldd	r15, Y+4	; 0x04
    2a80:	49 81       	ldd	r20, Y+1	; 0x01
    2a82:	5a 81       	ldd	r21, Y+2	; 0x02
    2a84:	03 e0       	ldi	r16, 0x03	; 3
    2a86:	20 e0       	ldi	r18, 0x00	; 0
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	68 e6       	ldi	r22, 0x68	; 104
    2a8c:	72 e0       	ldi	r23, 0x02	; 2
    2a8e:	8f e6       	ldi	r24, 0x6F	; 111
    2a90:	91 e0       	ldi	r25, 0x01	; 1
    2a92:	ef d9       	rcall	.-3106   	; 0x1e72 <xTaskCreateStatic>
    2a94:	9c 01       	movw	r18, r24
    2a96:	90 93 a6 04 	sts	0x04A6, r25	; 0x8004a6 <xTimerTaskHandle+0x1>
    2a9a:	80 93 a5 04 	sts	0x04A5, r24	; 0x8004a5 <xTimerTaskHandle>
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
        BaseType_t xReturn = pdFAIL;
    2a9e:	81 e0       	ldi	r24, 0x01	; 1
    2aa0:	23 2b       	or	r18, r19
    2aa2:	09 f4       	brne	.+2      	; 0x2aa6 <xTimerCreateTimerTask+0x6c>
    2aa4:	80 e0       	ldi	r24, 0x00	; 0
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
        return xReturn;
    }
    2aa6:	26 96       	adiw	r28, 0x06	; 6
    2aa8:	0f b6       	in	r0, 0x3f	; 63
    2aaa:	f8 94       	cli
    2aac:	de bf       	out	0x3e, r29	; 62
    2aae:	0f be       	out	0x3f, r0	; 63
    2ab0:	cd bf       	out	0x3d, r28	; 61
    2ab2:	df 91       	pop	r29
    2ab4:	cf 91       	pop	r28
    2ab6:	0f 91       	pop	r16
    2ab8:	ff 90       	pop	r15
    2aba:	ef 90       	pop	r14
    2abc:	df 90       	pop	r13
    2abe:	cf 90       	pop	r12
    2ac0:	08 95       	ret

00002ac2 <xTimerCreateStatic>:
                                          const TickType_t xTimerPeriodInTicks,
                                          const BaseType_t xAutoReload,
                                          void * const pvTimerID,
                                          TimerCallbackFunction_t pxCallbackFunction,
                                          StaticTimer_t * pxTimerBuffer )
        {
    2ac2:	7f 92       	push	r7
    2ac4:	8f 92       	push	r8
    2ac6:	9f 92       	push	r9
    2ac8:	af 92       	push	r10
    2aca:	bf 92       	push	r11
    2acc:	cf 92       	push	r12
    2ace:	df 92       	push	r13
    2ad0:	ef 92       	push	r14
    2ad2:	ff 92       	push	r15
    2ad4:	0f 93       	push	r16
    2ad6:	1f 93       	push	r17
    2ad8:	cf 93       	push	r28
    2ada:	df 93       	push	r29
    2adc:	4c 01       	movw	r8, r24
    2ade:	5b 01       	movw	r10, r22
    2ae0:	74 2e       	mov	r7, r20
    2ae2:	69 01       	movw	r12, r18
    2ae4:	e7 01       	movw	r28, r14

            /* A pointer to a StaticTimer_t structure MUST be provided, use it. */
            configASSERT( pxTimerBuffer );
            pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */

            if( pxNewTimer != NULL )
    2ae6:	20 97       	sbiw	r28, 0x00	; 0
    2ae8:	99 f0       	breq	.+38     	; 0x2b10 <xTimerCreateStatic+0x4e>
            {
                /* Timers can be created statically or dynamically so note this
                 * timer was created statically in case it is later deleted.  The
                 * auto-reload bit may get set in prvInitialiseNewTimer(). */
                pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
    2aea:	82 e0       	ldi	r24, 0x02	; 2
    2aec:	8a 8b       	std	Y+18, r24	; 0x12
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
    2aee:	e8 de       	rcall	.-560    	; 0x28c0 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
    2af0:	99 82       	std	Y+1, r9	; 0x01
    2af2:	88 82       	st	Y, r8
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    2af4:	bd 86       	std	Y+13, r11	; 0x0d
    2af6:	ac 86       	std	Y+12, r10	; 0x0c
        pxNewTimer->pvTimerID = pvTimerID;
    2af8:	df 86       	std	Y+15, r13	; 0x0f
    2afa:	ce 86       	std	Y+14, r12	; 0x0e
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    2afc:	19 8b       	std	Y+17, r17	; 0x11
    2afe:	08 8b       	std	Y+16, r16	; 0x10
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    2b00:	c7 01       	movw	r24, r14
    2b02:	02 96       	adiw	r24, 0x02	; 2
    2b04:	e0 d0       	rcall	.+448    	; 0x2cc6 <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
    2b06:	77 20       	and	r7, r7
    2b08:	19 f0       	breq	.+6      	; 0x2b10 <xTimerCreateStatic+0x4e>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
    2b0a:	8a 89       	ldd	r24, Y+18	; 0x12
    2b0c:	84 60       	ori	r24, 0x04	; 4
    2b0e:	8a 8b       	std	Y+18, r24	; 0x12

                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
    2b10:	ce 01       	movw	r24, r28
    2b12:	df 91       	pop	r29
    2b14:	cf 91       	pop	r28
    2b16:	1f 91       	pop	r17
    2b18:	0f 91       	pop	r16
    2b1a:	ff 90       	pop	r15
    2b1c:	ef 90       	pop	r14
    2b1e:	df 90       	pop	r13
    2b20:	cf 90       	pop	r12
    2b22:	bf 90       	pop	r11
    2b24:	af 90       	pop	r10
    2b26:	9f 90       	pop	r9
    2b28:	8f 90       	pop	r8
    2b2a:	7f 90       	pop	r7
    2b2c:	08 95       	ret

00002b2e <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    2b2e:	0f 93       	push	r16
    2b30:	1f 93       	push	r17
    2b32:	cf 93       	push	r28
    2b34:	df 93       	push	r29
    2b36:	00 d0       	rcall	.+0      	; 0x2b38 <xTimerGenericCommand+0xa>
    2b38:	1f 92       	push	r1
    2b3a:	1f 92       	push	r1
    2b3c:	cd b7       	in	r28, 0x3d	; 61
    2b3e:	de b7       	in	r29, 0x3e	; 62

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2b40:	a0 91 a7 04 	lds	r26, 0x04A7	; 0x8004a7 <xTimerQueue>
    2b44:	b0 91 a8 04 	lds	r27, 0x04A8	; 0x8004a8 <xTimerQueue+0x1>
    2b48:	10 97       	sbiw	r26, 0x00	; 0
    2b4a:	19 f1       	breq	.+70     	; 0x2b92 <xTimerGenericCommand+0x64>
    2b4c:	f9 01       	movw	r30, r18
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2b4e:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2b50:	5b 83       	std	Y+3, r21	; 0x03
    2b52:	4a 83       	std	Y+2, r20	; 0x02
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    2b54:	9d 83       	std	Y+5, r25	; 0x05
    2b56:	8c 83       	std	Y+4, r24	; 0x04

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2b58:	66 30       	cpi	r22, 0x06	; 6
    2b5a:	9c f4       	brge	.+38     	; 0x2b82 <xTimerGenericCommand+0x54>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2b5c:	52 de       	rcall	.-860    	; 0x2802 <xTaskGetSchedulerState>
    2b5e:	e0 91 a7 04 	lds	r30, 0x04A7	; 0x8004a7 <xTimerQueue>
    2b62:	f0 91 a8 04 	lds	r31, 0x04A8	; 0x8004a8 <xTimerQueue+0x1>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2b66:	20 e0       	ldi	r18, 0x00	; 0
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
            xMessage.u.xTimerParameters.pxTimer = xTimer;

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2b68:	82 30       	cpi	r24, 0x02	; 2
    2b6a:	11 f4       	brne	.+4      	; 0x2b70 <xTimerGenericCommand+0x42>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2b6c:	a8 01       	movw	r20, r16
    2b6e:	02 c0       	rjmp	.+4      	; 0x2b74 <xTimerGenericCommand+0x46>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2b70:	40 e0       	ldi	r20, 0x00	; 0
    2b72:	50 e0       	ldi	r21, 0x00	; 0
    2b74:	be 01       	movw	r22, r28
    2b76:	6f 5f       	subi	r22, 0xFF	; 255
    2b78:	7f 4f       	sbci	r23, 0xFF	; 255
    2b7a:	cf 01       	movw	r24, r30
    2b7c:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <xQueueGenericSend>
    2b80:	09 c0       	rjmp	.+18     	; 0x2b94 <xTimerGenericCommand+0x66>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2b82:	20 e0       	ldi	r18, 0x00	; 0
    2b84:	af 01       	movw	r20, r30
    2b86:	be 01       	movw	r22, r28
    2b88:	6f 5f       	subi	r22, 0xFF	; 255
    2b8a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b8c:	cd 01       	movw	r24, r26
    2b8e:	0a d8       	rcall	.-4076   	; 0x1ba4 <xQueueGenericSendFromISR>
    2b90:	01 c0       	rjmp	.+2      	; 0x2b94 <xTimerGenericCommand+0x66>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    2b92:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2b94:	0f 90       	pop	r0
    2b96:	0f 90       	pop	r0
    2b98:	0f 90       	pop	r0
    2b9a:	0f 90       	pop	r0
    2b9c:	0f 90       	pop	r0
    2b9e:	df 91       	pop	r29
    2ba0:	cf 91       	pop	r28
    2ba2:	1f 91       	pop	r17
    2ba4:	0f 91       	pop	r16
    2ba6:	08 95       	ret

00002ba8 <initVariant>:
    prvSetMainLedOn(); // Main LED on.
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    2ba8:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <__malloc_margin>
    2bac:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <__malloc_margin+0x1>
    2bb0:	8f ef       	ldi	r24, 0xFF	; 255
    2bb2:	91 e2       	ldi	r25, 0x21	; 33
    2bb4:	82 1b       	sub	r24, r18
    2bb6:	93 0b       	sbc	r25, r19
    2bb8:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    2bbc:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    2bc0:	0e 94 e6 04 	call	0x9cc	; 0x9cc <setup>
    2bc4:	56 ca       	rjmp	.-2900   	; 0x2072 <vTaskStartScheduler>
    2bc6:	08 95       	ret

00002bc8 <vApplicationIdleHook>:
    2bc8:	0e 94 17 05 	call	0xa2e	; 0xa2e <loop>
    2bcc:	80 e0       	ldi	r24, 0x00	; 0
    2bce:	90 e0       	ldi	r25, 0x00	; 0
    2bd0:	89 2b       	or	r24, r25
    2bd2:	11 f0       	breq	.+4      	; 0x2bd8 <vApplicationIdleHook+0x10>
    2bd4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    2bd8:	08 95       	ret

00002bda <_Z15prvSetMainLedOnv>:
    2bda:	27 9a       	sbi	0x04, 7	; 4
    2bdc:	2f 9a       	sbi	0x05, 7	; 5
    2bde:	08 95       	ret

00002be0 <_Z15prvBlinkMainLedv>:
    2be0:	1f 9a       	sbi	0x03, 7	; 3
    2be2:	08 95       	ret

00002be4 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__ ((unused)),
                                    char * pcTaskName __attribute__ ((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    2be4:	fa df       	rcall	.-12     	; 0x2bda <_Z15prvSetMainLedOnv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2be6:	2f ef       	ldi	r18, 0xFF	; 255
    2be8:	87 ea       	ldi	r24, 0xA7	; 167
    2bea:	91 e6       	ldi	r25, 0x61	; 97
    2bec:	21 50       	subi	r18, 0x01	; 1
    2bee:	80 40       	sbci	r24, 0x00	; 0
    2bf0:	90 40       	sbci	r25, 0x00	; 0
    2bf2:	e1 f7       	brne	.-8      	; 0x2bec <vApplicationStackOverflowHook+0x8>
    2bf4:	00 c0       	rjmp	.+0      	; 0x2bf6 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    2bf6:	00 00       	nop
    2bf8:	f3 df       	rcall	.-26     	; 0x2be0 <_Z15prvBlinkMainLedv>
    2bfa:	f5 cf       	rjmp	.-22     	; 0x2be6 <vApplicationStackOverflowHook+0x2>

00002bfc <vApplicationGetIdleTaskMemory>:
                                    configSTACK_DEPTH_TYPE * puxIdleTaskStackSize )
{
    static StaticTask_t xIdleTaskTCB;
    static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
    2bfc:	2c ef       	ldi	r18, 0xFC	; 252
    2bfe:	35 e0       	ldi	r19, 0x05	; 5
    2c00:	fc 01       	movw	r30, r24
    2c02:	31 83       	std	Z+1, r19	; 0x01
    2c04:	20 83       	st	Z, r18
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
    2c06:	8c e3       	ldi	r24, 0x3C	; 60
    2c08:	95 e0       	ldi	r25, 0x05	; 5
    2c0a:	fb 01       	movw	r30, r22
    2c0c:	91 83       	std	Z+1, r25	; 0x01
    2c0e:	80 83       	st	Z, r24
    *puxIdleTaskStackSize = configMINIMAL_STACK_SIZE;
    2c10:	80 ec       	ldi	r24, 0xC0	; 192
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	fa 01       	movw	r30, r20
    2c16:	91 83       	std	Z+1, r25	; 0x01
    2c18:	80 83       	st	Z, r24
    2c1a:	08 95       	ret

00002c1c <vApplicationGetTimerTaskMemory>:
                                     configSTACK_DEPTH_TYPE * puxTimerTaskStackSize )
{
    static StaticTask_t xTimerTaskTCB;
    static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
    2c1c:	24 e1       	ldi	r18, 0x14	; 20
    2c1e:	35 e0       	ldi	r19, 0x05	; 5
    2c20:	fc 01       	movw	r30, r24
    2c22:	31 83       	std	Z+1, r19	; 0x01
    2c24:	20 83       	st	Z, r18
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
    2c26:	8f eb       	ldi	r24, 0xBF	; 191
    2c28:	94 e0       	ldi	r25, 0x04	; 4
    2c2a:	fb 01       	movw	r30, r22
    2c2c:	91 83       	std	Z+1, r25	; 0x01
    2c2e:	80 83       	st	Z, r24
    *puxTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
    2c30:	85 e5       	ldi	r24, 0x55	; 85
    2c32:	90 e0       	ldi	r25, 0x00	; 0
    2c34:	fa 01       	movw	r30, r20
    2c36:	91 83       	std	Z+1, r25	; 0x01
    2c38:	80 83       	st	Z, r24
    2c3a:	08 95       	ret

00002c3c <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    2c3c:	cf 93       	push	r28
  uint8_t sreg = SREG;
    2c3e:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    2c40:	f8 94       	cli
  if (!initialized) {
    2c42:	80 91 27 06 	lds	r24, 0x0627	; 0x800627 <_ZN8SPIClass11initializedE>
    2c46:	81 11       	cpse	r24, r1
    2c48:	27 c0       	rjmp	.+78     	; 0x2c98 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    2c4a:	e3 e3       	ldi	r30, 0x33	; 51
    2c4c:	f2 e0       	ldi	r31, 0x02	; 2
    2c4e:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    2c50:	ed ee       	ldi	r30, 0xED	; 237
    2c52:	f1 e0       	ldi	r31, 0x01	; 1
    2c54:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    2c56:	e8 2f       	mov	r30, r24
    2c58:	f0 e0       	ldi	r31, 0x00	; 0
    2c5a:	ee 0f       	add	r30, r30
    2c5c:	ff 1f       	adc	r31, r31
    2c5e:	e8 58       	subi	r30, 0x88	; 136
    2c60:	fd 4f       	sbci	r31, 0xFD	; 253
    2c62:	a5 91       	lpm	r26, Z+
    2c64:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    2c66:	ec 91       	ld	r30, X
    2c68:	e9 23       	and	r30, r25
    2c6a:	21 f4       	brne	.+8      	; 0x2c74 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    2c6c:	61 e0       	ldi	r22, 0x01	; 1
    2c6e:	85 e3       	ldi	r24, 0x35	; 53
    2c70:	0e 94 cd 06 	call	0xd9a	; 0xd9a <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    2c74:	61 e0       	ldi	r22, 0x01	; 1
    2c76:	85 e3       	ldi	r24, 0x35	; 53
    2c78:	0e 94 91 06 	call	0xd22	; 0xd22 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    2c7c:	8c b5       	in	r24, 0x2c	; 44
    2c7e:	80 61       	ori	r24, 0x10	; 16
    2c80:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    2c82:	8c b5       	in	r24, 0x2c	; 44
    2c84:	80 64       	ori	r24, 0x40	; 64
    2c86:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    2c88:	61 e0       	ldi	r22, 0x01	; 1
    2c8a:	84 e3       	ldi	r24, 0x34	; 52
    2c8c:	0e 94 91 06 	call	0xd22	; 0xd22 <pinMode>
    pinMode(MOSI, OUTPUT);
    2c90:	61 e0       	ldi	r22, 0x01	; 1
    2c92:	83 e3       	ldi	r24, 0x33	; 51
    2c94:	0e 94 91 06 	call	0xd22	; 0xd22 <pinMode>
  }
  initialized++; // reference count
    2c98:	80 91 27 06 	lds	r24, 0x0627	; 0x800627 <_ZN8SPIClass11initializedE>
    2c9c:	8f 5f       	subi	r24, 0xFF	; 255
    2c9e:	80 93 27 06 	sts	0x0627, r24	; 0x800627 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    2ca2:	cf bf       	out	0x3f, r28	; 63
}
    2ca4:	cf 91       	pop	r28
    2ca6:	08 95       	ret

00002ca8 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2ca8:	08 95       	ret

00002caa <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
    2caa:	fc 01       	movw	r30, r24
    2cac:	03 96       	adiw	r24, 0x03	; 3
    2cae:	92 83       	std	Z+2, r25	; 0x02
    2cb0:	81 83       	std	Z+1, r24	; 0x01
    2cb2:	2f ef       	ldi	r18, 0xFF	; 255
    2cb4:	3f ef       	ldi	r19, 0xFF	; 255
    2cb6:	34 83       	std	Z+4, r19	; 0x04
    2cb8:	23 83       	std	Z+3, r18	; 0x03
    2cba:	96 83       	std	Z+6, r25	; 0x06
    2cbc:	85 83       	std	Z+5, r24	; 0x05
    2cbe:	90 87       	std	Z+8, r25	; 0x08
    2cc0:	87 83       	std	Z+7, r24	; 0x07
    2cc2:	10 82       	st	Z, r1
    2cc4:	08 95       	ret

00002cc6 <vListInitialiseItem>:
    2cc6:	fc 01       	movw	r30, r24
    2cc8:	11 86       	std	Z+9, r1	; 0x09
    2cca:	10 86       	std	Z+8, r1	; 0x08
    2ccc:	08 95       	ret

00002cce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
    2cce:	0f 93       	push	r16
    2cd0:	1f 93       	push	r17
    2cd2:	cf 93       	push	r28
    2cd4:	df 93       	push	r29
    2cd6:	8c 01       	movw	r16, r24
    2cd8:	fb 01       	movw	r30, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    2cda:	80 81       	ld	r24, Z
    2cdc:	91 81       	ldd	r25, Z+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    2cde:	8f 3f       	cpi	r24, 0xFF	; 255
    2ce0:	2f ef       	ldi	r18, 0xFF	; 255
    2ce2:	92 07       	cpc	r25, r18
    2ce4:	21 f4       	brne	.+8      	; 0x2cee <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    2ce6:	e8 01       	movw	r28, r16
    2ce8:	af 81       	ldd	r26, Y+7	; 0x07
    2cea:	b8 85       	ldd	r27, Y+8	; 0x08
    2cec:	0e c0       	rjmp	.+28     	; 0x2d0a <vListInsert+0x3c>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    2cee:	d8 01       	movw	r26, r16
    2cf0:	13 96       	adiw	r26, 0x03	; 3
    2cf2:	12 96       	adiw	r26, 0x02	; 2
    2cf4:	2d 91       	ld	r18, X+
    2cf6:	3c 91       	ld	r19, X
    2cf8:	13 97       	sbiw	r26, 0x03	; 3
    2cfa:	e9 01       	movw	r28, r18
    2cfc:	48 81       	ld	r20, Y
    2cfe:	59 81       	ldd	r21, Y+1	; 0x01
    2d00:	84 17       	cp	r24, r20
    2d02:	95 07       	cpc	r25, r21
    2d04:	10 f0       	brcs	.+4      	; 0x2d0a <vListInsert+0x3c>
    2d06:	d9 01       	movw	r26, r18
    2d08:	f4 cf       	rjmp	.-24     	; 0x2cf2 <vListInsert+0x24>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    2d0a:	12 96       	adiw	r26, 0x02	; 2
    2d0c:	8d 91       	ld	r24, X+
    2d0e:	9c 91       	ld	r25, X
    2d10:	13 97       	sbiw	r26, 0x03	; 3
    2d12:	93 83       	std	Z+3, r25	; 0x03
    2d14:	82 83       	std	Z+2, r24	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    2d16:	ec 01       	movw	r28, r24
    2d18:	fd 83       	std	Y+5, r31	; 0x05
    2d1a:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
    2d1c:	b5 83       	std	Z+5, r27	; 0x05
    2d1e:	a4 83       	std	Z+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
    2d20:	13 96       	adiw	r26, 0x03	; 3
    2d22:	fc 93       	st	X, r31
    2d24:	ee 93       	st	-X, r30
    2d26:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
    2d28:	11 87       	std	Z+9, r17	; 0x09
    2d2a:	00 87       	std	Z+8, r16	; 0x08

    ( pxList->uxNumberOfItems )++;
    2d2c:	f8 01       	movw	r30, r16
    2d2e:	80 81       	ld	r24, Z
    2d30:	8f 5f       	subi	r24, 0xFF	; 255
    2d32:	80 83       	st	Z, r24
}
    2d34:	df 91       	pop	r29
    2d36:	cf 91       	pop	r28
    2d38:	1f 91       	pop	r17
    2d3a:	0f 91       	pop	r16
    2d3c:	08 95       	ret

00002d3e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    2d3e:	cf 93       	push	r28
    2d40:	df 93       	push	r29
    2d42:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
    2d44:	a0 85       	ldd	r26, Z+8	; 0x08
    2d46:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2d48:	82 81       	ldd	r24, Z+2	; 0x02
    2d4a:	93 81       	ldd	r25, Z+3	; 0x03
    2d4c:	24 81       	ldd	r18, Z+4	; 0x04
    2d4e:	35 81       	ldd	r19, Z+5	; 0x05
    2d50:	ec 01       	movw	r28, r24
    2d52:	3d 83       	std	Y+5, r19	; 0x05
    2d54:	2c 83       	std	Y+4, r18	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2d56:	c4 81       	ldd	r28, Z+4	; 0x04
    2d58:	d5 81       	ldd	r29, Z+5	; 0x05
    2d5a:	9b 83       	std	Y+3, r25	; 0x03
    2d5c:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    2d5e:	11 96       	adiw	r26, 0x01	; 1
    2d60:	8d 91       	ld	r24, X+
    2d62:	9c 91       	ld	r25, X
    2d64:	12 97       	sbiw	r26, 0x02	; 2
    2d66:	e8 17       	cp	r30, r24
    2d68:	f9 07       	cpc	r31, r25
    2d6a:	21 f4       	brne	.+8      	; 0x2d74 <uxListRemove+0x36>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    2d6c:	12 96       	adiw	r26, 0x02	; 2
    2d6e:	dc 93       	st	X, r29
    2d70:	ce 93       	st	-X, r28
    2d72:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    2d74:	11 86       	std	Z+9, r1	; 0x09
    2d76:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
    2d78:	8c 91       	ld	r24, X
    2d7a:	81 50       	subi	r24, 0x01	; 1
    2d7c:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    2d7e:	8c 91       	ld	r24, X
}
    2d80:	df 91       	pop	r29
    2d82:	cf 91       	pop	r28
    2d84:	08 95       	ret

00002d86 <pxPortInitialiseStack>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
    2d86:	fc 01       	movw	r30, r24
    2d88:	60 83       	st	Z, r22
    2d8a:	31 97       	sbiw	r30, 0x01	; 1
    2d8c:	70 83       	st	Z, r23
    2d8e:	31 97       	sbiw	r30, 0x01	; 1
    2d90:	10 82       	st	Z, r1
    2d92:	31 97       	sbiw	r30, 0x01	; 1
    2d94:	10 82       	st	Z, r1
    2d96:	31 97       	sbiw	r30, 0x01	; 1
    2d98:	20 e8       	ldi	r18, 0x80	; 128
    2d9a:	20 83       	st	Z, r18
    2d9c:	31 97       	sbiw	r30, 0x01	; 1
    2d9e:	10 82       	st	Z, r1
    2da0:	31 97       	sbiw	r30, 0x01	; 1
    2da2:	10 82       	st	Z, r1
    2da4:	31 97       	sbiw	r30, 0x01	; 1
    2da6:	10 82       	st	Z, r1
    2da8:	77 97       	sbiw	r30, 0x17	; 23
    2daa:	40 83       	st	Z, r20
    2dac:	31 97       	sbiw	r30, 0x01	; 1
    2dae:	50 83       	st	Z, r21
    2db0:	86 97       	sbiw	r24, 0x26	; 38
    2db2:	08 95       	ret

00002db4 <vPortYield>:
    2db4:	0f 92       	push	r0
    2db6:	0f b6       	in	r0, 0x3f	; 63
    2db8:	f8 94       	cli
    2dba:	0f 92       	push	r0
    2dbc:	0b b6       	in	r0, 0x3b	; 59
    2dbe:	0f 92       	push	r0
    2dc0:	0c b6       	in	r0, 0x3c	; 60
    2dc2:	0f 92       	push	r0
    2dc4:	1f 92       	push	r1
    2dc6:	11 24       	eor	r1, r1
    2dc8:	2f 92       	push	r2
    2dca:	3f 92       	push	r3
    2dcc:	4f 92       	push	r4
    2dce:	5f 92       	push	r5
    2dd0:	6f 92       	push	r6
    2dd2:	7f 92       	push	r7
    2dd4:	8f 92       	push	r8
    2dd6:	9f 92       	push	r9
    2dd8:	af 92       	push	r10
    2dda:	bf 92       	push	r11
    2ddc:	cf 92       	push	r12
    2dde:	df 92       	push	r13
    2de0:	ef 92       	push	r14
    2de2:	ff 92       	push	r15
    2de4:	0f 93       	push	r16
    2de6:	1f 93       	push	r17
    2de8:	2f 93       	push	r18
    2dea:	3f 93       	push	r19
    2dec:	4f 93       	push	r20
    2dee:	5f 93       	push	r21
    2df0:	6f 93       	push	r22
    2df2:	7f 93       	push	r23
    2df4:	8f 93       	push	r24
    2df6:	9f 93       	push	r25
    2df8:	af 93       	push	r26
    2dfa:	bf 93       	push	r27
    2dfc:	cf 93       	push	r28
    2dfe:	df 93       	push	r29
    2e00:	ef 93       	push	r30
    2e02:	ff 93       	push	r31
    2e04:	a0 91 50 04 	lds	r26, 0x0450	; 0x800450 <pxCurrentTCB>
    2e08:	b0 91 51 04 	lds	r27, 0x0451	; 0x800451 <pxCurrentTCB+0x1>
    2e0c:	0d b6       	in	r0, 0x3d	; 61
    2e0e:	0d 92       	st	X+, r0
    2e10:	0e b6       	in	r0, 0x3e	; 62
    2e12:	0d 92       	st	X+, r0
    2e14:	59 db       	rcall	.-2382   	; 0x24c8 <vTaskSwitchContext>
    2e16:	a0 91 50 04 	lds	r26, 0x0450	; 0x800450 <pxCurrentTCB>
    2e1a:	b0 91 51 04 	lds	r27, 0x0451	; 0x800451 <pxCurrentTCB+0x1>
    2e1e:	cd 91       	ld	r28, X+
    2e20:	cd bf       	out	0x3d, r28	; 61
    2e22:	dd 91       	ld	r29, X+
    2e24:	de bf       	out	0x3e, r29	; 62
    2e26:	ff 91       	pop	r31
    2e28:	ef 91       	pop	r30
    2e2a:	df 91       	pop	r29
    2e2c:	cf 91       	pop	r28
    2e2e:	bf 91       	pop	r27
    2e30:	af 91       	pop	r26
    2e32:	9f 91       	pop	r25
    2e34:	8f 91       	pop	r24
    2e36:	7f 91       	pop	r23
    2e38:	6f 91       	pop	r22
    2e3a:	5f 91       	pop	r21
    2e3c:	4f 91       	pop	r20
    2e3e:	3f 91       	pop	r19
    2e40:	2f 91       	pop	r18
    2e42:	1f 91       	pop	r17
    2e44:	0f 91       	pop	r16
    2e46:	ff 90       	pop	r15
    2e48:	ef 90       	pop	r14
    2e4a:	df 90       	pop	r13
    2e4c:	cf 90       	pop	r12
    2e4e:	bf 90       	pop	r11
    2e50:	af 90       	pop	r10
    2e52:	9f 90       	pop	r9
    2e54:	8f 90       	pop	r8
    2e56:	7f 90       	pop	r7
    2e58:	6f 90       	pop	r6
    2e5a:	5f 90       	pop	r5
    2e5c:	4f 90       	pop	r4
    2e5e:	3f 90       	pop	r3
    2e60:	2f 90       	pop	r2
    2e62:	1f 90       	pop	r1
    2e64:	0f 90       	pop	r0
    2e66:	0c be       	out	0x3c, r0	; 60
    2e68:	0f 90       	pop	r0
    2e6a:	0b be       	out	0x3b, r0	; 59
    2e6c:	0f 90       	pop	r0
    2e6e:	0f be       	out	0x3f, r0	; 63
    2e70:	0f 90       	pop	r0
    2e72:	08 95       	ret

00002e74 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ((hot, flatten, naked));
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    2e74:	0f 92       	push	r0
    2e76:	0f b6       	in	r0, 0x3f	; 63
    2e78:	f8 94       	cli
    2e7a:	0f 92       	push	r0
    2e7c:	0b b6       	in	r0, 0x3b	; 59
    2e7e:	0f 92       	push	r0
    2e80:	0c b6       	in	r0, 0x3c	; 60
    2e82:	0f 92       	push	r0
    2e84:	1f 92       	push	r1
    2e86:	11 24       	eor	r1, r1
    2e88:	2f 92       	push	r2
    2e8a:	3f 92       	push	r3
    2e8c:	4f 92       	push	r4
    2e8e:	5f 92       	push	r5
    2e90:	6f 92       	push	r6
    2e92:	7f 92       	push	r7
    2e94:	8f 92       	push	r8
    2e96:	9f 92       	push	r9
    2e98:	af 92       	push	r10
    2e9a:	bf 92       	push	r11
    2e9c:	cf 92       	push	r12
    2e9e:	df 92       	push	r13
    2ea0:	ef 92       	push	r14
    2ea2:	ff 92       	push	r15
    2ea4:	0f 93       	push	r16
    2ea6:	1f 93       	push	r17
    2ea8:	2f 93       	push	r18
    2eaa:	3f 93       	push	r19
    2eac:	4f 93       	push	r20
    2eae:	5f 93       	push	r21
    2eb0:	6f 93       	push	r22
    2eb2:	7f 93       	push	r23
    2eb4:	8f 93       	push	r24
    2eb6:	9f 93       	push	r25
    2eb8:	af 93       	push	r26
    2eba:	bf 93       	push	r27
    2ebc:	cf 93       	push	r28
    2ebe:	df 93       	push	r29
    2ec0:	ef 93       	push	r30
    2ec2:	ff 93       	push	r31
    2ec4:	a0 91 50 04 	lds	r26, 0x0450	; 0x800450 <pxCurrentTCB>
    2ec8:	b0 91 51 04 	lds	r27, 0x0451	; 0x800451 <pxCurrentTCB+0x1>
    2ecc:	0d b6       	in	r0, 0x3d	; 61
    2ece:	0d 92       	st	X+, r0
    2ed0:	0e b6       	in	r0, 0x3e	; 62
    2ed2:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
    2ed4:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
    2ed6:	29 d9       	rcall	.-3502   	; 0x212a <xTaskIncrementTick>
    2ed8:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    2eda:	f6 da       	rcall	.-2580   	; 0x24c8 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
    2edc:	a0 91 50 04 	lds	r26, 0x0450	; 0x800450 <pxCurrentTCB>
    2ee0:	b0 91 51 04 	lds	r27, 0x0451	; 0x800451 <pxCurrentTCB+0x1>
    2ee4:	cd 91       	ld	r28, X+
    2ee6:	cd bf       	out	0x3d, r28	; 61
    2ee8:	dd 91       	ld	r29, X+
    2eea:	de bf       	out	0x3e, r29	; 62
    2eec:	ff 91       	pop	r31
    2eee:	ef 91       	pop	r30
    2ef0:	df 91       	pop	r29
    2ef2:	cf 91       	pop	r28
    2ef4:	bf 91       	pop	r27
    2ef6:	af 91       	pop	r26
    2ef8:	9f 91       	pop	r25
    2efa:	8f 91       	pop	r24
    2efc:	7f 91       	pop	r23
    2efe:	6f 91       	pop	r22
    2f00:	5f 91       	pop	r21
    2f02:	4f 91       	pop	r20
    2f04:	3f 91       	pop	r19
    2f06:	2f 91       	pop	r18
    2f08:	1f 91       	pop	r17
    2f0a:	0f 91       	pop	r16
    2f0c:	ff 90       	pop	r15
    2f0e:	ef 90       	pop	r14
    2f10:	df 90       	pop	r13
    2f12:	cf 90       	pop	r12
    2f14:	bf 90       	pop	r11
    2f16:	af 90       	pop	r10
    2f18:	9f 90       	pop	r9
    2f1a:	8f 90       	pop	r8
    2f1c:	7f 90       	pop	r7
    2f1e:	6f 90       	pop	r6
    2f20:	5f 90       	pop	r5
    2f22:	4f 90       	pop	r4
    2f24:	3f 90       	pop	r3
    2f26:	2f 90       	pop	r2
    2f28:	1f 90       	pop	r1
    2f2a:	0f 90       	pop	r0
    2f2c:	0c be       	out	0x3c, r0	; 60
    2f2e:	0f 90       	pop	r0
    2f30:	0b be       	out	0x3b, r0	; 59
    2f32:	0f 90       	pop	r0
    2f34:	0f be       	out	0x3f, r0	; 63
    2f36:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    2f38:	08 95       	ret

00002f3a <prvSetupTimerInterrupt>:
 * Setup WDT to generate a tick interrupt.
 */
void prvSetupTimerInterrupt( void )
{
    /* reset watchdog */
    wdt_reset();
    2f3a:	a8 95       	wdr
                : "r0"
        );
    }
    else
    {
        __asm__ __volatile__ (
    2f3c:	90 ec       	ldi	r25, 0xC0	; 192
    2f3e:	88 e1       	ldi	r24, 0x18	; 24
    2f40:	0f b6       	in	r0, 0x3f	; 63
    2f42:	f8 94       	cli
    2f44:	a8 95       	wdr
    2f46:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    2f4a:	0f be       	out	0x3f, r0	; 63
    2f4c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    2f50:	08 95       	ret

00002f52 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void )
{
    /* Setup the relevant timer hardware to generate the tick. */
    prvSetupTimerInterrupt();
    2f52:	f3 df       	rcall	.-26     	; 0x2f3a <prvSetupTimerInterrupt>

    /* Restore the context of the first task that is going to run. */
    portRESTORE_CONTEXT();
    2f54:	a0 91 50 04 	lds	r26, 0x0450	; 0x800450 <pxCurrentTCB>
    2f58:	b0 91 51 04 	lds	r27, 0x0451	; 0x800451 <pxCurrentTCB+0x1>
    2f5c:	cd 91       	ld	r28, X+
    2f5e:	cd bf       	out	0x3d, r28	; 61
    2f60:	dd 91       	ld	r29, X+
    2f62:	de bf       	out	0x3e, r29	; 62
    2f64:	ff 91       	pop	r31
    2f66:	ef 91       	pop	r30
    2f68:	df 91       	pop	r29
    2f6a:	cf 91       	pop	r28
    2f6c:	bf 91       	pop	r27
    2f6e:	af 91       	pop	r26
    2f70:	9f 91       	pop	r25
    2f72:	8f 91       	pop	r24
    2f74:	7f 91       	pop	r23
    2f76:	6f 91       	pop	r22
    2f78:	5f 91       	pop	r21
    2f7a:	4f 91       	pop	r20
    2f7c:	3f 91       	pop	r19
    2f7e:	2f 91       	pop	r18
    2f80:	1f 91       	pop	r17
    2f82:	0f 91       	pop	r16
    2f84:	ff 90       	pop	r15
    2f86:	ef 90       	pop	r14
    2f88:	df 90       	pop	r13
    2f8a:	cf 90       	pop	r12
    2f8c:	bf 90       	pop	r11
    2f8e:	af 90       	pop	r10
    2f90:	9f 90       	pop	r9
    2f92:	8f 90       	pop	r8
    2f94:	7f 90       	pop	r7
    2f96:	6f 90       	pop	r6
    2f98:	5f 90       	pop	r5
    2f9a:	4f 90       	pop	r4
    2f9c:	3f 90       	pop	r3
    2f9e:	2f 90       	pop	r2
    2fa0:	1f 90       	pop	r1
    2fa2:	0f 90       	pop	r0
    2fa4:	0c be       	out	0x3c, r0	; 60
    2fa6:	0f 90       	pop	r0
    2fa8:	0b be       	out	0x3b, r0	; 59
    2faa:	0f 90       	pop	r0
    2fac:	0f be       	out	0x3f, r0	; 63
    2fae:	0f 90       	pop	r0

    /* Simulate a function call end as generated by the compiler. We will now
    jump to the start of the task the context of which we have just restored. */
    __asm__ __volatile__ ( "ret" );
    2fb0:	08 95       	ret

    /* Should not get here. */
    return pdTRUE;
}
    2fb2:	81 e0       	ldi	r24, 0x01	; 1
    2fb4:	08 95       	ret

00002fb6 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    2fb6:	5e df       	rcall	.-324    	; 0x2e74 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    2fb8:	18 95       	reti

00002fba <__tablejump2__>:
    2fba:	ee 0f       	add	r30, r30
    2fbc:	ff 1f       	adc	r31, r31
    2fbe:	88 1f       	adc	r24, r24
    2fc0:	8b bf       	out	0x3b, r24	; 59
    2fc2:	07 90       	elpm	r0, Z+
    2fc4:	f6 91       	elpm	r31, Z
    2fc6:	e0 2d       	mov	r30, r0
    2fc8:	19 94       	eijmp

00002fca <memcpy>:
    2fca:	fb 01       	movw	r30, r22
    2fcc:	dc 01       	movw	r26, r24
    2fce:	02 c0       	rjmp	.+4      	; 0x2fd4 <memcpy+0xa>
    2fd0:	01 90       	ld	r0, Z+
    2fd2:	0d 92       	st	X+, r0
    2fd4:	41 50       	subi	r20, 0x01	; 1
    2fd6:	50 40       	sbci	r21, 0x00	; 0
    2fd8:	d8 f7       	brcc	.-10     	; 0x2fd0 <memcpy+0x6>
    2fda:	08 95       	ret

00002fdc <memset>:
    2fdc:	dc 01       	movw	r26, r24
    2fde:	01 c0       	rjmp	.+2      	; 0x2fe2 <memset+0x6>
    2fe0:	6d 93       	st	X+, r22
    2fe2:	41 50       	subi	r20, 0x01	; 1
    2fe4:	50 40       	sbci	r21, 0x00	; 0
    2fe6:	e0 f7       	brcc	.-8      	; 0x2fe0 <memset+0x4>
    2fe8:	08 95       	ret

00002fea <_exit>:
    2fea:	f8 94       	cli

00002fec <__stop_program>:
    2fec:	ff cf       	rjmp	.-2      	; 0x2fec <__stop_program>
