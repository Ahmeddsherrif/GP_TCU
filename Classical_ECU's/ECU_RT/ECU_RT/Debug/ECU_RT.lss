
ECU_RT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800200  00003148  000031dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003148  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003b1  0080023c  0080023c  00003218  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003218  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003248  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000848  00000000  00000000  00003288  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ee5a  00000000  00000000  00003ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000031c9  00000000  00000000  0001292a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000057b6  00000000  00000000  00015af3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001a6c  00000000  00000000  0001b2ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000043f4  00000000  00000000  0001cd18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a6e1  00000000  00000000  0002110c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000800  00000000  00000000  0002b7ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	5b c2       	rjmp	.+1206   	; 0x4b8 <__ctors_end>
       2:	00 00       	nop
       4:	89 c2       	rjmp	.+1298   	; 0x518 <__bad_interrupt>
       6:	00 00       	nop
       8:	87 c2       	rjmp	.+1294   	; 0x518 <__bad_interrupt>
       a:	00 00       	nop
       c:	85 c2       	rjmp	.+1290   	; 0x518 <__bad_interrupt>
       e:	00 00       	nop
      10:	83 c2       	rjmp	.+1286   	; 0x518 <__bad_interrupt>
      12:	00 00       	nop
      14:	81 c2       	rjmp	.+1282   	; 0x518 <__bad_interrupt>
      16:	00 00       	nop
      18:	7f c2       	rjmp	.+1278   	; 0x518 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7d c2       	rjmp	.+1274   	; 0x518 <__bad_interrupt>
      1e:	00 00       	nop
      20:	7b c2       	rjmp	.+1270   	; 0x518 <__bad_interrupt>
      22:	00 00       	nop
      24:	79 c2       	rjmp	.+1266   	; 0x518 <__bad_interrupt>
      26:	00 00       	nop
      28:	77 c2       	rjmp	.+1262   	; 0x518 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	75 c2       	rjmp	.+1258   	; 0x518 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 67 17 	jmp	0x2ece	; 0x2ece <__vector_12>
      34:	71 c2       	rjmp	.+1250   	; 0x518 <__bad_interrupt>
      36:	00 00       	nop
      38:	6f c2       	rjmp	.+1246   	; 0x518 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6d c2       	rjmp	.+1242   	; 0x518 <__bad_interrupt>
      3e:	00 00       	nop
      40:	6b c2       	rjmp	.+1238   	; 0x518 <__bad_interrupt>
      42:	00 00       	nop
      44:	69 c2       	rjmp	.+1234   	; 0x518 <__bad_interrupt>
      46:	00 00       	nop
      48:	67 c2       	rjmp	.+1230   	; 0x518 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	65 c2       	rjmp	.+1226   	; 0x518 <__bad_interrupt>
      4e:	00 00       	nop
      50:	63 c2       	rjmp	.+1222   	; 0x518 <__bad_interrupt>
      52:	00 00       	nop
      54:	61 c2       	rjmp	.+1218   	; 0x518 <__bad_interrupt>
      56:	00 00       	nop
      58:	5f c2       	rjmp	.+1214   	; 0x518 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	12 c5       	rjmp	.+2596   	; 0xa82 <__vector_23>
      5e:	00 00       	nop
      60:	5b c2       	rjmp	.+1206   	; 0x518 <__bad_interrupt>
      62:	00 00       	nop
      64:	59 c2       	rjmp	.+1202   	; 0x518 <__bad_interrupt>
      66:	00 00       	nop
      68:	57 c2       	rjmp	.+1198   	; 0x518 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	55 c2       	rjmp	.+1194   	; 0x518 <__bad_interrupt>
      6e:	00 00       	nop
      70:	53 c2       	rjmp	.+1190   	; 0x518 <__bad_interrupt>
      72:	00 00       	nop
      74:	51 c2       	rjmp	.+1186   	; 0x518 <__bad_interrupt>
      76:	00 00       	nop
      78:	4f c2       	rjmp	.+1182   	; 0x518 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4d c2       	rjmp	.+1178   	; 0x518 <__bad_interrupt>
      7e:	00 00       	nop
      80:	4b c2       	rjmp	.+1174   	; 0x518 <__bad_interrupt>
      82:	00 00       	nop
      84:	49 c2       	rjmp	.+1170   	; 0x518 <__bad_interrupt>
      86:	00 00       	nop
      88:	47 c2       	rjmp	.+1166   	; 0x518 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	45 c2       	rjmp	.+1162   	; 0x518 <__bad_interrupt>
      8e:	00 00       	nop
      90:	43 c2       	rjmp	.+1158   	; 0x518 <__bad_interrupt>
      92:	00 00       	nop
      94:	41 c2       	rjmp	.+1154   	; 0x518 <__bad_interrupt>
      96:	00 00       	nop
      98:	3f c2       	rjmp	.+1150   	; 0x518 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	3d c2       	rjmp	.+1146   	; 0x518 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	3b c2       	rjmp	.+1142   	; 0x518 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	39 c2       	rjmp	.+1138   	; 0x518 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	37 c2       	rjmp	.+1134   	; 0x518 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	35 c2       	rjmp	.+1130   	; 0x518 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	33 c2       	rjmp	.+1126   	; 0x518 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	31 c2       	rjmp	.+1122   	; 0x518 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	2f c2       	rjmp	.+1118   	; 0x518 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	2d c2       	rjmp	.+1114   	; 0x518 <__bad_interrupt>
      be:	00 00       	nop
      c0:	2b c2       	rjmp	.+1110   	; 0x518 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	29 c2       	rjmp	.+1106   	; 0x518 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	27 c2       	rjmp	.+1102   	; 0x518 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	25 c2       	rjmp	.+1098   	; 0x518 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	23 c2       	rjmp	.+1094   	; 0x518 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	21 c2       	rjmp	.+1090   	; 0x518 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	1f c2       	rjmp	.+1086   	; 0x518 <__bad_interrupt>
      da:	00 00       	nop
      dc:	1d c2       	rjmp	.+1082   	; 0x518 <__bad_interrupt>
      de:	00 00       	nop
      e0:	1b c2       	rjmp	.+1078   	; 0x518 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	35 04       	cpc	r3, r5
      e6:	9a 04       	cpc	r9, r10
      e8:	3a 04       	cpc	r3, r10
      ea:	43 04       	cpc	r4, r3
      ec:	4b 04       	cpc	r4, r11
      ee:	9a 04       	cpc	r9, r10
      f0:	d1 04       	cpc	r13, r1
      f2:	73 06       	cpc	r7, r19
      f4:	76 06       	cpc	r7, r22
      f6:	65 06       	cpc	r6, r21
      f8:	69 06       	cpc	r6, r25
      fa:	6f 06       	cpc	r6, r31
      fc:	ad 06       	cpc	r10, r29
      fe:	7a 06       	cpc	r7, r26
     100:	7e 06       	cpc	r7, r30
     102:	84 06       	cpc	r8, r20
     104:	88 06       	cpc	r8, r24
     106:	8c 06       	cpc	r8, r28
     108:	92 06       	cpc	r9, r18
     10a:	96 06       	cpc	r9, r22
     10c:	9a 06       	cpc	r9, r26
     10e:	ad 06       	cpc	r10, r29
     110:	a0 06       	cpc	r10, r16
     112:	a4 06       	cpc	r10, r20
     114:	a8 06       	cpc	r10, r24
     116:	3e 09       	sbc	r19, r14
     118:	b0 08       	sbc	r11, r0
     11a:	42 09       	sbc	r20, r2
     11c:	b3 08       	sbc	r11, r3
     11e:	b6 08       	sbc	r11, r6
     120:	ba 08       	sbc	r11, r10
     122:	bd 08       	sbc	r11, r13
     124:	c0 08       	sbc	r12, r0
     126:	3c 09       	sbc	r19, r12
     128:	3c 09       	sbc	r19, r12
     12a:	c3 08       	sbc	r12, r3
     12c:	c6 08       	sbc	r12, r6
     12e:	c9 08       	sbc	r12, r9
     130:	cc 08       	sbc	r12, r12
     132:	cf 08       	sbc	r12, r15
     134:	d2 08       	sbc	r13, r2
     136:	46 09       	sbc	r20, r6
     138:	e2 08       	sbc	r14, r2
     13a:	e5 08       	sbc	r14, r5
     13c:	3c 09       	sbc	r19, r12
     13e:	e9 08       	sbc	r14, r9
     140:	ed 08       	sbc	r14, r13
     142:	f0 08       	sbc	r15, r0
     144:	f3 08       	sbc	r15, r3
     146:	f6 08       	sbc	r15, r6
     148:	f9 08       	sbc	r15, r9
     14a:	29 09       	sbc	r18, r9
     14c:	fc 08       	sbc	r15, r12
     14e:	ff 08       	sbc	r15, r15
     150:	02 09       	sbc	r16, r2
     152:	05 09       	sbc	r16, r5
     154:	08 09       	sbc	r16, r8
     156:	4a 09       	sbc	r20, r10
     158:	18 09       	sbc	r17, r8
     15a:	1b 09       	sbc	r17, r11
     15c:	1f 09       	sbc	r17, r15
     15e:	22 09       	sbc	r18, r2
     160:	3c 09       	sbc	r19, r12
     162:	26 09       	sbc	r18, r6
     164:	29 09       	sbc	r18, r9
     166:	2d 09       	sbc	r18, r13
     168:	31 09       	sbc	r19, r1
     16a:	35 09       	sbc	r19, r5
     16c:	39 09       	sbc	r19, r9
     16e:	10 02       	muls	r17, r16
     170:	10 02       	muls	r17, r16
     172:	57 02       	muls	r21, r23
     174:	3e 02       	muls	r19, r30
     176:	51 02       	muls	r21, r17
     178:	10 02       	muls	r17, r16
     17a:	10 02       	muls	r17, r16
     17c:	57 02       	muls	r21, r23
     17e:	3e 02       	muls	r19, r30

00000180 <__trampolines_end>:
     180:	00 00       	nop
     182:	0a 0b       	sbc	r16, r26
     184:	02 09       	sbc	r16, r2
     186:	0c 0d       	add	r16, r12
     188:	0e 08       	sbc	r0, r14
     18a:	07 03       	mulsu	r16, r23
     18c:	04 01       	movw	r0, r8
	...
     1aa:	00 00       	nop
     1ac:	12 11       	cpse	r17, r2
     1ae:	10 00       	.word	0x0010	; ????
	...

000001c6 <digital_pin_to_bit_mask_PGM>:
     1c6:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     1d6:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     1e6:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     1f6:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     206:	04 08 10 20 40 80                                   ... @.

0000020c <digital_pin_to_port_PGM>:
     20c:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     21c:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     22c:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     23c:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     24c:	0b 0b 0b 0b 0b 0b                                   ......

00000252 <port_to_input_PGM>:
     252:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     262:	00 01 00 00 03 01 06 01 09 01                       ..........

0000026c <port_to_output_PGM>:
     26c:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     27c:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000286 <port_to_mode_PGM>:
     286:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     296:	01 01 00 00 04 01 07 01 0a 01                       ..........

000002a0 <prvIdleTask>:
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
     2a0:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <uxDeletedTasksWaitingCleanUp>
     2a4:	88 23       	and	r24, r24
     2a6:	e9 f0       	breq	.+58     	; 0x2e2 <prvIdleTask+0x42>
     2a8:	0f b6       	in	r0, 0x3f	; 63
     2aa:	f8 94       	cli
     2ac:	0f 92       	push	r0
     2ae:	e0 91 c6 03 	lds	r30, 0x03C6	; 0x8003c6 <xTasksWaitingTermination+0x5>
     2b2:	f0 91 c7 03 	lds	r31, 0x03C7	; 0x8003c7 <xTasksWaitingTermination+0x6>
     2b6:	c6 81       	ldd	r28, Z+6	; 0x06
     2b8:	d7 81       	ldd	r29, Z+7	; 0x07
     2ba:	ce 01       	movw	r24, r28
     2bc:	02 96       	adiw	r24, 0x02	; 2
     2be:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <uxListRemove>
     2c2:	80 91 b6 03 	lds	r24, 0x03B6	; 0x8003b6 <uxCurrentNumberOfTasks>
     2c6:	81 50       	subi	r24, 0x01	; 1
     2c8:	80 93 b6 03 	sts	0x03B6, r24	; 0x8003b6 <uxCurrentNumberOfTasks>
     2cc:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <uxDeletedTasksWaitingCleanUp>
     2d0:	81 50       	subi	r24, 0x01	; 1
     2d2:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <uxDeletedTasksWaitingCleanUp>
     2d6:	0f 90       	pop	r0
     2d8:	0f be       	out	0x3f, r0	; 63
     2da:	ce 01       	movw	r24, r28
     2dc:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <prvDeleteTCB>
     2e0:	df cf       	rjmp	.-66     	; 0x2a0 <prvIdleTask>
     2e2:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <pxReadyTasksLists>
     2e6:	82 30       	cpi	r24, 0x02	; 2
     2e8:	10 f0       	brcs	.+4      	; 0x2ee <prvIdleTask+0x4e>
     2ea:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <vPortYield>
     2ee:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <vApplicationIdleHook>
     2f2:	d6 cf       	rjmp	.-84     	; 0x2a0 <prvIdleTask>

000002f4 <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     2f4:	cf 93       	push	r28
     2f6:	df 93       	push	r29
     2f8:	00 d0       	rcall	.+0      	; 0x2fa <prvTimerTask+0x6>
     2fa:	1f 92       	push	r1
     2fc:	1f 92       	push	r1
     2fe:	cd b7       	in	r28, 0x3d	; 61
     300:	de b7       	in	r29, 0x3e	; 62
     302:	e0 91 69 04 	lds	r30, 0x0469	; 0x800469 <pxCurrentTimerList>
     306:	f0 91 6a 04 	lds	r31, 0x046A	; 0x80046a <pxCurrentTimerList+0x1>
     30a:	d0 80       	ld	r13, Z
     30c:	dd 20       	and	r13, r13
     30e:	31 f0       	breq	.+12     	; 0x31c <prvTimerTask+0x28>
     310:	05 80       	ldd	r0, Z+5	; 0x05
     312:	f6 81       	ldd	r31, Z+6	; 0x06
     314:	e0 2d       	mov	r30, r0
     316:	00 81       	ld	r16, Z
     318:	11 81       	ldd	r17, Z+1	; 0x01
     31a:	02 c0       	rjmp	.+4      	; 0x320 <prvTimerTask+0x2c>
     31c:	00 e0       	ldi	r16, 0x00	; 0
     31e:	10 e0       	ldi	r17, 0x00	; 0
     320:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <vTaskSuspendAll>
     324:	0e 94 05 10 	call	0x200a	; 0x200a <xTaskGetTickCount>
     328:	7c 01       	movw	r14, r24
     32a:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <xLastTime.2516>
     32e:	90 91 62 04 	lds	r25, 0x0462	; 0x800462 <xLastTime.2516+0x1>
     332:	e8 16       	cp	r14, r24
     334:	f9 06       	cpc	r15, r25
     336:	20 f4       	brcc	.+8      	; 0x340 <prvTimerTask+0x4c>
     338:	0e 94 7d 14 	call	0x28fa	; 0x28fa <prvSwitchTimerLists>
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	01 c0       	rjmp	.+2      	; 0x342 <prvTimerTask+0x4e>
     340:	80 e0       	ldi	r24, 0x00	; 0
     342:	f0 92 62 04 	sts	0x0462, r15	; 0x800462 <xLastTime.2516+0x1>
     346:	e0 92 61 04 	sts	0x0461, r14	; 0x800461 <xLastTime.2516>
     34a:	81 11       	cpse	r24, r1
     34c:	24 c0       	rjmp	.+72     	; 0x396 <prvTimerTask+0xa2>
     34e:	dd 20       	and	r13, r13
     350:	51 f0       	breq	.+20     	; 0x366 <prvTimerTask+0x72>
     352:	e0 16       	cp	r14, r16
     354:	f1 06       	cpc	r15, r17
     356:	70 f0       	brcs	.+28     	; 0x374 <prvTimerTask+0x80>
     358:	0e 94 18 11 	call	0x2230	; 0x2230 <xTaskResumeAll>
     35c:	b7 01       	movw	r22, r14
     35e:	c8 01       	movw	r24, r16
     360:	0e 94 55 14 	call	0x28aa	; 0x28aa <prvProcessExpiredTimer>
     364:	1e c0       	rjmp	.+60     	; 0x3a2 <prvTimerTask+0xae>
     366:	e0 91 67 04 	lds	r30, 0x0467	; 0x800467 <pxOverflowTimerList>
     36a:	f0 91 68 04 	lds	r31, 0x0468	; 0x800468 <pxOverflowTimerList+0x1>
     36e:	80 81       	ld	r24, Z
     370:	41 e0       	ldi	r20, 0x01	; 1
     372:	81 11       	cpse	r24, r1
     374:	40 e0       	ldi	r20, 0x00	; 0
     376:	b8 01       	movw	r22, r16
     378:	6e 19       	sub	r22, r14
     37a:	7f 09       	sbc	r23, r15
     37c:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <xTimerQueue>
     380:	90 91 66 04 	lds	r25, 0x0466	; 0x800466 <xTimerQueue+0x1>
     384:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <vQueueWaitForMessageRestricted>
     388:	0e 94 18 11 	call	0x2230	; 0x2230 <xTaskResumeAll>
     38c:	81 11       	cpse	r24, r1
     38e:	09 c0       	rjmp	.+18     	; 0x3a2 <prvTimerTask+0xae>
     390:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <vPortYield>
     394:	06 c0       	rjmp	.+12     	; 0x3a2 <prvTimerTask+0xae>
     396:	0e 94 18 11 	call	0x2230	; 0x2230 <xTaskResumeAll>
     39a:	03 c0       	rjmp	.+6      	; 0x3a2 <prvTimerTask+0xae>
     39c:	89 81       	ldd	r24, Y+1	; 0x01
     39e:	87 ff       	sbrs	r24, 7
     3a0:	0e c0       	rjmp	.+28     	; 0x3be <prvTimerTask+0xca>
     3a2:	40 e0       	ldi	r20, 0x00	; 0
     3a4:	50 e0       	ldi	r21, 0x00	; 0
     3a6:	be 01       	movw	r22, r28
     3a8:	6f 5f       	subi	r22, 0xFF	; 255
     3aa:	7f 4f       	sbci	r23, 0xFF	; 255
     3ac:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <xTimerQueue>
     3b0:	90 91 66 04 	lds	r25, 0x0466	; 0x800466 <xTimerQueue+0x1>
     3b4:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <xQueueReceive>
     3b8:	81 11       	cpse	r24, r1
     3ba:	f0 cf       	rjmp	.-32     	; 0x39c <prvTimerTask+0xa8>
     3bc:	a2 cf       	rjmp	.-188    	; 0x302 <prvTimerTask+0xe>
     3be:	0c 81       	ldd	r16, Y+4	; 0x04
     3c0:	1d 81       	ldd	r17, Y+5	; 0x05
     3c2:	d8 01       	movw	r26, r16
     3c4:	1a 96       	adiw	r26, 0x0a	; 10
     3c6:	8d 91       	ld	r24, X+
     3c8:	9c 91       	ld	r25, X
     3ca:	1b 97       	sbiw	r26, 0x0b	; 11
     3cc:	89 2b       	or	r24, r25
     3ce:	21 f0       	breq	.+8      	; 0x3d8 <prvTimerTask+0xe4>
     3d0:	c8 01       	movw	r24, r16
     3d2:	02 96       	adiw	r24, 0x02	; 2
     3d4:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <uxListRemove>
     3d8:	0e 94 05 10 	call	0x200a	; 0x200a <xTaskGetTickCount>
     3dc:	7c 01       	movw	r14, r24
     3de:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <xLastTime.2516>
     3e2:	90 91 62 04 	lds	r25, 0x0462	; 0x800462 <xLastTime.2516+0x1>
     3e6:	e8 16       	cp	r14, r24
     3e8:	f9 06       	cpc	r15, r25
     3ea:	10 f4       	brcc	.+4      	; 0x3f0 <prvTimerTask+0xfc>
     3ec:	0e 94 7d 14 	call	0x28fa	; 0x28fa <prvSwitchTimerLists>
     3f0:	f0 92 62 04 	sts	0x0462, r15	; 0x800462 <xLastTime.2516+0x1>
     3f4:	e0 92 61 04 	sts	0x0461, r14	; 0x800461 <xLastTime.2516>
     3f8:	e9 81       	ldd	r30, Y+1	; 0x01
     3fa:	8e 2f       	mov	r24, r30
     3fc:	ee 0f       	add	r30, r30
     3fe:	99 0b       	sbc	r25, r25
     400:	aa 0b       	sbc	r26, r26
     402:	bb 0b       	sbc	r27, r27
     404:	fc 01       	movw	r30, r24
     406:	31 97       	sbiw	r30, 0x01	; 1
     408:	e9 30       	cpi	r30, 0x09	; 9
     40a:	f1 05       	cpc	r31, r1
     40c:	50 f6       	brcc	.-108    	; 0x3a2 <prvTimerTask+0xae>
     40e:	d8 01       	movw	r26, r16
     410:	52 96       	adiw	r26, 0x12	; 18
     412:	9c 91       	ld	r25, X
     414:	88 27       	eor	r24, r24
     416:	e9 54       	subi	r30, 0x49	; 73
     418:	ff 4f       	sbci	r31, 0xFF	; 255
     41a:	8f 4f       	sbci	r24, 0xFF	; 255
     41c:	0c 94 69 17 	jmp	0x2ed2	; 0x2ed2 <__tablejump2__>
     420:	91 60       	ori	r25, 0x01	; 1
     422:	f8 01       	movw	r30, r16
     424:	92 8b       	std	Z+18, r25	; 0x12
     426:	2a 81       	ldd	r18, Y+2	; 0x02
     428:	3b 81       	ldd	r19, Y+3	; 0x03
     42a:	64 85       	ldd	r22, Z+12	; 0x0c
     42c:	75 85       	ldd	r23, Z+13	; 0x0d
     42e:	62 0f       	add	r22, r18
     430:	73 1f       	adc	r23, r19
     432:	a7 01       	movw	r20, r14
     434:	c8 01       	movw	r24, r16
     436:	0e 94 09 14 	call	0x2812	; 0x2812 <prvInsertTimerInActiveList>
     43a:	88 23       	and	r24, r24
     43c:	09 f4       	brne	.+2      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     43e:	b1 cf       	rjmp	.-158    	; 0x3a2 <prvTimerTask+0xae>
     440:	d8 01       	movw	r26, r16
     442:	52 96       	adiw	r26, 0x12	; 18
     444:	8c 91       	ld	r24, X
     446:	52 97       	sbiw	r26, 0x12	; 18
     448:	82 ff       	sbrs	r24, 2
     44a:	0d c0       	rjmp	.+26     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
     44c:	6a 81       	ldd	r22, Y+2	; 0x02
     44e:	7b 81       	ldd	r23, Y+3	; 0x03
     450:	1c 96       	adiw	r26, 0x0c	; 12
     452:	8d 91       	ld	r24, X+
     454:	9c 91       	ld	r25, X
     456:	1d 97       	sbiw	r26, 0x0d	; 13
     458:	68 0f       	add	r22, r24
     45a:	79 1f       	adc	r23, r25
     45c:	a7 01       	movw	r20, r14
     45e:	c8 01       	movw	r24, r16
     460:	0e 94 32 14 	call	0x2864	; 0x2864 <prvReloadTimer>
     464:	03 c0       	rjmp	.+6      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     466:	8e 7f       	andi	r24, 0xFE	; 254
     468:	f8 01       	movw	r30, r16
     46a:	82 8b       	std	Z+18, r24	; 0x12
     46c:	d8 01       	movw	r26, r16
     46e:	50 96       	adiw	r26, 0x10	; 16
     470:	ed 91       	ld	r30, X+
     472:	fc 91       	ld	r31, X
     474:	51 97       	sbiw	r26, 0x11	; 17
     476:	c8 01       	movw	r24, r16
     478:	19 95       	eicall
     47a:	93 cf       	rjmp	.-218    	; 0x3a2 <prvTimerTask+0xae>
     47c:	91 60       	ori	r25, 0x01	; 1
     47e:	d8 01       	movw	r26, r16
     480:	52 96       	adiw	r26, 0x12	; 18
     482:	9c 93       	st	X, r25
     484:	52 97       	sbiw	r26, 0x12	; 18
     486:	6a 81       	ldd	r22, Y+2	; 0x02
     488:	7b 81       	ldd	r23, Y+3	; 0x03
     48a:	1d 96       	adiw	r26, 0x0d	; 13
     48c:	7c 93       	st	X, r23
     48e:	6e 93       	st	-X, r22
     490:	1c 97       	sbiw	r26, 0x0c	; 12
     492:	6e 0d       	add	r22, r14
     494:	7f 1d       	adc	r23, r15
     496:	97 01       	movw	r18, r14
     498:	a7 01       	movw	r20, r14
     49a:	c8 01       	movw	r24, r16
     49c:	0e 94 09 14 	call	0x2812	; 0x2812 <prvInsertTimerInActiveList>
     4a0:	80 cf       	rjmp	.-256    	; 0x3a2 <prvTimerTask+0xae>
     4a2:	91 fd       	sbrc	r25, 1
     4a4:	04 c0       	rjmp	.+8      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     4a6:	c8 01       	movw	r24, r16
     4a8:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <vPortFree>
     4ac:	7a cf       	rjmp	.-268    	; 0x3a2 <prvTimerTask+0xae>
     4ae:	9e 7f       	andi	r25, 0xFE	; 254
     4b0:	f8 01       	movw	r30, r16
     4b2:	92 8b       	std	Z+18, r25	; 0x12
     4b4:	76 cf       	rjmp	.-276    	; 0x3a2 <prvTimerTask+0xae>

000004b6 <__ctors_start>:
     4b6:	05 03       	mulsu	r16, r21

000004b8 <__ctors_end>:
     4b8:	11 24       	eor	r1, r1
     4ba:	1f be       	out	0x3f, r1	; 63
     4bc:	cf ef       	ldi	r28, 0xFF	; 255
     4be:	d1 e2       	ldi	r29, 0x21	; 33
     4c0:	de bf       	out	0x3e, r29	; 62
     4c2:	cd bf       	out	0x3d, r28	; 61
     4c4:	00 e0       	ldi	r16, 0x00	; 0
     4c6:	0c bf       	out	0x3c, r16	; 60

000004c8 <__do_copy_data>:
     4c8:	12 e0       	ldi	r17, 0x02	; 2
     4ca:	a0 e0       	ldi	r26, 0x00	; 0
     4cc:	b2 e0       	ldi	r27, 0x02	; 2
     4ce:	e8 e4       	ldi	r30, 0x48	; 72
     4d0:	f1 e3       	ldi	r31, 0x31	; 49
     4d2:	00 e0       	ldi	r16, 0x00	; 0
     4d4:	0b bf       	out	0x3b, r16	; 59
     4d6:	02 c0       	rjmp	.+4      	; 0x4dc <__do_copy_data+0x14>
     4d8:	07 90       	elpm	r0, Z+
     4da:	0d 92       	st	X+, r0
     4dc:	ac 33       	cpi	r26, 0x3C	; 60
     4de:	b1 07       	cpc	r27, r17
     4e0:	d9 f7       	brne	.-10     	; 0x4d8 <__do_copy_data+0x10>

000004e2 <__do_clear_bss>:
     4e2:	25 e0       	ldi	r18, 0x05	; 5
     4e4:	ac e3       	ldi	r26, 0x3C	; 60
     4e6:	b2 e0       	ldi	r27, 0x02	; 2
     4e8:	01 c0       	rjmp	.+2      	; 0x4ec <.do_clear_bss_start>

000004ea <.do_clear_bss_loop>:
     4ea:	1d 92       	st	X+, r1

000004ec <.do_clear_bss_start>:
     4ec:	ad 3e       	cpi	r26, 0xED	; 237
     4ee:	b2 07       	cpc	r27, r18
     4f0:	e1 f7       	brne	.-8      	; 0x4ea <.do_clear_bss_loop>

000004f2 <__do_global_ctors>:
     4f2:	12 e0       	ldi	r17, 0x02	; 2
     4f4:	cc e5       	ldi	r28, 0x5C	; 92
     4f6:	d2 e0       	ldi	r29, 0x02	; 2
     4f8:	00 e0       	ldi	r16, 0x00	; 0
     4fa:	06 c0       	rjmp	.+12     	; 0x508 <__do_global_ctors+0x16>
     4fc:	21 97       	sbiw	r28, 0x01	; 1
     4fe:	01 09       	sbc	r16, r1
     500:	80 2f       	mov	r24, r16
     502:	fe 01       	movw	r30, r28
     504:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <__tablejump2__>
     508:	cb 35       	cpi	r28, 0x5B	; 91
     50a:	d1 07       	cpc	r29, r17
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	08 07       	cpc	r16, r24
     510:	a9 f7       	brne	.-22     	; 0x4fc <__do_global_ctors+0xa>
     512:	ab d2       	rcall	.+1366   	; 0xa6a <main>
     514:	0c 94 a2 18 	jmp	0x3144	; 0x3144 <_exit>

00000518 <__bad_interrupt>:
     518:	73 cd       	rjmp	.-1306   	; 0x0 <__vectors>

0000051a <_Z8BSP_initv>:
int BSP_get_switch(void){
	return digitalRead(PIN_SWITCH);
}

void BSP_send_can_frame(Can_frame_t * pFrame){
	mcp2515.sendMessage(pFrame);
     51a:	61 e0       	ldi	r22, 0x01	; 1
     51c:	89 e2       	ldi	r24, 0x29	; 41
     51e:	1e d4       	rcall	.+2108   	; 0xd5c <pinMode>
     520:	61 e0       	ldi	r22, 0x01	; 1
     522:	8c e2       	ldi	r24, 0x2C	; 44
     524:	1b d4       	rcall	.+2102   	; 0xd5c <pinMode>
     526:	61 e0       	ldi	r22, 0x01	; 1
     528:	8a e2       	ldi	r24, 0x2A	; 42
     52a:	18 d4       	rcall	.+2096   	; 0xd5c <pinMode>
     52c:	61 e0       	ldi	r22, 0x01	; 1
     52e:	8d e2       	ldi	r24, 0x2D	; 45
     530:	15 d4       	rcall	.+2090   	; 0xd5c <pinMode>
     532:	62 e0       	ldi	r22, 0x02	; 2
     534:	80 e3       	ldi	r24, 0x30	; 48
     536:	12 d4       	rcall	.+2084   	; 0xd5c <pinMode>
     538:	8d e3       	ldi	r24, 0x3D	; 61
     53a:	92 e0       	ldi	r25, 0x02	; 2
     53c:	89 d7       	rcall	.+3858   	; 0x1450 <_ZN7MCP25155resetEv>
     53e:	42 e0       	ldi	r20, 0x02	; 2
     540:	6b e0       	ldi	r22, 0x0B	; 11
     542:	8d e3       	ldi	r24, 0x3D	; 61
     544:	92 e0       	ldi	r25, 0x02	; 2
     546:	ee d5       	rcall	.+3036   	; 0x1124 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK>
     548:	8d e3       	ldi	r24, 0x3D	; 61
     54a:	92 e0       	ldi	r25, 0x02	; 2
     54c:	e9 c5       	rjmp	.+3026   	; 0x1120 <_ZN7MCP251513setNormalModeEv>

0000054e <_Z14BSP_led_red_onv>:
     54e:	61 e0       	ldi	r22, 0x01	; 1
     550:	8c e2       	ldi	r24, 0x2C	; 44
     552:	40 c4       	rjmp	.+2176   	; 0xdd4 <digitalWrite>

00000554 <_Z15BSP_led_red_offv>:
     554:	60 e0       	ldi	r22, 0x00	; 0
     556:	8c e2       	ldi	r24, 0x2C	; 44
     558:	3d c4       	rjmp	.+2170   	; 0xdd4 <digitalWrite>

0000055a <_Z17BSP_led_yellow_onv>:
     55a:	61 e0       	ldi	r22, 0x01	; 1
     55c:	8a e2       	ldi	r24, 0x2A	; 42
     55e:	3a c4       	rjmp	.+2164   	; 0xdd4 <digitalWrite>

00000560 <_Z18BSP_led_yellow_offv>:
     560:	60 e0       	ldi	r22, 0x00	; 0
     562:	8a e2       	ldi	r24, 0x2A	; 42
     564:	37 c4       	rjmp	.+2158   	; 0xdd4 <digitalWrite>

00000566 <_Z16BSP_led_green_onv>:
     566:	61 e0       	ldi	r22, 0x01	; 1
     568:	89 e2       	ldi	r24, 0x29	; 41
     56a:	34 c4       	rjmp	.+2152   	; 0xdd4 <digitalWrite>

0000056c <_Z17BSP_led_green_offv>:
     56c:	60 e0       	ldi	r22, 0x00	; 0
     56e:	89 e2       	ldi	r24, 0x29	; 41
     570:	31 c4       	rjmp	.+2146   	; 0xdd4 <digitalWrite>

00000572 <_Z13BSP_buzzer_onv>:
     572:	61 e0       	ldi	r22, 0x01	; 1
     574:	8d e2       	ldi	r24, 0x2D	; 45
     576:	2e c4       	rjmp	.+2140   	; 0xdd4 <digitalWrite>

00000578 <_Z14BSP_buzzer_offv>:
     578:	60 e0       	ldi	r22, 0x00	; 0
     57a:	8d e2       	ldi	r24, 0x2D	; 45
     57c:	2b c4       	rjmp	.+2134   	; 0xdd4 <digitalWrite>

0000057e <_Z14BSP_get_switchv>:
     57e:	80 e3       	ldi	r24, 0x30	; 48
     580:	57 c4       	rjmp	.+2222   	; 0xe30 <digitalRead>

00000582 <_Z17BSP_get_can_frameP9can_frame>:
}

int BSP_get_can_frame(Can_frame_t *pFrame){
	int rtnValue = 0;
	if (mcp2515.readMessage(pFrame) == MCP2515::ERROR_OK){
     582:	bc 01       	movw	r22, r24
     584:	8d e3       	ldi	r24, 0x3D	; 61
     586:	92 e0       	ldi	r25, 0x02	; 2
     588:	0e 94 4a 0b 	call	0x1694	; 0x1694 <_ZN7MCP251511readMessageEP9can_frame>
		rtnValue = 1;
	}
	return rtnValue;
     58c:	21 e0       	ldi	r18, 0x01	; 1
     58e:	30 e0       	ldi	r19, 0x00	; 0
     590:	88 23       	and	r24, r24
     592:	11 f0       	breq	.+4      	; 0x598 <_Z17BSP_get_can_frameP9can_frame+0x16>
     594:	20 e0       	ldi	r18, 0x00	; 0
     596:	30 e0       	ldi	r19, 0x00	; 0
}
     598:	c9 01       	movw	r24, r18
     59a:	08 95       	ret

0000059c <vApplicationTickHook>:
		Active_postFromISR(AO_blinkyButton, &switchPressedEvt, xHigherPriorityTaskWoken);
		state_switch = STATE_SWITCH_PRESSED;
	}
}

void vApplicationTickHook(void) {
     59c:	cf 93       	push	r28
     59e:	df 93       	push	r29
     5a0:	1f 92       	push	r1
     5a2:	cd b7       	in	r28, 0x3d	; 61
     5a4:	de b7       	in	r29, 0x3e	; 62
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
     5a6:	19 82       	std	Y+1, r1	; 0x01
	int current = BSP_get_switch();
     5a8:	ea df       	rcall	.-44     	; 0x57e <_Z14BSP_get_switchv>
	
	switch(state_switch){
     5aa:	20 91 3c 02 	lds	r18, 0x023C	; 0x80023c <__data_end>
     5ae:	21 30       	cpi	r18, 0x01	; 1
     5b0:	19 f1       	breq	.+70     	; 0x5f8 <vApplicationTickHook+0x5c>
     5b2:	18 f0       	brcs	.+6      	; 0x5ba <vApplicationTickHook+0x1e>
     5b4:	22 30       	cpi	r18, 0x02	; 2
     5b6:	81 f0       	breq	.+32     	; 0x5d8 <vApplicationTickHook+0x3c>
     5b8:	21 c0       	rjmp	.+66     	; 0x5fc <vApplicationTickHook+0x60>

static State_switch_t state_switch = STATE_SWITCH_INIT;


static void state_switch_pressed_handler(const int * reading, BaseType_t * xHigherPriorityTaskWoken){
	if(*reading == SWITCH_NOT_PRESSED){
     5ba:	81 30       	cpi	r24, 0x01	; 1
     5bc:	91 05       	cpc	r25, r1
     5be:	61 f4       	brne	.+24     	; 0x5d8 <vApplicationTickHook+0x3c>
		static Event const switchRelasedEvt = {SWITCH_RELEASED_SIG};
		Active_postFromISR(AO_blinkyButton, &switchRelasedEvt, xHigherPriorityTaskWoken);
     5c0:	ae 01       	movw	r20, r28
     5c2:	4f 5f       	subi	r20, 0xFF	; 255
     5c4:	5f 4f       	sbci	r21, 0xFF	; 255
     5c6:	64 e1       	ldi	r22, 0x14	; 20
     5c8:	72 e0       	ldi	r23, 0x02	; 2
     5ca:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <AO_blinkyButton>
     5ce:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <AO_blinkyButton+0x1>
     5d2:	b2 d0       	rcall	.+356    	; 0x738 <_Z18Active_postFromISRP6ActivePK5EventPa>
		state_switch = STATE_SWITCH_NOT_PRESSED;
     5d4:	82 e0       	ldi	r24, 0x02	; 2
     5d6:	0d c0       	rjmp	.+26     	; 0x5f2 <vApplicationTickHook+0x56>
	}
}
static void state_switch_not_pressed_handler(const int * reading, BaseType_t * xHigherPriorityTaskWoken){
	if(*reading == SWITCH_PRESSED){
     5d8:	89 2b       	or	r24, r25
     5da:	81 f4       	brne	.+32     	; 0x5fc <vApplicationTickHook+0x60>
		static Event const switchPressedEvt = {SWITCH_PRESSED_SIG};
		Active_postFromISR(AO_blinkyButton, &switchPressedEvt, xHigherPriorityTaskWoken);
     5dc:	ae 01       	movw	r20, r28
     5de:	4f 5f       	subi	r20, 0xFF	; 255
     5e0:	5f 4f       	sbci	r21, 0xFF	; 255
     5e2:	62 e1       	ldi	r22, 0x12	; 18
     5e4:	72 e0       	ldi	r23, 0x02	; 2
     5e6:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <AO_blinkyButton>
     5ea:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <AO_blinkyButton+0x1>
     5ee:	a4 d0       	rcall	.+328    	; 0x738 <_Z18Active_postFromISRP6ActivePK5EventPa>
		state_switch = STATE_SWITCH_PRESSED;
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <__data_end>
     5f6:	02 c0       	rjmp	.+4      	; 0x5fc <vApplicationTickHook+0x60>

static State_switch_t state_switch = STATE_SWITCH_INIT;


static void state_switch_pressed_handler(const int * reading, BaseType_t * xHigherPriorityTaskWoken){
	if(*reading == SWITCH_NOT_PRESSED){
     5f8:	01 97       	sbiw	r24, 0x01	; 1
			state_switch_not_pressed_handler(&current, &xHigherPriorityTaskWoken);
			break;
		}
	}
	
	CanFrameEvent_fromISR(&xHigherPriorityTaskWoken);
     5fa:	11 f3       	breq	.-60     	; 0x5c0 <vApplicationTickHook+0x24>
     5fc:	ce 01       	movw	r24, r28
     5fe:	01 96       	adiw	r24, 0x01	; 1
     600:	dd d0       	rcall	.+442    	; 0x7bc <_Z21CanFrameEvent_fromISRPa>

}
     602:	0f 90       	pop	r0
     604:	df 91       	pop	r29
     606:	cf 91       	pop	r28
     608:	08 95       	ret

0000060a <_GLOBAL__sub_I__Z8BSP_initv>:
     60a:	0f 93       	push	r16
     60c:	1f 93       	push	r17
#define PIN_LED_RED						44
#define PIN_LED_YELLOW					42
#define PIN_LED_GREEN					41


static MCP2515 mcp2515(SS_PIN);
     60e:	00 e0       	ldi	r16, 0x00	; 0
     610:	10 e0       	ldi	r17, 0x00	; 0
     612:	20 e8       	ldi	r18, 0x80	; 128
     614:	36 e9       	ldi	r19, 0x96	; 150
     616:	48 e9       	ldi	r20, 0x98	; 152
     618:	50 e0       	ldi	r21, 0x00	; 0
     61a:	61 e3       	ldi	r22, 0x31	; 49
     61c:	8d e3       	ldi	r24, 0x3D	; 61
     61e:	92 e0       	ldi	r25, 0x02	; 2
     620:	84 d4       	rcall	.+2312   	; 0xf2a <_ZN7MCP2515C1EhmP8SPIClass>
		}
	}
	
	CanFrameEvent_fromISR(&xHigherPriorityTaskWoken);

}
     622:	1f 91       	pop	r17
     624:	0f 91       	pop	r16
     626:	08 95       	ret

00000628 <_ZL16Active_eventLoopPv>:
	}
}

void CanFrameEvent_poll(){
	if(BSP_get_can_frame(&cfevt->frame) == true){
		Active_post(cfevt->act, &cfevt->super);
     628:	cf 93       	push	r28
     62a:	df 93       	push	r29
     62c:	1f 92       	push	r1
     62e:	1f 92       	push	r1
     630:	cd b7       	in	r28, 0x3d	; 61
     632:	de b7       	in	r29, 0x3e	; 62
     634:	8c 01       	movw	r16, r24
     636:	7c 01       	movw	r14, r24
     638:	8d e4       	ldi	r24, 0x4D	; 77
     63a:	e8 0e       	add	r14, r24
     63c:	f1 1c       	adc	r15, r1
     63e:	d7 01       	movw	r26, r14
     640:	ed 91       	ld	r30, X+
     642:	fc 91       	ld	r31, X
     644:	6c e1       	ldi	r22, 0x1C	; 28
     646:	72 e0       	ldi	r23, 0x02	; 2
     648:	c8 01       	movw	r24, r16
     64a:	19 95       	eicall
     64c:	4f ef       	ldi	r20, 0xFF	; 255
     64e:	5f ef       	ldi	r21, 0xFF	; 255
     650:	be 01       	movw	r22, r28
     652:	6f 5f       	subi	r22, 0xFF	; 255
     654:	7f 4f       	sbci	r23, 0xFF	; 255
     656:	f8 01       	movw	r30, r16
     658:	83 a5       	ldd	r24, Z+43	; 0x2b
     65a:	94 a5       	ldd	r25, Z+44	; 0x2c
     65c:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <xQueueReceive>
     660:	69 81       	ldd	r22, Y+1	; 0x01
     662:	7a 81       	ldd	r23, Y+2	; 0x02
     664:	d7 01       	movw	r26, r14
     666:	ed 91       	ld	r30, X+
     668:	fc 91       	ld	r31, X
     66a:	ee cf       	rjmp	.-36     	; 0x648 <_ZL16Active_eventLoopPv+0x20>

0000066c <_Z11Active_ctorP6ActivePFvS0_PK5EventE>:
     66c:	83 5b       	subi	r24, 0xB3	; 179
     66e:	9f 4f       	sbci	r25, 0xFF	; 255
     670:	fc 01       	movw	r30, r24
     672:	71 83       	std	Z+1, r23	; 0x01
     674:	60 83       	st	Z, r22
     676:	08 95       	ret

00000678 <_Z12Active_startP6ActivehPP5EventmPvmj>:
     678:	4f 92       	push	r4
     67a:	5f 92       	push	r5
     67c:	6f 92       	push	r6
     67e:	7f 92       	push	r7
     680:	8f 92       	push	r8
     682:	9f 92       	push	r9
     684:	af 92       	push	r10
     686:	bf 92       	push	r11
     688:	cf 92       	push	r12
     68a:	df 92       	push	r13
     68c:	ef 92       	push	r14
     68e:	ff 92       	push	r15
     690:	0f 93       	push	r16
     692:	1f 93       	push	r17
     694:	cf 93       	push	r28
     696:	df 93       	push	r29
     698:	cd b7       	in	r28, 0x3d	; 61
     69a:	de b7       	in	r29, 0x3e	; 62
     69c:	4c 01       	movw	r8, r24
     69e:	16 2f       	mov	r17, r22
     6a0:	80 2f       	mov	r24, r16
     6a2:	25 01       	movw	r4, r10
     6a4:	36 01       	movw	r6, r12
     6a6:	94 01       	movw	r18, r8
     6a8:	23 5d       	subi	r18, 0xD3	; 211
     6aa:	3f 4f       	sbci	r19, 0xFF	; 255
     6ac:	00 e0       	ldi	r16, 0x00	; 0
     6ae:	62 e0       	ldi	r22, 0x02	; 2
     6b0:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <xQueueGenericCreateStatic>
     6b4:	f4 01       	movw	r30, r8
     6b6:	94 a7       	std	Z+44, r25	; 0x2c
     6b8:	83 a7       	std	Z+43, r24	; 0x2b
     6ba:	64 01       	movw	r12, r8
     6bc:	f2 e0       	ldi	r31, 0x02	; 2
     6be:	cf 0e       	add	r12, r31
     6c0:	d1 1c       	adc	r13, r1
     6c2:	01 2f       	mov	r16, r17
     6c4:	94 01       	movw	r18, r8
     6c6:	a2 01       	movw	r20, r4
     6c8:	66 e1       	ldi	r22, 0x16	; 22
     6ca:	72 e0       	ldi	r23, 0x02	; 2
     6cc:	84 e1       	ldi	r24, 0x14	; 20
     6ce:	93 e0       	ldi	r25, 0x03	; 3
     6d0:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <xTaskCreateStatic>
     6d4:	f4 01       	movw	r30, r8
     6d6:	91 83       	std	Z+1, r25	; 0x01
     6d8:	80 83       	st	Z, r24
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	1f 91       	pop	r17
     6e0:	0f 91       	pop	r16
     6e2:	ff 90       	pop	r15
     6e4:	ef 90       	pop	r14
     6e6:	df 90       	pop	r13
     6e8:	cf 90       	pop	r12
     6ea:	bf 90       	pop	r11
     6ec:	af 90       	pop	r10
     6ee:	9f 90       	pop	r9
     6f0:	8f 90       	pop	r8
     6f2:	7f 90       	pop	r7
     6f4:	6f 90       	pop	r6
     6f6:	5f 90       	pop	r5
     6f8:	4f 90       	pop	r4
     6fa:	08 95       	ret

000006fc <_Z11Active_postP6ActivePK5Event>:
     6fc:	cf 93       	push	r28
     6fe:	df 93       	push	r29
     700:	1f 92       	push	r1
     702:	1f 92       	push	r1
     704:	cd b7       	in	r28, 0x3d	; 61
     706:	de b7       	in	r29, 0x3e	; 62
     708:	7a 83       	std	Y+2, r23	; 0x02
     70a:	69 83       	std	Y+1, r22	; 0x01
     70c:	20 e0       	ldi	r18, 0x00	; 0
     70e:	40 e0       	ldi	r20, 0x00	; 0
     710:	50 e0       	ldi	r21, 0x00	; 0
     712:	be 01       	movw	r22, r28
     714:	6f 5f       	subi	r22, 0xFF	; 255
     716:	7f 4f       	sbci	r23, 0xFF	; 255
     718:	fc 01       	movw	r30, r24
     71a:	83 a5       	ldd	r24, Z+43	; 0x2b
     71c:	94 a5       	ldd	r25, Z+44	; 0x2c
     71e:	0e 94 84 0c 	call	0x1908	; 0x1908 <xQueueGenericSend>
     722:	0f 90       	pop	r0
     724:	0f 90       	pop	r0
     726:	df 91       	pop	r29
     728:	cf 91       	pop	r28
     72a:	08 95       	ret

0000072c <_ZL18TimeEvent_callbackP10TimerDef_t>:
     72c:	06 97       	sbiw	r24, 0x06	; 6
     72e:	bc 01       	movw	r22, r24
     730:	fc 01       	movw	r30, r24
     732:	82 81       	ldd	r24, Z+2	; 0x02
     734:	93 81       	ldd	r25, Z+3	; 0x03
     736:	e2 cf       	rjmp	.-60     	; 0x6fc <_Z11Active_postP6ActivePK5Event>

00000738 <_Z18Active_postFromISRP6ActivePK5EventPa>:
     738:	cf 93       	push	r28
     73a:	df 93       	push	r29
     73c:	1f 92       	push	r1
     73e:	1f 92       	push	r1
     740:	cd b7       	in	r28, 0x3d	; 61
     742:	de b7       	in	r29, 0x3e	; 62
     744:	7a 83       	std	Y+2, r23	; 0x02
     746:	69 83       	std	Y+1, r22	; 0x01
     748:	20 e0       	ldi	r18, 0x00	; 0
     74a:	be 01       	movw	r22, r28
     74c:	6f 5f       	subi	r22, 0xFF	; 255
     74e:	7f 4f       	sbci	r23, 0xFF	; 255
     750:	fc 01       	movw	r30, r24
     752:	83 a5       	ldd	r24, Z+43	; 0x2b
     754:	94 a5       	ldd	r25, Z+44	; 0x2c
     756:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <xQueueGenericSendFromISR>
     75a:	0f 90       	pop	r0
     75c:	0f 90       	pop	r0
     75e:	df 91       	pop	r29
     760:	cf 91       	pop	r28
     762:	08 95       	ret

00000764 <_Z14TimeEvent_ctorP9TimeEventjP6Active>:
     764:	ef 92       	push	r14
     766:	ff 92       	push	r15
     768:	0f 93       	push	r16
     76a:	1f 93       	push	r17
     76c:	cf 93       	push	r28
     76e:	df 93       	push	r29
     770:	ec 01       	movw	r28, r24
     772:	79 83       	std	Y+1, r23	; 0x01
     774:	68 83       	st	Y, r22
     776:	5b 83       	std	Y+3, r21	; 0x03
     778:	4a 83       	std	Y+2, r20	; 0x02
     77a:	7c 01       	movw	r14, r24
     77c:	86 e0       	ldi	r24, 0x06	; 6
     77e:	e8 0e       	add	r14, r24
     780:	f1 1c       	adc	r15, r1
     782:	06 e9       	ldi	r16, 0x96	; 150
     784:	13 e0       	ldi	r17, 0x03	; 3
     786:	9e 01       	movw	r18, r28
     788:	49 8d       	ldd	r20, Y+25	; 0x19
     78a:	61 e0       	ldi	r22, 0x01	; 1
     78c:	70 e0       	ldi	r23, 0x00	; 0
     78e:	89 e1       	ldi	r24, 0x19	; 25
     790:	92 e0       	ldi	r25, 0x02	; 2
     792:	0e 94 de 14 	call	0x29bc	; 0x29bc <xTimerCreateStatic>
     796:	9d 83       	std	Y+5, r25	; 0x05
     798:	8c 83       	std	Y+4, r24	; 0x04
     79a:	df 91       	pop	r29
     79c:	cf 91       	pop	r28
     79e:	1f 91       	pop	r17
     7a0:	0f 91       	pop	r16
     7a2:	ff 90       	pop	r15
     7a4:	ef 90       	pop	r14
     7a6:	08 95       	ret

000007a8 <_Z18CanFrameEvent_ctorP13CanFrameEventjP6Active>:
     7a8:	fc 01       	movw	r30, r24
     7aa:	71 83       	std	Z+1, r23	; 0x01
     7ac:	60 83       	st	Z, r22
     7ae:	53 83       	std	Z+3, r21	; 0x03
     7b0:	42 83       	std	Z+2, r20	; 0x02
     7b2:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <_ZL5cfevt+0x1>
     7b6:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <_ZL5cfevt>
     7ba:	08 95       	ret

000007bc <_Z21CanFrameEvent_fromISRPa>:
     7bc:	cf 93       	push	r28
     7be:	df 93       	push	r29
     7c0:	ec 01       	movw	r28, r24
     7c2:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <_ZL5cfevt>
     7c6:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <_ZL5cfevt+0x1>
     7ca:	04 96       	adiw	r24, 0x04	; 4
     7cc:	da de       	rcall	.-588    	; 0x582 <_Z17BSP_get_can_frameP9can_frame>
     7ce:	01 97       	sbiw	r24, 0x01	; 1
     7d0:	59 f4       	brne	.+22     	; 0x7e8 <_Z21CanFrameEvent_fromISRPa+0x2c>
     7d2:	e0 91 44 02 	lds	r30, 0x0244	; 0x800244 <_ZL5cfevt>
     7d6:	f0 91 45 02 	lds	r31, 0x0245	; 0x800245 <_ZL5cfevt+0x1>
     7da:	ae 01       	movw	r20, r28
     7dc:	bf 01       	movw	r22, r30
     7de:	82 81       	ldd	r24, Z+2	; 0x02
     7e0:	93 81       	ldd	r25, Z+3	; 0x03
     7e2:	df 91       	pop	r29
     7e4:	cf 91       	pop	r28
     7e6:	a8 cf       	rjmp	.-176    	; 0x738 <_Z18Active_postFromISRP6ActivePK5EventPa>
     7e8:	df 91       	pop	r29
     7ea:	cf 91       	pop	r28
     7ec:	08 95       	ret

000007ee <_Z13TimeEvent_armP9TimeEventm>:
	}
}


/*..........................................................................*/
void TimeEvent_arm(TimeEvent * const me, uint32_t millisec) {
     7ee:	0f 93       	push	r16
     7f0:	1f 93       	push	r17
    TickType_t ticks;
    BaseType_t status;
    BaseType_t xHigherPriorityTaskWoken;

    ticks = (millisec / portTICK_PERIOD_MS);
     7f2:	24 e0       	ldi	r18, 0x04	; 4
     7f4:	76 95       	lsr	r23
     7f6:	67 95       	ror	r22
     7f8:	57 95       	ror	r21
     7fa:	47 95       	ror	r20
     7fc:	2a 95       	dec	r18
     7fe:	d1 f7       	brne	.-12     	; 0x7f4 <_Z13TimeEvent_armP9TimeEventm+0x6>
    if (ticks == 0U) {
     800:	41 15       	cp	r20, r1
     802:	51 05       	cpc	r21, r1
     804:	11 f4       	brne	.+4      	; 0x80a <_Z13TimeEvent_armP9TimeEventm+0x1c>
        ticks = 1U;
     806:	41 e0       	ldi	r20, 0x01	; 1
     808:	50 e0       	ldi	r21, 0x00	; 0
    }

    
    status = xTimerChangePeriod(me->timer, ticks, 0);
     80a:	00 e0       	ldi	r16, 0x00	; 0
     80c:	10 e0       	ldi	r17, 0x00	; 0
     80e:	20 e0       	ldi	r18, 0x00	; 0
     810:	30 e0       	ldi	r19, 0x00	; 0
     812:	64 e0       	ldi	r22, 0x04	; 4
     814:	fc 01       	movw	r30, r24
     816:	84 81       	ldd	r24, Z+4	; 0x04
     818:	95 81       	ldd	r25, Z+5	; 0x05
     81a:	0e 94 14 15 	call	0x2a28	; 0x2a28 <xTimerGenericCommand>
    configASSERT(status == pdPASS);
    
}
     81e:	1f 91       	pop	r17
     820:	0f 91       	pop	r16
     822:	08 95       	ret

00000824 <_Z16TimeEvent_disarmP9TimeEvent>:

/*..........................................................................*/
void TimeEvent_disarm(TimeEvent * const me) {
     824:	0f 93       	push	r16
     826:	1f 93       	push	r17
    BaseType_t xHigherPriorityTaskWoken;
    BaseType_t status;

   
    status = xTimerStop(me->timer, 0);
     828:	00 e0       	ldi	r16, 0x00	; 0
     82a:	10 e0       	ldi	r17, 0x00	; 0
     82c:	20 e0       	ldi	r18, 0x00	; 0
     82e:	30 e0       	ldi	r19, 0x00	; 0
     830:	40 e0       	ldi	r20, 0x00	; 0
     832:	50 e0       	ldi	r21, 0x00	; 0
     834:	63 e0       	ldi	r22, 0x03	; 3
     836:	fc 01       	movw	r30, r24
     838:	84 81       	ldd	r24, Z+4	; 0x04
     83a:	95 81       	ldd	r25, Z+5	; 0x05
     83c:	0e 94 14 15 	call	0x2a28	; 0x2a28 <xTimerGenericCommand>
    configASSERT(status == pdPASS);
    
}
     840:	1f 91       	pop	r17
     842:	0f 91       	pop	r16
     844:	08 95       	ret

00000846 <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event>:

/* Function Prototype ============================================================*/
void BlinkyButton_ctor(BlinkyButton * const me);


static void BlinkyButton_dispatch(BlinkyButton * const me, Event const * const e) {
     846:	0f 93       	push	r16
     848:	1f 93       	push	r17
     84a:	cf 93       	push	r28
     84c:	df 93       	push	r29
	switch (e->sig) {
     84e:	db 01       	movw	r26, r22
     850:	ed 91       	ld	r30, X+
     852:	fc 91       	ld	r31, X
     854:	e7 30       	cpi	r30, 0x07	; 7
     856:	f1 05       	cpc	r31, r1
     858:	08 f0       	brcs	.+2      	; 0x85c <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0x16>
     85a:	ad c0       	rjmp	.+346    	; 0x9b6 <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0x170>
     85c:	ec 01       	movw	r28, r24
     85e:	88 27       	eor	r24, r24
     860:	ee 58       	subi	r30, 0x8E	; 142
     862:	ff 4f       	sbci	r31, 0xFF	; 255
     864:	8f 4f       	sbci	r24, 0xFF	; 255
     866:	0c 94 69 17 	jmp	0x2ed2	; 0x2ed2 <__tablejump2__>
			break;
		}
		

	}
}
     86a:	df 91       	pop	r29
     86c:	cf 91       	pop	r28
     86e:	1f 91       	pop	r17
     870:	0f 91       	pop	r16


static void BlinkyButton_dispatch(BlinkyButton * const me, Event const * const e) {
	switch (e->sig) {
		case INIT_SIG:{
			BSP_led_green_on();
     872:	79 ce       	rjmp	.-782    	; 0x566 <_Z16BSP_led_green_onv>
			break;
		}
		
		case SWITCH_PRESSED_SIG:{
			me->isBuzzerEnabled = true;
     874:	c2 58       	subi	r28, 0x82	; 130
     876:	df 4f       	sbci	r29, 0xFF	; 255
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	88 83       	st	Y, r24
			break;
		}
		

	}
}
     87c:	df 91       	pop	r29
     87e:	cf 91       	pop	r28
     880:	1f 91       	pop	r17
			break;
		}
		
		case SWITCH_PRESSED_SIG:{
			me->isBuzzerEnabled = true;
			BSP_led_yellow_on();
     882:	0f 91       	pop	r16
     884:	6a ce       	rjmp	.-812    	; 0x55a <_Z17BSP_led_yellow_onv>
			break;
		}
		
		case SWITCH_RELEASED_SIG: {
			me->isBuzzerEnabled = false;
     886:	c2 58       	subi	r28, 0x82	; 130
     888:	df 4f       	sbci	r29, 0xFF	; 255
     88a:	18 82       	st	Y, r1
			break;
		}
		

	}
}
     88c:	df 91       	pop	r29
     88e:	cf 91       	pop	r28
     890:	1f 91       	pop	r17
			break;
		}
		
		case SWITCH_RELEASED_SIG: {
			me->isBuzzerEnabled = false;
			BSP_led_yellow_off();
     892:	0f 91       	pop	r16
     894:	65 ce       	rjmp	.-822    	; 0x560 <_Z18BSP_led_yellow_offv>
			break;
		}
		
		case CAN_FRAME_RECIVED_SIG: {
			
			if(me->cfe.frame.can_id == CAN_ALARM_ID && me->cfe.frame.can_dlc == CAN_ALARM_DLC){
     896:	fe 01       	movw	r30, r28
     898:	e3 59       	subi	r30, 0x93	; 147
     89a:	ff 4f       	sbci	r31, 0xFF	; 255
     89c:	80 81       	ld	r24, Z
     89e:	91 81       	ldd	r25, Z+1	; 0x01
     8a0:	a2 81       	ldd	r26, Z+2	; 0x02
     8a2:	b3 81       	ldd	r27, Z+3	; 0x03
     8a4:	41 97       	sbiw	r24, 0x11	; 17
     8a6:	a1 05       	cpc	r26, r1
     8a8:	b1 05       	cpc	r27, r1
     8aa:	09 f0       	breq	.+2      	; 0x8ae <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0x68>
     8ac:	84 c0       	rjmp	.+264    	; 0x9b6 <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0x170>
     8ae:	34 96       	adiw	r30, 0x04	; 4
     8b0:	80 81       	ld	r24, Z
     8b2:	81 30       	cpi	r24, 0x01	; 1
				BSP_led_green_off();	
     8b4:	09 f0       	breq	.+2      	; 0x8b8 <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0x72>
     8b6:	7f c0       	rjmp	.+254    	; 0x9b6 <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0x170>
				BSP_led_red_on();					
     8b8:	59 de       	rcall	.-846    	; 0x56c <_Z17BSP_led_green_offv>
     8ba:	49 de       	rcall	.-878    	; 0x54e <_Z14BSP_led_red_onv>
				me->counter = 0;
     8bc:	fe 01       	movw	r30, r28
     8be:	e1 58       	subi	r30, 0x81	; 129
     8c0:	ff 4f       	sbci	r31, 0xFF	; 255
     8c2:	11 82       	std	Z+1, r1	; 0x01
     8c4:	10 82       	st	Z, r1
				me->isBuzzerOn = false;
     8c6:	32 97       	sbiw	r30, 0x02	; 2
     8c8:	10 82       	st	Z, r1
				
				if(me->cfe.frame.data[0] == CAN_ALARM_MESSAGE_FAST){
     8ca:	38 97       	sbiw	r30, 0x08	; 8
     8cc:	80 81       	ld	r24, Z
     8ce:	81 30       	cpi	r24, 0x01	; 1
     8d0:	81 f4       	brne	.+32     	; 0x8f2 <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0xac>
					me->buzzer_on_time_ms = BUZZER_ON_TIME_FAST_MS;
     8d2:	3c 96       	adiw	r30, 0x0c	; 12
     8d4:	8a ef       	ldi	r24, 0xFA	; 250
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	91 83       	std	Z+1, r25	; 0x01
     8da:	80 83       	st	Z, r24
					me->buzzer_off_time_ms = BUZZER_OFF_TIME_FAST_MS;
     8dc:	32 96       	adiw	r30, 0x02	; 2
     8de:	91 83       	std	Z+1, r25	; 0x01
     8e0:	80 83       	st	Z, r24
					me->number_of_buzzer_toggle = NUMBER_OF_BUZZER_TOGGLE_FAST;	
     8e2:	32 96       	adiw	r30, 0x02	; 2
     8e4:	8c e0       	ldi	r24, 0x0C	; 12
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	91 83       	std	Z+1, r25	; 0x01
     8ea:	80 83       	st	Z, r24
					static Event const initialBuzzerEvt = {INTIAL_BUZZER_SIG};
					Active_post(&me->super, &initialBuzzerEvt);
     8ec:	64 e2       	ldi	r22, 0x24	; 36
     8ee:	72 e0       	ldi	r23, 0x02	; 2
     8f0:	15 c0       	rjmp	.+42     	; 0x91c <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0xd6>
				}
				else if(me->cfe.frame.data[0] == CAN_ALARM_MESSAGE_SLOW){
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	c9 f4       	brne	.+50     	; 0x928 <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0xe2>
					me->buzzer_on_time_ms = BUZZER_ON_TIME_SLOW_MS;
     8f6:	fe 01       	movw	r30, r28
     8f8:	ef 57       	subi	r30, 0x7F	; 127
     8fa:	ff 4f       	sbci	r31, 0xFF	; 255
     8fc:	84 ef       	ldi	r24, 0xF4	; 244
     8fe:	91 e0       	ldi	r25, 0x01	; 1
     900:	91 83       	std	Z+1, r25	; 0x01
     902:	80 83       	st	Z, r24
					me->buzzer_off_time_ms = BUZZER_OFF_TIME_SLOW_MS;
     904:	32 96       	adiw	r30, 0x02	; 2
     906:	8c ed       	ldi	r24, 0xDC	; 220
     908:	95 e0       	ldi	r25, 0x05	; 5
     90a:	91 83       	std	Z+1, r25	; 0x01
     90c:	80 83       	st	Z, r24
					me->number_of_buzzer_toggle = NUMBER_OF_BUZZER_TOGGLE_SLOW;
     90e:	32 96       	adiw	r30, 0x02	; 2
     910:	83 e0       	ldi	r24, 0x03	; 3
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	91 83       	std	Z+1, r25	; 0x01
     916:	80 83       	st	Z, r24
					static Event const initialBuzzerEvt = {INTIAL_BUZZER_SIG};
					Active_post(&me->super, &initialBuzzerEvt);
     918:	62 e2       	ldi	r22, 0x22	; 34
     91a:	72 e0       	ldi	r23, 0x02	; 2
			break;
		}
		

	}
}
     91c:	ce 01       	movw	r24, r28
     91e:	df 91       	pop	r29
     920:	cf 91       	pop	r28
     922:	1f 91       	pop	r17
				else if(me->cfe.frame.data[0] == CAN_ALARM_MESSAGE_SLOW){
					me->buzzer_on_time_ms = BUZZER_ON_TIME_SLOW_MS;
					me->buzzer_off_time_ms = BUZZER_OFF_TIME_SLOW_MS;
					me->number_of_buzzer_toggle = NUMBER_OF_BUZZER_TOGGLE_SLOW;
					static Event const initialBuzzerEvt = {INTIAL_BUZZER_SIG};
					Active_post(&me->super, &initialBuzzerEvt);
     924:	0f 91       	pop	r16
     926:	ea ce       	rjmp	.-556    	; 0x6fc <_Z11Active_postP6ActivePK5Event>
				}
				else if(me->cfe.frame.data[0] == CAN_ALARM_MESSAGE_STOP){
     928:	83 30       	cpi	r24, 0x03	; 3
     92a:	09 f0       	breq	.+2      	; 0x92e <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0xe8>
     92c:	44 c0       	rjmp	.+136    	; 0x9b6 <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0x170>
					static Event const stopBuzzerEvt = {STOP_BUZZER_SIG};
					Active_post(&me->super, &stopBuzzerEvt);
     92e:	60 e2       	ldi	r22, 0x20	; 32
     930:	72 e0       	ldi	r23, 0x02	; 2
     932:	f4 cf       	rjmp	.-24     	; 0x91c <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0xd6>
		}
		
		case INTIAL_BUZZER_SIG:
		case TIMEOUT_SIG: {

			if (me->isBuzzerOn == false) { /*Buzzer not on */
     934:	8e 01       	movw	r16, r28
     936:	03 58       	subi	r16, 0x83	; 131
     938:	1f 4f       	sbci	r17, 0xFF	; 255
     93a:	f8 01       	movw	r30, r16
     93c:	80 81       	ld	r24, Z
     93e:	81 11       	cpse	r24, r1
     940:	1c c0       	rjmp	.+56     	; 0x97a <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0x134>
				
				// Break Condition
				(me->counter)++;
     942:	32 96       	adiw	r30, 0x02	; 2
     944:	80 81       	ld	r24, Z
     946:	91 81       	ldd	r25, Z+1	; 0x01
     948:	01 96       	adiw	r24, 0x01	; 1
     94a:	91 83       	std	Z+1, r25	; 0x01
     94c:	80 83       	st	Z, r24
				if(me->counter > me->number_of_buzzer_toggle){
     94e:	36 96       	adiw	r30, 0x06	; 6
     950:	20 81       	ld	r18, Z
     952:	31 81       	ldd	r19, Z+1	; 0x01
     954:	28 17       	cp	r18, r24
     956:	39 07       	cpc	r19, r25
     958:	1c f4       	brge	.+6      	; 0x960 <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0x11a>
					static Event const stopBuzzerEvt = {STOP_BUZZER_SIG};
					Active_post(&me->super, &stopBuzzerEvt);
     95a:	6e e1       	ldi	r22, 0x1E	; 30
     95c:	72 e0       	ldi	r23, 0x02	; 2
				}
				
				else{
					if(me->isBuzzerEnabled == true){
     95e:	de cf       	rjmp	.-68     	; 0x91c <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0xd6>
     960:	fe 01       	movw	r30, r28
     962:	e2 58       	subi	r30, 0x82	; 130
     964:	ff 4f       	sbci	r31, 0xFF	; 255
     966:	80 81       	ld	r24, Z
						BSP_buzzer_on();
     968:	81 11       	cpse	r24, r1
     96a:	03 de       	rcall	.-1018   	; 0x572 <_Z13BSP_buzzer_onv>
					}
					me->isBuzzerOn = true;
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	d8 01       	movw	r26, r16
					TimeEvent_arm(&me->te, me->buzzer_on_time_ms);
     970:	8c 93       	st	X, r24
     972:	fe 01       	movw	r30, r28
     974:	ef 57       	subi	r30, 0x7F	; 127
     976:	ff 4f       	sbci	r31, 0xFF	; 255
				}
			}
			else {  /* buzzer is on */
				BSP_buzzer_off();
     978:	06 c0       	rjmp	.+12     	; 0x986 <_ZL21BlinkyButton_dispatchP12BlinkyButtonPK5Event+0x140>
     97a:	fe dd       	rcall	.-1028   	; 0x578 <_Z14BSP_buzzer_offv>
				me->isBuzzerOn = false;
     97c:	f8 01       	movw	r30, r16
     97e:	10 82       	st	Z, r1
				TimeEvent_arm(&me->te, me->buzzer_off_time_ms);
     980:	fe 01       	movw	r30, r28
     982:	ed 57       	subi	r30, 0x7D	; 125
     984:	ff 4f       	sbci	r31, 0xFF	; 255
     986:	40 81       	ld	r20, Z
     988:	51 81       	ldd	r21, Z+1	; 0x01
     98a:	05 2e       	mov	r0, r21
     98c:	00 0c       	add	r0, r0
     98e:	66 0b       	sbc	r22, r22
     990:	77 0b       	sbc	r23, r23
     992:	ce 01       	movw	r24, r28
     994:	81 5b       	subi	r24, 0xB1	; 177
			break;
		}
		

	}
}
     996:	9f 4f       	sbci	r25, 0xFF	; 255
     998:	df 91       	pop	r29
				}
			}
			else {  /* buzzer is on */
				BSP_buzzer_off();
				me->isBuzzerOn = false;
				TimeEvent_arm(&me->te, me->buzzer_off_time_ms);
     99a:	cf 91       	pop	r28
     99c:	1f 91       	pop	r17
			
			break;
		}
		
		case STOP_BUZZER_SIG:{
			TimeEvent_disarm(&me->te);
     99e:	0f 91       	pop	r16
     9a0:	26 cf       	rjmp	.-436    	; 0x7ee <_Z13TimeEvent_armP9TimeEventm>
     9a2:	ce 01       	movw	r24, r28
     9a4:	81 5b       	subi	r24, 0xB1	; 177
     9a6:	9f 4f       	sbci	r25, 0xFF	; 255
			BSP_led_green_on();
     9a8:	3d df       	rcall	.-390    	; 0x824 <_Z16TimeEvent_disarmP9TimeEvent>
     9aa:	dd dd       	rcall	.-1094   	; 0x566 <_Z16BSP_led_green_onv>
			BSP_led_red_off();
     9ac:	d3 dd       	rcall	.-1114   	; 0x554 <_Z15BSP_led_red_offv>
     9ae:	e4 dd       	rcall	.-1080   	; 0x578 <_Z14BSP_buzzer_offv>
			BSP_buzzer_off();
     9b0:	c3 58       	subi	r28, 0x83	; 131
     9b2:	df 4f       	sbci	r29, 0xFF	; 255
			me->isBuzzerOn = false;
     9b4:	18 82       	st	Y, r1
     9b6:	df 91       	pop	r29
     9b8:	cf 91       	pop	r28
			break;
		}
		

	}
}
     9ba:	1f 91       	pop	r17
     9bc:	0f 91       	pop	r16
     9be:	08 95       	ret

000009c0 <_Z17BlinkyButton_ctorP12BlinkyButton>:
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
void BlinkyButton_ctor(BlinkyButton * const me) {
     9c4:	ec 01       	movw	r28, r24
	Active_ctor(&me->super, (DispatchHandler)&BlinkyButton_dispatch);
     9c6:	63 e2       	ldi	r22, 0x23	; 35
     9c8:	74 e0       	ldi	r23, 0x04	; 4
     9ca:	50 de       	rcall	.-864    	; 0x66c <_Z11Active_ctorP6ActivePFvS0_PK5EventE>
	me->te.type = TYPE_ONE_SHOT;
     9cc:	fe 01       	movw	r30, r28
     9ce:	e8 59       	subi	r30, 0x98	; 152
     9d0:	ff 4f       	sbci	r31, 0xFF	; 255
     9d2:	10 82       	st	Z, r1
	TimeEvent_ctor(&me->te, TIMEOUT_SIG, &me->super);
     9d4:	ae 01       	movw	r20, r28
     9d6:	61 e0       	ldi	r22, 0x01	; 1
     9d8:	70 e0       	ldi	r23, 0x00	; 0
     9da:	ce 01       	movw	r24, r28
     9dc:	81 5b       	subi	r24, 0xB1	; 177
     9de:	9f 4f       	sbci	r25, 0xFF	; 255
     9e0:	c1 de       	rcall	.-638    	; 0x764 <_Z14TimeEvent_ctorP9TimeEventjP6Active>
	me->isBuzzerOn = false;
     9e2:	fe 01       	movw	r30, r28
     9e4:	e3 58       	subi	r30, 0x83	; 131
     9e6:	ff 4f       	sbci	r31, 0xFF	; 255
     9e8:	10 82       	st	Z, r1
	me->isBuzzerEnabled = false;
     9ea:	31 96       	adiw	r30, 0x01	; 1
     9ec:	10 82       	st	Z, r1
	me->counter = 0;
     9ee:	31 96       	adiw	r30, 0x01	; 1
     9f0:	11 82       	std	Z+1, r1	; 0x01
     9f2:	10 82       	st	Z, r1
	CanFrameEvent_ctor(&me->cfe, CAN_FRAME_RECIVED_SIG, &me->super);
     9f4:	ae 01       	movw	r20, r28
     9f6:	64 e0       	ldi	r22, 0x04	; 4
     9f8:	70 e0       	ldi	r23, 0x00	; 0
     9fa:	ce 01       	movw	r24, r28
     9fc:	87 59       	subi	r24, 0x97	; 151
     9fe:	9f 4f       	sbci	r25, 0xFF	; 255
}
     a00:	df 91       	pop	r29
	me->te.type = TYPE_ONE_SHOT;
	TimeEvent_ctor(&me->te, TIMEOUT_SIG, &me->super);
	me->isBuzzerOn = false;
	me->isBuzzerEnabled = false;
	me->counter = 0;
	CanFrameEvent_ctor(&me->cfe, CAN_FRAME_RECIVED_SIG, &me->super);
     a02:	cf 91       	pop	r28
     a04:	d1 ce       	rjmp	.-606    	; 0x7a8 <_Z18CanFrameEvent_ctorP13CanFrameEventjP6Active>

00000a06 <setup>:
static StackType_t blinkyButton_stack[configMINIMAL_STACK_SIZE]; /* task stack */
static Event *blinkyButton_queue[10];
static BlinkyButton blinkyButton;
Active *AO_blinkyButton = &blinkyButton.super;

void setup() {
     a06:	8f 92       	push	r8
     a08:	9f 92       	push	r9
     a0a:	af 92       	push	r10
     a0c:	bf 92       	push	r11
     a0e:	cf 92       	push	r12
     a10:	df 92       	push	r13
     a12:	ef 92       	push	r14
     a14:	ff 92       	push	r15
     a16:	0f 93       	push	r16
     a18:	1f 93       	push	r17
	BSP_init();
     a1a:	7f dd       	rcall	.-1282   	; 0x51a <_Z8BSP_initv>
	
	   /* create and start the BlinkyButton AO */
	   BlinkyButton_ctor(&blinkyButton);
     a1c:	86 e4       	ldi	r24, 0x46	; 70
     a1e:	92 e0       	ldi	r25, 0x02	; 2
     a20:	cf df       	rcall	.-98     	; 0x9c0 <_Z17BlinkyButton_ctorP12BlinkyButton>
					1U,
					blinkyButton_queue,
					sizeof(blinkyButton_queue)/sizeof(blinkyButton_queue[0]),
					blinkyButton_stack,
					sizeof(blinkyButton_stack),
					0U);
     a22:	81 2c       	mov	r8, r1
     a24:	91 2c       	mov	r9, r1
     a26:	80 ec       	ldi	r24, 0xC0	; 192
     a28:	a8 2e       	mov	r10, r24
     a2a:	b1 2c       	mov	r11, r1
     a2c:	c1 2c       	mov	r12, r1
     a2e:	d1 2c       	mov	r13, r1
     a30:	91 ee       	ldi	r25, 0xE1	; 225
     a32:	e9 2e       	mov	r14, r25
     a34:	92 e0       	ldi	r25, 0x02	; 2
     a36:	f9 2e       	mov	r15, r25
     a38:	0a e0       	ldi	r16, 0x0A	; 10
     a3a:	10 e0       	ldi	r17, 0x00	; 0
     a3c:	20 e0       	ldi	r18, 0x00	; 0
     a3e:	30 e0       	ldi	r19, 0x00	; 0
     a40:	4d ec       	ldi	r20, 0xCD	; 205
     a42:	52 e0       	ldi	r21, 0x02	; 2
     a44:	61 e0       	ldi	r22, 0x01	; 1
     a46:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <AO_blinkyButton>
     a4a:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <AO_blinkyButton+0x1>
     a4e:	14 de       	rcall	.-984    	; 0x678 <_Z12Active_startP6ActivehPP5EventmPvmj>
	   
	vTaskStartScheduler();
}
     a50:	1f 91       	pop	r17
     a52:	0f 91       	pop	r16
     a54:	ff 90       	pop	r15
     a56:	ef 90       	pop	r14
     a58:	df 90       	pop	r13
     a5a:	cf 90       	pop	r12
     a5c:	bf 90       	pop	r11
     a5e:	af 90       	pop	r10
     a60:	9f 90       	pop	r9
     a62:	8f 90       	pop	r8
					sizeof(blinkyButton_queue)/sizeof(blinkyButton_queue[0]),
					blinkyButton_stack,
					sizeof(blinkyButton_stack),
					0U);
	   
	vTaskStartScheduler();
     a64:	0c 94 b6 0f 	jmp	0x1f6c	; 0x1f6c <vTaskStartScheduler>

00000a68 <loop>:
}

void loop() {
     a68:	08 95       	ret

00000a6a <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     a6a:	c0 d0       	rcall	.+384    	; 0xbec <init>

	initVariant();
     a6c:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     a70:	ca df       	rcall	.-108    	; 0xa06 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     a72:	c0 e0       	ldi	r28, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
     a74:	d0 e0       	ldi	r29, 0x00	; 0
     a76:	f8 df       	rcall	.-16     	; 0xa68 <loop>
		if (serialEventRun) serialEventRun();
     a78:	20 97       	sbiw	r28, 0x00	; 0
     a7a:	e9 f3       	breq	.-6      	; 0xa76 <main+0xc>
     a7c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     a80:	fa cf       	rjmp	.-12     	; 0xa76 <main+0xc>

00000a82 <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     a82:	1f 92       	push	r1
     a84:	0f 92       	push	r0
     a86:	0f b6       	in	r0, 0x3f	; 63
     a88:	0f 92       	push	r0
     a8a:	11 24       	eor	r1, r1
     a8c:	2f 93       	push	r18
     a8e:	3f 93       	push	r19
     a90:	8f 93       	push	r24
     a92:	9f 93       	push	r25
     a94:	af 93       	push	r26
     a96:	bf 93       	push	r27
     a98:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <timer0_millis>
     a9c:	90 91 a3 03 	lds	r25, 0x03A3	; 0x8003a3 <timer0_millis+0x1>
     aa0:	a0 91 a4 03 	lds	r26, 0x03A4	; 0x8003a4 <timer0_millis+0x2>
     aa4:	b0 91 a5 03 	lds	r27, 0x03A5	; 0x8003a5 <timer0_millis+0x3>
     aa8:	30 91 a1 03 	lds	r19, 0x03A1	; 0x8003a1 <timer0_fract>
     aac:	23 e0       	ldi	r18, 0x03	; 3
     aae:	23 0f       	add	r18, r19
     ab0:	2d 37       	cpi	r18, 0x7D	; 125
     ab2:	20 f4       	brcc	.+8      	; 0xabc <__vector_23+0x3a>
     ab4:	01 96       	adiw	r24, 0x01	; 1
     ab6:	a1 1d       	adc	r26, r1
     ab8:	b1 1d       	adc	r27, r1
     aba:	05 c0       	rjmp	.+10     	; 0xac6 <__vector_23+0x44>
     abc:	26 e8       	ldi	r18, 0x86	; 134
     abe:	23 0f       	add	r18, r19
     ac0:	02 96       	adiw	r24, 0x02	; 2
     ac2:	a1 1d       	adc	r26, r1
     ac4:	b1 1d       	adc	r27, r1
     ac6:	20 93 a1 03 	sts	0x03A1, r18	; 0x8003a1 <timer0_fract>
     aca:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <timer0_millis>
     ace:	90 93 a3 03 	sts	0x03A3, r25	; 0x8003a3 <timer0_millis+0x1>
     ad2:	a0 93 a4 03 	sts	0x03A4, r26	; 0x8003a4 <timer0_millis+0x2>
     ad6:	b0 93 a5 03 	sts	0x03A5, r27	; 0x8003a5 <timer0_millis+0x3>
     ada:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <timer0_overflow_count>
     ade:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <timer0_overflow_count+0x1>
     ae2:	a0 91 a8 03 	lds	r26, 0x03A8	; 0x8003a8 <timer0_overflow_count+0x2>
     ae6:	b0 91 a9 03 	lds	r27, 0x03A9	; 0x8003a9 <timer0_overflow_count+0x3>
     aea:	01 96       	adiw	r24, 0x01	; 1
     aec:	a1 1d       	adc	r26, r1
     aee:	b1 1d       	adc	r27, r1
     af0:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <timer0_overflow_count>
     af4:	90 93 a7 03 	sts	0x03A7, r25	; 0x8003a7 <timer0_overflow_count+0x1>
     af8:	a0 93 a8 03 	sts	0x03A8, r26	; 0x8003a8 <timer0_overflow_count+0x2>
     afc:	b0 93 a9 03 	sts	0x03A9, r27	; 0x8003a9 <timer0_overflow_count+0x3>
     b00:	bf 91       	pop	r27
     b02:	af 91       	pop	r26
     b04:	9f 91       	pop	r25
     b06:	8f 91       	pop	r24
     b08:	3f 91       	pop	r19
     b0a:	2f 91       	pop	r18
     b0c:	0f 90       	pop	r0
     b0e:	0f be       	out	0x3f, r0	; 63
     b10:	0f 90       	pop	r0
     b12:	1f 90       	pop	r1
     b14:	18 95       	reti

00000b16 <millis>:
     b16:	2f b7       	in	r18, 0x3f	; 63
     b18:	f8 94       	cli
     b1a:	60 91 a2 03 	lds	r22, 0x03A2	; 0x8003a2 <timer0_millis>
     b1e:	70 91 a3 03 	lds	r23, 0x03A3	; 0x8003a3 <timer0_millis+0x1>
     b22:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <timer0_millis+0x2>
     b26:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <timer0_millis+0x3>
     b2a:	2f bf       	out	0x3f, r18	; 63
     b2c:	08 95       	ret

00000b2e <micros>:
     b2e:	3f b7       	in	r19, 0x3f	; 63
     b30:	f8 94       	cli
     b32:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <timer0_overflow_count>
     b36:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <timer0_overflow_count+0x1>
     b3a:	a0 91 a8 03 	lds	r26, 0x03A8	; 0x8003a8 <timer0_overflow_count+0x2>
     b3e:	b0 91 a9 03 	lds	r27, 0x03A9	; 0x8003a9 <timer0_overflow_count+0x3>
     b42:	26 b5       	in	r18, 0x26	; 38
     b44:	a8 9b       	sbis	0x15, 0	; 21
     b46:	05 c0       	rjmp	.+10     	; 0xb52 <micros+0x24>
     b48:	2f 3f       	cpi	r18, 0xFF	; 255
     b4a:	19 f0       	breq	.+6      	; 0xb52 <micros+0x24>
     b4c:	01 96       	adiw	r24, 0x01	; 1
     b4e:	a1 1d       	adc	r26, r1
     b50:	b1 1d       	adc	r27, r1
     b52:	3f bf       	out	0x3f, r19	; 63
     b54:	ba 2f       	mov	r27, r26
     b56:	a9 2f       	mov	r26, r25
     b58:	98 2f       	mov	r25, r24
     b5a:	88 27       	eor	r24, r24
     b5c:	82 0f       	add	r24, r18
     b5e:	91 1d       	adc	r25, r1
     b60:	a1 1d       	adc	r26, r1
     b62:	b1 1d       	adc	r27, r1
     b64:	bc 01       	movw	r22, r24
     b66:	cd 01       	movw	r24, r26
     b68:	42 e0       	ldi	r20, 0x02	; 2
     b6a:	66 0f       	add	r22, r22
     b6c:	77 1f       	adc	r23, r23
     b6e:	88 1f       	adc	r24, r24
     b70:	99 1f       	adc	r25, r25
     b72:	4a 95       	dec	r20
     b74:	d1 f7       	brne	.-12     	; 0xb6a <micros+0x3c>
     b76:	08 95       	ret

00000b78 <delay>:
     b78:	8f 92       	push	r8
     b7a:	9f 92       	push	r9
     b7c:	af 92       	push	r10
     b7e:	bf 92       	push	r11
     b80:	cf 92       	push	r12
     b82:	df 92       	push	r13
     b84:	ef 92       	push	r14
     b86:	ff 92       	push	r15
     b88:	6b 01       	movw	r12, r22
     b8a:	7c 01       	movw	r14, r24
     b8c:	d0 df       	rcall	.-96     	; 0xb2e <micros>
     b8e:	4b 01       	movw	r8, r22
     b90:	5c 01       	movw	r10, r24
     b92:	c1 14       	cp	r12, r1
     b94:	d1 04       	cpc	r13, r1
     b96:	e1 04       	cpc	r14, r1
     b98:	f1 04       	cpc	r15, r1
     b9a:	f9 f0       	breq	.+62     	; 0xbda <delay+0x62>
     b9c:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <yield>
     ba0:	c6 df       	rcall	.-116    	; 0xb2e <micros>
     ba2:	dc 01       	movw	r26, r24
     ba4:	cb 01       	movw	r24, r22
     ba6:	88 19       	sub	r24, r8
     ba8:	99 09       	sbc	r25, r9
     baa:	aa 09       	sbc	r26, r10
     bac:	bb 09       	sbc	r27, r11
     bae:	88 3e       	cpi	r24, 0xE8	; 232
     bb0:	93 40       	sbci	r25, 0x03	; 3
     bb2:	a1 05       	cpc	r26, r1
     bb4:	b1 05       	cpc	r27, r1
     bb6:	68 f3       	brcs	.-38     	; 0xb92 <delay+0x1a>
     bb8:	21 e0       	ldi	r18, 0x01	; 1
     bba:	c2 1a       	sub	r12, r18
     bbc:	d1 08       	sbc	r13, r1
     bbe:	e1 08       	sbc	r14, r1
     bc0:	f1 08       	sbc	r15, r1
     bc2:	88 ee       	ldi	r24, 0xE8	; 232
     bc4:	88 0e       	add	r8, r24
     bc6:	83 e0       	ldi	r24, 0x03	; 3
     bc8:	98 1e       	adc	r9, r24
     bca:	a1 1c       	adc	r10, r1
     bcc:	b1 1c       	adc	r11, r1
     bce:	c1 14       	cp	r12, r1
     bd0:	d1 04       	cpc	r13, r1
     bd2:	e1 04       	cpc	r14, r1
     bd4:	f1 04       	cpc	r15, r1
     bd6:	21 f7       	brne	.-56     	; 0xba0 <delay+0x28>
     bd8:	dc cf       	rjmp	.-72     	; 0xb92 <delay+0x1a>
     bda:	ff 90       	pop	r15
     bdc:	ef 90       	pop	r14
     bde:	df 90       	pop	r13
     be0:	cf 90       	pop	r12
     be2:	bf 90       	pop	r11
     be4:	af 90       	pop	r10
     be6:	9f 90       	pop	r9
     be8:	8f 90       	pop	r8
     bea:	08 95       	ret

00000bec <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     bec:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     bee:	84 b5       	in	r24, 0x24	; 36
     bf0:	82 60       	ori	r24, 0x02	; 2
     bf2:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     bf4:	84 b5       	in	r24, 0x24	; 36
     bf6:	81 60       	ori	r24, 0x01	; 1
     bf8:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     bfa:	85 b5       	in	r24, 0x25	; 37
     bfc:	82 60       	ori	r24, 0x02	; 2
     bfe:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     c00:	85 b5       	in	r24, 0x25	; 37
     c02:	81 60       	ori	r24, 0x01	; 1
     c04:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     c06:	ee e6       	ldi	r30, 0x6E	; 110
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	80 81       	ld	r24, Z
     c0c:	81 60       	ori	r24, 0x01	; 1
     c0e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     c10:	e1 e8       	ldi	r30, 0x81	; 129
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     c16:	80 81       	ld	r24, Z
     c18:	82 60       	ori	r24, 0x02	; 2
     c1a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     c1c:	80 81       	ld	r24, Z
     c1e:	81 60       	ori	r24, 0x01	; 1
     c20:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     c22:	e0 e8       	ldi	r30, 0x80	; 128
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	81 60       	ori	r24, 0x01	; 1
     c2a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     c2c:	e1 eb       	ldi	r30, 0xB1	; 177
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	80 81       	ld	r24, Z
     c32:	84 60       	ori	r24, 0x04	; 4
     c34:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     c36:	e0 eb       	ldi	r30, 0xB0	; 176
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	80 81       	ld	r24, Z
     c3c:	81 60       	ori	r24, 0x01	; 1
     c3e:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
     c40:	e1 e9       	ldi	r30, 0x91	; 145
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	80 81       	ld	r24, Z
     c46:	82 60       	ori	r24, 0x02	; 2
     c48:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
     c4a:	80 81       	ld	r24, Z
     c4c:	81 60       	ori	r24, 0x01	; 1
     c4e:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
     c50:	e0 e9       	ldi	r30, 0x90	; 144
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	80 81       	ld	r24, Z
     c56:	81 60       	ori	r24, 0x01	; 1
     c58:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
     c5a:	e1 ea       	ldi	r30, 0xA1	; 161
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	80 81       	ld	r24, Z
     c60:	82 60       	ori	r24, 0x02	; 2
     c62:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
     c64:	80 81       	ld	r24, Z
     c66:	81 60       	ori	r24, 0x01	; 1
     c68:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
     c6a:	e0 ea       	ldi	r30, 0xA0	; 160
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	80 81       	ld	r24, Z
     c70:	81 60       	ori	r24, 0x01	; 1
     c72:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
     c74:	e1 e2       	ldi	r30, 0x21	; 33
     c76:	f1 e0       	ldi	r31, 0x01	; 1
     c78:	80 81       	ld	r24, Z
     c7a:	82 60       	ori	r24, 0x02	; 2
     c7c:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
     c7e:	80 81       	ld	r24, Z
     c80:	81 60       	ori	r24, 0x01	; 1
     c82:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
     c84:	e0 e2       	ldi	r30, 0x20	; 32
     c86:	f1 e0       	ldi	r31, 0x01	; 1
     c88:	80 81       	ld	r24, Z
     c8a:	81 60       	ori	r24, 0x01	; 1
     c8c:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     c8e:	ea e7       	ldi	r30, 0x7A	; 122
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	80 81       	ld	r24, Z
     c94:	84 60       	ori	r24, 0x04	; 4
     c96:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     c98:	80 81       	ld	r24, Z
     c9a:	82 60       	ori	r24, 0x02	; 2
     c9c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     c9e:	80 81       	ld	r24, Z
     ca0:	81 60       	ori	r24, 0x01	; 1
     ca2:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     ca4:	80 81       	ld	r24, Z
     ca6:	80 68       	ori	r24, 0x80	; 128
     ca8:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     caa:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
     cae:	08 95       	ret

00000cb0 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	fc 01       	movw	r30, r24
     cb4:	31 97       	sbiw	r30, 0x01	; 1
     cb6:	e2 31       	cpi	r30, 0x12	; 18
     cb8:	f1 05       	cpc	r31, r1
     cba:	08 f0       	brcs	.+2      	; 0xcbe <turnOffPWM+0xe>
     cbc:	4e c0       	rjmp	.+156    	; 0xd5a <turnOffPWM+0xaa>
     cbe:	88 27       	eor	r24, r24
     cc0:	e7 58       	subi	r30, 0x87	; 135
     cc2:	ff 4f       	sbci	r31, 0xFF	; 255
     cc4:	8f 4f       	sbci	r24, 0xFF	; 255
     cc6:	0c 94 69 17 	jmp	0x2ed2	; 0x2ed2 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     cca:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
     cce:	8f 77       	andi	r24, 0x7F	; 127
     cd0:	03 c0       	rjmp	.+6      	; 0xcd8 <turnOffPWM+0x28>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     cd2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
     cd6:	8f 7d       	andi	r24, 0xDF	; 223
     cd8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
     cdc:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
     cde:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
     ce2:	87 7f       	andi	r24, 0xF7	; 247
     ce4:	f9 cf       	rjmp	.-14     	; 0xcd8 <turnOffPWM+0x28>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     ce6:	84 b5       	in	r24, 0x24	; 36
     ce8:	8f 77       	andi	r24, 0x7F	; 127
     cea:	02 c0       	rjmp	.+4      	; 0xcf0 <turnOffPWM+0x40>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     cec:	84 b5       	in	r24, 0x24	; 36
     cee:	8f 7d       	andi	r24, 0xDF	; 223
     cf0:	84 bd       	out	0x24, r24	; 36
     cf2:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     cf4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
     cf8:	8f 77       	andi	r24, 0x7F	; 127
     cfa:	03 c0       	rjmp	.+6      	; 0xd02 <turnOffPWM+0x52>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     cfc:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
     d00:	8f 7d       	andi	r24, 0xDF	; 223
     d02:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
     d06:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
     d08:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
     d0c:	8f 77       	andi	r24, 0x7F	; 127
     d0e:	07 c0       	rjmp	.+14     	; 0xd1e <turnOffPWM+0x6e>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
     d10:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
     d14:	8f 7d       	andi	r24, 0xDF	; 223
     d16:	03 c0       	rjmp	.+6      	; 0xd1e <turnOffPWM+0x6e>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
     d18:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
     d1c:	87 7f       	andi	r24, 0xF7	; 247
     d1e:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
     d22:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
     d24:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
     d28:	8f 77       	andi	r24, 0x7F	; 127
     d2a:	07 c0       	rjmp	.+14     	; 0xd3a <turnOffPWM+0x8a>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
     d2c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
     d30:	8f 7d       	andi	r24, 0xDF	; 223
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <turnOffPWM+0x8a>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
     d34:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
     d38:	87 7f       	andi	r24, 0xF7	; 247
     d3a:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
     d3e:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
     d40:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
     d44:	8f 77       	andi	r24, 0x7F	; 127
     d46:	07 c0       	rjmp	.+14     	; 0xd56 <turnOffPWM+0xa6>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
     d48:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
     d4c:	8f 7d       	andi	r24, 0xDF	; 223
     d4e:	03 c0       	rjmp	.+6      	; 0xd56 <turnOffPWM+0xa6>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
     d50:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
     d54:	87 7f       	andi	r24, 0xF7	; 247
     d56:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
     d5a:	08 95       	ret

00000d5c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     d5c:	cf 93       	push	r28
     d5e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	fc 01       	movw	r30, r24
     d64:	ea 53       	subi	r30, 0x3A	; 58
     d66:	fe 4f       	sbci	r31, 0xFE	; 254
     d68:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     d6a:	fc 01       	movw	r30, r24
     d6c:	e4 5f       	subi	r30, 0xF4	; 244
     d6e:	fd 4f       	sbci	r31, 0xFD	; 253
     d70:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     d72:	88 23       	and	r24, r24
     d74:	61 f1       	breq	.+88     	; 0xdce <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	88 0f       	add	r24, r24
     d7a:	99 1f       	adc	r25, r25
     d7c:	fc 01       	movw	r30, r24
     d7e:	ea 57       	subi	r30, 0x7A	; 122
     d80:	fd 4f       	sbci	r31, 0xFD	; 253
     d82:	c5 91       	lpm	r28, Z+
     d84:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
     d86:	fc 01       	movw	r30, r24
     d88:	e4 59       	subi	r30, 0x94	; 148
     d8a:	fd 4f       	sbci	r31, 0xFD	; 253
     d8c:	a5 91       	lpm	r26, Z+
     d8e:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
     d90:	61 11       	cpse	r22, r1
     d92:	09 c0       	rjmp	.+18     	; 0xda6 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
     d94:	9f b7       	in	r25, 0x3f	; 63
                cli();
     d96:	f8 94       	cli
		*reg &= ~bit;
     d98:	88 81       	ld	r24, Y
     d9a:	20 95       	com	r18
     d9c:	82 23       	and	r24, r18
     d9e:	88 83       	st	Y, r24
		*out &= ~bit;
     da0:	ec 91       	ld	r30, X
     da2:	2e 23       	and	r18, r30
     da4:	0b c0       	rjmp	.+22     	; 0xdbc <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     da6:	62 30       	cpi	r22, 0x02	; 2
     da8:	61 f4       	brne	.+24     	; 0xdc2 <pinMode+0x66>
		uint8_t oldSREG = SREG;
     daa:	9f b7       	in	r25, 0x3f	; 63
                cli();
     dac:	f8 94       	cli
		*reg &= ~bit;
     dae:	88 81       	ld	r24, Y
     db0:	32 2f       	mov	r19, r18
     db2:	30 95       	com	r19
     db4:	83 23       	and	r24, r19
     db6:	88 83       	st	Y, r24
		*out |= bit;
     db8:	ec 91       	ld	r30, X
     dba:	2e 2b       	or	r18, r30
     dbc:	2c 93       	st	X, r18
		SREG = oldSREG;
     dbe:	9f bf       	out	0x3f, r25	; 63
     dc0:	06 c0       	rjmp	.+12     	; 0xdce <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
     dc2:	8f b7       	in	r24, 0x3f	; 63
                cli();
     dc4:	f8 94       	cli
		*reg |= bit;
     dc6:	e8 81       	ld	r30, Y
     dc8:	2e 2b       	or	r18, r30
     dca:	28 83       	st	Y, r18
		SREG = oldSREG;
     dcc:	8f bf       	out	0x3f, r24	; 63
	}
}
     dce:	df 91       	pop	r29
     dd0:	cf 91       	pop	r28
     dd2:	08 95       	ret

00000dd4 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     dd4:	1f 93       	push	r17
     dd6:	cf 93       	push	r28
     dd8:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     dda:	28 2f       	mov	r18, r24
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	f9 01       	movw	r30, r18
     de0:	e0 58       	subi	r30, 0x80	; 128
     de2:	fe 4f       	sbci	r31, 0xFE	; 254
     de4:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     de6:	f9 01       	movw	r30, r18
     de8:	ea 53       	subi	r30, 0x3A	; 58
     dea:	fe 4f       	sbci	r31, 0xFE	; 254
     dec:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     dee:	f9 01       	movw	r30, r18
     df0:	e4 5f       	subi	r30, 0xF4	; 244
     df2:	fd 4f       	sbci	r31, 0xFD	; 253
     df4:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     df6:	cc 23       	and	r28, r28
     df8:	b9 f0       	breq	.+46     	; 0xe28 <digitalWrite+0x54>
     dfa:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     dfc:	81 11       	cpse	r24, r1
     dfe:	58 df       	rcall	.-336    	; 0xcb0 <turnOffPWM>

	out = portOutputRegister(port);
     e00:	ec 2f       	mov	r30, r28
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	ee 0f       	add	r30, r30
     e06:	ff 1f       	adc	r31, r31
     e08:	e4 59       	subi	r30, 0x94	; 148
     e0a:	fd 4f       	sbci	r31, 0xFD	; 253
     e0c:	a5 91       	lpm	r26, Z+
     e0e:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     e10:	9f b7       	in	r25, 0x3f	; 63
	cli();
     e12:	f8 94       	cli

	if (val == LOW) {
     e14:	11 11       	cpse	r17, r1
     e16:	04 c0       	rjmp	.+8      	; 0xe20 <digitalWrite+0x4c>
		*out &= ~bit;
     e18:	8c 91       	ld	r24, X
     e1a:	d0 95       	com	r29
     e1c:	d8 23       	and	r29, r24
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <digitalWrite+0x50>
	} else {
		*out |= bit;
     e20:	ec 91       	ld	r30, X
     e22:	de 2b       	or	r29, r30
     e24:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
     e26:	9f bf       	out	0x3f, r25	; 63
}
     e28:	df 91       	pop	r29
     e2a:	cf 91       	pop	r28
     e2c:	1f 91       	pop	r17
     e2e:	08 95       	ret

00000e30 <digitalRead>:

int digitalRead(uint8_t pin)
{
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     e34:	28 2f       	mov	r18, r24
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	f9 01       	movw	r30, r18
     e3a:	e0 58       	subi	r30, 0x80	; 128
     e3c:	fe 4f       	sbci	r31, 0xFE	; 254
     e3e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     e40:	f9 01       	movw	r30, r18
     e42:	ea 53       	subi	r30, 0x3A	; 58
     e44:	fe 4f       	sbci	r31, 0xFE	; 254
     e46:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     e48:	f9 01       	movw	r30, r18
     e4a:	e4 5f       	subi	r30, 0xF4	; 244
     e4c:	fd 4f       	sbci	r31, 0xFD	; 253
     e4e:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
     e50:	cc 23       	and	r28, r28
     e52:	89 f0       	breq	.+34     	; 0xe76 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     e54:	81 11       	cpse	r24, r1
     e56:	2c df       	rcall	.-424    	; 0xcb0 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
     e58:	ec 2f       	mov	r30, r28
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	ee 0f       	add	r30, r30
     e5e:	ff 1f       	adc	r31, r31
     e60:	ee 5a       	subi	r30, 0xAE	; 174
     e62:	fd 4f       	sbci	r31, 0xFD	; 253
     e64:	a5 91       	lpm	r26, Z+
     e66:	b4 91       	lpm	r27, Z
     e68:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
     e6a:	ed 23       	and	r30, r29
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	21 f4       	brne	.+8      	; 0xe7a <digitalRead+0x4a>
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	02 c0       	rjmp	.+4      	; 0xe7a <digitalRead+0x4a>
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
     e7a:	df 91       	pop	r29
     e7c:	cf 91       	pop	r28
     e7e:	08 95       	ret

00000e80 <_ZN8SPIClass8transferEh>:
            return sendMessage(txBuffers[i], frame);
        }
    }

    return ERROR_ALLTXBUSY;
}
     e80:	8e bd       	out	0x2e, r24	; 46
     e82:	00 00       	nop
     e84:	0d b4       	in	r0, 0x2d	; 45
     e86:	07 fe       	sbrs	r0, 7
     e88:	fd cf       	rjmp	.-6      	; 0xe84 <_ZN8SPIClass8transferEh+0x4>
     e8a:	8e b5       	in	r24, 0x2e	; 46
     e8c:	08 95       	ret

00000e8e <_ZN7MCP25158startSPIEv>:
     e8e:	fc 01       	movw	r30, r24
     e90:	41 81       	ldd	r20, Z+1	; 0x01
     e92:	52 81       	ldd	r21, Z+2	; 0x02
     e94:	63 81       	ldd	r22, Z+3	; 0x03
     e96:	74 81       	ldd	r23, Z+4	; 0x04
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	92 e1       	ldi	r25, 0x12	; 18
     e9c:	aa e7       	ldi	r26, 0x7A	; 122
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	48 17       	cp	r20, r24
     ea4:	59 07       	cpc	r21, r25
     ea6:	6a 07       	cpc	r22, r26
     ea8:	7b 07       	cpc	r23, r27
     eaa:	40 f4       	brcc	.+16     	; 0xebc <_ZN7MCP25158startSPIEv+0x2e>
     eac:	b6 95       	lsr	r27
     eae:	a7 95       	ror	r26
     eb0:	97 95       	ror	r25
     eb2:	87 95       	ror	r24
     eb4:	2f 5f       	subi	r18, 0xFF	; 255
     eb6:	26 30       	cpi	r18, 0x06	; 6
     eb8:	a1 f7       	brne	.-24     	; 0xea2 <_ZN7MCP25158startSPIEv+0x14>
     eba:	27 e0       	ldi	r18, 0x07	; 7
     ebc:	91 e0       	ldi	r25, 0x01	; 1
     ebe:	92 27       	eor	r25, r18
     ec0:	29 2f       	mov	r18, r25
     ec2:	20 6a       	ori	r18, 0xA0	; 160
     ec4:	26 95       	lsr	r18
     ec6:	91 70       	andi	r25, 0x01	; 1
     ec8:	80 91 e6 05 	lds	r24, 0x05E6	; 0x8005e6 <_ZN8SPIClass13interruptModeE>
     ecc:	88 23       	and	r24, r24
     ece:	99 f0       	breq	.+38     	; 0xef6 <_ZN7MCP25158startSPIEv+0x68>
     ed0:	8f b7       	in	r24, 0x3f	; 63
     ed2:	f8 94       	cli
     ed4:	30 91 e6 05 	lds	r19, 0x05E6	; 0x8005e6 <_ZN8SPIClass13interruptModeE>
     ed8:	31 30       	cpi	r19, 0x01	; 1
     eda:	59 f4       	brne	.+22     	; 0xef2 <_ZN7MCP25158startSPIEv+0x64>
     edc:	3d b3       	in	r19, 0x1d	; 29
     ede:	30 93 e4 05 	sts	0x05E4, r19	; 0x8005e4 <_ZN8SPIClass13interruptSaveE>
     ee2:	4d b3       	in	r20, 0x1d	; 29
     ee4:	30 91 e5 05 	lds	r19, 0x05E5	; 0x8005e5 <_ZN8SPIClass13interruptMaskE>
     ee8:	30 95       	com	r19
     eea:	34 23       	and	r19, r20
     eec:	3d bb       	out	0x1d, r19	; 29
     eee:	8f bf       	out	0x3f, r24	; 63
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <_ZN7MCP25158startSPIEv+0x68>
     ef2:	80 93 e4 05 	sts	0x05E4, r24	; 0x8005e4 <_ZN8SPIClass13interruptSaveE>
     ef6:	2c bd       	out	0x2c, r18	; 44
     ef8:	9d bd       	out	0x2d, r25	; 45
     efa:	60 e0       	ldi	r22, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	6a cf       	rjmp	.-300    	; 0xdd4 <digitalWrite>

00000f00 <_ZN7MCP25156endSPIEv>:
     f00:	61 e0       	ldi	r22, 0x01	; 1
     f02:	fc 01       	movw	r30, r24
     f04:	80 81       	ld	r24, Z
     f06:	66 df       	rcall	.-308    	; 0xdd4 <digitalWrite>
     f08:	80 91 e6 05 	lds	r24, 0x05E6	; 0x8005e6 <_ZN8SPIClass13interruptModeE>
     f0c:	88 23       	and	r24, r24
     f0e:	61 f0       	breq	.+24     	; 0xf28 <_ZN7MCP25156endSPIEv+0x28>
     f10:	9f b7       	in	r25, 0x3f	; 63
     f12:	f8 94       	cli
     f14:	20 91 e6 05 	lds	r18, 0x05E6	; 0x8005e6 <_ZN8SPIClass13interruptModeE>
     f18:	80 91 e4 05 	lds	r24, 0x05E4	; 0x8005e4 <_ZN8SPIClass13interruptSaveE>
     f1c:	21 30       	cpi	r18, 0x01	; 1
     f1e:	19 f4       	brne	.+6      	; 0xf26 <_ZN7MCP25156endSPIEv+0x26>
     f20:	8d bb       	out	0x1d, r24	; 29
     f22:	9f bf       	out	0x3f, r25	; 63
     f24:	08 95       	ret
     f26:	8f bf       	out	0x3f, r24	; 63
     f28:	08 95       	ret

00000f2a <_ZN7MCP2515C1EhmP8SPIClass>:
     f2a:	8f 92       	push	r8
     f2c:	9f 92       	push	r9
     f2e:	af 92       	push	r10
     f30:	bf 92       	push	r11
     f32:	ff 92       	push	r15
     f34:	0f 93       	push	r16
     f36:	1f 93       	push	r17
     f38:	cf 93       	push	r28
     f3a:	df 93       	push	r29
     f3c:	ec 01       	movw	r28, r24
     f3e:	f6 2e       	mov	r15, r22
     f40:	49 01       	movw	r8, r18
     f42:	5a 01       	movw	r10, r20
     f44:	01 15       	cp	r16, r1
     f46:	11 05       	cpc	r17, r1
     f48:	19 f0       	breq	.+6      	; 0xf50 <_ZN7MCP2515C1EhmP8SPIClass+0x26>
     f4a:	1e 83       	std	Y+6, r17	; 0x06
     f4c:	0d 83       	std	Y+5, r16	; 0x05
     f4e:	06 c0       	rjmp	.+12     	; 0xf5c <_ZN7MCP2515C1EhmP8SPIClass+0x32>
     f50:	88 ee       	ldi	r24, 0xE8	; 232
     f52:	95 e0       	ldi	r25, 0x05	; 5
     f54:	9e 83       	std	Y+6, r25	; 0x06
     f56:	8d 83       	std	Y+5, r24	; 0x05
     f58:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <_ZN8SPIClass5beginEv>
     f5c:	f8 82       	st	Y, r15
     f5e:	89 82       	std	Y+1, r8	; 0x01
     f60:	9a 82       	std	Y+2, r9	; 0x02
     f62:	ab 82       	std	Y+3, r10	; 0x03
     f64:	bc 82       	std	Y+4, r11	; 0x04
     f66:	61 e0       	ldi	r22, 0x01	; 1
     f68:	8f 2d       	mov	r24, r15
     f6a:	f8 de       	rcall	.-528    	; 0xd5c <pinMode>
     f6c:	ce 01       	movw	r24, r28
     f6e:	df 91       	pop	r29
     f70:	cf 91       	pop	r28
     f72:	1f 91       	pop	r17
     f74:	0f 91       	pop	r16
     f76:	ff 90       	pop	r15
     f78:	bf 90       	pop	r11
     f7a:	af 90       	pop	r10
     f7c:	9f 90       	pop	r9
     f7e:	8f 90       	pop	r8
     f80:	bf cf       	rjmp	.-130    	; 0xf00 <_ZN7MCP25156endSPIEv>

00000f82 <_ZN7MCP251512readRegisterENS_8REGISTERE>:
     f82:	1f 93       	push	r17
     f84:	cf 93       	push	r28
     f86:	df 93       	push	r29
     f88:	ec 01       	movw	r28, r24
     f8a:	16 2f       	mov	r17, r22
     f8c:	80 df       	rcall	.-256    	; 0xe8e <_ZN7MCP25158startSPIEv>
     f8e:	83 e0       	ldi	r24, 0x03	; 3
     f90:	77 df       	rcall	.-274    	; 0xe80 <_ZN8SPIClass8transferEh>
     f92:	81 2f       	mov	r24, r17
     f94:	75 df       	rcall	.-278    	; 0xe80 <_ZN8SPIClass8transferEh>
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	73 df       	rcall	.-282    	; 0xe80 <_ZN8SPIClass8transferEh>
     f9a:	18 2f       	mov	r17, r24
     f9c:	ce 01       	movw	r24, r28
     f9e:	b0 df       	rcall	.-160    	; 0xf00 <_ZN7MCP25156endSPIEv>
     fa0:	81 2f       	mov	r24, r17
     fa2:	df 91       	pop	r29
     fa4:	cf 91       	pop	r28
     fa6:	1f 91       	pop	r17
     fa8:	08 95       	ret

00000faa <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>:
     faa:	df 92       	push	r13
     fac:	ef 92       	push	r14
     fae:	ff 92       	push	r15
     fb0:	0f 93       	push	r16
     fb2:	1f 93       	push	r17
     fb4:	cf 93       	push	r28
     fb6:	df 93       	push	r29
     fb8:	8c 01       	movw	r16, r24
     fba:	c6 2f       	mov	r28, r22
     fbc:	d4 2e       	mov	r13, r20
     fbe:	e5 2e       	mov	r14, r21
     fc0:	f2 2e       	mov	r15, r18
     fc2:	65 df       	rcall	.-310    	; 0xe8e <_ZN7MCP25158startSPIEv>
     fc4:	83 e0       	ldi	r24, 0x03	; 3
     fc6:	5c df       	rcall	.-328    	; 0xe80 <_ZN8SPIClass8transferEh>
     fc8:	8c 2f       	mov	r24, r28
     fca:	5a df       	rcall	.-332    	; 0xe80 <_ZN8SPIClass8transferEh>
     fcc:	cd 2d       	mov	r28, r13
     fce:	de 2d       	mov	r29, r14
     fd0:	ce 01       	movw	r24, r28
     fd2:	8f 0d       	add	r24, r15
     fd4:	91 1d       	adc	r25, r1
     fd6:	7c 01       	movw	r14, r24
     fd8:	ce 15       	cp	r28, r14
     fda:	df 05       	cpc	r29, r15
     fdc:	21 f0       	breq	.+8      	; 0xfe6 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh+0x3c>
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	4f df       	rcall	.-354    	; 0xe80 <_ZN8SPIClass8transferEh>
     fe2:	89 93       	st	Y+, r24
     fe4:	f9 cf       	rjmp	.-14     	; 0xfd8 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh+0x2e>
     fe6:	c8 01       	movw	r24, r16
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	1f 91       	pop	r17
     fee:	0f 91       	pop	r16
     ff0:	ff 90       	pop	r15
     ff2:	ef 90       	pop	r14
     ff4:	df 90       	pop	r13
     ff6:	84 cf       	rjmp	.-248    	; 0xf00 <_ZN7MCP25156endSPIEv>

00000ff8 <_ZN7MCP251511setRegisterENS_8REGISTEREh>:
     ff8:	0f 93       	push	r16
     ffa:	1f 93       	push	r17
     ffc:	cf 93       	push	r28
     ffe:	df 93       	push	r29
    1000:	ec 01       	movw	r28, r24
    1002:	06 2f       	mov	r16, r22
    1004:	14 2f       	mov	r17, r20
    1006:	43 df       	rcall	.-378    	; 0xe8e <_ZN7MCP25158startSPIEv>
    1008:	82 e0       	ldi	r24, 0x02	; 2
    100a:	3a df       	rcall	.-396    	; 0xe80 <_ZN8SPIClass8transferEh>
    100c:	80 2f       	mov	r24, r16
    100e:	38 df       	rcall	.-400    	; 0xe80 <_ZN8SPIClass8transferEh>
    1010:	81 2f       	mov	r24, r17
    1012:	36 df       	rcall	.-404    	; 0xe80 <_ZN8SPIClass8transferEh>
    1014:	ce 01       	movw	r24, r28
    1016:	df 91       	pop	r29
    1018:	cf 91       	pop	r28
    101a:	1f 91       	pop	r17
    101c:	0f 91       	pop	r16
    101e:	70 cf       	rjmp	.-288    	; 0xf00 <_ZN7MCP25156endSPIEv>

00001020 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>:
    1020:	df 92       	push	r13
    1022:	ef 92       	push	r14
    1024:	ff 92       	push	r15
    1026:	0f 93       	push	r16
    1028:	1f 93       	push	r17
    102a:	cf 93       	push	r28
    102c:	df 93       	push	r29
    102e:	8c 01       	movw	r16, r24
    1030:	c6 2f       	mov	r28, r22
    1032:	d4 2e       	mov	r13, r20
    1034:	e5 2e       	mov	r14, r21
    1036:	f2 2e       	mov	r15, r18
    1038:	2a df       	rcall	.-428    	; 0xe8e <_ZN7MCP25158startSPIEv>
    103a:	82 e0       	ldi	r24, 0x02	; 2
    103c:	21 df       	rcall	.-446    	; 0xe80 <_ZN8SPIClass8transferEh>
    103e:	8c 2f       	mov	r24, r28
    1040:	1f df       	rcall	.-450    	; 0xe80 <_ZN8SPIClass8transferEh>
    1042:	cd 2d       	mov	r28, r13
    1044:	de 2d       	mov	r29, r14
    1046:	ce 01       	movw	r24, r28
    1048:	8f 0d       	add	r24, r15
    104a:	91 1d       	adc	r25, r1
    104c:	7c 01       	movw	r14, r24
    104e:	ce 15       	cp	r28, r14
    1050:	df 05       	cpc	r29, r15
    1052:	19 f0       	breq	.+6      	; 0x105a <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh+0x3a>
    1054:	89 91       	ld	r24, Y+
    1056:	14 df       	rcall	.-472    	; 0xe80 <_ZN8SPIClass8transferEh>
    1058:	fa cf       	rjmp	.-12     	; 0x104e <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh+0x2e>
    105a:	c8 01       	movw	r24, r16
    105c:	df 91       	pop	r29
    105e:	cf 91       	pop	r28
    1060:	1f 91       	pop	r17
    1062:	0f 91       	pop	r16
    1064:	ff 90       	pop	r15
    1066:	ef 90       	pop	r14
    1068:	df 90       	pop	r13
    106a:	4a cf       	rjmp	.-364    	; 0xf00 <_ZN7MCP25156endSPIEv>

0000106c <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>:
    106c:	ff 92       	push	r15
    106e:	0f 93       	push	r16
    1070:	1f 93       	push	r17
    1072:	cf 93       	push	r28
    1074:	df 93       	push	r29
    1076:	ec 01       	movw	r28, r24
    1078:	f6 2e       	mov	r15, r22
    107a:	04 2f       	mov	r16, r20
    107c:	12 2f       	mov	r17, r18
    107e:	07 df       	rcall	.-498    	; 0xe8e <_ZN7MCP25158startSPIEv>
    1080:	85 e0       	ldi	r24, 0x05	; 5
    1082:	fe de       	rcall	.-516    	; 0xe80 <_ZN8SPIClass8transferEh>
    1084:	8f 2d       	mov	r24, r15
    1086:	fc de       	rcall	.-520    	; 0xe80 <_ZN8SPIClass8transferEh>
    1088:	80 2f       	mov	r24, r16
    108a:	fa de       	rcall	.-524    	; 0xe80 <_ZN8SPIClass8transferEh>
    108c:	81 2f       	mov	r24, r17
    108e:	f8 de       	rcall	.-528    	; 0xe80 <_ZN8SPIClass8transferEh>
    1090:	ce 01       	movw	r24, r28
    1092:	df 91       	pop	r29
    1094:	cf 91       	pop	r28
    1096:	1f 91       	pop	r17
    1098:	0f 91       	pop	r16
    109a:	ff 90       	pop	r15
    109c:	31 cf       	rjmp	.-414    	; 0xf00 <_ZN7MCP25156endSPIEv>

0000109e <_ZN7MCP25159getStatusEv>:
    109e:	1f 93       	push	r17
    10a0:	cf 93       	push	r28
    10a2:	df 93       	push	r29
    10a4:	ec 01       	movw	r28, r24
    10a6:	f3 de       	rcall	.-538    	; 0xe8e <_ZN7MCP25158startSPIEv>
    10a8:	80 ea       	ldi	r24, 0xA0	; 160
    10aa:	ea de       	rcall	.-556    	; 0xe80 <_ZN8SPIClass8transferEh>
    10ac:	80 e0       	ldi	r24, 0x00	; 0
    10ae:	e8 de       	rcall	.-560    	; 0xe80 <_ZN8SPIClass8transferEh>
    10b0:	18 2f       	mov	r17, r24
    10b2:	ce 01       	movw	r24, r28
    10b4:	25 df       	rcall	.-438    	; 0xf00 <_ZN7MCP25156endSPIEv>
    10b6:	81 2f       	mov	r24, r17
    10b8:	df 91       	pop	r29
    10ba:	cf 91       	pop	r28
    10bc:	1f 91       	pop	r17
    10be:	08 95       	ret

000010c0 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>:
    10c0:	cf 92       	push	r12
    10c2:	df 92       	push	r13
    10c4:	ef 92       	push	r14
    10c6:	ff 92       	push	r15
    10c8:	1f 93       	push	r17
    10ca:	cf 93       	push	r28
    10cc:	df 93       	push	r29
    10ce:	ec 01       	movw	r28, r24
    10d0:	16 2f       	mov	r17, r22
    10d2:	26 2f       	mov	r18, r22
    10d4:	40 ee       	ldi	r20, 0xE0	; 224
    10d6:	6f e0       	ldi	r22, 0x0F	; 15
    10d8:	c9 df       	rcall	.-110    	; 0x106c <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
    10da:	1d dd       	rcall	.-1478   	; 0xb16 <millis>
    10dc:	6b 01       	movw	r12, r22
    10de:	7c 01       	movw	r14, r24
    10e0:	2a e0       	ldi	r18, 0x0A	; 10
    10e2:	c2 0e       	add	r12, r18
    10e4:	d1 1c       	adc	r13, r1
    10e6:	e1 1c       	adc	r14, r1
    10e8:	f1 1c       	adc	r15, r1
    10ea:	15 dd       	rcall	.-1494   	; 0xb16 <millis>
    10ec:	6c 15       	cp	r22, r12
    10ee:	7d 05       	cpc	r23, r13
    10f0:	8e 05       	cpc	r24, r14
    10f2:	9f 05       	cpc	r25, r15
    10f4:	40 f4       	brcc	.+16     	; 0x1106 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x46>
    10f6:	6e e0       	ldi	r22, 0x0E	; 14
    10f8:	ce 01       	movw	r24, r28
    10fa:	43 df       	rcall	.-378    	; 0xf82 <_ZN7MCP251512readRegisterENS_8REGISTERE>
    10fc:	80 7e       	andi	r24, 0xE0	; 224
    10fe:	18 13       	cpse	r17, r24
    1100:	f4 cf       	rjmp	.-24     	; 0x10ea <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x2a>
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	01 c0       	rjmp	.+2      	; 0x1108 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x48>
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	91 e0       	ldi	r25, 0x01	; 1
    110a:	89 27       	eor	r24, r25
    110c:	df 91       	pop	r29
    110e:	cf 91       	pop	r28
    1110:	1f 91       	pop	r17
    1112:	ff 90       	pop	r15
    1114:	ef 90       	pop	r14
    1116:	df 90       	pop	r13
    1118:	cf 90       	pop	r12
    111a:	08 95       	ret

0000111c <_ZN7MCP251513setConfigModeEv>:
    111c:	60 e8       	ldi	r22, 0x80	; 128
    111e:	d0 cf       	rjmp	.-96     	; 0x10c0 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>

00001120 <_ZN7MCP251513setNormalModeEv>:
    1120:	60 e0       	ldi	r22, 0x00	; 0
    1122:	ce cf       	rjmp	.-100    	; 0x10c0 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>

00001124 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK>:
    1124:	0f 93       	push	r16
    1126:	1f 93       	push	r17
    1128:	cf 93       	push	r28
    112a:	df 93       	push	r29
    112c:	8c 01       	movw	r16, r24
    112e:	c6 2f       	mov	r28, r22
    1130:	d4 2f       	mov	r29, r20
    1132:	f4 df       	rcall	.-24     	; 0x111c <_ZN7MCP251513setConfigModeEv>
    1134:	81 11       	cpse	r24, r1
    1136:	bd c0       	rjmp	.+378    	; 0x12b2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x18e>
    1138:	d1 30       	cpi	r29, 0x01	; 1
    113a:	b9 f1       	breq	.+110    	; 0x11aa <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x86>
    113c:	08 f4       	brcc	.+2      	; 0x1140 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x1c>
    113e:	6b c0       	rjmp	.+214    	; 0x1216 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0xf2>
    1140:	d2 30       	cpi	r29, 0x02	; 2
    1142:	09 f0       	breq	.+2      	; 0x1146 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x22>
    1144:	99 c0       	rjmp	.+306    	; 0x1278 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x154>
    1146:	8c 2f       	mov	r24, r28
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	80 31       	cpi	r24, 0x10	; 16
    114c:	91 05       	cpc	r25, r1
    114e:	08 f0       	brcs	.+2      	; 0x1152 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x2e>
    1150:	93 c0       	rjmp	.+294    	; 0x1278 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x154>
    1152:	fc 01       	movw	r30, r24
    1154:	88 27       	eor	r24, r24
    1156:	e5 57       	subi	r30, 0x75	; 117
    1158:	ff 4f       	sbci	r31, 0xFF	; 255
    115a:	8f 4f       	sbci	r24, 0xFF	; 255
    115c:	0c 94 69 17 	jmp	0x2ed2	; 0x2ed2 <__tablejump2__>
    1160:	c7 e8       	ldi	r28, 0x87	; 135
    1162:	df eb       	ldi	r29, 0xBF	; 191
    1164:	34 c0       	rjmp	.+104    	; 0x11ce <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0xaa>
    1166:	c4 e8       	ldi	r28, 0x84	; 132
    1168:	d4 ea       	ldi	r29, 0xA4	; 164
    116a:	8e c0       	rjmp	.+284    	; 0x1288 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x164>
    116c:	c5 e8       	ldi	r28, 0x85	; 133
    116e:	d2 ee       	ldi	r29, 0xE2	; 226
    1170:	47 e4       	ldi	r20, 0x47	; 71
    1172:	93 c0       	rjmp	.+294    	; 0x129a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x176>
    1174:	c7 e8       	ldi	r28, 0x87	; 135
    1176:	df eb       	ldi	r29, 0xBF	; 191
    1178:	6e c0       	rjmp	.+220    	; 0x1256 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x132>
    117a:	c6 e8       	ldi	r28, 0x86	; 134
    117c:	d4 eb       	ldi	r29, 0xB4	; 180
    117e:	6b c0       	rjmp	.+214    	; 0x1256 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x132>
    1180:	c7 e8       	ldi	r28, 0x87	; 135
    1182:	df eb       	ldi	r29, 0xBF	; 191
    1184:	6c c0       	rjmp	.+216    	; 0x125e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x13a>
    1186:	c6 e8       	ldi	r28, 0x86	; 134
    1188:	d4 eb       	ldi	r29, 0xB4	; 180
    118a:	69 c0       	rjmp	.+210    	; 0x125e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x13a>
    118c:	c5 e8       	ldi	r28, 0x85	; 133
    118e:	d1 eb       	ldi	r29, 0xB1	; 177
    1190:	66 c0       	rjmp	.+204    	; 0x125e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x13a>
    1192:	c6 e8       	ldi	r28, 0x86	; 134
    1194:	d4 eb       	ldi	r29, 0xB4	; 180
    1196:	6b c0       	rjmp	.+214    	; 0x126e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x14a>
    1198:	c5 e8       	ldi	r28, 0x85	; 133
    119a:	d1 eb       	ldi	r29, 0xB1	; 177
    119c:	68 c0       	rjmp	.+208    	; 0x126e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x14a>
    119e:	c2 e8       	ldi	r28, 0x82	; 130
    11a0:	d0 e9       	ldi	r29, 0x90	; 144
    11a2:	65 c0       	rjmp	.+202    	; 0x126e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x14a>
    11a4:	c0 e8       	ldi	r28, 0x80	; 128
    11a6:	d0 e8       	ldi	r29, 0x80	; 128
    11a8:	62 c0       	rjmp	.+196    	; 0x126e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x14a>
    11aa:	8c 2f       	mov	r24, r28
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	80 31       	cpi	r24, 0x10	; 16
    11b0:	91 05       	cpc	r25, r1
    11b2:	08 f0       	brcs	.+2      	; 0x11b6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x92>
    11b4:	61 c0       	rjmp	.+194    	; 0x1278 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x154>
    11b6:	fc 01       	movw	r30, r24
    11b8:	88 27       	eor	r24, r24
    11ba:	e5 56       	subi	r30, 0x65	; 101
    11bc:	ff 4f       	sbci	r31, 0xFF	; 255
    11be:	8f 4f       	sbci	r24, 0xFF	; 255
    11c0:	0c 94 69 17 	jmp	0x2ed2	; 0x2ed2 <__tablejump2__>
    11c4:	c7 e8       	ldi	r28, 0x87	; 135
    11c6:	df ef       	ldi	r29, 0xFF	; 255
    11c8:	5b c0       	rjmp	.+182    	; 0x1280 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15c>
    11ca:	c7 e8       	ldi	r28, 0x87	; 135
    11cc:	df ef       	ldi	r29, 0xFF	; 255
    11ce:	4f e0       	ldi	r20, 0x0F	; 15
    11d0:	64 c0       	rjmp	.+200    	; 0x129a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x176>
    11d2:	c5 e8       	ldi	r28, 0x85	; 133
    11d4:	d1 ef       	ldi	r29, 0xF1	; 241
    11d6:	4e e4       	ldi	r20, 0x4E	; 78
    11d8:	60 c0       	rjmp	.+192    	; 0x129a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x176>
    11da:	c7 e8       	ldi	r28, 0x87	; 135
    11dc:	df ef       	ldi	r29, 0xFF	; 255
    11de:	54 c0       	rjmp	.+168    	; 0x1288 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x164>
    11e0:	c7 e8       	ldi	r28, 0x87	; 135
    11e2:	da ef       	ldi	r29, 0xFA	; 250
    11e4:	51 c0       	rjmp	.+162    	; 0x1288 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x164>
    11e6:	c7 e8       	ldi	r28, 0x87	; 135
    11e8:	df ef       	ldi	r29, 0xFF	; 255
    11ea:	35 c0       	rjmp	.+106    	; 0x1256 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x132>
    11ec:	c7 e0       	ldi	r28, 0x07	; 7
    11ee:	de eb       	ldi	r29, 0xBE	; 190
    11f0:	32 c0       	rjmp	.+100    	; 0x1256 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x132>
    11f2:	c7 e0       	ldi	r28, 0x07	; 7
    11f4:	dd ea       	ldi	r29, 0xAD	; 173
    11f6:	2f c0       	rjmp	.+94     	; 0x1256 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x132>
    11f8:	c6 e8       	ldi	r28, 0x86	; 134
    11fa:	d0 ef       	ldi	r29, 0xF0	; 240
    11fc:	2c c0       	rjmp	.+88     	; 0x1256 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x132>
    11fe:	c7 e8       	ldi	r28, 0x87	; 135
    1200:	da ef       	ldi	r29, 0xFA	; 250
    1202:	2d c0       	rjmp	.+90     	; 0x125e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x13a>
    1204:	c5 e8       	ldi	r28, 0x85	; 133
    1206:	d1 ef       	ldi	r29, 0xF1	; 241
    1208:	2e c0       	rjmp	.+92     	; 0x1266 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x142>
    120a:	c6 e8       	ldi	r28, 0x86	; 134
    120c:	d0 ef       	ldi	r29, 0xF0	; 240
    120e:	2f c0       	rjmp	.+94     	; 0x126e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x14a>
    1210:	c2 e8       	ldi	r28, 0x82	; 130
    1212:	d0 ed       	ldi	r29, 0xD0	; 208
    1214:	2c c0       	rjmp	.+88     	; 0x126e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x14a>
    1216:	8c 2f       	mov	r24, r28
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	fc 01       	movw	r30, r24
    121c:	34 97       	sbiw	r30, 0x04	; 4
    121e:	ec 30       	cpi	r30, 0x0C	; 12
    1220:	f1 05       	cpc	r31, r1
    1222:	50 f5       	brcc	.+84     	; 0x1278 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x154>
    1224:	88 27       	eor	r24, r24
    1226:	e5 55       	subi	r30, 0x55	; 85
    1228:	ff 4f       	sbci	r31, 0xFF	; 255
    122a:	8f 4f       	sbci	r24, 0xFF	; 255
    122c:	0c 94 69 17 	jmp	0x2ed2	; 0x2ed2 <__tablejump2__>
    1230:	c7 e8       	ldi	r28, 0x87	; 135
    1232:	df ef       	ldi	r29, 0xFF	; 255
    1234:	02 c0       	rjmp	.+4      	; 0x123a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x116>
    1236:	c7 e8       	ldi	r28, 0x87	; 135
    1238:	da ef       	ldi	r29, 0xFA	; 250
    123a:	49 e0       	ldi	r20, 0x09	; 9
    123c:	2e c0       	rjmp	.+92     	; 0x129a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x176>
    123e:	c7 e8       	ldi	r28, 0x87	; 135
    1240:	df ef       	ldi	r29, 0xFF	; 255
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x124>
    1244:	c7 e8       	ldi	r28, 0x87	; 135
    1246:	de ef       	ldi	r29, 0xFE	; 254
    1248:	44 e0       	ldi	r20, 0x04	; 4
    124a:	27 c0       	rjmp	.+78     	; 0x129a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x176>
    124c:	c7 e8       	ldi	r28, 0x87	; 135
    124e:	da ef       	ldi	r29, 0xFA	; 250
    1250:	fb cf       	rjmp	.-10     	; 0x1248 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x124>
    1252:	c7 e8       	ldi	r28, 0x87	; 135
    1254:	da ef       	ldi	r29, 0xFA	; 250
    1256:	43 e0       	ldi	r20, 0x03	; 3
    1258:	20 c0       	rjmp	.+64     	; 0x129a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x176>
    125a:	c7 e8       	ldi	r28, 0x87	; 135
    125c:	df ef       	ldi	r29, 0xFF	; 255
    125e:	41 e0       	ldi	r20, 0x01	; 1
    1260:	1c c0       	rjmp	.+56     	; 0x129a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x176>
    1262:	c6 e8       	ldi	r28, 0x86	; 134
    1264:	db ef       	ldi	r29, 0xFB	; 251
    1266:	41 e4       	ldi	r20, 0x41	; 65
    1268:	18 c0       	rjmp	.+48     	; 0x129a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x176>
    126a:	c7 e8       	ldi	r28, 0x87	; 135
    126c:	da ef       	ldi	r29, 0xFA	; 250
    126e:	40 e0       	ldi	r20, 0x00	; 0
    1270:	14 c0       	rjmp	.+40     	; 0x129a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x176>
    1272:	c2 e8       	ldi	r28, 0x82	; 130
    1274:	d9 ed       	ldi	r29, 0xD9	; 217
    1276:	fb cf       	rjmp	.-10     	; 0x126e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x14a>
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	1b c0       	rjmp	.+54     	; 0x12b2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x18e>
    127c:	c7 e8       	ldi	r28, 0x87	; 135
    127e:	df eb       	ldi	r29, 0xBF	; 191
    1280:	4f e1       	ldi	r20, 0x1F	; 31
    1282:	0b c0       	rjmp	.+22     	; 0x129a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x176>
    1284:	c7 e8       	ldi	r28, 0x87	; 135
    1286:	df eb       	ldi	r29, 0xBF	; 191
    1288:	47 e0       	ldi	r20, 0x07	; 7
    128a:	07 c0       	rjmp	.+14     	; 0x129a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x176>
    128c:	c7 e8       	ldi	r28, 0x87	; 135
    128e:	df ef       	ldi	r29, 0xFF	; 255
    1290:	4f e3       	ldi	r20, 0x3F	; 63
    1292:	03 c0       	rjmp	.+6      	; 0x129a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x176>
    1294:	c7 e8       	ldi	r28, 0x87	; 135
    1296:	df ef       	ldi	r29, 0xFF	; 255
    1298:	4b e0       	ldi	r20, 0x0B	; 11
    129a:	6a e2       	ldi	r22, 0x2A	; 42
    129c:	c8 01       	movw	r24, r16
    129e:	ac de       	rcall	.-680    	; 0xff8 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    12a0:	4d 2f       	mov	r20, r29
    12a2:	69 e2       	ldi	r22, 0x29	; 41
    12a4:	c8 01       	movw	r24, r16
    12a6:	a8 de       	rcall	.-688    	; 0xff8 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    12a8:	4c 2f       	mov	r20, r28
    12aa:	68 e2       	ldi	r22, 0x28	; 40
    12ac:	c8 01       	movw	r24, r16
    12ae:	a4 de       	rcall	.-696    	; 0xff8 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	df 91       	pop	r29
    12b4:	cf 91       	pop	r28
    12b6:	1f 91       	pop	r17
    12b8:	0f 91       	pop	r16
    12ba:	08 95       	ret

000012bc <_ZN7MCP25159prepareIdEPhbm>:
    12bc:	0f 93       	push	r16
    12be:	1f 93       	push	r17
    12c0:	fb 01       	movw	r30, r22
    12c2:	44 23       	and	r20, r20
    12c4:	b1 f0       	breq	.+44     	; 0x12f2 <_ZN7MCP25159prepareIdEPhbm+0x36>
    12c6:	03 83       	std	Z+3, r16	; 0x03
    12c8:	12 83       	std	Z+2, r17	; 0x02
    12ca:	89 01       	movw	r16, r18
    12cc:	22 27       	eor	r18, r18
    12ce:	33 27       	eor	r19, r19
    12d0:	90 2f       	mov	r25, r16
    12d2:	9c 71       	andi	r25, 0x1C	; 28
    12d4:	80 2f       	mov	r24, r16
    12d6:	83 70       	andi	r24, 0x03	; 3
    12d8:	48 e0       	ldi	r20, 0x08	; 8
    12da:	94 9f       	mul	r25, r20
    12dc:	80 0d       	add	r24, r0
    12de:	11 24       	eor	r1, r1
    12e0:	88 60       	ori	r24, 0x08	; 8
    12e2:	81 83       	std	Z+1, r24	; 0x01
    12e4:	55 e0       	ldi	r21, 0x05	; 5
    12e6:	16 95       	lsr	r17
    12e8:	07 95       	ror	r16
    12ea:	5a 95       	dec	r21
    12ec:	e1 f7       	brne	.-8      	; 0x12e6 <_ZN7MCP25159prepareIdEPhbm+0x2a>
    12ee:	00 83       	st	Z, r16
    12f0:	0d c0       	rjmp	.+26     	; 0x130c <_ZN7MCP25159prepareIdEPhbm+0x50>
    12f2:	c8 01       	movw	r24, r16
    12f4:	23 e0       	ldi	r18, 0x03	; 3
    12f6:	96 95       	lsr	r25
    12f8:	87 95       	ror	r24
    12fa:	2a 95       	dec	r18
    12fc:	e1 f7       	brne	.-8      	; 0x12f6 <_ZN7MCP25159prepareIdEPhbm+0x3a>
    12fe:	80 83       	st	Z, r24
    1300:	02 95       	swap	r16
    1302:	00 0f       	add	r16, r16
    1304:	00 7e       	andi	r16, 0xE0	; 224
    1306:	01 83       	std	Z+1, r16	; 0x01
    1308:	13 82       	std	Z+3, r1	; 0x03
    130a:	12 82       	std	Z+2, r1	; 0x02
    130c:	1f 91       	pop	r17
    130e:	0f 91       	pop	r16
    1310:	08 95       	ret

00001312 <_ZN7MCP251513setFilterMaskENS_4MASKEbm>:
    1312:	8f 92       	push	r8
    1314:	9f 92       	push	r9
    1316:	af 92       	push	r10
    1318:	bf 92       	push	r11
    131a:	cf 92       	push	r12
    131c:	df 92       	push	r13
    131e:	ef 92       	push	r14
    1320:	ff 92       	push	r15
    1322:	0f 93       	push	r16
    1324:	1f 93       	push	r17
    1326:	cf 93       	push	r28
    1328:	df 93       	push	r29
    132a:	00 d0       	rcall	.+0      	; 0x132c <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x1a>
    132c:	1f 92       	push	r1
    132e:	cd b7       	in	r28, 0x3d	; 61
    1330:	de b7       	in	r29, 0x3e	; 62
    1332:	7c 01       	movw	r14, r24
    1334:	d6 2e       	mov	r13, r22
    1336:	c4 2e       	mov	r12, r20
    1338:	48 01       	movw	r8, r16
    133a:	59 01       	movw	r10, r18
    133c:	ef de       	rcall	.-546    	; 0x111c <_ZN7MCP251513setConfigModeEv>
    133e:	81 11       	cpse	r24, r1
    1340:	19 c0       	rjmp	.+50     	; 0x1374 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x62>
    1342:	95 01       	movw	r18, r10
    1344:	84 01       	movw	r16, r8
    1346:	4c 2d       	mov	r20, r12
    1348:	be 01       	movw	r22, r28
    134a:	6f 5f       	subi	r22, 0xFF	; 255
    134c:	7f 4f       	sbci	r23, 0xFF	; 255
    134e:	c7 01       	movw	r24, r14
    1350:	b5 df       	rcall	.-150    	; 0x12bc <_ZN7MCP25159prepareIdEPhbm>
    1352:	dd 20       	and	r13, r13
    1354:	29 f0       	breq	.+10     	; 0x1360 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x4e>
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	d8 12       	cpse	r13, r24
    135a:	0b c0       	rjmp	.+22     	; 0x1372 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x60>
    135c:	64 e2       	ldi	r22, 0x24	; 36
    135e:	01 c0       	rjmp	.+2      	; 0x1362 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x50>
    1360:	60 e2       	ldi	r22, 0x20	; 32
    1362:	24 e0       	ldi	r18, 0x04	; 4
    1364:	ae 01       	movw	r20, r28
    1366:	4f 5f       	subi	r20, 0xFF	; 255
    1368:	5f 4f       	sbci	r21, 0xFF	; 255
    136a:	c7 01       	movw	r24, r14
    136c:	59 de       	rcall	.-846    	; 0x1020 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    136e:	80 e0       	ldi	r24, 0x00	; 0
    1370:	01 c0       	rjmp	.+2      	; 0x1374 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x62>
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	0f 90       	pop	r0
    1376:	0f 90       	pop	r0
    1378:	0f 90       	pop	r0
    137a:	0f 90       	pop	r0
    137c:	df 91       	pop	r29
    137e:	cf 91       	pop	r28
    1380:	1f 91       	pop	r17
    1382:	0f 91       	pop	r16
    1384:	ff 90       	pop	r15
    1386:	ef 90       	pop	r14
    1388:	df 90       	pop	r13
    138a:	cf 90       	pop	r12
    138c:	bf 90       	pop	r11
    138e:	af 90       	pop	r10
    1390:	9f 90       	pop	r9
    1392:	8f 90       	pop	r8
    1394:	08 95       	ret

00001396 <_ZN7MCP25159setFilterENS_3RXFEbm>:
    1396:	8f 92       	push	r8
    1398:	9f 92       	push	r9
    139a:	af 92       	push	r10
    139c:	bf 92       	push	r11
    139e:	cf 92       	push	r12
    13a0:	df 92       	push	r13
    13a2:	ef 92       	push	r14
    13a4:	ff 92       	push	r15
    13a6:	0f 93       	push	r16
    13a8:	1f 93       	push	r17
    13aa:	cf 93       	push	r28
    13ac:	df 93       	push	r29
    13ae:	00 d0       	rcall	.+0      	; 0x13b0 <_ZN7MCP25159setFilterENS_3RXFEbm+0x1a>
    13b0:	1f 92       	push	r1
    13b2:	cd b7       	in	r28, 0x3d	; 61
    13b4:	de b7       	in	r29, 0x3e	; 62
    13b6:	6c 01       	movw	r12, r24
    13b8:	f6 2e       	mov	r15, r22
    13ba:	e4 2e       	mov	r14, r20
    13bc:	48 01       	movw	r8, r16
    13be:	59 01       	movw	r10, r18
    13c0:	ad de       	rcall	.-678    	; 0x111c <_ZN7MCP251513setConfigModeEv>
    13c2:	81 11       	cpse	r24, r1
    13c4:	34 c0       	rjmp	.+104    	; 0x142e <_ZN7MCP25159setFilterENS_3RXFEbm+0x98>
    13c6:	82 e0       	ldi	r24, 0x02	; 2
    13c8:	f8 16       	cp	r15, r24
    13ca:	a9 f0       	breq	.+42     	; 0x13f6 <_ZN7MCP25159setFilterENS_3RXFEbm+0x60>
    13cc:	8f 15       	cp	r24, r15
    13ce:	40 f0       	brcs	.+16     	; 0x13e0 <_ZN7MCP25159setFilterENS_3RXFEbm+0x4a>
    13d0:	ff 20       	and	r15, r15
    13d2:	d1 f0       	breq	.+52     	; 0x1408 <_ZN7MCP25159setFilterENS_3RXFEbm+0x72>
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	f8 12       	cpse	r15, r24
    13d8:	29 c0       	rjmp	.+82     	; 0x142c <_ZN7MCP25159setFilterENS_3RXFEbm+0x96>
    13da:	44 e0       	ldi	r20, 0x04	; 4
    13dc:	f4 2e       	mov	r15, r20
    13de:	15 c0       	rjmp	.+42     	; 0x140a <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
    13e0:	84 e0       	ldi	r24, 0x04	; 4
    13e2:	f8 16       	cp	r15, r24
    13e4:	71 f0       	breq	.+28     	; 0x1402 <_ZN7MCP25159setFilterENS_3RXFEbm+0x6c>
    13e6:	f8 16       	cp	r15, r24
    13e8:	48 f0       	brcs	.+18     	; 0x13fc <_ZN7MCP25159setFilterENS_3RXFEbm+0x66>
    13ea:	85 e0       	ldi	r24, 0x05	; 5
    13ec:	f8 12       	cpse	r15, r24
    13ee:	1e c0       	rjmp	.+60     	; 0x142c <_ZN7MCP25159setFilterENS_3RXFEbm+0x96>
    13f0:	88 e1       	ldi	r24, 0x18	; 24
    13f2:	f8 2e       	mov	r15, r24
    13f4:	0a c0       	rjmp	.+20     	; 0x140a <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
    13f6:	38 e0       	ldi	r19, 0x08	; 8
    13f8:	f3 2e       	mov	r15, r19
    13fa:	07 c0       	rjmp	.+14     	; 0x140a <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
    13fc:	20 e1       	ldi	r18, 0x10	; 16
    13fe:	f2 2e       	mov	r15, r18
    1400:	04 c0       	rjmp	.+8      	; 0x140a <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
    1402:	94 e1       	ldi	r25, 0x14	; 20
    1404:	f9 2e       	mov	r15, r25
    1406:	01 c0       	rjmp	.+2      	; 0x140a <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
    1408:	f1 2c       	mov	r15, r1
    140a:	95 01       	movw	r18, r10
    140c:	84 01       	movw	r16, r8
    140e:	4e 2d       	mov	r20, r14
    1410:	be 01       	movw	r22, r28
    1412:	6f 5f       	subi	r22, 0xFF	; 255
    1414:	7f 4f       	sbci	r23, 0xFF	; 255
    1416:	c6 01       	movw	r24, r12
    1418:	51 df       	rcall	.-350    	; 0x12bc <_ZN7MCP25159prepareIdEPhbm>
    141a:	24 e0       	ldi	r18, 0x04	; 4
    141c:	ae 01       	movw	r20, r28
    141e:	4f 5f       	subi	r20, 0xFF	; 255
    1420:	5f 4f       	sbci	r21, 0xFF	; 255
    1422:	6f 2d       	mov	r22, r15
    1424:	c6 01       	movw	r24, r12
    1426:	fc dd       	rcall	.-1032   	; 0x1020 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    1428:	80 e0       	ldi	r24, 0x00	; 0
    142a:	01 c0       	rjmp	.+2      	; 0x142e <_ZN7MCP25159setFilterENS_3RXFEbm+0x98>
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	0f 90       	pop	r0
    1430:	0f 90       	pop	r0
    1432:	0f 90       	pop	r0
    1434:	0f 90       	pop	r0
    1436:	df 91       	pop	r29
    1438:	cf 91       	pop	r28
    143a:	1f 91       	pop	r17
    143c:	0f 91       	pop	r16
    143e:	ff 90       	pop	r15
    1440:	ef 90       	pop	r14
    1442:	df 90       	pop	r13
    1444:	cf 90       	pop	r12
    1446:	bf 90       	pop	r11
    1448:	af 90       	pop	r10
    144a:	9f 90       	pop	r9
    144c:	8f 90       	pop	r8
    144e:	08 95       	ret

00001450 <_ZN7MCP25155resetEv>:
    1450:	af 92       	push	r10
    1452:	bf 92       	push	r11
    1454:	cf 92       	push	r12
    1456:	df 92       	push	r13
    1458:	ef 92       	push	r14
    145a:	ff 92       	push	r15
    145c:	0f 93       	push	r16
    145e:	1f 93       	push	r17
    1460:	cf 93       	push	r28
    1462:	df 93       	push	r29
    1464:	cd b7       	in	r28, 0x3d	; 61
    1466:	de b7       	in	r29, 0x3e	; 62
    1468:	64 97       	sbiw	r28, 0x14	; 20
    146a:	0f b6       	in	r0, 0x3f	; 63
    146c:	f8 94       	cli
    146e:	de bf       	out	0x3e, r29	; 62
    1470:	0f be       	out	0x3f, r0	; 63
    1472:	cd bf       	out	0x3d, r28	; 61
    1474:	7c 01       	movw	r14, r24
    1476:	0b dd       	rcall	.-1514   	; 0xe8e <_ZN7MCP25158startSPIEv>
    1478:	80 ec       	ldi	r24, 0xC0	; 192
    147a:	02 dd       	rcall	.-1532   	; 0xe80 <_ZN8SPIClass8transferEh>
    147c:	c7 01       	movw	r24, r14
    147e:	40 dd       	rcall	.-1408   	; 0xf00 <_ZN7MCP25156endSPIEv>
    1480:	6a e0       	ldi	r22, 0x0A	; 10
    1482:	70 e0       	ldi	r23, 0x00	; 0
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	77 db       	rcall	.-2322   	; 0xb78 <delay>
    148a:	8e 01       	movw	r16, r28
    148c:	0f 5f       	subi	r16, 0xFF	; 255
    148e:	1f 4f       	sbci	r17, 0xFF	; 255
    1490:	8e e0       	ldi	r24, 0x0E	; 14
    1492:	f8 01       	movw	r30, r16
    1494:	11 92       	st	Z+, r1
    1496:	8a 95       	dec	r24
    1498:	e9 f7       	brne	.-6      	; 0x1494 <_ZN7MCP25155resetEv+0x44>
    149a:	2e e0       	ldi	r18, 0x0E	; 14
    149c:	a8 01       	movw	r20, r16
    149e:	60 e3       	ldi	r22, 0x30	; 48
    14a0:	c7 01       	movw	r24, r14
    14a2:	be dd       	rcall	.-1156   	; 0x1020 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    14a4:	2e e0       	ldi	r18, 0x0E	; 14
    14a6:	a8 01       	movw	r20, r16
    14a8:	60 e4       	ldi	r22, 0x40	; 64
    14aa:	c7 01       	movw	r24, r14
    14ac:	b9 dd       	rcall	.-1166   	; 0x1020 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    14ae:	2e e0       	ldi	r18, 0x0E	; 14
    14b0:	a8 01       	movw	r20, r16
    14b2:	60 e5       	ldi	r22, 0x50	; 80
    14b4:	c7 01       	movw	r24, r14
    14b6:	b4 dd       	rcall	.-1176   	; 0x1020 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    14b8:	40 e0       	ldi	r20, 0x00	; 0
    14ba:	60 e6       	ldi	r22, 0x60	; 96
    14bc:	c7 01       	movw	r24, r14
    14be:	9c dd       	rcall	.-1224   	; 0xff8 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    14c0:	40 e0       	ldi	r20, 0x00	; 0
    14c2:	60 e7       	ldi	r22, 0x70	; 112
    14c4:	c7 01       	movw	r24, r14
    14c6:	98 dd       	rcall	.-1232   	; 0xff8 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    14c8:	43 ea       	ldi	r20, 0xA3	; 163
    14ca:	6b e2       	ldi	r22, 0x2B	; 43
    14cc:	c7 01       	movw	r24, r14
    14ce:	94 dd       	rcall	.-1240   	; 0xff8 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    14d0:	24 e0       	ldi	r18, 0x04	; 4
    14d2:	47 e6       	ldi	r20, 0x67	; 103
    14d4:	60 e6       	ldi	r22, 0x60	; 96
    14d6:	c7 01       	movw	r24, r14
    14d8:	c9 dd       	rcall	.-1134   	; 0x106c <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
    14da:	21 e0       	ldi	r18, 0x01	; 1
    14dc:	47 e6       	ldi	r20, 0x67	; 103
    14de:	60 e7       	ldi	r22, 0x70	; 112
    14e0:	c7 01       	movw	r24, r14
    14e2:	c4 dd       	rcall	.-1144   	; 0x106c <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
    14e4:	86 e0       	ldi	r24, 0x06	; 6
    14e6:	e9 e0       	ldi	r30, 0x09	; 9
    14e8:	f2 e0       	ldi	r31, 0x02	; 2
    14ea:	de 01       	movw	r26, r28
    14ec:	1f 96       	adiw	r26, 0x0f	; 15
    14ee:	01 90       	ld	r0, Z+
    14f0:	0d 92       	st	X+, r0
    14f2:	8a 95       	dec	r24
    14f4:	e1 f7       	brne	.-8      	; 0x14ee <_ZN7MCP25155resetEv+0x9e>
    14f6:	5e 01       	movw	r10, r28
    14f8:	ff e0       	ldi	r31, 0x0F	; 15
    14fa:	af 0e       	add	r10, r31
    14fc:	b1 1c       	adc	r11, r1
    14fe:	c1 2c       	mov	r12, r1
    1500:	d1 2c       	mov	r13, r1
    1502:	f5 01       	movw	r30, r10
    1504:	61 91       	ld	r22, Z+
    1506:	5f 01       	movw	r10, r30
    1508:	41 e0       	ldi	r20, 0x01	; 1
    150a:	f1 e0       	ldi	r31, 0x01	; 1
    150c:	cf 16       	cp	r12, r31
    150e:	d1 04       	cpc	r13, r1
    1510:	09 f0       	breq	.+2      	; 0x1514 <_ZN7MCP25155resetEv+0xc4>
    1512:	40 e0       	ldi	r20, 0x00	; 0
    1514:	00 e0       	ldi	r16, 0x00	; 0
    1516:	10 e0       	ldi	r17, 0x00	; 0
    1518:	98 01       	movw	r18, r16
    151a:	c7 01       	movw	r24, r14
    151c:	3c df       	rcall	.-392    	; 0x1396 <_ZN7MCP25159setFilterENS_3RXFEbm>
    151e:	81 11       	cpse	r24, r1
    1520:	17 c0       	rjmp	.+46     	; 0x1550 <_ZN7MCP25155resetEv+0x100>
    1522:	8f ef       	ldi	r24, 0xFF	; 255
    1524:	c8 1a       	sub	r12, r24
    1526:	d8 0a       	sbc	r13, r24
    1528:	e6 e0       	ldi	r30, 0x06	; 6
    152a:	ce 16       	cp	r12, r30
    152c:	d1 04       	cpc	r13, r1
    152e:	49 f7       	brne	.-46     	; 0x1502 <_ZN7MCP25155resetEv+0xb2>
    1530:	00 e0       	ldi	r16, 0x00	; 0
    1532:	10 e0       	ldi	r17, 0x00	; 0
    1534:	98 01       	movw	r18, r16
    1536:	41 e0       	ldi	r20, 0x01	; 1
    1538:	60 e0       	ldi	r22, 0x00	; 0
    153a:	c7 01       	movw	r24, r14
    153c:	ea de       	rcall	.-556    	; 0x1312 <_ZN7MCP251513setFilterMaskENS_4MASKEbm>
    153e:	81 11       	cpse	r24, r1
    1540:	07 c0       	rjmp	.+14     	; 0x1550 <_ZN7MCP25155resetEv+0x100>
    1542:	00 e0       	ldi	r16, 0x00	; 0
    1544:	10 e0       	ldi	r17, 0x00	; 0
    1546:	98 01       	movw	r18, r16
    1548:	41 e0       	ldi	r20, 0x01	; 1
    154a:	61 e0       	ldi	r22, 0x01	; 1
    154c:	c7 01       	movw	r24, r14
    154e:	e1 de       	rcall	.-574    	; 0x1312 <_ZN7MCP251513setFilterMaskENS_4MASKEbm>
    1550:	64 96       	adiw	r28, 0x14	; 20
    1552:	0f b6       	in	r0, 0x3f	; 63
    1554:	f8 94       	cli
    1556:	de bf       	out	0x3e, r29	; 62
    1558:	0f be       	out	0x3f, r0	; 63
    155a:	cd bf       	out	0x3d, r28	; 61
    155c:	df 91       	pop	r29
    155e:	cf 91       	pop	r28
    1560:	1f 91       	pop	r17
    1562:	0f 91       	pop	r16
    1564:	ff 90       	pop	r15
    1566:	ef 90       	pop	r14
    1568:	df 90       	pop	r13
    156a:	cf 90       	pop	r12
    156c:	bf 90       	pop	r11
    156e:	af 90       	pop	r10
    1570:	08 95       	ret

00001572 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>:

MCP2515::ERROR MCP2515::readMessage(const RXBn rxbn, struct can_frame *frame)
{
    1572:	7f 92       	push	r7
    1574:	8f 92       	push	r8
    1576:	9f 92       	push	r9
    1578:	af 92       	push	r10
    157a:	bf 92       	push	r11
    157c:	cf 92       	push	r12
    157e:	df 92       	push	r13
    1580:	ef 92       	push	r14
    1582:	ff 92       	push	r15
    1584:	0f 93       	push	r16
    1586:	1f 93       	push	r17
    1588:	cf 93       	push	r28
    158a:	df 93       	push	r29
    158c:	00 d0       	rcall	.+0      	; 0x158e <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x1c>
    158e:	1f 92       	push	r1
    1590:	1f 92       	push	r1
    1592:	cd b7       	in	r28, 0x3d	; 61
    1594:	de b7       	in	r29, 0x3e	; 62
    1596:	4c 01       	movw	r8, r24
    1598:	5a 01       	movw	r10, r20
    const struct RXBn_REGS *rxb = &RXB[rxbn];

    uint8_t tbufdata[5];

    readRegisters(rxb->SIDH, tbufdata, 5);
    159a:	24 e0       	ldi	r18, 0x04	; 4
    159c:	62 9f       	mul	r22, r18
    159e:	80 01       	movw	r16, r0
    15a0:	11 24       	eor	r1, r1
    15a2:	f8 01       	movw	r30, r16
    15a4:	ea 5d       	subi	r30, 0xDA	; 218
    15a6:	fd 4f       	sbci	r31, 0xFD	; 253
    15a8:	25 e0       	ldi	r18, 0x05	; 5
    15aa:	ae 01       	movw	r20, r28
    15ac:	4f 5f       	subi	r20, 0xFF	; 255
    15ae:	5f 4f       	sbci	r21, 0xFF	; 255
    15b0:	61 81       	ldd	r22, Z+1	; 0x01
    15b2:	fb dc       	rcall	.-1546   	; 0xfaa <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>

    uint32_t id = (tbufdata[MCP_SIDH]<<3) + (tbufdata[MCP_SIDL]>>5);
    15b4:	8a 81       	ldd	r24, Y+2	; 0x02
    15b6:	99 81       	ldd	r25, Y+1	; 0x01
    15b8:	c8 2e       	mov	r12, r24
    15ba:	d1 2c       	mov	r13, r1
    15bc:	45 e0       	ldi	r20, 0x05	; 5
    15be:	d5 94       	asr	r13
    15c0:	c7 94       	ror	r12
    15c2:	4a 95       	dec	r20
    15c4:	e1 f7       	brne	.-8      	; 0x15be <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x4c>
    15c6:	e8 e0       	ldi	r30, 0x08	; 8
    15c8:	9e 9f       	mul	r25, r30
    15ca:	c0 0c       	add	r12, r0
    15cc:	d1 1c       	adc	r13, r1
    15ce:	11 24       	eor	r1, r1
    15d0:	0d 2c       	mov	r0, r13
    15d2:	00 0c       	add	r0, r0
    15d4:	ee 08       	sbc	r14, r14
    15d6:	ff 08       	sbc	r15, r15

    if ( (tbufdata[MCP_SIDL] & TXB_EXIDE_MASK) ==  TXB_EXIDE_MASK ) {
    15d8:	83 ff       	sbrs	r24, 3
    15da:	20 c0       	rjmp	.+64     	; 0x161c <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xaa>
        id = (id<<2) + (tbufdata[MCP_SIDL] & 0x03);
    15dc:	92 e0       	ldi	r25, 0x02	; 2
    15de:	cc 0c       	add	r12, r12
    15e0:	dd 1c       	adc	r13, r13
    15e2:	ee 1c       	adc	r14, r14
    15e4:	ff 1c       	adc	r15, r15
    15e6:	9a 95       	dec	r25
    15e8:	d1 f7       	brne	.-12     	; 0x15de <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x6c>
        id = (id<<8) + tbufdata[MCP_EID8];
    15ea:	83 70       	andi	r24, 0x03	; 3
    15ec:	c8 0e       	add	r12, r24
    15ee:	d1 1c       	adc	r13, r1
    15f0:	e1 1c       	adc	r14, r1
    15f2:	f1 1c       	adc	r15, r1
    15f4:	fe 2c       	mov	r15, r14
    15f6:	ed 2c       	mov	r14, r13
    15f8:	dc 2c       	mov	r13, r12
    15fa:	cc 24       	eor	r12, r12
        id = (id<<8) + tbufdata[MCP_EID0];
    15fc:	8b 81       	ldd	r24, Y+3	; 0x03
    15fe:	c8 0e       	add	r12, r24
    1600:	d1 1c       	adc	r13, r1
    1602:	e1 1c       	adc	r14, r1
    1604:	f1 1c       	adc	r15, r1
    1606:	fe 2c       	mov	r15, r14
    1608:	ed 2c       	mov	r14, r13
    160a:	dc 2c       	mov	r13, r12
    160c:	cc 24       	eor	r12, r12
    160e:	8c 81       	ldd	r24, Y+4	; 0x04
    1610:	c8 0e       	add	r12, r24
    1612:	d1 1c       	adc	r13, r1
    1614:	e1 1c       	adc	r14, r1
    1616:	f1 1c       	adc	r15, r1
        id |= CAN_EFF_FLAG;
    1618:	68 94       	set
    161a:	f7 f8       	bld	r15, 7
    }

    uint8_t dlc = (tbufdata[MCP_DLC] & DLC_MASK);
    161c:	8d 81       	ldd	r24, Y+5	; 0x05
    161e:	8f 70       	andi	r24, 0x0F	; 15
    1620:	78 2e       	mov	r7, r24
    if (dlc > CAN_MAX_DLEN) {
    1622:	f8 e0       	ldi	r31, 0x08	; 8
    1624:	f8 17       	cp	r31, r24
    1626:	10 f1       	brcs	.+68     	; 0x166c <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xfa>
        return ERROR_FAIL;
    }

    uint8_t ctrl = readRegister(rxb->CTRL);
    1628:	f8 01       	movw	r30, r16
    162a:	ea 5d       	subi	r30, 0xDA	; 218
    162c:	fd 4f       	sbci	r31, 0xFD	; 253
    162e:	60 81       	ld	r22, Z
    1630:	c4 01       	movw	r24, r8
    1632:	a7 dc       	rcall	.-1714   	; 0xf82 <_ZN7MCP251512readRegisterENS_8REGISTERE>
    if (ctrl & RXBnCTRL_RTR) {
    1634:	83 ff       	sbrs	r24, 3
    1636:	02 c0       	rjmp	.+4      	; 0x163c <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xca>
        id |= CAN_RTR_FLAG;
    1638:	68 94       	set
    163a:	f6 f8       	bld	r15, 6
    }

    frame->can_id = id;
    163c:	f5 01       	movw	r30, r10
    163e:	c0 82       	st	Z, r12
    1640:	d1 82       	std	Z+1, r13	; 0x01
    1642:	e2 82       	std	Z+2, r14	; 0x02
    1644:	f3 82       	std	Z+3, r15	; 0x03
    frame->can_dlc = dlc;
    1646:	74 82       	std	Z+4, r7	; 0x04

    readRegisters(rxb->DATA, frame->data, dlc);
    1648:	a5 01       	movw	r20, r10
    164a:	48 5f       	subi	r20, 0xF8	; 248
    164c:	5f 4f       	sbci	r21, 0xFF	; 255
    164e:	0a 5d       	subi	r16, 0xDA	; 218
    1650:	1d 4f       	sbci	r17, 0xFD	; 253
    1652:	27 2d       	mov	r18, r7
    1654:	f8 01       	movw	r30, r16
    1656:	62 81       	ldd	r22, Z+2	; 0x02
    1658:	c4 01       	movw	r24, r8
    165a:	a7 dc       	rcall	.-1714   	; 0xfaa <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>

    modifyRegister(MCP_CANINTF, rxb->CANINTF_RXnIF, 0);
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	f8 01       	movw	r30, r16
    1660:	43 81       	ldd	r20, Z+3	; 0x03
    1662:	6c e2       	ldi	r22, 0x2C	; 44
    1664:	c4 01       	movw	r24, r8
    1666:	02 dd       	rcall	.-1532   	; 0x106c <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>

    return ERROR_OK;
    1668:	80 e0       	ldi	r24, 0x00	; 0
    166a:	01 c0       	rjmp	.+2      	; 0x166e <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xfc>
        id |= CAN_EFF_FLAG;
    }

    uint8_t dlc = (tbufdata[MCP_DLC] & DLC_MASK);
    if (dlc > CAN_MAX_DLEN) {
        return ERROR_FAIL;
    166c:	81 e0       	ldi	r24, 0x01	; 1
    readRegisters(rxb->DATA, frame->data, dlc);

    modifyRegister(MCP_CANINTF, rxb->CANINTF_RXnIF, 0);

    return ERROR_OK;
}
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	0f 90       	pop	r0
    1674:	0f 90       	pop	r0
    1676:	0f 90       	pop	r0
    1678:	df 91       	pop	r29
    167a:	cf 91       	pop	r28
    167c:	1f 91       	pop	r17
    167e:	0f 91       	pop	r16
    1680:	ff 90       	pop	r15
    1682:	ef 90       	pop	r14
    1684:	df 90       	pop	r13
    1686:	cf 90       	pop	r12
    1688:	bf 90       	pop	r11
    168a:	af 90       	pop	r10
    168c:	9f 90       	pop	r9
    168e:	8f 90       	pop	r8
    1690:	7f 90       	pop	r7
    1692:	08 95       	ret

00001694 <_ZN7MCP251511readMessageEP9can_frame>:

MCP2515::ERROR MCP2515::readMessage(struct can_frame *frame)
{
    1694:	0f 93       	push	r16
    1696:	1f 93       	push	r17
    1698:	cf 93       	push	r28
    169a:	df 93       	push	r29
    169c:	ec 01       	movw	r28, r24
    169e:	8b 01       	movw	r16, r22
    ERROR rc;
    uint8_t stat = getStatus();
    16a0:	fe dc       	rcall	.-1540   	; 0x109e <_ZN7MCP25159getStatusEv>

    if ( stat & STAT_RX0IF ) {
    16a2:	80 ff       	sbrs	r24, 0
    16a4:	03 c0       	rjmp	.+6      	; 0x16ac <_ZN7MCP251511readMessageEP9can_frame+0x18>
        rc = readMessage(RXB0, frame);
    16a6:	a8 01       	movw	r20, r16
    16a8:	60 e0       	ldi	r22, 0x00	; 0
    16aa:	04 c0       	rjmp	.+8      	; 0x16b4 <_ZN7MCP251511readMessageEP9can_frame+0x20>
    } else if ( stat & STAT_RX1IF ) {
    16ac:	81 ff       	sbrs	r24, 1
    16ae:	08 c0       	rjmp	.+16     	; 0x16c0 <_ZN7MCP251511readMessageEP9can_frame+0x2c>
        rc = readMessage(RXB1, frame);
    16b0:	a8 01       	movw	r20, r16
    16b2:	61 e0       	ldi	r22, 0x01	; 1
    16b4:	ce 01       	movw	r24, r28
    } else {
        rc = ERROR_NOMSG;
    }

    return rc;
}
    16b6:	df 91       	pop	r29
    16b8:	cf 91       	pop	r28
    16ba:	1f 91       	pop	r17
    uint8_t stat = getStatus();

    if ( stat & STAT_RX0IF ) {
        rc = readMessage(RXB0, frame);
    } else if ( stat & STAT_RX1IF ) {
        rc = readMessage(RXB1, frame);
    16bc:	0f 91       	pop	r16
    16be:	59 cf       	rjmp	.-334    	; 0x1572 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>
    } else {
        rc = ERROR_NOMSG;
    }

    return rc;
}
    16c0:	85 e0       	ldi	r24, 0x05	; 5
    16c2:	df 91       	pop	r29
    16c4:	cf 91       	pop	r28
    16c6:	1f 91       	pop	r17
    16c8:	0f 91       	pop	r16
    16ca:	08 95       	ret

000016cc <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    16cc:	0f b6       	in	r0, 0x3f	; 63
    16ce:	f8 94       	cli
    16d0:	0f 92       	push	r0
    16d2:	fc 01       	movw	r30, r24
    16d4:	92 8d       	ldd	r25, Z+26	; 0x1a
    16d6:	0f 90       	pop	r0
    16d8:	0f be       	out	0x3f, r0	; 63
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	91 11       	cpse	r25, r1
    16de:	80 e0       	ldi	r24, 0x00	; 0
    16e0:	08 95       	ret

000016e2 <prvCopyDataToQueue>:
    16e2:	0f 93       	push	r16
    16e4:	1f 93       	push	r17
    16e6:	cf 93       	push	r28
    16e8:	df 93       	push	r29
    16ea:	ec 01       	movw	r28, r24
    16ec:	04 2f       	mov	r16, r20
    16ee:	1a 8d       	ldd	r17, Y+26	; 0x1a
    16f0:	4c 8d       	ldd	r20, Y+28	; 0x1c
    16f2:	41 11       	cpse	r20, r1
    16f4:	0b c0       	rjmp	.+22     	; 0x170c <prvCopyDataToQueue+0x2a>
    16f6:	88 81       	ld	r24, Y
    16f8:	99 81       	ldd	r25, Y+1	; 0x01
    16fa:	89 2b       	or	r24, r25
    16fc:	e9 f5       	brne	.+122    	; 0x1778 <prvCopyDataToQueue+0x96>
    16fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1700:	9d 81       	ldd	r25, Y+5	; 0x05
    1702:	0e 94 8c 13 	call	0x2718	; 0x2718 <xTaskPriorityDisinherit>
    1706:	1d 82       	std	Y+5, r1	; 0x05
    1708:	1c 82       	std	Y+4, r1	; 0x04
    170a:	37 c0       	rjmp	.+110    	; 0x177a <prvCopyDataToQueue+0x98>
    170c:	50 e0       	ldi	r21, 0x00	; 0
    170e:	01 11       	cpse	r16, r1
    1710:	15 c0       	rjmp	.+42     	; 0x173c <prvCopyDataToQueue+0x5a>
    1712:	8a 81       	ldd	r24, Y+2	; 0x02
    1714:	9b 81       	ldd	r25, Y+3	; 0x03
    1716:	0e 94 92 18 	call	0x3124	; 0x3124 <memcpy>
    171a:	2c 8d       	ldd	r18, Y+28	; 0x1c
    171c:	8a 81       	ldd	r24, Y+2	; 0x02
    171e:	9b 81       	ldd	r25, Y+3	; 0x03
    1720:	82 0f       	add	r24, r18
    1722:	91 1d       	adc	r25, r1
    1724:	9b 83       	std	Y+3, r25	; 0x03
    1726:	8a 83       	std	Y+2, r24	; 0x02
    1728:	2c 81       	ldd	r18, Y+4	; 0x04
    172a:	3d 81       	ldd	r19, Y+5	; 0x05
    172c:	82 17       	cp	r24, r18
    172e:	93 07       	cpc	r25, r19
    1730:	18 f1       	brcs	.+70     	; 0x1778 <prvCopyDataToQueue+0x96>
    1732:	88 81       	ld	r24, Y
    1734:	99 81       	ldd	r25, Y+1	; 0x01
    1736:	9b 83       	std	Y+3, r25	; 0x03
    1738:	8a 83       	std	Y+2, r24	; 0x02
    173a:	1e c0       	rjmp	.+60     	; 0x1778 <prvCopyDataToQueue+0x96>
    173c:	8e 81       	ldd	r24, Y+6	; 0x06
    173e:	9f 81       	ldd	r25, Y+7	; 0x07
    1740:	0e 94 92 18 	call	0x3124	; 0x3124 <memcpy>
    1744:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	91 95       	neg	r25
    174a:	81 95       	neg	r24
    174c:	91 09       	sbc	r25, r1
    174e:	2e 81       	ldd	r18, Y+6	; 0x06
    1750:	3f 81       	ldd	r19, Y+7	; 0x07
    1752:	28 0f       	add	r18, r24
    1754:	39 1f       	adc	r19, r25
    1756:	3f 83       	std	Y+7, r19	; 0x07
    1758:	2e 83       	std	Y+6, r18	; 0x06
    175a:	48 81       	ld	r20, Y
    175c:	59 81       	ldd	r21, Y+1	; 0x01
    175e:	24 17       	cp	r18, r20
    1760:	35 07       	cpc	r19, r21
    1762:	30 f4       	brcc	.+12     	; 0x1770 <prvCopyDataToQueue+0x8e>
    1764:	2c 81       	ldd	r18, Y+4	; 0x04
    1766:	3d 81       	ldd	r19, Y+5	; 0x05
    1768:	82 0f       	add	r24, r18
    176a:	93 1f       	adc	r25, r19
    176c:	9f 83       	std	Y+7, r25	; 0x07
    176e:	8e 83       	std	Y+6, r24	; 0x06
    1770:	02 30       	cpi	r16, 0x02	; 2
    1772:	11 f4       	brne	.+4      	; 0x1778 <prvCopyDataToQueue+0x96>
    1774:	11 11       	cpse	r17, r1
    1776:	11 50       	subi	r17, 0x01	; 1
    1778:	80 e0       	ldi	r24, 0x00	; 0
    177a:	1f 5f       	subi	r17, 0xFF	; 255
    177c:	1a 8f       	std	Y+26, r17	; 0x1a
    177e:	df 91       	pop	r29
    1780:	cf 91       	pop	r28
    1782:	1f 91       	pop	r17
    1784:	0f 91       	pop	r16
    1786:	08 95       	ret

00001788 <prvCopyDataFromQueue>:
    1788:	fc 01       	movw	r30, r24
    178a:	cb 01       	movw	r24, r22
    178c:	44 8d       	ldd	r20, Z+28	; 0x1c
    178e:	44 23       	and	r20, r20
    1790:	a1 f0       	breq	.+40     	; 0x17ba <prvCopyDataFromQueue+0x32>
    1792:	50 e0       	ldi	r21, 0x00	; 0
    1794:	26 81       	ldd	r18, Z+6	; 0x06
    1796:	37 81       	ldd	r19, Z+7	; 0x07
    1798:	24 0f       	add	r18, r20
    179a:	35 1f       	adc	r19, r21
    179c:	37 83       	std	Z+7, r19	; 0x07
    179e:	26 83       	std	Z+6, r18	; 0x06
    17a0:	64 81       	ldd	r22, Z+4	; 0x04
    17a2:	75 81       	ldd	r23, Z+5	; 0x05
    17a4:	26 17       	cp	r18, r22
    17a6:	37 07       	cpc	r19, r23
    17a8:	20 f0       	brcs	.+8      	; 0x17b2 <prvCopyDataFromQueue+0x2a>
    17aa:	20 81       	ld	r18, Z
    17ac:	31 81       	ldd	r19, Z+1	; 0x01
    17ae:	37 83       	std	Z+7, r19	; 0x07
    17b0:	26 83       	std	Z+6, r18	; 0x06
    17b2:	66 81       	ldd	r22, Z+6	; 0x06
    17b4:	77 81       	ldd	r23, Z+7	; 0x07
    17b6:	0c 94 92 18 	jmp	0x3124	; 0x3124 <memcpy>
    17ba:	08 95       	ret

000017bc <prvUnlockQueue>:
    17bc:	ef 92       	push	r14
    17be:	ff 92       	push	r15
    17c0:	1f 93       	push	r17
    17c2:	cf 93       	push	r28
    17c4:	df 93       	push	r29
    17c6:	ec 01       	movw	r28, r24
    17c8:	0f b6       	in	r0, 0x3f	; 63
    17ca:	f8 94       	cli
    17cc:	0f 92       	push	r0
    17ce:	1e 8d       	ldd	r17, Y+30	; 0x1e
    17d0:	7c 01       	movw	r14, r24
    17d2:	81 e1       	ldi	r24, 0x11	; 17
    17d4:	e8 0e       	add	r14, r24
    17d6:	f1 1c       	adc	r15, r1
    17d8:	11 16       	cp	r1, r17
    17da:	4c f4       	brge	.+18     	; 0x17ee <prvUnlockQueue+0x32>
    17dc:	89 89       	ldd	r24, Y+17	; 0x11
    17de:	88 23       	and	r24, r24
    17e0:	31 f0       	breq	.+12     	; 0x17ee <prvUnlockQueue+0x32>
    17e2:	c7 01       	movw	r24, r14
    17e4:	9f d6       	rcall	.+3390   	; 0x2524 <xTaskRemoveFromEventList>
    17e6:	81 11       	cpse	r24, r1
    17e8:	85 d7       	rcall	.+3850   	; 0x26f4 <vTaskMissedYield>
    17ea:	11 50       	subi	r17, 0x01	; 1
    17ec:	f5 cf       	rjmp	.-22     	; 0x17d8 <prvUnlockQueue+0x1c>
    17ee:	8f ef       	ldi	r24, 0xFF	; 255
    17f0:	8e 8f       	std	Y+30, r24	; 0x1e
    17f2:	0f 90       	pop	r0
    17f4:	0f be       	out	0x3f, r0	; 63
    17f6:	0f b6       	in	r0, 0x3f	; 63
    17f8:	f8 94       	cli
    17fa:	0f 92       	push	r0
    17fc:	1d 8d       	ldd	r17, Y+29	; 0x1d
    17fe:	7e 01       	movw	r14, r28
    1800:	88 e0       	ldi	r24, 0x08	; 8
    1802:	e8 0e       	add	r14, r24
    1804:	f1 1c       	adc	r15, r1
    1806:	11 16       	cp	r1, r17
    1808:	4c f4       	brge	.+18     	; 0x181c <prvUnlockQueue+0x60>
    180a:	88 85       	ldd	r24, Y+8	; 0x08
    180c:	88 23       	and	r24, r24
    180e:	31 f0       	breq	.+12     	; 0x181c <prvUnlockQueue+0x60>
    1810:	c7 01       	movw	r24, r14
    1812:	88 d6       	rcall	.+3344   	; 0x2524 <xTaskRemoveFromEventList>
    1814:	81 11       	cpse	r24, r1
    1816:	6e d7       	rcall	.+3804   	; 0x26f4 <vTaskMissedYield>
    1818:	11 50       	subi	r17, 0x01	; 1
    181a:	f5 cf       	rjmp	.-22     	; 0x1806 <prvUnlockQueue+0x4a>
    181c:	8f ef       	ldi	r24, 0xFF	; 255
    181e:	8d 8f       	std	Y+29, r24	; 0x1d
    1820:	0f 90       	pop	r0
    1822:	0f be       	out	0x3f, r0	; 63
    1824:	df 91       	pop	r29
    1826:	cf 91       	pop	r28
    1828:	1f 91       	pop	r17
    182a:	ff 90       	pop	r15
    182c:	ef 90       	pop	r14
    182e:	08 95       	ret

00001830 <xQueueGenericReset>:
    1830:	cf 93       	push	r28
    1832:	df 93       	push	r29
    1834:	00 97       	sbiw	r24, 0x00	; 0
    1836:	09 f4       	brne	.+2      	; 0x183a <xQueueGenericReset+0xa>
    1838:	3f c0       	rjmp	.+126    	; 0x18b8 <xQueueGenericReset+0x88>
    183a:	fc 01       	movw	r30, r24
    183c:	23 8d       	ldd	r18, Z+27	; 0x1b
    183e:	22 23       	and	r18, r18
    1840:	09 f4       	brne	.+2      	; 0x1844 <xQueueGenericReset+0x14>
    1842:	3a c0       	rjmp	.+116    	; 0x18b8 <xQueueGenericReset+0x88>
    1844:	ec 01       	movw	r28, r24
    1846:	0f b6       	in	r0, 0x3f	; 63
    1848:	f8 94       	cli
    184a:	0f 92       	push	r0
    184c:	40 81       	ld	r20, Z
    184e:	51 81       	ldd	r21, Z+1	; 0x01
    1850:	83 8d       	ldd	r24, Z+27	; 0x1b
    1852:	74 8d       	ldd	r23, Z+28	; 0x1c
    1854:	9a 01       	movw	r18, r20
    1856:	87 9f       	mul	r24, r23
    1858:	20 0d       	add	r18, r0
    185a:	31 1d       	adc	r19, r1
    185c:	11 24       	eor	r1, r1
    185e:	35 83       	std	Z+5, r19	; 0x05
    1860:	24 83       	std	Z+4, r18	; 0x04
    1862:	12 8e       	std	Z+26, r1	; 0x1a
    1864:	53 83       	std	Z+3, r21	; 0x03
    1866:	42 83       	std	Z+2, r20	; 0x02
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	01 97       	sbiw	r24, 0x01	; 1
    186c:	78 9f       	mul	r23, r24
    186e:	90 01       	movw	r18, r0
    1870:	79 9f       	mul	r23, r25
    1872:	30 0d       	add	r19, r0
    1874:	11 24       	eor	r1, r1
    1876:	ca 01       	movw	r24, r20
    1878:	82 0f       	add	r24, r18
    187a:	93 1f       	adc	r25, r19
    187c:	97 83       	std	Z+7, r25	; 0x07
    187e:	86 83       	std	Z+6, r24	; 0x06
    1880:	8f ef       	ldi	r24, 0xFF	; 255
    1882:	85 8f       	std	Z+29, r24	; 0x1d
    1884:	86 8f       	std	Z+30, r24	; 0x1e
    1886:	61 11       	cpse	r22, r1
    1888:	0b c0       	rjmp	.+22     	; 0x18a0 <xQueueGenericReset+0x70>
    188a:	80 85       	ldd	r24, Z+8	; 0x08
    188c:	88 23       	and	r24, r24
    188e:	81 f0       	breq	.+32     	; 0x18b0 <xQueueGenericReset+0x80>
    1890:	cf 01       	movw	r24, r30
    1892:	08 96       	adiw	r24, 0x08	; 8
    1894:	47 d6       	rcall	.+3214   	; 0x2524 <xTaskRemoveFromEventList>
    1896:	88 23       	and	r24, r24
    1898:	59 f0       	breq	.+22     	; 0x18b0 <xQueueGenericReset+0x80>
    189a:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <vPortYield>
    189e:	08 c0       	rjmp	.+16     	; 0x18b0 <xQueueGenericReset+0x80>
    18a0:	cf 01       	movw	r24, r30
    18a2:	08 96       	adiw	r24, 0x08	; 8
    18a4:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <vListInitialise>
    18a8:	ce 01       	movw	r24, r28
    18aa:	41 96       	adiw	r24, 0x11	; 17
    18ac:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <vListInitialise>
    18b0:	0f 90       	pop	r0
    18b2:	0f be       	out	0x3f, r0	; 63
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	01 c0       	rjmp	.+2      	; 0x18ba <xQueueGenericReset+0x8a>
    18b8:	80 e0       	ldi	r24, 0x00	; 0
    18ba:	df 91       	pop	r29
    18bc:	cf 91       	pop	r28
    18be:	08 95       	ret

000018c0 <xQueueGenericCreateStatic>:
    18c0:	cf 93       	push	r28
    18c2:	df 93       	push	r29
    18c4:	e9 01       	movw	r28, r18
    18c6:	88 23       	and	r24, r24
    18c8:	c9 f0       	breq	.+50     	; 0x18fc <xQueueGenericCreateStatic+0x3c>
    18ca:	20 97       	sbiw	r28, 0x00	; 0
    18cc:	c9 f0       	breq	.+50     	; 0x1900 <xQueueGenericCreateStatic+0x40>
    18ce:	41 15       	cp	r20, r1
    18d0:	51 05       	cpc	r21, r1
    18d2:	19 f0       	breq	.+6      	; 0x18da <xQueueGenericCreateStatic+0x1a>
    18d4:	61 11       	cpse	r22, r1
    18d6:	03 c0       	rjmp	.+6      	; 0x18de <xQueueGenericCreateStatic+0x1e>
    18d8:	11 c0       	rjmp	.+34     	; 0x18fc <xQueueGenericCreateStatic+0x3c>
    18da:	61 11       	cpse	r22, r1
    18dc:	0f c0       	rjmp	.+30     	; 0x18fc <xQueueGenericCreateStatic+0x3c>
    18de:	91 e0       	ldi	r25, 0x01	; 1
    18e0:	9f 8f       	std	Y+31, r25	; 0x1f
    18e2:	61 11       	cpse	r22, r1
    18e4:	03 c0       	rjmp	.+6      	; 0x18ec <xQueueGenericCreateStatic+0x2c>
    18e6:	d9 83       	std	Y+1, r29	; 0x01
    18e8:	c8 83       	st	Y, r28
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <xQueueGenericCreateStatic+0x30>
    18ec:	59 83       	std	Y+1, r21	; 0x01
    18ee:	48 83       	st	Y, r20
    18f0:	8b 8f       	std	Y+27, r24	; 0x1b
    18f2:	6c 8f       	std	Y+28, r22	; 0x1c
    18f4:	61 e0       	ldi	r22, 0x01	; 1
    18f6:	ce 01       	movw	r24, r28
    18f8:	9b df       	rcall	.-202    	; 0x1830 <xQueueGenericReset>
    18fa:	02 c0       	rjmp	.+4      	; 0x1900 <xQueueGenericCreateStatic+0x40>
    18fc:	c0 e0       	ldi	r28, 0x00	; 0
    18fe:	d0 e0       	ldi	r29, 0x00	; 0
    1900:	ce 01       	movw	r24, r28
    1902:	df 91       	pop	r29
    1904:	cf 91       	pop	r28
    1906:	08 95       	ret

00001908 <xQueueGenericSend>:
    1908:	af 92       	push	r10
    190a:	bf 92       	push	r11
    190c:	cf 92       	push	r12
    190e:	df 92       	push	r13
    1910:	ff 92       	push	r15
    1912:	0f 93       	push	r16
    1914:	1f 93       	push	r17
    1916:	cf 93       	push	r28
    1918:	df 93       	push	r29
    191a:	00 d0       	rcall	.+0      	; 0x191c <xQueueGenericSend+0x14>
    191c:	1f 92       	push	r1
    191e:	1f 92       	push	r1
    1920:	cd b7       	in	r28, 0x3d	; 61
    1922:	de b7       	in	r29, 0x3e	; 62
    1924:	8c 01       	movw	r16, r24
    1926:	6b 01       	movw	r12, r22
    1928:	5d 83       	std	Y+5, r21	; 0x05
    192a:	4c 83       	std	Y+4, r20	; 0x04
    192c:	f2 2e       	mov	r15, r18
    192e:	80 e0       	ldi	r24, 0x00	; 0
    1930:	58 01       	movw	r10, r16
    1932:	98 e0       	ldi	r25, 0x08	; 8
    1934:	a9 0e       	add	r10, r25
    1936:	b1 1c       	adc	r11, r1
    1938:	0f b6       	in	r0, 0x3f	; 63
    193a:	f8 94       	cli
    193c:	0f 92       	push	r0
    193e:	f8 01       	movw	r30, r16
    1940:	22 8d       	ldd	r18, Z+26	; 0x1a
    1942:	93 8d       	ldd	r25, Z+27	; 0x1b
    1944:	29 17       	cp	r18, r25
    1946:	18 f0       	brcs	.+6      	; 0x194e <xQueueGenericSend+0x46>
    1948:	f2 e0       	ldi	r31, 0x02	; 2
    194a:	ff 12       	cpse	r15, r31
    194c:	12 c0       	rjmp	.+36     	; 0x1972 <xQueueGenericSend+0x6a>
    194e:	4f 2d       	mov	r20, r15
    1950:	b6 01       	movw	r22, r12
    1952:	c8 01       	movw	r24, r16
    1954:	c6 de       	rcall	.-628    	; 0x16e2 <prvCopyDataToQueue>
    1956:	f8 01       	movw	r30, r16
    1958:	91 89       	ldd	r25, Z+17	; 0x11
    195a:	99 23       	and	r25, r25
    195c:	19 f0       	breq	.+6      	; 0x1964 <xQueueGenericSend+0x5c>
    195e:	c8 01       	movw	r24, r16
    1960:	41 96       	adiw	r24, 0x11	; 17
    1962:	e0 d5       	rcall	.+3008   	; 0x2524 <xTaskRemoveFromEventList>
    1964:	81 11       	cpse	r24, r1
    1966:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <vPortYield>
    196a:	0f 90       	pop	r0
    196c:	0f be       	out	0x3f, r0	; 63
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	46 c0       	rjmp	.+140    	; 0x19fe <xQueueGenericSend+0xf6>
    1972:	2c 81       	ldd	r18, Y+4	; 0x04
    1974:	3d 81       	ldd	r19, Y+5	; 0x05
    1976:	23 2b       	or	r18, r19
    1978:	19 f4       	brne	.+6      	; 0x1980 <xQueueGenericSend+0x78>
    197a:	0f 90       	pop	r0
    197c:	0f be       	out	0x3f, r0	; 63
    197e:	3e c0       	rjmp	.+124    	; 0x19fc <xQueueGenericSend+0xf4>
    1980:	81 11       	cpse	r24, r1
    1982:	03 c0       	rjmp	.+6      	; 0x198a <xQueueGenericSend+0x82>
    1984:	ce 01       	movw	r24, r28
    1986:	01 96       	adiw	r24, 0x01	; 1
    1988:	79 d6       	rcall	.+3314   	; 0x267c <vTaskInternalSetTimeOutState>
    198a:	0f 90       	pop	r0
    198c:	0f be       	out	0x3f, r0	; 63
    198e:	37 d3       	rcall	.+1646   	; 0x1ffe <vTaskSuspendAll>
    1990:	0f b6       	in	r0, 0x3f	; 63
    1992:	f8 94       	cli
    1994:	0f 92       	push	r0
    1996:	f8 01       	movw	r30, r16
    1998:	85 8d       	ldd	r24, Z+29	; 0x1d
    199a:	8f 3f       	cpi	r24, 0xFF	; 255
    199c:	09 f4       	brne	.+2      	; 0x19a0 <xQueueGenericSend+0x98>
    199e:	15 8e       	std	Z+29, r1	; 0x1d
    19a0:	f8 01       	movw	r30, r16
    19a2:	86 8d       	ldd	r24, Z+30	; 0x1e
    19a4:	8f 3f       	cpi	r24, 0xFF	; 255
    19a6:	09 f4       	brne	.+2      	; 0x19aa <xQueueGenericSend+0xa2>
    19a8:	16 8e       	std	Z+30, r1	; 0x1e
    19aa:	0f 90       	pop	r0
    19ac:	0f be       	out	0x3f, r0	; 63
    19ae:	be 01       	movw	r22, r28
    19b0:	6c 5f       	subi	r22, 0xFC	; 252
    19b2:	7f 4f       	sbci	r23, 0xFF	; 255
    19b4:	ce 01       	movw	r24, r28
    19b6:	01 96       	adiw	r24, 0x01	; 1
    19b8:	6c d6       	rcall	.+3288   	; 0x2692 <xTaskCheckForTimeOut>
    19ba:	81 11       	cpse	r24, r1
    19bc:	1c c0       	rjmp	.+56     	; 0x19f6 <xQueueGenericSend+0xee>
    19be:	0f b6       	in	r0, 0x3f	; 63
    19c0:	f8 94       	cli
    19c2:	0f 92       	push	r0
    19c4:	f8 01       	movw	r30, r16
    19c6:	92 8d       	ldd	r25, Z+26	; 0x1a
    19c8:	83 8d       	ldd	r24, Z+27	; 0x1b
    19ca:	0f 90       	pop	r0
    19cc:	0f be       	out	0x3f, r0	; 63
    19ce:	98 13       	cpse	r25, r24
    19d0:	0e c0       	rjmp	.+28     	; 0x19ee <xQueueGenericSend+0xe6>
    19d2:	6c 81       	ldd	r22, Y+4	; 0x04
    19d4:	7d 81       	ldd	r23, Y+5	; 0x05
    19d6:	c5 01       	movw	r24, r10
    19d8:	4f d5       	rcall	.+2718   	; 0x2478 <vTaskPlaceOnEventList>
    19da:	c8 01       	movw	r24, r16
    19dc:	ef de       	rcall	.-546    	; 0x17bc <prvUnlockQueue>
    19de:	28 d4       	rcall	.+2128   	; 0x2230 <xTaskResumeAll>
    19e0:	88 23       	and	r24, r24
    19e2:	11 f0       	breq	.+4      	; 0x19e8 <xQueueGenericSend+0xe0>
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	a8 cf       	rjmp	.-176    	; 0x1938 <xQueueGenericSend+0x30>
    19e8:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <vPortYield>
    19ec:	fb cf       	rjmp	.-10     	; 0x19e4 <xQueueGenericSend+0xdc>
    19ee:	c8 01       	movw	r24, r16
    19f0:	e5 de       	rcall	.-566    	; 0x17bc <prvUnlockQueue>
    19f2:	1e d4       	rcall	.+2108   	; 0x2230 <xTaskResumeAll>
    19f4:	f7 cf       	rjmp	.-18     	; 0x19e4 <xQueueGenericSend+0xdc>
    19f6:	c8 01       	movw	r24, r16
    19f8:	e1 de       	rcall	.-574    	; 0x17bc <prvUnlockQueue>
    19fa:	1a d4       	rcall	.+2100   	; 0x2230 <xTaskResumeAll>
    19fc:	80 e0       	ldi	r24, 0x00	; 0
    19fe:	0f 90       	pop	r0
    1a00:	0f 90       	pop	r0
    1a02:	0f 90       	pop	r0
    1a04:	0f 90       	pop	r0
    1a06:	0f 90       	pop	r0
    1a08:	df 91       	pop	r29
    1a0a:	cf 91       	pop	r28
    1a0c:	1f 91       	pop	r17
    1a0e:	0f 91       	pop	r16
    1a10:	ff 90       	pop	r15
    1a12:	df 90       	pop	r13
    1a14:	cf 90       	pop	r12
    1a16:	bf 90       	pop	r11
    1a18:	af 90       	pop	r10
    1a1a:	08 95       	ret

00001a1c <xQueueGenericSendFromISR>:
    1a1c:	ef 92       	push	r14
    1a1e:	ff 92       	push	r15
    1a20:	1f 93       	push	r17
    1a22:	cf 93       	push	r28
    1a24:	df 93       	push	r29
    1a26:	ec 01       	movw	r28, r24
    1a28:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1a2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a2c:	98 17       	cp	r25, r24
    1a2e:	10 f0       	brcs	.+4      	; 0x1a34 <xQueueGenericSendFromISR+0x18>
    1a30:	22 30       	cpi	r18, 0x02	; 2
    1a32:	f1 f4       	brne	.+60     	; 0x1a70 <xQueueGenericSendFromISR+0x54>
    1a34:	7a 01       	movw	r14, r20
    1a36:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1a38:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1a3a:	42 2f       	mov	r20, r18
    1a3c:	ce 01       	movw	r24, r28
    1a3e:	51 de       	rcall	.-862    	; 0x16e2 <prvCopyDataToQueue>
    1a40:	1f 3f       	cpi	r17, 0xFF	; 255
    1a42:	79 f4       	brne	.+30     	; 0x1a62 <xQueueGenericSendFromISR+0x46>
    1a44:	89 89       	ldd	r24, Y+17	; 0x11
    1a46:	88 23       	and	r24, r24
    1a48:	89 f0       	breq	.+34     	; 0x1a6c <xQueueGenericSendFromISR+0x50>
    1a4a:	ce 01       	movw	r24, r28
    1a4c:	41 96       	adiw	r24, 0x11	; 17
    1a4e:	6a d5       	rcall	.+2772   	; 0x2524 <xTaskRemoveFromEventList>
    1a50:	88 23       	and	r24, r24
    1a52:	61 f0       	breq	.+24     	; 0x1a6c <xQueueGenericSendFromISR+0x50>
    1a54:	e1 14       	cp	r14, r1
    1a56:	f1 04       	cpc	r15, r1
    1a58:	49 f0       	breq	.+18     	; 0x1a6c <xQueueGenericSendFromISR+0x50>
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	f7 01       	movw	r30, r14
    1a5e:	80 83       	st	Z, r24
    1a60:	08 c0       	rjmp	.+16     	; 0x1a72 <xQueueGenericSendFromISR+0x56>
    1a62:	dd d2       	rcall	.+1466   	; 0x201e <uxTaskGetNumberOfTasks>
    1a64:	18 17       	cp	r17, r24
    1a66:	10 f4       	brcc	.+4      	; 0x1a6c <xQueueGenericSendFromISR+0x50>
    1a68:	1f 5f       	subi	r17, 0xFF	; 255
    1a6a:	1e 8f       	std	Y+30, r17	; 0x1e
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	01 c0       	rjmp	.+2      	; 0x1a72 <xQueueGenericSendFromISR+0x56>
    1a70:	80 e0       	ldi	r24, 0x00	; 0
    1a72:	df 91       	pop	r29
    1a74:	cf 91       	pop	r28
    1a76:	1f 91       	pop	r17
    1a78:	ff 90       	pop	r15
    1a7a:	ef 90       	pop	r14
    1a7c:	08 95       	ret

00001a7e <xQueueReceive>:
    1a7e:	af 92       	push	r10
    1a80:	bf 92       	push	r11
    1a82:	cf 92       	push	r12
    1a84:	df 92       	push	r13
    1a86:	ff 92       	push	r15
    1a88:	0f 93       	push	r16
    1a8a:	1f 93       	push	r17
    1a8c:	cf 93       	push	r28
    1a8e:	df 93       	push	r29
    1a90:	00 d0       	rcall	.+0      	; 0x1a92 <xQueueReceive+0x14>
    1a92:	1f 92       	push	r1
    1a94:	1f 92       	push	r1
    1a96:	cd b7       	in	r28, 0x3d	; 61
    1a98:	de b7       	in	r29, 0x3e	; 62
    1a9a:	8c 01       	movw	r16, r24
    1a9c:	6b 01       	movw	r12, r22
    1a9e:	5d 83       	std	Y+5, r21	; 0x05
    1aa0:	4c 83       	std	Y+4, r20	; 0x04
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
    1aa4:	58 01       	movw	r10, r16
    1aa6:	91 e1       	ldi	r25, 0x11	; 17
    1aa8:	a9 0e       	add	r10, r25
    1aaa:	b1 1c       	adc	r11, r1
    1aac:	0f b6       	in	r0, 0x3f	; 63
    1aae:	f8 94       	cli
    1ab0:	0f 92       	push	r0
    1ab2:	f8 01       	movw	r30, r16
    1ab4:	f2 8c       	ldd	r15, Z+26	; 0x1a
    1ab6:	ff 20       	and	r15, r15
    1ab8:	99 f0       	breq	.+38     	; 0x1ae0 <xQueueReceive+0x62>
    1aba:	b6 01       	movw	r22, r12
    1abc:	c8 01       	movw	r24, r16
    1abe:	64 de       	rcall	.-824    	; 0x1788 <prvCopyDataFromQueue>
    1ac0:	fa 94       	dec	r15
    1ac2:	f8 01       	movw	r30, r16
    1ac4:	f2 8e       	std	Z+26, r15	; 0x1a
    1ac6:	80 85       	ldd	r24, Z+8	; 0x08
    1ac8:	88 23       	and	r24, r24
    1aca:	31 f0       	breq	.+12     	; 0x1ad8 <xQueueReceive+0x5a>
    1acc:	c8 01       	movw	r24, r16
    1ace:	08 96       	adiw	r24, 0x08	; 8
    1ad0:	29 d5       	rcall	.+2642   	; 0x2524 <xTaskRemoveFromEventList>
    1ad2:	81 11       	cpse	r24, r1
    1ad4:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <vPortYield>
    1ad8:	0f 90       	pop	r0
    1ada:	0f be       	out	0x3f, r0	; 63
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	44 c0       	rjmp	.+136    	; 0x1b68 <xQueueReceive+0xea>
    1ae0:	2c 81       	ldd	r18, Y+4	; 0x04
    1ae2:	3d 81       	ldd	r19, Y+5	; 0x05
    1ae4:	23 2b       	or	r18, r19
    1ae6:	19 f4       	brne	.+6      	; 0x1aee <xQueueReceive+0x70>
    1ae8:	0f 90       	pop	r0
    1aea:	0f be       	out	0x3f, r0	; 63
    1aec:	3c c0       	rjmp	.+120    	; 0x1b66 <xQueueReceive+0xe8>
    1aee:	81 11       	cpse	r24, r1
    1af0:	03 c0       	rjmp	.+6      	; 0x1af8 <xQueueReceive+0x7a>
    1af2:	ce 01       	movw	r24, r28
    1af4:	01 96       	adiw	r24, 0x01	; 1
    1af6:	c2 d5       	rcall	.+2948   	; 0x267c <vTaskInternalSetTimeOutState>
    1af8:	0f 90       	pop	r0
    1afa:	0f be       	out	0x3f, r0	; 63
    1afc:	80 d2       	rcall	.+1280   	; 0x1ffe <vTaskSuspendAll>
    1afe:	0f b6       	in	r0, 0x3f	; 63
    1b00:	f8 94       	cli
    1b02:	0f 92       	push	r0
    1b04:	f8 01       	movw	r30, r16
    1b06:	85 8d       	ldd	r24, Z+29	; 0x1d
    1b08:	8f 3f       	cpi	r24, 0xFF	; 255
    1b0a:	09 f4       	brne	.+2      	; 0x1b0e <xQueueReceive+0x90>
    1b0c:	15 8e       	std	Z+29, r1	; 0x1d
    1b0e:	f8 01       	movw	r30, r16
    1b10:	86 8d       	ldd	r24, Z+30	; 0x1e
    1b12:	8f 3f       	cpi	r24, 0xFF	; 255
    1b14:	09 f4       	brne	.+2      	; 0x1b18 <xQueueReceive+0x9a>
    1b16:	16 8e       	std	Z+30, r1	; 0x1e
    1b18:	0f 90       	pop	r0
    1b1a:	0f be       	out	0x3f, r0	; 63
    1b1c:	be 01       	movw	r22, r28
    1b1e:	6c 5f       	subi	r22, 0xFC	; 252
    1b20:	7f 4f       	sbci	r23, 0xFF	; 255
    1b22:	ce 01       	movw	r24, r28
    1b24:	01 96       	adiw	r24, 0x01	; 1
    1b26:	b5 d5       	rcall	.+2922   	; 0x2692 <xTaskCheckForTimeOut>
    1b28:	81 11       	cpse	r24, r1
    1b2a:	16 c0       	rjmp	.+44     	; 0x1b58 <xQueueReceive+0xda>
    1b2c:	c8 01       	movw	r24, r16
    1b2e:	ce dd       	rcall	.-1124   	; 0x16cc <prvIsQueueEmpty>
    1b30:	88 23       	and	r24, r24
    1b32:	71 f0       	breq	.+28     	; 0x1b50 <xQueueReceive+0xd2>
    1b34:	6c 81       	ldd	r22, Y+4	; 0x04
    1b36:	7d 81       	ldd	r23, Y+5	; 0x05
    1b38:	c5 01       	movw	r24, r10
    1b3a:	9e d4       	rcall	.+2364   	; 0x2478 <vTaskPlaceOnEventList>
    1b3c:	c8 01       	movw	r24, r16
    1b3e:	3e de       	rcall	.-900    	; 0x17bc <prvUnlockQueue>
    1b40:	77 d3       	rcall	.+1774   	; 0x2230 <xTaskResumeAll>
    1b42:	88 23       	and	r24, r24
    1b44:	11 f0       	breq	.+4      	; 0x1b4a <xQueueReceive+0xcc>
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	b1 cf       	rjmp	.-158    	; 0x1aac <xQueueReceive+0x2e>
    1b4a:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <vPortYield>
    1b4e:	fb cf       	rjmp	.-10     	; 0x1b46 <xQueueReceive+0xc8>
    1b50:	c8 01       	movw	r24, r16
    1b52:	34 de       	rcall	.-920    	; 0x17bc <prvUnlockQueue>
    1b54:	6d d3       	rcall	.+1754   	; 0x2230 <xTaskResumeAll>
    1b56:	f7 cf       	rjmp	.-18     	; 0x1b46 <xQueueReceive+0xc8>
    1b58:	c8 01       	movw	r24, r16
    1b5a:	30 de       	rcall	.-928    	; 0x17bc <prvUnlockQueue>
    1b5c:	69 d3       	rcall	.+1746   	; 0x2230 <xTaskResumeAll>
    1b5e:	c8 01       	movw	r24, r16
    1b60:	b5 dd       	rcall	.-1174   	; 0x16cc <prvIsQueueEmpty>
    1b62:	88 23       	and	r24, r24
    1b64:	81 f3       	breq	.-32     	; 0x1b46 <xQueueReceive+0xc8>
    1b66:	80 e0       	ldi	r24, 0x00	; 0
    1b68:	0f 90       	pop	r0
    1b6a:	0f 90       	pop	r0
    1b6c:	0f 90       	pop	r0
    1b6e:	0f 90       	pop	r0
    1b70:	0f 90       	pop	r0
    1b72:	df 91       	pop	r29
    1b74:	cf 91       	pop	r28
    1b76:	1f 91       	pop	r17
    1b78:	0f 91       	pop	r16
    1b7a:	ff 90       	pop	r15
    1b7c:	df 90       	pop	r13
    1b7e:	cf 90       	pop	r12
    1b80:	bf 90       	pop	r11
    1b82:	af 90       	pop	r10
    1b84:	08 95       	ret

00001b86 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    1b86:	cf 93       	push	r28
    1b88:	df 93       	push	r29
    1b8a:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1b8c:	0f b6       	in	r0, 0x3f	; 63
    1b8e:	f8 94       	cli
    1b90:	0f 92       	push	r0
    1b92:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b94:	8f 3f       	cpi	r24, 0xFF	; 255
    1b96:	09 f4       	brne	.+2      	; 0x1b9a <vQueueWaitForMessageRestricted+0x14>
    1b98:	1d 8e       	std	Y+29, r1	; 0x1d
    1b9a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b9c:	8f 3f       	cpi	r24, 0xFF	; 255
    1b9e:	09 f4       	brne	.+2      	; 0x1ba2 <vQueueWaitForMessageRestricted+0x1c>
    1ba0:	1e 8e       	std	Y+30, r1	; 0x1e
    1ba2:	0f 90       	pop	r0
    1ba4:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1ba6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1ba8:	81 11       	cpse	r24, r1
    1baa:	03 c0       	rjmp	.+6      	; 0x1bb2 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1bac:	ce 01       	movw	r24, r28
    1bae:	41 96       	adiw	r24, 0x11	; 17
    1bb0:	72 d4       	rcall	.+2276   	; 0x2496 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    1bb2:	ce 01       	movw	r24, r28
    }
    1bb4:	df 91       	pop	r29
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    1bb6:	cf 91       	pop	r28
    1bb8:	01 ce       	rjmp	.-1022   	; 0x17bc <prvUnlockQueue>

00001bba <prvAddNewTaskToReadyList>:
    1bba:	cf 93       	push	r28
    1bbc:	df 93       	push	r29
    1bbe:	ec 01       	movw	r28, r24
    1bc0:	0f b6       	in	r0, 0x3f	; 63
    1bc2:	f8 94       	cli
    1bc4:	0f 92       	push	r0
    1bc6:	80 91 b6 03 	lds	r24, 0x03B6	; 0x8003b6 <uxCurrentNumberOfTasks>
    1bca:	8f 5f       	subi	r24, 0xFF	; 255
    1bcc:	80 93 b6 03 	sts	0x03B6, r24	; 0x8003b6 <uxCurrentNumberOfTasks>
    1bd0:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <pxCurrentTCB>
    1bd4:	90 91 0e 04 	lds	r25, 0x040E	; 0x80040e <pxCurrentTCB+0x1>
    1bd8:	89 2b       	or	r24, r25
    1bda:	89 f5       	brne	.+98     	; 0x1c3e <prvAddNewTaskToReadyList+0x84>
    1bdc:	d0 93 0e 04 	sts	0x040E, r29	; 0x80040e <pxCurrentTCB+0x1>
    1be0:	c0 93 0d 04 	sts	0x040D, r28	; 0x80040d <pxCurrentTCB>
    1be4:	80 91 b6 03 	lds	r24, 0x03B6	; 0x8003b6 <uxCurrentNumberOfTasks>
    1be8:	81 30       	cpi	r24, 0x01	; 1
    1bea:	09 f0       	breq	.+2      	; 0x1bee <prvAddNewTaskToReadyList+0x34>
    1bec:	38 c0       	rjmp	.+112    	; 0x1c5e <prvAddNewTaskToReadyList+0xa4>
    1bee:	89 ee       	ldi	r24, 0xE9	; 233
    1bf0:	93 e0       	ldi	r25, 0x03	; 3
    1bf2:	e7 d7       	rcall	.+4046   	; 0x2bc2 <vListInitialise>
    1bf4:	82 ef       	ldi	r24, 0xF2	; 242
    1bf6:	93 e0       	ldi	r25, 0x03	; 3
    1bf8:	e4 d7       	rcall	.+4040   	; 0x2bc2 <vListInitialise>
    1bfa:	8b ef       	ldi	r24, 0xFB	; 251
    1bfc:	93 e0       	ldi	r25, 0x03	; 3
    1bfe:	e1 d7       	rcall	.+4034   	; 0x2bc2 <vListInitialise>
    1c00:	84 e0       	ldi	r24, 0x04	; 4
    1c02:	94 e0       	ldi	r25, 0x04	; 4
    1c04:	de d7       	rcall	.+4028   	; 0x2bc2 <vListInitialise>
    1c06:	80 ee       	ldi	r24, 0xE0	; 224
    1c08:	93 e0       	ldi	r25, 0x03	; 3
    1c0a:	db d7       	rcall	.+4022   	; 0x2bc2 <vListInitialise>
    1c0c:	87 ed       	ldi	r24, 0xD7	; 215
    1c0e:	93 e0       	ldi	r25, 0x03	; 3
    1c10:	d8 d7       	rcall	.+4016   	; 0x2bc2 <vListInitialise>
    1c12:	8a ec       	ldi	r24, 0xCA	; 202
    1c14:	93 e0       	ldi	r25, 0x03	; 3
    1c16:	d5 d7       	rcall	.+4010   	; 0x2bc2 <vListInitialise>
    1c18:	81 ec       	ldi	r24, 0xC1	; 193
    1c1a:	93 e0       	ldi	r25, 0x03	; 3
    1c1c:	d2 d7       	rcall	.+4004   	; 0x2bc2 <vListInitialise>
    1c1e:	87 eb       	ldi	r24, 0xB7	; 183
    1c20:	93 e0       	ldi	r25, 0x03	; 3
    1c22:	cf d7       	rcall	.+3998   	; 0x2bc2 <vListInitialise>
    1c24:	80 ee       	ldi	r24, 0xE0	; 224
    1c26:	93 e0       	ldi	r25, 0x03	; 3
    1c28:	90 93 d6 03 	sts	0x03D6, r25	; 0x8003d6 <pxDelayedTaskList+0x1>
    1c2c:	80 93 d5 03 	sts	0x03D5, r24	; 0x8003d5 <pxDelayedTaskList>
    1c30:	87 ed       	ldi	r24, 0xD7	; 215
    1c32:	93 e0       	ldi	r25, 0x03	; 3
    1c34:	90 93 d4 03 	sts	0x03D4, r25	; 0x8003d4 <pxOverflowDelayedTaskList+0x1>
    1c38:	80 93 d3 03 	sts	0x03D3, r24	; 0x8003d3 <pxOverflowDelayedTaskList>
    1c3c:	10 c0       	rjmp	.+32     	; 0x1c5e <prvAddNewTaskToReadyList+0xa4>
    1c3e:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <xSchedulerRunning>
    1c42:	81 11       	cpse	r24, r1
    1c44:	0c c0       	rjmp	.+24     	; 0x1c5e <prvAddNewTaskToReadyList+0xa4>
    1c46:	e0 91 0d 04 	lds	r30, 0x040D	; 0x80040d <pxCurrentTCB>
    1c4a:	f0 91 0e 04 	lds	r31, 0x040E	; 0x80040e <pxCurrentTCB+0x1>
    1c4e:	96 89       	ldd	r25, Z+22	; 0x16
    1c50:	8e 89       	ldd	r24, Y+22	; 0x16
    1c52:	89 17       	cp	r24, r25
    1c54:	20 f0       	brcs	.+8      	; 0x1c5e <prvAddNewTaskToReadyList+0xa4>
    1c56:	d0 93 0e 04 	sts	0x040E, r29	; 0x80040e <pxCurrentTCB+0x1>
    1c5a:	c0 93 0d 04 	sts	0x040D, r28	; 0x80040d <pxCurrentTCB>
    1c5e:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <uxTaskNumber>
    1c62:	8f 5f       	subi	r24, 0xFF	; 255
    1c64:	80 93 ad 03 	sts	0x03AD, r24	; 0x8003ad <uxTaskNumber>
    1c68:	ee 89       	ldd	r30, Y+22	; 0x16
    1c6a:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <uxTopReadyPriority>
    1c6e:	8e 17       	cp	r24, r30
    1c70:	10 f4       	brcc	.+4      	; 0x1c76 <prvAddNewTaskToReadyList+0xbc>
    1c72:	e0 93 b3 03 	sts	0x03B3, r30	; 0x8003b3 <uxTopReadyPriority>
    1c76:	89 e0       	ldi	r24, 0x09	; 9
    1c78:	8e 9f       	mul	r24, r30
    1c7a:	f0 01       	movw	r30, r0
    1c7c:	11 24       	eor	r1, r1
    1c7e:	e7 51       	subi	r30, 0x17	; 23
    1c80:	fc 4f       	sbci	r31, 0xFC	; 252
    1c82:	01 80       	ldd	r0, Z+1	; 0x01
    1c84:	f2 81       	ldd	r31, Z+2	; 0x02
    1c86:	e0 2d       	mov	r30, r0
    1c88:	fd 83       	std	Y+5, r31	; 0x05
    1c8a:	ec 83       	std	Y+4, r30	; 0x04
    1c8c:	24 81       	ldd	r18, Z+4	; 0x04
    1c8e:	35 81       	ldd	r19, Z+5	; 0x05
    1c90:	3f 83       	std	Y+7, r19	; 0x07
    1c92:	2e 83       	std	Y+6, r18	; 0x06
    1c94:	a4 81       	ldd	r26, Z+4	; 0x04
    1c96:	b5 81       	ldd	r27, Z+5	; 0x05
    1c98:	9e 01       	movw	r18, r28
    1c9a:	2e 5f       	subi	r18, 0xFE	; 254
    1c9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c9e:	13 96       	adiw	r26, 0x03	; 3
    1ca0:	3c 93       	st	X, r19
    1ca2:	2e 93       	st	-X, r18
    1ca4:	12 97       	sbiw	r26, 0x02	; 2
    1ca6:	35 83       	std	Z+5, r19	; 0x05
    1ca8:	24 83       	std	Z+4, r18	; 0x04
    1caa:	ee 89       	ldd	r30, Y+22	; 0x16
    1cac:	8e 9f       	mul	r24, r30
    1cae:	f0 01       	movw	r30, r0
    1cb0:	11 24       	eor	r1, r1
    1cb2:	e7 51       	subi	r30, 0x17	; 23
    1cb4:	fc 4f       	sbci	r31, 0xFC	; 252
    1cb6:	fb 87       	std	Y+11, r31	; 0x0b
    1cb8:	ea 87       	std	Y+10, r30	; 0x0a
    1cba:	80 81       	ld	r24, Z
    1cbc:	8f 5f       	subi	r24, 0xFF	; 255
    1cbe:	80 83       	st	Z, r24
    1cc0:	0f 90       	pop	r0
    1cc2:	0f be       	out	0x3f, r0	; 63
    1cc4:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <xSchedulerRunning>
    1cc8:	88 23       	and	r24, r24
    1cca:	49 f0       	breq	.+18     	; 0x1cde <prvAddNewTaskToReadyList+0x124>
    1ccc:	e0 91 0d 04 	lds	r30, 0x040D	; 0x80040d <pxCurrentTCB>
    1cd0:	f0 91 0e 04 	lds	r31, 0x040E	; 0x80040e <pxCurrentTCB+0x1>
    1cd4:	96 89       	ldd	r25, Z+22	; 0x16
    1cd6:	8e 89       	ldd	r24, Y+22	; 0x16
    1cd8:	98 17       	cp	r25, r24
    1cda:	08 f4       	brcc	.+2      	; 0x1cde <prvAddNewTaskToReadyList+0x124>
    1cdc:	f7 d7       	rcall	.+4078   	; 0x2ccc <vPortYield>
    1cde:	df 91       	pop	r29
    1ce0:	cf 91       	pop	r28
    1ce2:	08 95       	ret

00001ce4 <prvResetNextTaskUnblockTime>:
    1ce4:	e0 91 d5 03 	lds	r30, 0x03D5	; 0x8003d5 <pxDelayedTaskList>
    1ce8:	f0 91 d6 03 	lds	r31, 0x03D6	; 0x8003d6 <pxDelayedTaskList+0x1>
    1cec:	80 81       	ld	r24, Z
    1cee:	81 11       	cpse	r24, r1
    1cf0:	03 c0       	rjmp	.+6      	; 0x1cf8 <prvResetNextTaskUnblockTime+0x14>
    1cf2:	8f ef       	ldi	r24, 0xFF	; 255
    1cf4:	9f ef       	ldi	r25, 0xFF	; 255
    1cf6:	09 c0       	rjmp	.+18     	; 0x1d0a <prvResetNextTaskUnblockTime+0x26>
    1cf8:	e0 91 d5 03 	lds	r30, 0x03D5	; 0x8003d5 <pxDelayedTaskList>
    1cfc:	f0 91 d6 03 	lds	r31, 0x03D6	; 0x8003d6 <pxDelayedTaskList+0x1>
    1d00:	05 80       	ldd	r0, Z+5	; 0x05
    1d02:	f6 81       	ldd	r31, Z+6	; 0x06
    1d04:	e0 2d       	mov	r30, r0
    1d06:	80 81       	ld	r24, Z
    1d08:	91 81       	ldd	r25, Z+1	; 0x01
    1d0a:	90 93 ac 03 	sts	0x03AC, r25	; 0x8003ac <xNextTaskUnblockTime+0x1>
    1d0e:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <xNextTaskUnblockTime>
    1d12:	08 95       	ret

00001d14 <prvInitialiseNewTask.isra.2>:
    1d14:	6f 92       	push	r6
    1d16:	7f 92       	push	r7
    1d18:	8f 92       	push	r8
    1d1a:	9f 92       	push	r9
    1d1c:	af 92       	push	r10
    1d1e:	bf 92       	push	r11
    1d20:	cf 92       	push	r12
    1d22:	df 92       	push	r13
    1d24:	ef 92       	push	r14
    1d26:	ff 92       	push	r15
    1d28:	0f 93       	push	r16
    1d2a:	cf 93       	push	r28
    1d2c:	df 93       	push	r29
    1d2e:	4c 01       	movw	r8, r24
    1d30:	eb 01       	movw	r28, r22
    1d32:	5a 01       	movw	r10, r20
    1d34:	39 01       	movw	r6, r18
    1d36:	65 ea       	ldi	r22, 0xA5	; 165
    1d38:	70 e0       	ldi	r23, 0x00	; 0
    1d3a:	f6 01       	movw	r30, r12
    1d3c:	87 89       	ldd	r24, Z+23	; 0x17
    1d3e:	90 8d       	ldd	r25, Z+24	; 0x18
    1d40:	0e 94 9b 18 	call	0x3136	; 0x3136 <memset>
    1d44:	f1 e0       	ldi	r31, 0x01	; 1
    1d46:	af 1a       	sub	r10, r31
    1d48:	b1 08       	sbc	r11, r1
    1d4a:	f6 01       	movw	r30, r12
    1d4c:	87 89       	ldd	r24, Z+23	; 0x17
    1d4e:	90 8d       	ldd	r25, Z+24	; 0x18
    1d50:	a8 0e       	add	r10, r24
    1d52:	b9 1e       	adc	r11, r25
    1d54:	20 97       	sbiw	r28, 0x00	; 0
    1d56:	71 f0       	breq	.+28     	; 0x1d74 <prvInitialiseNewTask.isra.2+0x60>
    1d58:	79 96       	adiw	r30, 0x19	; 25
    1d5a:	ce 01       	movw	r24, r28
    1d5c:	08 96       	adiw	r24, 0x08	; 8
    1d5e:	de 01       	movw	r26, r28
    1d60:	29 91       	ld	r18, Y+
    1d62:	21 93       	st	Z+, r18
    1d64:	2c 91       	ld	r18, X
    1d66:	22 23       	and	r18, r18
    1d68:	19 f0       	breq	.+6      	; 0x1d70 <prvInitialiseNewTask.isra.2+0x5c>
    1d6a:	c8 17       	cp	r28, r24
    1d6c:	d9 07       	cpc	r29, r25
    1d6e:	b9 f7       	brne	.-18     	; 0x1d5e <prvInitialiseNewTask.isra.2+0x4a>
    1d70:	f6 01       	movw	r30, r12
    1d72:	10 a2       	std	Z+32, r1	; 0x20
    1d74:	04 30       	cpi	r16, 0x04	; 4
    1d76:	08 f0       	brcs	.+2      	; 0x1d7a <prvInitialiseNewTask.isra.2+0x66>
    1d78:	03 e0       	ldi	r16, 0x03	; 3
    1d7a:	f6 01       	movw	r30, r12
    1d7c:	06 8b       	std	Z+22, r16	; 0x16
    1d7e:	01 a3       	std	Z+33, r16	; 0x21
    1d80:	c6 01       	movw	r24, r12
    1d82:	02 96       	adiw	r24, 0x02	; 2
    1d84:	2c d7       	rcall	.+3672   	; 0x2bde <vListInitialiseItem>
    1d86:	c6 01       	movw	r24, r12
    1d88:	0c 96       	adiw	r24, 0x0c	; 12
    1d8a:	29 d7       	rcall	.+3666   	; 0x2bde <vListInitialiseItem>
    1d8c:	f6 01       	movw	r30, r12
    1d8e:	d1 86       	std	Z+9, r13	; 0x09
    1d90:	c0 86       	std	Z+8, r12	; 0x08
    1d92:	84 e0       	ldi	r24, 0x04	; 4
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	80 1b       	sub	r24, r16
    1d98:	91 09       	sbc	r25, r1
    1d9a:	95 87       	std	Z+13, r25	; 0x0d
    1d9c:	84 87       	std	Z+12, r24	; 0x0c
    1d9e:	d3 8a       	std	Z+19, r13	; 0x13
    1da0:	c2 8a       	std	Z+18, r12	; 0x12
    1da2:	a3 01       	movw	r20, r6
    1da4:	b4 01       	movw	r22, r8
    1da6:	c5 01       	movw	r24, r10
    1da8:	7a d7       	rcall	.+3828   	; 0x2c9e <pxPortInitialiseStack>
    1daa:	f6 01       	movw	r30, r12
    1dac:	91 83       	std	Z+1, r25	; 0x01
    1dae:	80 83       	st	Z, r24
    1db0:	e1 14       	cp	r14, r1
    1db2:	f1 04       	cpc	r15, r1
    1db4:	19 f0       	breq	.+6      	; 0x1dbc <prvInitialiseNewTask.isra.2+0xa8>
    1db6:	f7 01       	movw	r30, r14
    1db8:	d1 82       	std	Z+1, r13	; 0x01
    1dba:	c0 82       	st	Z, r12
    1dbc:	df 91       	pop	r29
    1dbe:	cf 91       	pop	r28
    1dc0:	0f 91       	pop	r16
    1dc2:	ff 90       	pop	r15
    1dc4:	ef 90       	pop	r14
    1dc6:	df 90       	pop	r13
    1dc8:	cf 90       	pop	r12
    1dca:	bf 90       	pop	r11
    1dcc:	af 90       	pop	r10
    1dce:	9f 90       	pop	r9
    1dd0:	8f 90       	pop	r8
    1dd2:	7f 90       	pop	r7
    1dd4:	6f 90       	pop	r6
    1dd6:	08 95       	ret

00001dd8 <prvDeleteTCB>:
    1dd8:	cf 93       	push	r28
    1dda:	df 93       	push	r29
    1ddc:	fc 01       	movw	r30, r24
    1dde:	20 a5       	ldd	r18, Z+40	; 0x28
    1de0:	21 11       	cpse	r18, r1
    1de2:	06 c0       	rjmp	.+12     	; 0x1df0 <prvDeleteTCB+0x18>
    1de4:	ec 01       	movw	r28, r24
    1de6:	87 89       	ldd	r24, Z+23	; 0x17
    1de8:	90 8d       	ldd	r25, Z+24	; 0x18
    1dea:	dd d6       	rcall	.+3514   	; 0x2ba6 <vPortFree>
    1dec:	ce 01       	movw	r24, r28
    1dee:	02 c0       	rjmp	.+4      	; 0x1df4 <prvDeleteTCB+0x1c>
    1df0:	21 30       	cpi	r18, 0x01	; 1
    1df2:	19 f4       	brne	.+6      	; 0x1dfa <prvDeleteTCB+0x22>
    1df4:	df 91       	pop	r29
    1df6:	cf 91       	pop	r28
    1df8:	d6 c6       	rjmp	.+3500   	; 0x2ba6 <vPortFree>
    1dfa:	df 91       	pop	r29
    1dfc:	cf 91       	pop	r28
    1dfe:	08 95       	ret

00001e00 <prvAddCurrentTaskToDelayedList>:
    1e00:	ff 92       	push	r15
    1e02:	0f 93       	push	r16
    1e04:	1f 93       	push	r17
    1e06:	cf 93       	push	r28
    1e08:	df 93       	push	r29
    1e0a:	ec 01       	movw	r28, r24
    1e0c:	f6 2e       	mov	r15, r22
    1e0e:	00 91 b4 03 	lds	r16, 0x03B4	; 0x8003b4 <xTickCount>
    1e12:	10 91 b5 03 	lds	r17, 0x03B5	; 0x8003b5 <xTickCount+0x1>
    1e16:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <pxCurrentTCB>
    1e1a:	90 91 0e 04 	lds	r25, 0x040E	; 0x80040e <pxCurrentTCB+0x1>
    1e1e:	02 96       	adiw	r24, 0x02	; 2
    1e20:	1a d7       	rcall	.+3636   	; 0x2c56 <uxListRemove>
    1e22:	cf 3f       	cpi	r28, 0xFF	; 255
    1e24:	8f ef       	ldi	r24, 0xFF	; 255
    1e26:	d8 07       	cpc	r29, r24
    1e28:	c1 f5       	brne	.+112    	; 0x1e9a <prvAddCurrentTaskToDelayedList+0x9a>
    1e2a:	ff 20       	and	r15, r15
    1e2c:	b1 f1       	breq	.+108    	; 0x1e9a <prvAddCurrentTaskToDelayedList+0x9a>
    1e2e:	e0 91 b8 03 	lds	r30, 0x03B8	; 0x8003b8 <xSuspendedTaskList+0x1>
    1e32:	f0 91 b9 03 	lds	r31, 0x03B9	; 0x8003b9 <xSuspendedTaskList+0x2>
    1e36:	a0 91 0d 04 	lds	r26, 0x040D	; 0x80040d <pxCurrentTCB>
    1e3a:	b0 91 0e 04 	lds	r27, 0x040E	; 0x80040e <pxCurrentTCB+0x1>
    1e3e:	15 96       	adiw	r26, 0x05	; 5
    1e40:	fc 93       	st	X, r31
    1e42:	ee 93       	st	-X, r30
    1e44:	14 97       	sbiw	r26, 0x04	; 4
    1e46:	a0 91 0d 04 	lds	r26, 0x040D	; 0x80040d <pxCurrentTCB>
    1e4a:	b0 91 0e 04 	lds	r27, 0x040E	; 0x80040e <pxCurrentTCB+0x1>
    1e4e:	84 81       	ldd	r24, Z+4	; 0x04
    1e50:	95 81       	ldd	r25, Z+5	; 0x05
    1e52:	17 96       	adiw	r26, 0x07	; 7
    1e54:	9c 93       	st	X, r25
    1e56:	8e 93       	st	-X, r24
    1e58:	16 97       	sbiw	r26, 0x06	; 6
    1e5a:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <pxCurrentTCB>
    1e5e:	90 91 0e 04 	lds	r25, 0x040E	; 0x80040e <pxCurrentTCB+0x1>
    1e62:	a4 81       	ldd	r26, Z+4	; 0x04
    1e64:	b5 81       	ldd	r27, Z+5	; 0x05
    1e66:	02 96       	adiw	r24, 0x02	; 2
    1e68:	13 96       	adiw	r26, 0x03	; 3
    1e6a:	9c 93       	st	X, r25
    1e6c:	8e 93       	st	-X, r24
    1e6e:	12 97       	sbiw	r26, 0x02	; 2
    1e70:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <pxCurrentTCB>
    1e74:	90 91 0e 04 	lds	r25, 0x040E	; 0x80040e <pxCurrentTCB+0x1>
    1e78:	02 96       	adiw	r24, 0x02	; 2
    1e7a:	95 83       	std	Z+5, r25	; 0x05
    1e7c:	84 83       	std	Z+4, r24	; 0x04
    1e7e:	e0 91 0d 04 	lds	r30, 0x040D	; 0x80040d <pxCurrentTCB>
    1e82:	f0 91 0e 04 	lds	r31, 0x040E	; 0x80040e <pxCurrentTCB+0x1>
    1e86:	87 eb       	ldi	r24, 0xB7	; 183
    1e88:	93 e0       	ldi	r25, 0x03	; 3
    1e8a:	93 87       	std	Z+11, r25	; 0x0b
    1e8c:	82 87       	std	Z+10, r24	; 0x0a
    1e8e:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <xSuspendedTaskList>
    1e92:	8f 5f       	subi	r24, 0xFF	; 255
    1e94:	80 93 b7 03 	sts	0x03B7, r24	; 0x8003b7 <xSuspendedTaskList>
    1e98:	2d c0       	rjmp	.+90     	; 0x1ef4 <prvAddCurrentTaskToDelayedList+0xf4>
    1e9a:	c0 0f       	add	r28, r16
    1e9c:	d1 1f       	adc	r29, r17
    1e9e:	e0 91 0d 04 	lds	r30, 0x040D	; 0x80040d <pxCurrentTCB>
    1ea2:	f0 91 0e 04 	lds	r31, 0x040E	; 0x80040e <pxCurrentTCB+0x1>
    1ea6:	d3 83       	std	Z+3, r29	; 0x03
    1ea8:	c2 83       	std	Z+2, r28	; 0x02
    1eaa:	60 91 0d 04 	lds	r22, 0x040D	; 0x80040d <pxCurrentTCB>
    1eae:	70 91 0e 04 	lds	r23, 0x040E	; 0x80040e <pxCurrentTCB+0x1>
    1eb2:	c0 17       	cp	r28, r16
    1eb4:	d1 07       	cpc	r29, r17
    1eb6:	60 f4       	brcc	.+24     	; 0x1ed0 <prvAddCurrentTaskToDelayedList+0xd0>
    1eb8:	80 91 d3 03 	lds	r24, 0x03D3	; 0x8003d3 <pxOverflowDelayedTaskList>
    1ebc:	90 91 d4 03 	lds	r25, 0x03D4	; 0x8003d4 <pxOverflowDelayedTaskList+0x1>
    1ec0:	6e 5f       	subi	r22, 0xFE	; 254
    1ec2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ec4:	df 91       	pop	r29
    1ec6:	cf 91       	pop	r28
    1ec8:	1f 91       	pop	r17
    1eca:	0f 91       	pop	r16
    1ecc:	ff 90       	pop	r15
    1ece:	8b c6       	rjmp	.+3350   	; 0x2be6 <vListInsert>
    1ed0:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <pxDelayedTaskList>
    1ed4:	90 91 d6 03 	lds	r25, 0x03D6	; 0x8003d6 <pxDelayedTaskList+0x1>
    1ed8:	6e 5f       	subi	r22, 0xFE	; 254
    1eda:	7f 4f       	sbci	r23, 0xFF	; 255
    1edc:	84 d6       	rcall	.+3336   	; 0x2be6 <vListInsert>
    1ede:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <xNextTaskUnblockTime>
    1ee2:	90 91 ac 03 	lds	r25, 0x03AC	; 0x8003ac <xNextTaskUnblockTime+0x1>
    1ee6:	c8 17       	cp	r28, r24
    1ee8:	d9 07       	cpc	r29, r25
    1eea:	20 f4       	brcc	.+8      	; 0x1ef4 <prvAddCurrentTaskToDelayedList+0xf4>
    1eec:	d0 93 ac 03 	sts	0x03AC, r29	; 0x8003ac <xNextTaskUnblockTime+0x1>
    1ef0:	c0 93 ab 03 	sts	0x03AB, r28	; 0x8003ab <xNextTaskUnblockTime>
    1ef4:	df 91       	pop	r29
    1ef6:	cf 91       	pop	r28
    1ef8:	1f 91       	pop	r17
    1efa:	0f 91       	pop	r16
    1efc:	ff 90       	pop	r15
    1efe:	08 95       	ret

00001f00 <xTaskCreateStatic>:
    1f00:	af 92       	push	r10
    1f02:	bf 92       	push	r11
    1f04:	cf 92       	push	r12
    1f06:	df 92       	push	r13
    1f08:	ef 92       	push	r14
    1f0a:	ff 92       	push	r15
    1f0c:	0f 93       	push	r16
    1f0e:	cf 93       	push	r28
    1f10:	df 93       	push	r29
    1f12:	1f 92       	push	r1
    1f14:	1f 92       	push	r1
    1f16:	cd b7       	in	r28, 0x3d	; 61
    1f18:	de b7       	in	r29, 0x3e	; 62
    1f1a:	c1 14       	cp	r12, r1
    1f1c:	d1 04       	cpc	r13, r1
    1f1e:	c1 f0       	breq	.+48     	; 0x1f50 <xTaskCreateStatic+0x50>
    1f20:	e1 14       	cp	r14, r1
    1f22:	f1 04       	cpc	r15, r1
    1f24:	a9 f0       	breq	.+42     	; 0x1f50 <xTaskCreateStatic+0x50>
    1f26:	e9 e2       	ldi	r30, 0x29	; 41
    1f28:	d6 01       	movw	r26, r12
    1f2a:	1d 92       	st	X+, r1
    1f2c:	ea 95       	dec	r30
    1f2e:	e9 f7       	brne	.-6      	; 0x1f2a <xTaskCreateStatic+0x2a>
    1f30:	f6 01       	movw	r30, r12
    1f32:	f0 8e       	std	Z+24, r15	; 0x18
    1f34:	e7 8a       	std	Z+23, r14	; 0x17
    1f36:	e2 e0       	ldi	r30, 0x02	; 2
    1f38:	d6 01       	movw	r26, r12
    1f3a:	98 96       	adiw	r26, 0x28	; 40
    1f3c:	ec 93       	st	X, r30
    1f3e:	fe 01       	movw	r30, r28
    1f40:	31 96       	adiw	r30, 0x01	; 1
    1f42:	7f 01       	movw	r14, r30
    1f44:	e7 de       	rcall	.-562    	; 0x1d14 <prvInitialiseNewTask.isra.2>
    1f46:	c6 01       	movw	r24, r12
    1f48:	38 de       	rcall	.-912    	; 0x1bba <prvAddNewTaskToReadyList>
    1f4a:	89 81       	ldd	r24, Y+1	; 0x01
    1f4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f4e:	02 c0       	rjmp	.+4      	; 0x1f54 <xTaskCreateStatic+0x54>
    1f50:	80 e0       	ldi	r24, 0x00	; 0
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	0f 90       	pop	r0
    1f56:	0f 90       	pop	r0
    1f58:	df 91       	pop	r29
    1f5a:	cf 91       	pop	r28
    1f5c:	0f 91       	pop	r16
    1f5e:	ff 90       	pop	r15
    1f60:	ef 90       	pop	r14
    1f62:	df 90       	pop	r13
    1f64:	cf 90       	pop	r12
    1f66:	bf 90       	pop	r11
    1f68:	af 90       	pop	r10
    1f6a:	08 95       	ret

00001f6c <vTaskStartScheduler>:
    1f6c:	cf 92       	push	r12
    1f6e:	df 92       	push	r13
    1f70:	ef 92       	push	r14
    1f72:	ff 92       	push	r15
    1f74:	0f 93       	push	r16
    1f76:	cf 93       	push	r28
    1f78:	df 93       	push	r29
    1f7a:	00 d0       	rcall	.+0      	; 0x1f7c <vTaskStartScheduler+0x10>
    1f7c:	00 d0       	rcall	.+0      	; 0x1f7e <vTaskStartScheduler+0x12>
    1f7e:	cd b7       	in	r28, 0x3d	; 61
    1f80:	de b7       	in	r29, 0x3e	; 62
    1f82:	1e 82       	std	Y+6, r1	; 0x06
    1f84:	1d 82       	std	Y+5, r1	; 0x05
    1f86:	1c 82       	std	Y+4, r1	; 0x04
    1f88:	1b 82       	std	Y+3, r1	; 0x03
    1f8a:	ae 01       	movw	r20, r28
    1f8c:	4f 5f       	subi	r20, 0xFF	; 255
    1f8e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f90:	be 01       	movw	r22, r28
    1f92:	6d 5f       	subi	r22, 0xFD	; 253
    1f94:	7f 4f       	sbci	r23, 0xFF	; 255
    1f96:	ce 01       	movw	r24, r28
    1f98:	05 96       	adiw	r24, 0x05	; 5
    1f9a:	ae d5       	rcall	.+2908   	; 0x2af8 <vApplicationGetIdleTaskMemory>
    1f9c:	cd 80       	ldd	r12, Y+5	; 0x05
    1f9e:	de 80       	ldd	r13, Y+6	; 0x06
    1fa0:	eb 80       	ldd	r14, Y+3	; 0x03
    1fa2:	fc 80       	ldd	r15, Y+4	; 0x04
    1fa4:	49 81       	ldd	r20, Y+1	; 0x01
    1fa6:	5a 81       	ldd	r21, Y+2	; 0x02
    1fa8:	00 e0       	ldi	r16, 0x00	; 0
    1faa:	20 e0       	ldi	r18, 0x00	; 0
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	6e e2       	ldi	r22, 0x2E	; 46
    1fb0:	72 e0       	ldi	r23, 0x02	; 2
    1fb2:	80 e5       	ldi	r24, 0x50	; 80
    1fb4:	91 e0       	ldi	r25, 0x01	; 1
    1fb6:	a4 df       	rcall	.-184    	; 0x1f00 <xTaskCreateStatic>
    1fb8:	89 2b       	or	r24, r25
    1fba:	89 f0       	breq	.+34     	; 0x1fde <vTaskStartScheduler+0x72>
    1fbc:	bb d4       	rcall	.+2422   	; 0x2934 <xTimerCreateTimerTask>
    1fbe:	81 30       	cpi	r24, 0x01	; 1
    1fc0:	71 f4       	brne	.+28     	; 0x1fde <vTaskStartScheduler+0x72>
    1fc2:	f8 94       	cli
    1fc4:	2f ef       	ldi	r18, 0xFF	; 255
    1fc6:	3f ef       	ldi	r19, 0xFF	; 255
    1fc8:	30 93 ac 03 	sts	0x03AC, r19	; 0x8003ac <xNextTaskUnblockTime+0x1>
    1fcc:	20 93 ab 03 	sts	0x03AB, r18	; 0x8003ab <xNextTaskUnblockTime>
    1fd0:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <xSchedulerRunning>
    1fd4:	10 92 b5 03 	sts	0x03B5, r1	; 0x8003b5 <xTickCount+0x1>
    1fd8:	10 92 b4 03 	sts	0x03B4, r1	; 0x8003b4 <xTickCount>
    1fdc:	46 d7       	rcall	.+3724   	; 0x2e6a <xPortStartScheduler>
    1fde:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <uxTopUsedPriority>
    1fe2:	26 96       	adiw	r28, 0x06	; 6
    1fe4:	0f b6       	in	r0, 0x3f	; 63
    1fe6:	f8 94       	cli
    1fe8:	de bf       	out	0x3e, r29	; 62
    1fea:	0f be       	out	0x3f, r0	; 63
    1fec:	cd bf       	out	0x3d, r28	; 61
    1fee:	df 91       	pop	r29
    1ff0:	cf 91       	pop	r28
    1ff2:	0f 91       	pop	r16
    1ff4:	ff 90       	pop	r15
    1ff6:	ef 90       	pop	r14
    1ff8:	df 90       	pop	r13
    1ffa:	cf 90       	pop	r12
    1ffc:	08 95       	ret

00001ffe <vTaskSuspendAll>:
    1ffe:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <uxSchedulerSuspended>
    2002:	8f 5f       	subi	r24, 0xFF	; 255
    2004:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <uxSchedulerSuspended>
    2008:	08 95       	ret

0000200a <xTaskGetTickCount>:
    200a:	0f b6       	in	r0, 0x3f	; 63
    200c:	f8 94       	cli
    200e:	0f 92       	push	r0
    2010:	80 91 b4 03 	lds	r24, 0x03B4	; 0x8003b4 <xTickCount>
    2014:	90 91 b5 03 	lds	r25, 0x03B5	; 0x8003b5 <xTickCount+0x1>
    2018:	0f 90       	pop	r0
    201a:	0f be       	out	0x3f, r0	; 63
    201c:	08 95       	ret

0000201e <uxTaskGetNumberOfTasks>:
    201e:	80 91 b6 03 	lds	r24, 0x03B6	; 0x8003b6 <uxCurrentNumberOfTasks>
    2022:	08 95       	ret

00002024 <xTaskIncrementTick>:
    2024:	df 92       	push	r13
    2026:	ef 92       	push	r14
    2028:	ff 92       	push	r15
    202a:	0f 93       	push	r16
    202c:	1f 93       	push	r17
    202e:	cf 93       	push	r28
    2030:	df 93       	push	r29
    2032:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <uxSchedulerSuspended>
    2036:	81 11       	cpse	r24, r1
    2038:	e6 c0       	rjmp	.+460    	; 0x2206 <__stack+0x7>
    203a:	00 91 b4 03 	lds	r16, 0x03B4	; 0x8003b4 <xTickCount>
    203e:	10 91 b5 03 	lds	r17, 0x03B5	; 0x8003b5 <xTickCount+0x1>
    2042:	0f 5f       	subi	r16, 0xFF	; 255
    2044:	1f 4f       	sbci	r17, 0xFF	; 255
    2046:	10 93 b5 03 	sts	0x03B5, r17	; 0x8003b5 <xTickCount+0x1>
    204a:	00 93 b4 03 	sts	0x03B4, r16	; 0x8003b4 <xTickCount>
    204e:	01 15       	cp	r16, r1
    2050:	11 05       	cpc	r17, r1
    2052:	b1 f4       	brne	.+44     	; 0x2080 <xTaskIncrementTick+0x5c>
    2054:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <pxDelayedTaskList>
    2058:	90 91 d6 03 	lds	r25, 0x03D6	; 0x8003d6 <pxDelayedTaskList+0x1>
    205c:	20 91 d3 03 	lds	r18, 0x03D3	; 0x8003d3 <pxOverflowDelayedTaskList>
    2060:	30 91 d4 03 	lds	r19, 0x03D4	; 0x8003d4 <pxOverflowDelayedTaskList+0x1>
    2064:	30 93 d6 03 	sts	0x03D6, r19	; 0x8003d6 <pxDelayedTaskList+0x1>
    2068:	20 93 d5 03 	sts	0x03D5, r18	; 0x8003d5 <pxDelayedTaskList>
    206c:	90 93 d4 03 	sts	0x03D4, r25	; 0x8003d4 <pxOverflowDelayedTaskList+0x1>
    2070:	80 93 d3 03 	sts	0x03D3, r24	; 0x8003d3 <pxOverflowDelayedTaskList>
    2074:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <xNumOfOverflows>
    2078:	8f 5f       	subi	r24, 0xFF	; 255
    207a:	80 93 ae 03 	sts	0x03AE, r24	; 0x8003ae <xNumOfOverflows>
    207e:	32 de       	rcall	.-924    	; 0x1ce4 <prvResetNextTaskUnblockTime>
    2080:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <xNextTaskUnblockTime>
    2084:	90 91 ac 03 	lds	r25, 0x03AC	; 0x8003ac <xNextTaskUnblockTime+0x1>
    2088:	d1 2c       	mov	r13, r1
    208a:	08 17       	cp	r16, r24
    208c:	19 07       	cpc	r17, r25
    208e:	08 f4       	brcc	.+2      	; 0x2092 <xTaskIncrementTick+0x6e>
    2090:	9b c0       	rjmp	.+310    	; 0x21c8 <xTaskIncrementTick+0x1a4>
    2092:	49 e0       	ldi	r20, 0x09	; 9
    2094:	e0 91 d5 03 	lds	r30, 0x03D5	; 0x8003d5 <pxDelayedTaskList>
    2098:	f0 91 d6 03 	lds	r31, 0x03D6	; 0x8003d6 <pxDelayedTaskList+0x1>
    209c:	80 81       	ld	r24, Z
    209e:	81 11       	cpse	r24, r1
    20a0:	03 c0       	rjmp	.+6      	; 0x20a8 <xTaskIncrementTick+0x84>
    20a2:	8f ef       	ldi	r24, 0xFF	; 255
    20a4:	9f ef       	ldi	r25, 0xFF	; 255
    20a6:	0f c0       	rjmp	.+30     	; 0x20c6 <xTaskIncrementTick+0xa2>
    20a8:	e0 91 d5 03 	lds	r30, 0x03D5	; 0x8003d5 <pxDelayedTaskList>
    20ac:	f0 91 d6 03 	lds	r31, 0x03D6	; 0x8003d6 <pxDelayedTaskList+0x1>
    20b0:	05 80       	ldd	r0, Z+5	; 0x05
    20b2:	f6 81       	ldd	r31, Z+6	; 0x06
    20b4:	e0 2d       	mov	r30, r0
    20b6:	06 80       	ldd	r0, Z+6	; 0x06
    20b8:	f7 81       	ldd	r31, Z+7	; 0x07
    20ba:	e0 2d       	mov	r30, r0
    20bc:	82 81       	ldd	r24, Z+2	; 0x02
    20be:	93 81       	ldd	r25, Z+3	; 0x03
    20c0:	08 17       	cp	r16, r24
    20c2:	19 07       	cpc	r17, r25
    20c4:	28 f4       	brcc	.+10     	; 0x20d0 <xTaskIncrementTick+0xac>
    20c6:	90 93 ac 03 	sts	0x03AC, r25	; 0x8003ac <xNextTaskUnblockTime+0x1>
    20ca:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <xNextTaskUnblockTime>
    20ce:	7c c0       	rjmp	.+248    	; 0x21c8 <xTaskIncrementTick+0x1a4>
    20d0:	a2 85       	ldd	r26, Z+10	; 0x0a
    20d2:	b3 85       	ldd	r27, Z+11	; 0x0b
    20d4:	84 81       	ldd	r24, Z+4	; 0x04
    20d6:	95 81       	ldd	r25, Z+5	; 0x05
    20d8:	26 81       	ldd	r18, Z+6	; 0x06
    20da:	37 81       	ldd	r19, Z+7	; 0x07
    20dc:	ec 01       	movw	r28, r24
    20de:	3d 83       	std	Y+5, r19	; 0x05
    20e0:	2c 83       	std	Y+4, r18	; 0x04
    20e2:	26 81       	ldd	r18, Z+6	; 0x06
    20e4:	37 81       	ldd	r19, Z+7	; 0x07
    20e6:	e9 01       	movw	r28, r18
    20e8:	9b 83       	std	Y+3, r25	; 0x03
    20ea:	8a 83       	std	Y+2, r24	; 0x02
    20ec:	cf 01       	movw	r24, r30
    20ee:	02 96       	adiw	r24, 0x02	; 2
    20f0:	11 96       	adiw	r26, 0x01	; 1
    20f2:	6d 91       	ld	r22, X+
    20f4:	7c 91       	ld	r23, X
    20f6:	12 97       	sbiw	r26, 0x02	; 2
    20f8:	68 17       	cp	r22, r24
    20fa:	79 07       	cpc	r23, r25
    20fc:	21 f4       	brne	.+8      	; 0x2106 <xTaskIncrementTick+0xe2>
    20fe:	12 96       	adiw	r26, 0x02	; 2
    2100:	3c 93       	st	X, r19
    2102:	2e 93       	st	-X, r18
    2104:	11 97       	sbiw	r26, 0x01	; 1
    2106:	13 86       	std	Z+11, r1	; 0x0b
    2108:	12 86       	std	Z+10, r1	; 0x0a
    210a:	2c 91       	ld	r18, X
    210c:	21 50       	subi	r18, 0x01	; 1
    210e:	2c 93       	st	X, r18
    2110:	a4 89       	ldd	r26, Z+20	; 0x14
    2112:	b5 89       	ldd	r27, Z+21	; 0x15
    2114:	10 97       	sbiw	r26, 0x00	; 0
    2116:	f9 f0       	breq	.+62     	; 0x2156 <xTaskIncrementTick+0x132>
    2118:	26 85       	ldd	r18, Z+14	; 0x0e
    211a:	37 85       	ldd	r19, Z+15	; 0x0f
    211c:	60 89       	ldd	r22, Z+16	; 0x10
    211e:	71 89       	ldd	r23, Z+17	; 0x11
    2120:	e9 01       	movw	r28, r18
    2122:	7d 83       	std	Y+5, r23	; 0x05
    2124:	6c 83       	std	Y+4, r22	; 0x04
    2126:	60 89       	ldd	r22, Z+16	; 0x10
    2128:	71 89       	ldd	r23, Z+17	; 0x11
    212a:	eb 01       	movw	r28, r22
    212c:	3b 83       	std	Y+3, r19	; 0x03
    212e:	2a 83       	std	Y+2, r18	; 0x02
    2130:	11 96       	adiw	r26, 0x01	; 1
    2132:	ed 90       	ld	r14, X+
    2134:	fc 90       	ld	r15, X
    2136:	12 97       	sbiw	r26, 0x02	; 2
    2138:	9f 01       	movw	r18, r30
    213a:	24 5f       	subi	r18, 0xF4	; 244
    213c:	3f 4f       	sbci	r19, 0xFF	; 255
    213e:	e2 16       	cp	r14, r18
    2140:	f3 06       	cpc	r15, r19
    2142:	21 f4       	brne	.+8      	; 0x214c <xTaskIncrementTick+0x128>
    2144:	12 96       	adiw	r26, 0x02	; 2
    2146:	7c 93       	st	X, r23
    2148:	6e 93       	st	-X, r22
    214a:	11 97       	sbiw	r26, 0x01	; 1
    214c:	15 8a       	std	Z+21, r1	; 0x15
    214e:	14 8a       	std	Z+20, r1	; 0x14
    2150:	2c 91       	ld	r18, X
    2152:	21 50       	subi	r18, 0x01	; 1
    2154:	2c 93       	st	X, r18
    2156:	a6 89       	ldd	r26, Z+22	; 0x16
    2158:	20 91 b3 03 	lds	r18, 0x03B3	; 0x8003b3 <uxTopReadyPriority>
    215c:	2a 17       	cp	r18, r26
    215e:	10 f4       	brcc	.+4      	; 0x2164 <xTaskIncrementTick+0x140>
    2160:	a0 93 b3 03 	sts	0x03B3, r26	; 0x8003b3 <uxTopReadyPriority>
    2164:	4a 9f       	mul	r20, r26
    2166:	d0 01       	movw	r26, r0
    2168:	11 24       	eor	r1, r1
    216a:	a7 51       	subi	r26, 0x17	; 23
    216c:	bc 4f       	sbci	r27, 0xFC	; 252
    216e:	11 96       	adiw	r26, 0x01	; 1
    2170:	0d 90       	ld	r0, X+
    2172:	bc 91       	ld	r27, X
    2174:	a0 2d       	mov	r26, r0
    2176:	b5 83       	std	Z+5, r27	; 0x05
    2178:	a4 83       	std	Z+4, r26	; 0x04
    217a:	14 96       	adiw	r26, 0x04	; 4
    217c:	2d 91       	ld	r18, X+
    217e:	3c 91       	ld	r19, X
    2180:	15 97       	sbiw	r26, 0x05	; 5
    2182:	37 83       	std	Z+7, r19	; 0x07
    2184:	26 83       	std	Z+6, r18	; 0x06
    2186:	14 96       	adiw	r26, 0x04	; 4
    2188:	2d 91       	ld	r18, X+
    218a:	3c 91       	ld	r19, X
    218c:	15 97       	sbiw	r26, 0x05	; 5
    218e:	e9 01       	movw	r28, r18
    2190:	9b 83       	std	Y+3, r25	; 0x03
    2192:	8a 83       	std	Y+2, r24	; 0x02
    2194:	15 96       	adiw	r26, 0x05	; 5
    2196:	9c 93       	st	X, r25
    2198:	8e 93       	st	-X, r24
    219a:	14 97       	sbiw	r26, 0x04	; 4
    219c:	96 89       	ldd	r25, Z+22	; 0x16
    219e:	49 9f       	mul	r20, r25
    21a0:	d0 01       	movw	r26, r0
    21a2:	11 24       	eor	r1, r1
    21a4:	a7 51       	subi	r26, 0x17	; 23
    21a6:	bc 4f       	sbci	r27, 0xFC	; 252
    21a8:	b3 87       	std	Z+11, r27	; 0x0b
    21aa:	a2 87       	std	Z+10, r26	; 0x0a
    21ac:	8c 91       	ld	r24, X
    21ae:	8f 5f       	subi	r24, 0xFF	; 255
    21b0:	8c 93       	st	X, r24
    21b2:	e0 91 0d 04 	lds	r30, 0x040D	; 0x80040d <pxCurrentTCB>
    21b6:	f0 91 0e 04 	lds	r31, 0x040E	; 0x80040e <pxCurrentTCB+0x1>
    21ba:	86 89       	ldd	r24, Z+22	; 0x16
    21bc:	89 17       	cp	r24, r25
    21be:	08 f0       	brcs	.+2      	; 0x21c2 <xTaskIncrementTick+0x19e>
    21c0:	69 cf       	rjmp	.-302    	; 0x2094 <xTaskIncrementTick+0x70>
    21c2:	dd 24       	eor	r13, r13
    21c4:	d3 94       	inc	r13
    21c6:	66 cf       	rjmp	.-308    	; 0x2094 <xTaskIncrementTick+0x70>
    21c8:	e0 91 0d 04 	lds	r30, 0x040D	; 0x80040d <pxCurrentTCB>
    21cc:	f0 91 0e 04 	lds	r31, 0x040E	; 0x80040e <pxCurrentTCB+0x1>
    21d0:	e6 89       	ldd	r30, Z+22	; 0x16
    21d2:	d9 e0       	ldi	r29, 0x09	; 9
    21d4:	ed 9f       	mul	r30, r29
    21d6:	f0 01       	movw	r30, r0
    21d8:	11 24       	eor	r1, r1
    21da:	e7 51       	subi	r30, 0x17	; 23
    21dc:	fc 4f       	sbci	r31, 0xFC	; 252
    21de:	80 81       	ld	r24, Z
    21e0:	82 30       	cpi	r24, 0x02	; 2
    21e2:	10 f0       	brcs	.+4      	; 0x21e8 <xTaskIncrementTick+0x1c4>
    21e4:	dd 24       	eor	r13, r13
    21e6:	d3 94       	inc	r13
    21e8:	80 91 b0 03 	lds	r24, 0x03B0	; 0x8003b0 <xPendedTicks>
    21ec:	90 91 b1 03 	lds	r25, 0x03B1	; 0x8003b1 <xPendedTicks+0x1>
    21f0:	89 2b       	or	r24, r25
    21f2:	11 f4       	brne	.+4      	; 0x21f8 <xTaskIncrementTick+0x1d4>
    21f4:	0e 94 ce 02 	call	0x59c	; 0x59c <vApplicationTickHook>
    21f8:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <xYieldPending>
    21fc:	88 23       	and	r24, r24
    21fe:	79 f0       	breq	.+30     	; 0x221e <__stack+0x1f>
    2200:	dd 24       	eor	r13, r13
    2202:	d3 94       	inc	r13
    2204:	0c c0       	rjmp	.+24     	; 0x221e <__stack+0x1f>
    2206:	80 91 b0 03 	lds	r24, 0x03B0	; 0x8003b0 <xPendedTicks>
    220a:	90 91 b1 03 	lds	r25, 0x03B1	; 0x8003b1 <xPendedTicks+0x1>
    220e:	01 96       	adiw	r24, 0x01	; 1
    2210:	90 93 b1 03 	sts	0x03B1, r25	; 0x8003b1 <xPendedTicks+0x1>
    2214:	80 93 b0 03 	sts	0x03B0, r24	; 0x8003b0 <xPendedTicks>
    2218:	0e 94 ce 02 	call	0x59c	; 0x59c <vApplicationTickHook>
    221c:	d1 2c       	mov	r13, r1
    221e:	8d 2d       	mov	r24, r13
    2220:	df 91       	pop	r29
    2222:	cf 91       	pop	r28
    2224:	1f 91       	pop	r17
    2226:	0f 91       	pop	r16
    2228:	ff 90       	pop	r15
    222a:	ef 90       	pop	r14
    222c:	df 90       	pop	r13
    222e:	08 95       	ret

00002230 <xTaskResumeAll>:
    2230:	ef 92       	push	r14
    2232:	ff 92       	push	r15
    2234:	0f 93       	push	r16
    2236:	1f 93       	push	r17
    2238:	cf 93       	push	r28
    223a:	df 93       	push	r29
    223c:	0f b6       	in	r0, 0x3f	; 63
    223e:	f8 94       	cli
    2240:	0f 92       	push	r0
    2242:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <uxSchedulerSuspended>
    2246:	81 50       	subi	r24, 0x01	; 1
    2248:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <uxSchedulerSuspended>
    224c:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <uxSchedulerSuspended>
    2250:	88 23       	and	r24, r24
    2252:	11 f0       	breq	.+4      	; 0x2258 <xTaskResumeAll+0x28>
    2254:	80 e0       	ldi	r24, 0x00	; 0
    2256:	ac c0       	rjmp	.+344    	; 0x23b0 <xTaskResumeAll+0x180>
    2258:	80 91 b6 03 	lds	r24, 0x03B6	; 0x8003b6 <uxCurrentNumberOfTasks>
    225c:	88 23       	and	r24, r24
    225e:	d1 f3       	breq	.-12     	; 0x2254 <xTaskResumeAll+0x24>
    2260:	e0 90 cf 03 	lds	r14, 0x03CF	; 0x8003cf <xPendingReadyList+0x5>
    2264:	f0 90 d0 03 	lds	r15, 0x03D0	; 0x8003d0 <xPendingReadyList+0x6>
    2268:	e0 e0       	ldi	r30, 0x00	; 0
    226a:	f0 e0       	ldi	r31, 0x00	; 0
    226c:	39 e0       	ldi	r19, 0x09	; 9
    226e:	41 e0       	ldi	r20, 0x01	; 1
    2270:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <xPendingReadyList>
    2274:	88 23       	and	r24, r24
    2276:	09 f4       	brne	.+2      	; 0x227a <xTaskResumeAll+0x4a>
    2278:	80 c0       	rjmp	.+256    	; 0x237a <xTaskResumeAll+0x14a>
    227a:	d7 01       	movw	r26, r14
    227c:	16 96       	adiw	r26, 0x06	; 6
    227e:	ed 91       	ld	r30, X+
    2280:	fc 91       	ld	r31, X
    2282:	17 97       	sbiw	r26, 0x07	; 7
    2284:	a4 89       	ldd	r26, Z+20	; 0x14
    2286:	b5 89       	ldd	r27, Z+21	; 0x15
    2288:	66 85       	ldd	r22, Z+14	; 0x0e
    228a:	77 85       	ldd	r23, Z+15	; 0x0f
    228c:	80 89       	ldd	r24, Z+16	; 0x10
    228e:	91 89       	ldd	r25, Z+17	; 0x11
    2290:	eb 01       	movw	r28, r22
    2292:	9d 83       	std	Y+5, r25	; 0x05
    2294:	8c 83       	std	Y+4, r24	; 0x04
    2296:	80 89       	ldd	r24, Z+16	; 0x10
    2298:	91 89       	ldd	r25, Z+17	; 0x11
    229a:	ec 01       	movw	r28, r24
    229c:	7b 83       	std	Y+3, r23	; 0x03
    229e:	6a 83       	std	Y+2, r22	; 0x02
    22a0:	bf 01       	movw	r22, r30
    22a2:	64 5f       	subi	r22, 0xF4	; 244
    22a4:	7f 4f       	sbci	r23, 0xFF	; 255
    22a6:	11 96       	adiw	r26, 0x01	; 1
    22a8:	0d 91       	ld	r16, X+
    22aa:	1c 91       	ld	r17, X
    22ac:	12 97       	sbiw	r26, 0x02	; 2
    22ae:	06 17       	cp	r16, r22
    22b0:	17 07       	cpc	r17, r23
    22b2:	21 f4       	brne	.+8      	; 0x22bc <xTaskResumeAll+0x8c>
    22b4:	12 96       	adiw	r26, 0x02	; 2
    22b6:	9c 93       	st	X, r25
    22b8:	8e 93       	st	-X, r24
    22ba:	11 97       	sbiw	r26, 0x01	; 1
    22bc:	15 8a       	std	Z+21, r1	; 0x15
    22be:	14 8a       	std	Z+20, r1	; 0x14
    22c0:	8c 91       	ld	r24, X
    22c2:	81 50       	subi	r24, 0x01	; 1
    22c4:	8c 93       	st	X, r24
    22c6:	a2 85       	ldd	r26, Z+10	; 0x0a
    22c8:	b3 85       	ldd	r27, Z+11	; 0x0b
    22ca:	84 81       	ldd	r24, Z+4	; 0x04
    22cc:	95 81       	ldd	r25, Z+5	; 0x05
    22ce:	66 81       	ldd	r22, Z+6	; 0x06
    22d0:	77 81       	ldd	r23, Z+7	; 0x07
    22d2:	ec 01       	movw	r28, r24
    22d4:	7d 83       	std	Y+5, r23	; 0x05
    22d6:	6c 83       	std	Y+4, r22	; 0x04
    22d8:	66 81       	ldd	r22, Z+6	; 0x06
    22da:	77 81       	ldd	r23, Z+7	; 0x07
    22dc:	eb 01       	movw	r28, r22
    22de:	9b 83       	std	Y+3, r25	; 0x03
    22e0:	8a 83       	std	Y+2, r24	; 0x02
    22e2:	cf 01       	movw	r24, r30
    22e4:	02 96       	adiw	r24, 0x02	; 2
    22e6:	11 96       	adiw	r26, 0x01	; 1
    22e8:	0d 91       	ld	r16, X+
    22ea:	1c 91       	ld	r17, X
    22ec:	12 97       	sbiw	r26, 0x02	; 2
    22ee:	08 17       	cp	r16, r24
    22f0:	19 07       	cpc	r17, r25
    22f2:	21 f4       	brne	.+8      	; 0x22fc <xTaskResumeAll+0xcc>
    22f4:	12 96       	adiw	r26, 0x02	; 2
    22f6:	7c 93       	st	X, r23
    22f8:	6e 93       	st	-X, r22
    22fa:	11 97       	sbiw	r26, 0x01	; 1
    22fc:	13 86       	std	Z+11, r1	; 0x0b
    22fe:	12 86       	std	Z+10, r1	; 0x0a
    2300:	2c 91       	ld	r18, X
    2302:	21 50       	subi	r18, 0x01	; 1
    2304:	2c 93       	st	X, r18
    2306:	a6 89       	ldd	r26, Z+22	; 0x16
    2308:	20 91 b3 03 	lds	r18, 0x03B3	; 0x8003b3 <uxTopReadyPriority>
    230c:	2a 17       	cp	r18, r26
    230e:	10 f4       	brcc	.+4      	; 0x2314 <xTaskResumeAll+0xe4>
    2310:	a0 93 b3 03 	sts	0x03B3, r26	; 0x8003b3 <uxTopReadyPriority>
    2314:	3a 9f       	mul	r19, r26
    2316:	d0 01       	movw	r26, r0
    2318:	11 24       	eor	r1, r1
    231a:	a7 51       	subi	r26, 0x17	; 23
    231c:	bc 4f       	sbci	r27, 0xFC	; 252
    231e:	11 96       	adiw	r26, 0x01	; 1
    2320:	0d 90       	ld	r0, X+
    2322:	bc 91       	ld	r27, X
    2324:	a0 2d       	mov	r26, r0
    2326:	b5 83       	std	Z+5, r27	; 0x05
    2328:	a4 83       	std	Z+4, r26	; 0x04
    232a:	14 96       	adiw	r26, 0x04	; 4
    232c:	6d 91       	ld	r22, X+
    232e:	7c 91       	ld	r23, X
    2330:	15 97       	sbiw	r26, 0x05	; 5
    2332:	77 83       	std	Z+7, r23	; 0x07
    2334:	66 83       	std	Z+6, r22	; 0x06
    2336:	14 96       	adiw	r26, 0x04	; 4
    2338:	6d 91       	ld	r22, X+
    233a:	7c 91       	ld	r23, X
    233c:	15 97       	sbiw	r26, 0x05	; 5
    233e:	eb 01       	movw	r28, r22
    2340:	9b 83       	std	Y+3, r25	; 0x03
    2342:	8a 83       	std	Y+2, r24	; 0x02
    2344:	15 96       	adiw	r26, 0x05	; 5
    2346:	9c 93       	st	X, r25
    2348:	8e 93       	st	-X, r24
    234a:	14 97       	sbiw	r26, 0x04	; 4
    234c:	96 89       	ldd	r25, Z+22	; 0x16
    234e:	39 9f       	mul	r19, r25
    2350:	d0 01       	movw	r26, r0
    2352:	11 24       	eor	r1, r1
    2354:	a7 51       	subi	r26, 0x17	; 23
    2356:	bc 4f       	sbci	r27, 0xFC	; 252
    2358:	b3 87       	std	Z+11, r27	; 0x0b
    235a:	a2 87       	std	Z+10, r26	; 0x0a
    235c:	8c 91       	ld	r24, X
    235e:	8f 5f       	subi	r24, 0xFF	; 255
    2360:	8c 93       	st	X, r24
    2362:	a0 91 0d 04 	lds	r26, 0x040D	; 0x80040d <pxCurrentTCB>
    2366:	b0 91 0e 04 	lds	r27, 0x040E	; 0x80040e <pxCurrentTCB+0x1>
    236a:	56 96       	adiw	r26, 0x16	; 22
    236c:	8c 91       	ld	r24, X
    236e:	89 17       	cp	r24, r25
    2370:	08 f0       	brcs	.+2      	; 0x2374 <xTaskResumeAll+0x144>
    2372:	7e cf       	rjmp	.-260    	; 0x2270 <xTaskResumeAll+0x40>
    2374:	40 93 af 03 	sts	0x03AF, r20	; 0x8003af <xYieldPending>
    2378:	7b cf       	rjmp	.-266    	; 0x2270 <xTaskResumeAll+0x40>
    237a:	ef 2b       	or	r30, r31
    237c:	09 f0       	breq	.+2      	; 0x2380 <xTaskResumeAll+0x150>
    237e:	b2 dc       	rcall	.-1692   	; 0x1ce4 <prvResetNextTaskUnblockTime>
    2380:	c0 91 b0 03 	lds	r28, 0x03B0	; 0x8003b0 <xPendedTicks>
    2384:	d0 91 b1 03 	lds	r29, 0x03B1	; 0x8003b1 <xPendedTicks+0x1>
    2388:	20 97       	sbiw	r28, 0x00	; 0
    238a:	59 f0       	breq	.+22     	; 0x23a2 <xTaskResumeAll+0x172>
    238c:	11 e0       	ldi	r17, 0x01	; 1
    238e:	4a de       	rcall	.-876    	; 0x2024 <xTaskIncrementTick>
    2390:	81 11       	cpse	r24, r1
    2392:	10 93 af 03 	sts	0x03AF, r17	; 0x8003af <xYieldPending>
    2396:	21 97       	sbiw	r28, 0x01	; 1
    2398:	d1 f7       	brne	.-12     	; 0x238e <xTaskResumeAll+0x15e>
    239a:	10 92 b1 03 	sts	0x03B1, r1	; 0x8003b1 <xPendedTicks+0x1>
    239e:	10 92 b0 03 	sts	0x03B0, r1	; 0x8003b0 <xPendedTicks>
    23a2:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <xYieldPending>
    23a6:	88 23       	and	r24, r24
    23a8:	09 f4       	brne	.+2      	; 0x23ac <xTaskResumeAll+0x17c>
    23aa:	54 cf       	rjmp	.-344    	; 0x2254 <xTaskResumeAll+0x24>
    23ac:	8f d4       	rcall	.+2334   	; 0x2ccc <vPortYield>
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	0f 90       	pop	r0
    23b2:	0f be       	out	0x3f, r0	; 63
    23b4:	df 91       	pop	r29
    23b6:	cf 91       	pop	r28
    23b8:	1f 91       	pop	r17
    23ba:	0f 91       	pop	r16
    23bc:	ff 90       	pop	r15
    23be:	ef 90       	pop	r14
    23c0:	08 95       	ret

000023c2 <vTaskSwitchContext>:
    23c2:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <uxSchedulerSuspended>
    23c6:	88 23       	and	r24, r24
    23c8:	21 f0       	breq	.+8      	; 0x23d2 <vTaskSwitchContext+0x10>
    23ca:	81 e0       	ldi	r24, 0x01	; 1
    23cc:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <xYieldPending>
    23d0:	08 95       	ret
    23d2:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <xYieldPending>
    23d6:	a0 91 0d 04 	lds	r26, 0x040D	; 0x80040d <pxCurrentTCB>
    23da:	b0 91 0e 04 	lds	r27, 0x040E	; 0x80040e <pxCurrentTCB+0x1>
    23de:	e0 91 0d 04 	lds	r30, 0x040D	; 0x80040d <pxCurrentTCB>
    23e2:	f0 91 0e 04 	lds	r31, 0x040E	; 0x80040e <pxCurrentTCB+0x1>
    23e6:	2d 91       	ld	r18, X+
    23e8:	3c 91       	ld	r19, X
    23ea:	87 89       	ldd	r24, Z+23	; 0x17
    23ec:	90 8d       	ldd	r25, Z+24	; 0x18
    23ee:	82 17       	cp	r24, r18
    23f0:	93 07       	cpc	r25, r19
    23f2:	58 f0       	brcs	.+22     	; 0x240a <vTaskSwitchContext+0x48>
    23f4:	60 91 0d 04 	lds	r22, 0x040D	; 0x80040d <pxCurrentTCB>
    23f8:	70 91 0e 04 	lds	r23, 0x040E	; 0x80040e <pxCurrentTCB+0x1>
    23fc:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <pxCurrentTCB>
    2400:	90 91 0e 04 	lds	r25, 0x040E	; 0x80040e <pxCurrentTCB+0x1>
    2404:	67 5e       	subi	r22, 0xE7	; 231
    2406:	7f 4f       	sbci	r23, 0xFF	; 255
    2408:	6b d3       	rcall	.+1750   	; 0x2ae0 <vApplicationStackOverflowHook>
    240a:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <uxTopReadyPriority>
    240e:	69 e0       	ldi	r22, 0x09	; 9
    2410:	48 2f       	mov	r20, r24
    2412:	50 e0       	ldi	r21, 0x00	; 0
    2414:	64 9f       	mul	r22, r20
    2416:	90 01       	movw	r18, r0
    2418:	65 9f       	mul	r22, r21
    241a:	30 0d       	add	r19, r0
    241c:	11 24       	eor	r1, r1
    241e:	f9 01       	movw	r30, r18
    2420:	e7 51       	subi	r30, 0x17	; 23
    2422:	fc 4f       	sbci	r31, 0xFC	; 252
    2424:	90 81       	ld	r25, Z
    2426:	91 11       	cpse	r25, r1
    2428:	02 c0       	rjmp	.+4      	; 0x242e <vTaskSwitchContext+0x6c>
    242a:	81 50       	subi	r24, 0x01	; 1
    242c:	f1 cf       	rjmp	.-30     	; 0x2410 <vTaskSwitchContext+0x4e>
    242e:	a1 81       	ldd	r26, Z+1	; 0x01
    2430:	b2 81       	ldd	r27, Z+2	; 0x02
    2432:	12 96       	adiw	r26, 0x02	; 2
    2434:	6d 91       	ld	r22, X+
    2436:	7c 91       	ld	r23, X
    2438:	13 97       	sbiw	r26, 0x03	; 3
    243a:	72 83       	std	Z+2, r23	; 0x02
    243c:	61 83       	std	Z+1, r22	; 0x01
    243e:	24 51       	subi	r18, 0x14	; 20
    2440:	3c 4f       	sbci	r19, 0xFC	; 252
    2442:	62 17       	cp	r22, r18
    2444:	73 07       	cpc	r23, r19
    2446:	21 f4       	brne	.+8      	; 0x2450 <vTaskSwitchContext+0x8e>
    2448:	25 81       	ldd	r18, Z+5	; 0x05
    244a:	36 81       	ldd	r19, Z+6	; 0x06
    244c:	32 83       	std	Z+2, r19	; 0x02
    244e:	21 83       	std	Z+1, r18	; 0x01
    2450:	99 e0       	ldi	r25, 0x09	; 9
    2452:	94 9f       	mul	r25, r20
    2454:	f0 01       	movw	r30, r0
    2456:	95 9f       	mul	r25, r21
    2458:	f0 0d       	add	r31, r0
    245a:	11 24       	eor	r1, r1
    245c:	e7 51       	subi	r30, 0x17	; 23
    245e:	fc 4f       	sbci	r31, 0xFC	; 252
    2460:	01 80       	ldd	r0, Z+1	; 0x01
    2462:	f2 81       	ldd	r31, Z+2	; 0x02
    2464:	e0 2d       	mov	r30, r0
    2466:	26 81       	ldd	r18, Z+6	; 0x06
    2468:	37 81       	ldd	r19, Z+7	; 0x07
    246a:	30 93 0e 04 	sts	0x040E, r19	; 0x80040e <pxCurrentTCB+0x1>
    246e:	20 93 0d 04 	sts	0x040D, r18	; 0x80040d <pxCurrentTCB>
    2472:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <uxTopReadyPriority>
    2476:	08 95       	ret

00002478 <vTaskPlaceOnEventList>:
    2478:	cf 93       	push	r28
    247a:	df 93       	push	r29
    247c:	eb 01       	movw	r28, r22
    247e:	60 91 0d 04 	lds	r22, 0x040D	; 0x80040d <pxCurrentTCB>
    2482:	70 91 0e 04 	lds	r23, 0x040E	; 0x80040e <pxCurrentTCB+0x1>
    2486:	64 5f       	subi	r22, 0xF4	; 244
    2488:	7f 4f       	sbci	r23, 0xFF	; 255
    248a:	ad d3       	rcall	.+1882   	; 0x2be6 <vListInsert>
    248c:	61 e0       	ldi	r22, 0x01	; 1
    248e:	ce 01       	movw	r24, r28
    2490:	df 91       	pop	r29
    2492:	cf 91       	pop	r28
    2494:	b5 cc       	rjmp	.-1686   	; 0x1e00 <prvAddCurrentTaskToDelayedList>

00002496 <vTaskPlaceOnEventListRestricted>:
    2496:	0f 93       	push	r16
    2498:	1f 93       	push	r17
    249a:	cf 93       	push	r28
    249c:	df 93       	push	r29
    249e:	fc 01       	movw	r30, r24
    24a0:	8b 01       	movw	r16, r22
    24a2:	a1 81       	ldd	r26, Z+1	; 0x01
    24a4:	b2 81       	ldd	r27, Z+2	; 0x02
    24a6:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <pxCurrentTCB>
    24aa:	90 91 0e 04 	lds	r25, 0x040E	; 0x80040e <pxCurrentTCB+0x1>
    24ae:	ec 01       	movw	r28, r24
    24b0:	bf 87       	std	Y+15, r27	; 0x0f
    24b2:	ae 87       	std	Y+14, r26	; 0x0e
    24b4:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <pxCurrentTCB>
    24b8:	90 91 0e 04 	lds	r25, 0x040E	; 0x80040e <pxCurrentTCB+0x1>
    24bc:	14 96       	adiw	r26, 0x04	; 4
    24be:	2d 91       	ld	r18, X+
    24c0:	3c 91       	ld	r19, X
    24c2:	15 97       	sbiw	r26, 0x05	; 5
    24c4:	ec 01       	movw	r28, r24
    24c6:	39 8b       	std	Y+17, r19	; 0x11
    24c8:	28 8b       	std	Y+16, r18	; 0x10
    24ca:	20 91 0d 04 	lds	r18, 0x040D	; 0x80040d <pxCurrentTCB>
    24ce:	30 91 0e 04 	lds	r19, 0x040E	; 0x80040e <pxCurrentTCB+0x1>
    24d2:	14 96       	adiw	r26, 0x04	; 4
    24d4:	8d 91       	ld	r24, X+
    24d6:	9c 91       	ld	r25, X
    24d8:	15 97       	sbiw	r26, 0x05	; 5
    24da:	24 5f       	subi	r18, 0xF4	; 244
    24dc:	3f 4f       	sbci	r19, 0xFF	; 255
    24de:	ec 01       	movw	r28, r24
    24e0:	3b 83       	std	Y+3, r19	; 0x03
    24e2:	2a 83       	std	Y+2, r18	; 0x02
    24e4:	20 91 0d 04 	lds	r18, 0x040D	; 0x80040d <pxCurrentTCB>
    24e8:	30 91 0e 04 	lds	r19, 0x040E	; 0x80040e <pxCurrentTCB+0x1>
    24ec:	24 5f       	subi	r18, 0xF4	; 244
    24ee:	3f 4f       	sbci	r19, 0xFF	; 255
    24f0:	15 96       	adiw	r26, 0x05	; 5
    24f2:	3c 93       	st	X, r19
    24f4:	2e 93       	st	-X, r18
    24f6:	14 97       	sbiw	r26, 0x04	; 4
    24f8:	a0 91 0d 04 	lds	r26, 0x040D	; 0x80040d <pxCurrentTCB>
    24fc:	b0 91 0e 04 	lds	r27, 0x040E	; 0x80040e <pxCurrentTCB+0x1>
    2500:	55 96       	adiw	r26, 0x15	; 21
    2502:	fc 93       	st	X, r31
    2504:	ee 93       	st	-X, r30
    2506:	54 97       	sbiw	r26, 0x14	; 20
    2508:	90 81       	ld	r25, Z
    250a:	9f 5f       	subi	r25, 0xFF	; 255
    250c:	90 83       	st	Z, r25
    250e:	44 23       	and	r20, r20
    2510:	11 f0       	breq	.+4      	; 0x2516 <vTaskPlaceOnEventListRestricted+0x80>
    2512:	0f ef       	ldi	r16, 0xFF	; 255
    2514:	1f ef       	ldi	r17, 0xFF	; 255
    2516:	64 2f       	mov	r22, r20
    2518:	c8 01       	movw	r24, r16
    251a:	df 91       	pop	r29
    251c:	cf 91       	pop	r28
    251e:	1f 91       	pop	r17
    2520:	0f 91       	pop	r16
    2522:	6e cc       	rjmp	.-1828   	; 0x1e00 <prvAddCurrentTaskToDelayedList>

00002524 <xTaskRemoveFromEventList>:
    2524:	cf 93       	push	r28
    2526:	df 93       	push	r29
    2528:	dc 01       	movw	r26, r24
    252a:	15 96       	adiw	r26, 0x05	; 5
    252c:	ed 91       	ld	r30, X+
    252e:	fc 91       	ld	r31, X
    2530:	16 97       	sbiw	r26, 0x06	; 6
    2532:	06 80       	ldd	r0, Z+6	; 0x06
    2534:	f7 81       	ldd	r31, Z+7	; 0x07
    2536:	e0 2d       	mov	r30, r0
    2538:	a4 89       	ldd	r26, Z+20	; 0x14
    253a:	b5 89       	ldd	r27, Z+21	; 0x15
    253c:	86 85       	ldd	r24, Z+14	; 0x0e
    253e:	97 85       	ldd	r25, Z+15	; 0x0f
    2540:	20 89       	ldd	r18, Z+16	; 0x10
    2542:	31 89       	ldd	r19, Z+17	; 0x11
    2544:	ec 01       	movw	r28, r24
    2546:	3d 83       	std	Y+5, r19	; 0x05
    2548:	2c 83       	std	Y+4, r18	; 0x04
    254a:	c0 89       	ldd	r28, Z+16	; 0x10
    254c:	d1 89       	ldd	r29, Z+17	; 0x11
    254e:	9b 83       	std	Y+3, r25	; 0x03
    2550:	8a 83       	std	Y+2, r24	; 0x02
    2552:	cf 01       	movw	r24, r30
    2554:	0c 96       	adiw	r24, 0x0c	; 12
    2556:	11 96       	adiw	r26, 0x01	; 1
    2558:	2d 91       	ld	r18, X+
    255a:	3c 91       	ld	r19, X
    255c:	12 97       	sbiw	r26, 0x02	; 2
    255e:	28 17       	cp	r18, r24
    2560:	39 07       	cpc	r19, r25
    2562:	21 f4       	brne	.+8      	; 0x256c <xTaskRemoveFromEventList+0x48>
    2564:	12 96       	adiw	r26, 0x02	; 2
    2566:	dc 93       	st	X, r29
    2568:	ce 93       	st	-X, r28
    256a:	11 97       	sbiw	r26, 0x01	; 1
    256c:	15 8a       	std	Z+21, r1	; 0x15
    256e:	14 8a       	std	Z+20, r1	; 0x14
    2570:	2c 91       	ld	r18, X
    2572:	21 50       	subi	r18, 0x01	; 1
    2574:	2c 93       	st	X, r18
    2576:	20 91 aa 03 	lds	r18, 0x03AA	; 0x8003aa <uxSchedulerSuspended>
    257a:	21 11       	cpse	r18, r1
    257c:	4f c0       	rjmp	.+158    	; 0x261c <xTaskRemoveFromEventList+0xf8>
    257e:	a2 85       	ldd	r26, Z+10	; 0x0a
    2580:	b3 85       	ldd	r27, Z+11	; 0x0b
    2582:	84 81       	ldd	r24, Z+4	; 0x04
    2584:	95 81       	ldd	r25, Z+5	; 0x05
    2586:	26 81       	ldd	r18, Z+6	; 0x06
    2588:	37 81       	ldd	r19, Z+7	; 0x07
    258a:	ec 01       	movw	r28, r24
    258c:	3d 83       	std	Y+5, r19	; 0x05
    258e:	2c 83       	std	Y+4, r18	; 0x04
    2590:	c6 81       	ldd	r28, Z+6	; 0x06
    2592:	d7 81       	ldd	r29, Z+7	; 0x07
    2594:	9b 83       	std	Y+3, r25	; 0x03
    2596:	8a 83       	std	Y+2, r24	; 0x02
    2598:	9f 01       	movw	r18, r30
    259a:	2e 5f       	subi	r18, 0xFE	; 254
    259c:	3f 4f       	sbci	r19, 0xFF	; 255
    259e:	11 96       	adiw	r26, 0x01	; 1
    25a0:	8d 91       	ld	r24, X+
    25a2:	9c 91       	ld	r25, X
    25a4:	12 97       	sbiw	r26, 0x02	; 2
    25a6:	82 17       	cp	r24, r18
    25a8:	93 07       	cpc	r25, r19
    25aa:	21 f4       	brne	.+8      	; 0x25b4 <xTaskRemoveFromEventList+0x90>
    25ac:	12 96       	adiw	r26, 0x02	; 2
    25ae:	dc 93       	st	X, r29
    25b0:	ce 93       	st	-X, r28
    25b2:	11 97       	sbiw	r26, 0x01	; 1
    25b4:	13 86       	std	Z+11, r1	; 0x0b
    25b6:	12 86       	std	Z+10, r1	; 0x0a
    25b8:	8c 91       	ld	r24, X
    25ba:	81 50       	subi	r24, 0x01	; 1
    25bc:	8c 93       	st	X, r24
    25be:	a6 89       	ldd	r26, Z+22	; 0x16
    25c0:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <uxTopReadyPriority>
    25c4:	8a 17       	cp	r24, r26
    25c6:	10 f4       	brcc	.+4      	; 0x25cc <xTaskRemoveFromEventList+0xa8>
    25c8:	a0 93 b3 03 	sts	0x03B3, r26	; 0x8003b3 <uxTopReadyPriority>
    25cc:	89 e0       	ldi	r24, 0x09	; 9
    25ce:	8a 9f       	mul	r24, r26
    25d0:	d0 01       	movw	r26, r0
    25d2:	11 24       	eor	r1, r1
    25d4:	a7 51       	subi	r26, 0x17	; 23
    25d6:	bc 4f       	sbci	r27, 0xFC	; 252
    25d8:	11 96       	adiw	r26, 0x01	; 1
    25da:	0d 90       	ld	r0, X+
    25dc:	bc 91       	ld	r27, X
    25de:	a0 2d       	mov	r26, r0
    25e0:	b5 83       	std	Z+5, r27	; 0x05
    25e2:	a4 83       	std	Z+4, r26	; 0x04
    25e4:	14 96       	adiw	r26, 0x04	; 4
    25e6:	4d 91       	ld	r20, X+
    25e8:	5c 91       	ld	r21, X
    25ea:	15 97       	sbiw	r26, 0x05	; 5
    25ec:	57 83       	std	Z+7, r21	; 0x07
    25ee:	46 83       	std	Z+6, r20	; 0x06
    25f0:	14 96       	adiw	r26, 0x04	; 4
    25f2:	cd 91       	ld	r28, X+
    25f4:	dc 91       	ld	r29, X
    25f6:	15 97       	sbiw	r26, 0x05	; 5
    25f8:	3b 83       	std	Y+3, r19	; 0x03
    25fa:	2a 83       	std	Y+2, r18	; 0x02
    25fc:	15 96       	adiw	r26, 0x05	; 5
    25fe:	3c 93       	st	X, r19
    2600:	2e 93       	st	-X, r18
    2602:	14 97       	sbiw	r26, 0x04	; 4
    2604:	a6 89       	ldd	r26, Z+22	; 0x16
    2606:	8a 9f       	mul	r24, r26
    2608:	d0 01       	movw	r26, r0
    260a:	11 24       	eor	r1, r1
    260c:	a7 51       	subi	r26, 0x17	; 23
    260e:	bc 4f       	sbci	r27, 0xFC	; 252
    2610:	b3 87       	std	Z+11, r27	; 0x0b
    2612:	a2 87       	std	Z+10, r26	; 0x0a
    2614:	8c 91       	ld	r24, X
    2616:	8f 5f       	subi	r24, 0xFF	; 255
    2618:	8c 93       	st	X, r24
    261a:	1f c0       	rjmp	.+62     	; 0x265a <xTaskRemoveFromEventList+0x136>
    261c:	a0 91 cb 03 	lds	r26, 0x03CB	; 0x8003cb <xPendingReadyList+0x1>
    2620:	b0 91 cc 03 	lds	r27, 0x03CC	; 0x8003cc <xPendingReadyList+0x2>
    2624:	b7 87       	std	Z+15, r27	; 0x0f
    2626:	a6 87       	std	Z+14, r26	; 0x0e
    2628:	14 96       	adiw	r26, 0x04	; 4
    262a:	2d 91       	ld	r18, X+
    262c:	3c 91       	ld	r19, X
    262e:	15 97       	sbiw	r26, 0x05	; 5
    2630:	31 8b       	std	Z+17, r19	; 0x11
    2632:	20 8b       	std	Z+16, r18	; 0x10
    2634:	14 96       	adiw	r26, 0x04	; 4
    2636:	cd 91       	ld	r28, X+
    2638:	dc 91       	ld	r29, X
    263a:	15 97       	sbiw	r26, 0x05	; 5
    263c:	9b 83       	std	Y+3, r25	; 0x03
    263e:	8a 83       	std	Y+2, r24	; 0x02
    2640:	15 96       	adiw	r26, 0x05	; 5
    2642:	9c 93       	st	X, r25
    2644:	8e 93       	st	-X, r24
    2646:	14 97       	sbiw	r26, 0x04	; 4
    2648:	8a ec       	ldi	r24, 0xCA	; 202
    264a:	93 e0       	ldi	r25, 0x03	; 3
    264c:	95 8b       	std	Z+21, r25	; 0x15
    264e:	84 8b       	std	Z+20, r24	; 0x14
    2650:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <xPendingReadyList>
    2654:	8f 5f       	subi	r24, 0xFF	; 255
    2656:	80 93 ca 03 	sts	0x03CA, r24	; 0x8003ca <xPendingReadyList>
    265a:	a0 91 0d 04 	lds	r26, 0x040D	; 0x80040d <pxCurrentTCB>
    265e:	b0 91 0e 04 	lds	r27, 0x040E	; 0x80040e <pxCurrentTCB+0x1>
    2662:	96 89       	ldd	r25, Z+22	; 0x16
    2664:	56 96       	adiw	r26, 0x16	; 22
    2666:	8c 91       	ld	r24, X
    2668:	89 17       	cp	r24, r25
    266a:	20 f4       	brcc	.+8      	; 0x2674 <xTaskRemoveFromEventList+0x150>
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <xYieldPending>
    2672:	01 c0       	rjmp	.+2      	; 0x2676 <xTaskRemoveFromEventList+0x152>
    2674:	80 e0       	ldi	r24, 0x00	; 0
    2676:	df 91       	pop	r29
    2678:	cf 91       	pop	r28
    267a:	08 95       	ret

0000267c <vTaskInternalSetTimeOutState>:
    267c:	20 91 ae 03 	lds	r18, 0x03AE	; 0x8003ae <xNumOfOverflows>
    2680:	fc 01       	movw	r30, r24
    2682:	20 83       	st	Z, r18
    2684:	20 91 b4 03 	lds	r18, 0x03B4	; 0x8003b4 <xTickCount>
    2688:	30 91 b5 03 	lds	r19, 0x03B5	; 0x8003b5 <xTickCount+0x1>
    268c:	32 83       	std	Z+2, r19	; 0x02
    268e:	21 83       	std	Z+1, r18	; 0x01
    2690:	08 95       	ret

00002692 <xTaskCheckForTimeOut>:
    2692:	cf 93       	push	r28
    2694:	df 93       	push	r29
    2696:	0f b6       	in	r0, 0x3f	; 63
    2698:	f8 94       	cli
    269a:	0f 92       	push	r0
    269c:	40 91 b4 03 	lds	r20, 0x03B4	; 0x8003b4 <xTickCount>
    26a0:	50 91 b5 03 	lds	r21, 0x03B5	; 0x8003b5 <xTickCount+0x1>
    26a4:	db 01       	movw	r26, r22
    26a6:	2d 91       	ld	r18, X+
    26a8:	3c 91       	ld	r19, X
    26aa:	2f 3f       	cpi	r18, 0xFF	; 255
    26ac:	bf ef       	ldi	r27, 0xFF	; 255
    26ae:	3b 07       	cpc	r19, r27
    26b0:	d9 f0       	breq	.+54     	; 0x26e8 <xTaskCheckForTimeOut+0x56>
    26b2:	ec 01       	movw	r28, r24
    26b4:	e9 81       	ldd	r30, Y+1	; 0x01
    26b6:	fa 81       	ldd	r31, Y+2	; 0x02
    26b8:	a0 91 ae 03 	lds	r26, 0x03AE	; 0x8003ae <xNumOfOverflows>
    26bc:	b8 81       	ld	r27, Y
    26be:	ba 17       	cp	r27, r26
    26c0:	41 f0       	breq	.+16     	; 0x26d2 <xTaskCheckForTimeOut+0x40>
    26c2:	4e 17       	cp	r20, r30
    26c4:	5f 07       	cpc	r21, r31
    26c6:	28 f0       	brcs	.+10     	; 0x26d2 <xTaskCheckForTimeOut+0x40>
    26c8:	fb 01       	movw	r30, r22
    26ca:	11 82       	std	Z+1, r1	; 0x01
    26cc:	10 82       	st	Z, r1
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	0c c0       	rjmp	.+24     	; 0x26ea <xTaskCheckForTimeOut+0x58>
    26d2:	4e 1b       	sub	r20, r30
    26d4:	5f 0b       	sbc	r21, r31
    26d6:	42 17       	cp	r20, r18
    26d8:	53 07       	cpc	r21, r19
    26da:	b0 f7       	brcc	.-20     	; 0x26c8 <xTaskCheckForTimeOut+0x36>
    26dc:	fb 01       	movw	r30, r22
    26de:	24 1b       	sub	r18, r20
    26e0:	35 0b       	sbc	r19, r21
    26e2:	31 83       	std	Z+1, r19	; 0x01
    26e4:	20 83       	st	Z, r18
    26e6:	ca df       	rcall	.-108    	; 0x267c <vTaskInternalSetTimeOutState>
    26e8:	80 e0       	ldi	r24, 0x00	; 0
    26ea:	0f 90       	pop	r0
    26ec:	0f be       	out	0x3f, r0	; 63
    26ee:	df 91       	pop	r29
    26f0:	cf 91       	pop	r28
    26f2:	08 95       	ret

000026f4 <vTaskMissedYield>:
    26f4:	81 e0       	ldi	r24, 0x01	; 1
    26f6:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <xYieldPending>
    26fa:	08 95       	ret

000026fc <xTaskGetSchedulerState>:
    26fc:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <xSchedulerRunning>
    2700:	88 23       	and	r24, r24
    2702:	31 f0       	breq	.+12     	; 0x2710 <xTaskGetSchedulerState+0x14>
    2704:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <uxSchedulerSuspended>
    2708:	88 23       	and	r24, r24
    270a:	21 f0       	breq	.+8      	; 0x2714 <xTaskGetSchedulerState+0x18>
    270c:	80 e0       	ldi	r24, 0x00	; 0
    270e:	08 95       	ret
    2710:	81 e0       	ldi	r24, 0x01	; 1
    2712:	08 95       	ret
    2714:	82 e0       	ldi	r24, 0x02	; 2
    2716:	08 95       	ret

00002718 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    2718:	0f 93       	push	r16
    271a:	1f 93       	push	r17
    271c:	cf 93       	push	r28
    271e:	df 93       	push	r29
    2720:	ec 01       	movw	r28, r24
        TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
        BaseType_t xReturn = pdFALSE;

        if( pxMutexHolder != NULL )
    2722:	89 2b       	or	r24, r25
    2724:	11 f4       	brne	.+4      	; 0x272a <xTaskPriorityDisinherit+0x12>
#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
        TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
        BaseType_t xReturn = pdFALSE;
    2726:	80 e0       	ldi	r24, 0x00	; 0
    2728:	43 c0       	rjmp	.+134    	; 0x27b0 <xTaskPriorityDisinherit+0x98>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
    272a:	8a a1       	ldd	r24, Y+34	; 0x22
    272c:	81 50       	subi	r24, 0x01	; 1
    272e:	8a a3       	std	Y+34, r24	; 0x22

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    2730:	2e 89       	ldd	r18, Y+22	; 0x16
    2732:	99 a1       	ldd	r25, Y+33	; 0x21
    2734:	29 17       	cp	r18, r25
    2736:	b9 f3       	breq	.-18     	; 0x2726 <xTaskPriorityDisinherit+0xe>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    2738:	81 11       	cpse	r24, r1
    273a:	f5 cf       	rjmp	.-22     	; 0x2726 <xTaskPriorityDisinherit+0xe>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    273c:	8e 01       	movw	r16, r28
    273e:	0e 5f       	subi	r16, 0xFE	; 254
    2740:	1f 4f       	sbci	r17, 0xFF	; 255
    2742:	c8 01       	movw	r24, r16
    2744:	88 d2       	rcall	.+1296   	; 0x2c56 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
    2746:	89 a1       	ldd	r24, Y+33	; 0x21
    2748:	8e 8b       	std	Y+22, r24	; 0x16

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    274a:	48 2f       	mov	r20, r24
    274c:	50 e0       	ldi	r21, 0x00	; 0
    274e:	24 e0       	ldi	r18, 0x04	; 4
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	24 1b       	sub	r18, r20
    2754:	35 0b       	sbc	r19, r21
    2756:	3d 87       	std	Y+13, r19	; 0x0d
    2758:	2c 87       	std	Y+12, r18	; 0x0c
                    prvAddTaskToReadyList( pxTCB );
    275a:	90 91 b3 03 	lds	r25, 0x03B3	; 0x8003b3 <uxTopReadyPriority>
    275e:	98 17       	cp	r25, r24
    2760:	10 f4       	brcc	.+4      	; 0x2766 <xTaskPriorityDisinherit+0x4e>
    2762:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <uxTopReadyPriority>
    2766:	89 e0       	ldi	r24, 0x09	; 9
    2768:	84 9f       	mul	r24, r20
    276a:	f0 01       	movw	r30, r0
    276c:	85 9f       	mul	r24, r21
    276e:	f0 0d       	add	r31, r0
    2770:	11 24       	eor	r1, r1
    2772:	e7 51       	subi	r30, 0x17	; 23
    2774:	fc 4f       	sbci	r31, 0xFC	; 252
    2776:	01 80       	ldd	r0, Z+1	; 0x01
    2778:	f2 81       	ldd	r31, Z+2	; 0x02
    277a:	e0 2d       	mov	r30, r0
    277c:	fd 83       	std	Y+5, r31	; 0x05
    277e:	ec 83       	std	Y+4, r30	; 0x04
    2780:	24 81       	ldd	r18, Z+4	; 0x04
    2782:	35 81       	ldd	r19, Z+5	; 0x05
    2784:	3f 83       	std	Y+7, r19	; 0x07
    2786:	2e 83       	std	Y+6, r18	; 0x06
    2788:	a4 81       	ldd	r26, Z+4	; 0x04
    278a:	b5 81       	ldd	r27, Z+5	; 0x05
    278c:	13 96       	adiw	r26, 0x03	; 3
    278e:	1c 93       	st	X, r17
    2790:	0e 93       	st	-X, r16
    2792:	12 97       	sbiw	r26, 0x02	; 2
    2794:	15 83       	std	Z+5, r17	; 0x05
    2796:	04 83       	std	Z+4, r16	; 0x04
    2798:	ee 89       	ldd	r30, Y+22	; 0x16
    279a:	8e 9f       	mul	r24, r30
    279c:	f0 01       	movw	r30, r0
    279e:	11 24       	eor	r1, r1
    27a0:	e7 51       	subi	r30, 0x17	; 23
    27a2:	fc 4f       	sbci	r31, 0xFC	; 252
    27a4:	fb 87       	std	Y+11, r31	; 0x0b
    27a6:	ea 87       	std	Y+10, r30	; 0x0a
    27a8:	80 81       	ld	r24, Z
    27aa:	8f 5f       	subi	r24, 0xFF	; 255
    27ac:	80 83       	st	Z, r24
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
    27ae:	81 e0       	ldi	r24, 0x01	; 1
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    27b0:	df 91       	pop	r29
    27b2:	cf 91       	pop	r28
    27b4:	1f 91       	pop	r17
    27b6:	0f 91       	pop	r16
    27b8:	08 95       	ret

000027ba <prvCheckForValidListAndQueue>:
    27ba:	0f 93       	push	r16
    27bc:	0f b6       	in	r0, 0x3f	; 63
    27be:	f8 94       	cli
    27c0:	0f 92       	push	r0
    27c2:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <xTimerQueue>
    27c6:	90 91 66 04 	lds	r25, 0x0466	; 0x800466 <xTimerQueue+0x1>
    27ca:	89 2b       	or	r24, r25
    27cc:	f1 f4       	brne	.+60     	; 0x280a <prvCheckForValidListAndQueue+0x50>
    27ce:	84 e7       	ldi	r24, 0x74	; 116
    27d0:	94 e0       	ldi	r25, 0x04	; 4
    27d2:	f7 d1       	rcall	.+1006   	; 0x2bc2 <vListInitialise>
    27d4:	8b e6       	ldi	r24, 0x6B	; 107
    27d6:	94 e0       	ldi	r25, 0x04	; 4
    27d8:	f4 d1       	rcall	.+1000   	; 0x2bc2 <vListInitialise>
    27da:	84 e7       	ldi	r24, 0x74	; 116
    27dc:	94 e0       	ldi	r25, 0x04	; 4
    27de:	90 93 6a 04 	sts	0x046A, r25	; 0x80046a <pxCurrentTimerList+0x1>
    27e2:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <pxCurrentTimerList>
    27e6:	8b e6       	ldi	r24, 0x6B	; 107
    27e8:	94 e0       	ldi	r25, 0x04	; 4
    27ea:	90 93 68 04 	sts	0x0468, r25	; 0x800468 <pxOverflowTimerList+0x1>
    27ee:	80 93 67 04 	sts	0x0467, r24	; 0x800467 <pxOverflowTimerList>
    27f2:	00 e0       	ldi	r16, 0x00	; 0
    27f4:	2f e0       	ldi	r18, 0x0F	; 15
    27f6:	34 e0       	ldi	r19, 0x04	; 4
    27f8:	4f e2       	ldi	r20, 0x2F	; 47
    27fa:	54 e0       	ldi	r21, 0x04	; 4
    27fc:	65 e0       	ldi	r22, 0x05	; 5
    27fe:	8a e0       	ldi	r24, 0x0A	; 10
    2800:	5f d8       	rcall	.-3906   	; 0x18c0 <xQueueGenericCreateStatic>
    2802:	90 93 66 04 	sts	0x0466, r25	; 0x800466 <xTimerQueue+0x1>
    2806:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <xTimerQueue>
    280a:	0f 90       	pop	r0
    280c:	0f be       	out	0x3f, r0	; 63
    280e:	0f 91       	pop	r16
    2810:	08 95       	ret

00002812 <prvInsertTimerInActiveList>:
    2812:	fc 01       	movw	r30, r24
    2814:	73 83       	std	Z+3, r23	; 0x03
    2816:	62 83       	std	Z+2, r22	; 0x02
    2818:	91 87       	std	Z+9, r25	; 0x09
    281a:	80 87       	std	Z+8, r24	; 0x08
    281c:	46 17       	cp	r20, r22
    281e:	57 07       	cpc	r21, r23
    2820:	78 f0       	brcs	.+30     	; 0x2840 <prvInsertTimerInActiveList+0x2e>
    2822:	42 1b       	sub	r20, r18
    2824:	53 0b       	sbc	r21, r19
    2826:	84 85       	ldd	r24, Z+12	; 0x0c
    2828:	95 85       	ldd	r25, Z+13	; 0x0d
    282a:	48 17       	cp	r20, r24
    282c:	59 07       	cpc	r21, r25
    282e:	c0 f4       	brcc	.+48     	; 0x2860 <prvInsertTimerInActiveList+0x4e>
    2830:	bf 01       	movw	r22, r30
    2832:	6e 5f       	subi	r22, 0xFE	; 254
    2834:	7f 4f       	sbci	r23, 0xFF	; 255
    2836:	80 91 67 04 	lds	r24, 0x0467	; 0x800467 <pxOverflowTimerList>
    283a:	90 91 68 04 	lds	r25, 0x0468	; 0x800468 <pxOverflowTimerList+0x1>
    283e:	0d c0       	rjmp	.+26     	; 0x285a <prvInsertTimerInActiveList+0x48>
    2840:	42 17       	cp	r20, r18
    2842:	53 07       	cpc	r21, r19
    2844:	18 f4       	brcc	.+6      	; 0x284c <prvInsertTimerInActiveList+0x3a>
    2846:	62 17       	cp	r22, r18
    2848:	73 07       	cpc	r23, r19
    284a:	50 f4       	brcc	.+20     	; 0x2860 <prvInsertTimerInActiveList+0x4e>
    284c:	bf 01       	movw	r22, r30
    284e:	6e 5f       	subi	r22, 0xFE	; 254
    2850:	7f 4f       	sbci	r23, 0xFF	; 255
    2852:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <pxCurrentTimerList>
    2856:	90 91 6a 04 	lds	r25, 0x046A	; 0x80046a <pxCurrentTimerList+0x1>
    285a:	c5 d1       	rcall	.+906    	; 0x2be6 <vListInsert>
    285c:	80 e0       	ldi	r24, 0x00	; 0
    285e:	08 95       	ret
    2860:	81 e0       	ldi	r24, 0x01	; 1
    2862:	08 95       	ret

00002864 <prvReloadTimer>:
    2864:	ef 92       	push	r14
    2866:	ff 92       	push	r15
    2868:	0f 93       	push	r16
    286a:	1f 93       	push	r17
    286c:	cf 93       	push	r28
    286e:	df 93       	push	r29
    2870:	ec 01       	movw	r28, r24
    2872:	8b 01       	movw	r16, r22
    2874:	7a 01       	movw	r14, r20
    2876:	6c 85       	ldd	r22, Y+12	; 0x0c
    2878:	7d 85       	ldd	r23, Y+13	; 0x0d
    287a:	60 0f       	add	r22, r16
    287c:	71 1f       	adc	r23, r17
    287e:	98 01       	movw	r18, r16
    2880:	a7 01       	movw	r20, r14
    2882:	ce 01       	movw	r24, r28
    2884:	c6 df       	rcall	.-116    	; 0x2812 <prvInsertTimerInActiveList>
    2886:	88 23       	and	r24, r24
    2888:	49 f0       	breq	.+18     	; 0x289c <prvReloadTimer+0x38>
    288a:	8c 85       	ldd	r24, Y+12	; 0x0c
    288c:	9d 85       	ldd	r25, Y+13	; 0x0d
    288e:	08 0f       	add	r16, r24
    2890:	19 1f       	adc	r17, r25
    2892:	e8 89       	ldd	r30, Y+16	; 0x10
    2894:	f9 89       	ldd	r31, Y+17	; 0x11
    2896:	ce 01       	movw	r24, r28
    2898:	19 95       	eicall
    289a:	ed cf       	rjmp	.-38     	; 0x2876 <prvReloadTimer+0x12>
    289c:	df 91       	pop	r29
    289e:	cf 91       	pop	r28
    28a0:	1f 91       	pop	r17
    28a2:	0f 91       	pop	r16
    28a4:	ff 90       	pop	r15
    28a6:	ef 90       	pop	r14
    28a8:	08 95       	ret

000028aa <prvProcessExpiredTimer>:
    28aa:	ef 92       	push	r14
    28ac:	ff 92       	push	r15
    28ae:	0f 93       	push	r16
    28b0:	1f 93       	push	r17
    28b2:	cf 93       	push	r28
    28b4:	df 93       	push	r29
    28b6:	8c 01       	movw	r16, r24
    28b8:	7b 01       	movw	r14, r22
    28ba:	e0 91 69 04 	lds	r30, 0x0469	; 0x800469 <pxCurrentTimerList>
    28be:	f0 91 6a 04 	lds	r31, 0x046A	; 0x80046a <pxCurrentTimerList+0x1>
    28c2:	05 80       	ldd	r0, Z+5	; 0x05
    28c4:	f6 81       	ldd	r31, Z+6	; 0x06
    28c6:	e0 2d       	mov	r30, r0
    28c8:	c6 81       	ldd	r28, Z+6	; 0x06
    28ca:	d7 81       	ldd	r29, Z+7	; 0x07
    28cc:	ce 01       	movw	r24, r28
    28ce:	02 96       	adiw	r24, 0x02	; 2
    28d0:	c2 d1       	rcall	.+900    	; 0x2c56 <uxListRemove>
    28d2:	8a 89       	ldd	r24, Y+18	; 0x12
    28d4:	82 ff       	sbrs	r24, 2
    28d6:	05 c0       	rjmp	.+10     	; 0x28e2 <prvProcessExpiredTimer+0x38>
    28d8:	a7 01       	movw	r20, r14
    28da:	b8 01       	movw	r22, r16
    28dc:	ce 01       	movw	r24, r28
    28de:	c2 df       	rcall	.-124    	; 0x2864 <prvReloadTimer>
    28e0:	02 c0       	rjmp	.+4      	; 0x28e6 <prvProcessExpiredTimer+0x3c>
    28e2:	8e 7f       	andi	r24, 0xFE	; 254
    28e4:	8a 8b       	std	Y+18, r24	; 0x12
    28e6:	e8 89       	ldd	r30, Y+16	; 0x10
    28e8:	f9 89       	ldd	r31, Y+17	; 0x11
    28ea:	ce 01       	movw	r24, r28
    28ec:	df 91       	pop	r29
    28ee:	cf 91       	pop	r28
    28f0:	1f 91       	pop	r17
    28f2:	0f 91       	pop	r16
    28f4:	ff 90       	pop	r15
    28f6:	ef 90       	pop	r14
    28f8:	19 94       	eijmp

000028fa <prvSwitchTimerLists>:
    28fa:	e0 91 69 04 	lds	r30, 0x0469	; 0x800469 <pxCurrentTimerList>
    28fe:	f0 91 6a 04 	lds	r31, 0x046A	; 0x80046a <pxCurrentTimerList+0x1>
    2902:	80 81       	ld	r24, Z
    2904:	88 23       	and	r24, r24
    2906:	49 f0       	breq	.+18     	; 0x291a <prvSwitchTimerLists+0x20>
    2908:	05 80       	ldd	r0, Z+5	; 0x05
    290a:	f6 81       	ldd	r31, Z+6	; 0x06
    290c:	e0 2d       	mov	r30, r0
    290e:	6f ef       	ldi	r22, 0xFF	; 255
    2910:	7f ef       	ldi	r23, 0xFF	; 255
    2912:	80 81       	ld	r24, Z
    2914:	91 81       	ldd	r25, Z+1	; 0x01
    2916:	c9 df       	rcall	.-110    	; 0x28aa <prvProcessExpiredTimer>
    2918:	f0 cf       	rjmp	.-32     	; 0x28fa <prvSwitchTimerLists>
    291a:	80 91 67 04 	lds	r24, 0x0467	; 0x800467 <pxOverflowTimerList>
    291e:	90 91 68 04 	lds	r25, 0x0468	; 0x800468 <pxOverflowTimerList+0x1>
    2922:	90 93 6a 04 	sts	0x046A, r25	; 0x80046a <pxCurrentTimerList+0x1>
    2926:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <pxCurrentTimerList>
    292a:	f0 93 68 04 	sts	0x0468, r31	; 0x800468 <pxOverflowTimerList+0x1>
    292e:	e0 93 67 04 	sts	0x0467, r30	; 0x800467 <pxOverflowTimerList>
    2932:	08 95       	ret

00002934 <xTimerCreateTimerTask>:
    2934:	cf 92       	push	r12
    2936:	df 92       	push	r13
    2938:	ef 92       	push	r14
    293a:	ff 92       	push	r15
    293c:	0f 93       	push	r16
    293e:	cf 93       	push	r28
    2940:	df 93       	push	r29
    2942:	00 d0       	rcall	.+0      	; 0x2944 <xTimerCreateTimerTask+0x10>
    2944:	00 d0       	rcall	.+0      	; 0x2946 <xTimerCreateTimerTask+0x12>
    2946:	cd b7       	in	r28, 0x3d	; 61
    2948:	de b7       	in	r29, 0x3e	; 62
    294a:	37 df       	rcall	.-402    	; 0x27ba <prvCheckForValidListAndQueue>
    294c:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <xTimerQueue>
    2950:	90 91 66 04 	lds	r25, 0x0466	; 0x800466 <xTimerQueue+0x1>
    2954:	89 2b       	or	r24, r25
    2956:	19 f1       	breq	.+70     	; 0x299e <xTimerCreateTimerTask+0x6a>
    2958:	1e 82       	std	Y+6, r1	; 0x06
    295a:	1d 82       	std	Y+5, r1	; 0x05
    295c:	1c 82       	std	Y+4, r1	; 0x04
    295e:	1b 82       	std	Y+3, r1	; 0x03
    2960:	ae 01       	movw	r20, r28
    2962:	4f 5f       	subi	r20, 0xFF	; 255
    2964:	5f 4f       	sbci	r21, 0xFF	; 255
    2966:	be 01       	movw	r22, r28
    2968:	6d 5f       	subi	r22, 0xFD	; 253
    296a:	7f 4f       	sbci	r23, 0xFF	; 255
    296c:	ce 01       	movw	r24, r28
    296e:	05 96       	adiw	r24, 0x05	; 5
    2970:	d3 d0       	rcall	.+422    	; 0x2b18 <vApplicationGetTimerTaskMemory>
    2972:	cd 80       	ldd	r12, Y+5	; 0x05
    2974:	de 80       	ldd	r13, Y+6	; 0x06
    2976:	eb 80       	ldd	r14, Y+3	; 0x03
    2978:	fc 80       	ldd	r15, Y+4	; 0x04
    297a:	49 81       	ldd	r20, Y+1	; 0x01
    297c:	5a 81       	ldd	r21, Y+2	; 0x02
    297e:	03 e0       	ldi	r16, 0x03	; 3
    2980:	20 e0       	ldi	r18, 0x00	; 0
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	63 e3       	ldi	r22, 0x33	; 51
    2986:	72 e0       	ldi	r23, 0x02	; 2
    2988:	8a e7       	ldi	r24, 0x7A	; 122
    298a:	91 e0       	ldi	r25, 0x01	; 1
    298c:	b9 da       	rcall	.-2702   	; 0x1f00 <xTaskCreateStatic>
    298e:	9c 01       	movw	r18, r24
    2990:	90 93 64 04 	sts	0x0464, r25	; 0x800464 <xTimerTaskHandle+0x1>
    2994:	80 93 63 04 	sts	0x0463, r24	; 0x800463 <xTimerTaskHandle>
    2998:	81 e0       	ldi	r24, 0x01	; 1
    299a:	23 2b       	or	r18, r19
    299c:	09 f4       	brne	.+2      	; 0x29a0 <xTimerCreateTimerTask+0x6c>
    299e:	80 e0       	ldi	r24, 0x00	; 0
    29a0:	26 96       	adiw	r28, 0x06	; 6
    29a2:	0f b6       	in	r0, 0x3f	; 63
    29a4:	f8 94       	cli
    29a6:	de bf       	out	0x3e, r29	; 62
    29a8:	0f be       	out	0x3f, r0	; 63
    29aa:	cd bf       	out	0x3d, r28	; 61
    29ac:	df 91       	pop	r29
    29ae:	cf 91       	pop	r28
    29b0:	0f 91       	pop	r16
    29b2:	ff 90       	pop	r15
    29b4:	ef 90       	pop	r14
    29b6:	df 90       	pop	r13
    29b8:	cf 90       	pop	r12
    29ba:	08 95       	ret

000029bc <xTimerCreateStatic>:
                                          const TickType_t xTimerPeriodInTicks,
                                          const BaseType_t xAutoReload,
                                          void * const pvTimerID,
                                          TimerCallbackFunction_t pxCallbackFunction,
                                          StaticTimer_t * pxTimerBuffer )
        {
    29bc:	7f 92       	push	r7
    29be:	8f 92       	push	r8
    29c0:	9f 92       	push	r9
    29c2:	af 92       	push	r10
    29c4:	bf 92       	push	r11
    29c6:	cf 92       	push	r12
    29c8:	df 92       	push	r13
    29ca:	ef 92       	push	r14
    29cc:	ff 92       	push	r15
    29ce:	0f 93       	push	r16
    29d0:	1f 93       	push	r17
    29d2:	cf 93       	push	r28
    29d4:	df 93       	push	r29
    29d6:	4c 01       	movw	r8, r24
    29d8:	5b 01       	movw	r10, r22
    29da:	74 2e       	mov	r7, r20
    29dc:	69 01       	movw	r12, r18
    29de:	e7 01       	movw	r28, r14

            /* A pointer to a StaticTimer_t structure MUST be provided, use it. */
            configASSERT( pxTimerBuffer );
            pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */

            if( pxNewTimer != NULL )
    29e0:	20 97       	sbiw	r28, 0x00	; 0
    29e2:	99 f0       	breq	.+38     	; 0x2a0a <xTimerCreateStatic+0x4e>
            {
                /* Timers can be created statically or dynamically so note this
                 * timer was created statically in case it is later deleted.  The
                 * auto-reload bit may get set in prvInitialiseNewTimer(). */
                pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
    29e4:	82 e0       	ldi	r24, 0x02	; 2
    29e6:	8a 8b       	std	Y+18, r24	; 0x12
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
    29e8:	e8 de       	rcall	.-560    	; 0x27ba <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
    29ea:	99 82       	std	Y+1, r9	; 0x01
    29ec:	88 82       	st	Y, r8
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    29ee:	bd 86       	std	Y+13, r11	; 0x0d
    29f0:	ac 86       	std	Y+12, r10	; 0x0c
        pxNewTimer->pvTimerID = pvTimerID;
    29f2:	df 86       	std	Y+15, r13	; 0x0f
    29f4:	ce 86       	std	Y+14, r12	; 0x0e
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    29f6:	19 8b       	std	Y+17, r17	; 0x11
    29f8:	08 8b       	std	Y+16, r16	; 0x10
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    29fa:	c7 01       	movw	r24, r14
    29fc:	02 96       	adiw	r24, 0x02	; 2
    29fe:	ef d0       	rcall	.+478    	; 0x2bde <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
    2a00:	77 20       	and	r7, r7
    2a02:	19 f0       	breq	.+6      	; 0x2a0a <xTimerCreateStatic+0x4e>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
    2a04:	8a 89       	ldd	r24, Y+18	; 0x12
    2a06:	84 60       	ori	r24, 0x04	; 4
    2a08:	8a 8b       	std	Y+18, r24	; 0x12

                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
    2a0a:	ce 01       	movw	r24, r28
    2a0c:	df 91       	pop	r29
    2a0e:	cf 91       	pop	r28
    2a10:	1f 91       	pop	r17
    2a12:	0f 91       	pop	r16
    2a14:	ff 90       	pop	r15
    2a16:	ef 90       	pop	r14
    2a18:	df 90       	pop	r13
    2a1a:	cf 90       	pop	r12
    2a1c:	bf 90       	pop	r11
    2a1e:	af 90       	pop	r10
    2a20:	9f 90       	pop	r9
    2a22:	8f 90       	pop	r8
    2a24:	7f 90       	pop	r7
    2a26:	08 95       	ret

00002a28 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    2a28:	0f 93       	push	r16
    2a2a:	1f 93       	push	r17
    2a2c:	cf 93       	push	r28
    2a2e:	df 93       	push	r29
    2a30:	00 d0       	rcall	.+0      	; 0x2a32 <xTimerGenericCommand+0xa>
    2a32:	1f 92       	push	r1
    2a34:	1f 92       	push	r1
    2a36:	cd b7       	in	r28, 0x3d	; 61
    2a38:	de b7       	in	r29, 0x3e	; 62

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2a3a:	a0 91 65 04 	lds	r26, 0x0465	; 0x800465 <xTimerQueue>
    2a3e:	b0 91 66 04 	lds	r27, 0x0466	; 0x800466 <xTimerQueue+0x1>
    2a42:	10 97       	sbiw	r26, 0x00	; 0
    2a44:	21 f1       	breq	.+72     	; 0x2a8e <xTimerGenericCommand+0x66>
    2a46:	f9 01       	movw	r30, r18
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2a48:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2a4a:	5b 83       	std	Y+3, r21	; 0x03
    2a4c:	4a 83       	std	Y+2, r20	; 0x02
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    2a4e:	9d 83       	std	Y+5, r25	; 0x05
    2a50:	8c 83       	std	Y+4, r24	; 0x04

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2a52:	66 30       	cpi	r22, 0x06	; 6
    2a54:	9c f4       	brge	.+38     	; 0x2a7c <xTimerGenericCommand+0x54>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2a56:	52 de       	rcall	.-860    	; 0x26fc <xTaskGetSchedulerState>
    2a58:	e0 91 65 04 	lds	r30, 0x0465	; 0x800465 <xTimerQueue>
    2a5c:	f0 91 66 04 	lds	r31, 0x0466	; 0x800466 <xTimerQueue+0x1>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2a60:	20 e0       	ldi	r18, 0x00	; 0
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
            xMessage.u.xTimerParameters.pxTimer = xTimer;

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2a62:	82 30       	cpi	r24, 0x02	; 2
    2a64:	11 f4       	brne	.+4      	; 0x2a6a <xTimerGenericCommand+0x42>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2a66:	a8 01       	movw	r20, r16
    2a68:	02 c0       	rjmp	.+4      	; 0x2a6e <xTimerGenericCommand+0x46>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2a6a:	40 e0       	ldi	r20, 0x00	; 0
    2a6c:	50 e0       	ldi	r21, 0x00	; 0
    2a6e:	be 01       	movw	r22, r28
    2a70:	6f 5f       	subi	r22, 0xFF	; 255
    2a72:	7f 4f       	sbci	r23, 0xFF	; 255
    2a74:	cf 01       	movw	r24, r30
    2a76:	0e 94 84 0c 	call	0x1908	; 0x1908 <xQueueGenericSend>
    2a7a:	0a c0       	rjmp	.+20     	; 0x2a90 <xTimerGenericCommand+0x68>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2a7c:	20 e0       	ldi	r18, 0x00	; 0
    2a7e:	af 01       	movw	r20, r30
    2a80:	be 01       	movw	r22, r28
    2a82:	6f 5f       	subi	r22, 0xFF	; 255
    2a84:	7f 4f       	sbci	r23, 0xFF	; 255
    2a86:	cd 01       	movw	r24, r26
    2a88:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <xQueueGenericSendFromISR>
    2a8c:	01 c0       	rjmp	.+2      	; 0x2a90 <xTimerGenericCommand+0x68>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    2a8e:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2a90:	0f 90       	pop	r0
    2a92:	0f 90       	pop	r0
    2a94:	0f 90       	pop	r0
    2a96:	0f 90       	pop	r0
    2a98:	0f 90       	pop	r0
    2a9a:	df 91       	pop	r29
    2a9c:	cf 91       	pop	r28
    2a9e:	1f 91       	pop	r17
    2aa0:	0f 91       	pop	r16
    2aa2:	08 95       	ret

00002aa4 <initVariant>:
    prvSetMainLedOn(); // Main LED on.
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    2aa4:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <__malloc_margin>
    2aa8:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <__malloc_margin+0x1>
    2aac:	8f ef       	ldi	r24, 0xFF	; 255
    2aae:	91 e2       	ldi	r25, 0x21	; 33
    2ab0:	82 1b       	sub	r24, r18
    2ab2:	93 0b       	sbc	r25, r19
    2ab4:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    2ab8:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    2abc:	0e 94 03 05 	call	0xa06	; 0xa06 <setup>
    2ac0:	55 ca       	rjmp	.-2902   	; 0x1f6c <vTaskStartScheduler>
    2ac2:	08 95       	ret

00002ac4 <vApplicationIdleHook>:
    2ac4:	0e 94 34 05 	call	0xa68	; 0xa68 <loop>
    2ac8:	80 e0       	ldi	r24, 0x00	; 0
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	89 2b       	or	r24, r25
    2ace:	11 f0       	breq	.+4      	; 0x2ad4 <vApplicationIdleHook+0x10>
    2ad0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    2ad4:	08 95       	ret

00002ad6 <_Z15prvSetMainLedOnv>:
    2ad6:	27 9a       	sbi	0x04, 7	; 4
    2ad8:	2f 9a       	sbi	0x05, 7	; 5
    2ada:	08 95       	ret

00002adc <_Z15prvBlinkMainLedv>:
    2adc:	1f 9a       	sbi	0x03, 7	; 3
    2ade:	08 95       	ret

00002ae0 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__ ((unused)),
                                    char * pcTaskName __attribute__ ((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    2ae0:	fa df       	rcall	.-12     	; 0x2ad6 <_Z15prvSetMainLedOnv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2ae2:	2f ef       	ldi	r18, 0xFF	; 255
    2ae4:	87 ea       	ldi	r24, 0xA7	; 167
    2ae6:	91 e6       	ldi	r25, 0x61	; 97
    2ae8:	21 50       	subi	r18, 0x01	; 1
    2aea:	80 40       	sbci	r24, 0x00	; 0
    2aec:	90 40       	sbci	r25, 0x00	; 0
    2aee:	e1 f7       	brne	.-8      	; 0x2ae8 <vApplicationStackOverflowHook+0x8>
    2af0:	00 c0       	rjmp	.+0      	; 0x2af2 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    2af2:	00 00       	nop
    2af4:	f3 df       	rcall	.-26     	; 0x2adc <_Z15prvBlinkMainLedv>
    2af6:	f5 cf       	rjmp	.-22     	; 0x2ae2 <vApplicationStackOverflowHook+0x2>

00002af8 <vApplicationGetIdleTaskMemory>:
                                    configSTACK_DEPTH_TYPE * puxIdleTaskStackSize )
{
    static StaticTask_t xIdleTaskTCB;
    static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
    2af8:	2b eb       	ldi	r18, 0xBB	; 187
    2afa:	35 e0       	ldi	r19, 0x05	; 5
    2afc:	fc 01       	movw	r30, r24
    2afe:	31 83       	std	Z+1, r19	; 0x01
    2b00:	20 83       	st	Z, r18
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
    2b02:	8b ef       	ldi	r24, 0xFB	; 251
    2b04:	94 e0       	ldi	r25, 0x04	; 4
    2b06:	fb 01       	movw	r30, r22
    2b08:	91 83       	std	Z+1, r25	; 0x01
    2b0a:	80 83       	st	Z, r24
    *puxIdleTaskStackSize = configMINIMAL_STACK_SIZE;
    2b0c:	80 ec       	ldi	r24, 0xC0	; 192
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	fa 01       	movw	r30, r20
    2b12:	91 83       	std	Z+1, r25	; 0x01
    2b14:	80 83       	st	Z, r24
    2b16:	08 95       	ret

00002b18 <vApplicationGetTimerTaskMemory>:
                                     configSTACK_DEPTH_TYPE * puxTimerTaskStackSize )
{
    static StaticTask_t xTimerTaskTCB;
    static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
    2b18:	22 ed       	ldi	r18, 0xD2	; 210
    2b1a:	34 e0       	ldi	r19, 0x04	; 4
    2b1c:	fc 01       	movw	r30, r24
    2b1e:	31 83       	std	Z+1, r19	; 0x01
    2b20:	20 83       	st	Z, r18
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
    2b22:	8d e7       	ldi	r24, 0x7D	; 125
    2b24:	94 e0       	ldi	r25, 0x04	; 4
    2b26:	fb 01       	movw	r30, r22
    2b28:	91 83       	std	Z+1, r25	; 0x01
    2b2a:	80 83       	st	Z, r24
    *puxTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
    2b2c:	85 e5       	ldi	r24, 0x55	; 85
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	fa 01       	movw	r30, r20
    2b32:	91 83       	std	Z+1, r25	; 0x01
    2b34:	80 83       	st	Z, r24
    2b36:	08 95       	ret

00002b38 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    2b38:	cf 93       	push	r28
  uint8_t sreg = SREG;
    2b3a:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    2b3c:	f8 94       	cli
  if (!initialized) {
    2b3e:	80 91 e7 05 	lds	r24, 0x05E7	; 0x8005e7 <_ZN8SPIClass11initializedE>
    2b42:	81 11       	cpse	r24, r1
    2b44:	27 c0       	rjmp	.+78     	; 0x2b94 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    2b46:	e1 e4       	ldi	r30, 0x41	; 65
    2b48:	f2 e0       	ldi	r31, 0x02	; 2
    2b4a:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    2b4c:	eb ef       	ldi	r30, 0xFB	; 251
    2b4e:	f1 e0       	ldi	r31, 0x01	; 1
    2b50:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    2b52:	e8 2f       	mov	r30, r24
    2b54:	f0 e0       	ldi	r31, 0x00	; 0
    2b56:	ee 0f       	add	r30, r30
    2b58:	ff 1f       	adc	r31, r31
    2b5a:	ea 57       	subi	r30, 0x7A	; 122
    2b5c:	fd 4f       	sbci	r31, 0xFD	; 253
    2b5e:	a5 91       	lpm	r26, Z+
    2b60:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    2b62:	ec 91       	ld	r30, X
    2b64:	e9 23       	and	r30, r25
    2b66:	21 f4       	brne	.+8      	; 0x2b70 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    2b68:	61 e0       	ldi	r22, 0x01	; 1
    2b6a:	85 e3       	ldi	r24, 0x35	; 53
    2b6c:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    2b70:	61 e0       	ldi	r22, 0x01	; 1
    2b72:	85 e3       	ldi	r24, 0x35	; 53
    2b74:	0e 94 ae 06 	call	0xd5c	; 0xd5c <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    2b78:	8c b5       	in	r24, 0x2c	; 44
    2b7a:	80 61       	ori	r24, 0x10	; 16
    2b7c:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    2b7e:	8c b5       	in	r24, 0x2c	; 44
    2b80:	80 64       	ori	r24, 0x40	; 64
    2b82:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    2b84:	61 e0       	ldi	r22, 0x01	; 1
    2b86:	84 e3       	ldi	r24, 0x34	; 52
    2b88:	0e 94 ae 06 	call	0xd5c	; 0xd5c <pinMode>
    pinMode(MOSI, OUTPUT);
    2b8c:	61 e0       	ldi	r22, 0x01	; 1
    2b8e:	83 e3       	ldi	r24, 0x33	; 51
    2b90:	0e 94 ae 06 	call	0xd5c	; 0xd5c <pinMode>
  }
  initialized++; // reference count
    2b94:	80 91 e7 05 	lds	r24, 0x05E7	; 0x8005e7 <_ZN8SPIClass11initializedE>
    2b98:	8f 5f       	subi	r24, 0xFF	; 255
    2b9a:	80 93 e7 05 	sts	0x05E7, r24	; 0x8005e7 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    2b9e:	cf bf       	out	0x3f, r28	; 63
}
    2ba0:	cf 91       	pop	r28
    2ba2:	08 95       	ret

00002ba4 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2ba4:	08 95       	ret

00002ba6 <vPortFree>:
    return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
    2ba6:	cf 93       	push	r28
    2ba8:	df 93       	push	r29
    if( pv != NULL )
    2baa:	00 97       	sbiw	r24, 0x00	; 0
    2bac:	39 f0       	breq	.+14     	; 0x2bbc <vPortFree+0x16>
    2bae:	ec 01       	movw	r28, r24
    {
        vTaskSuspendAll();
    2bb0:	26 da       	rcall	.-2996   	; 0x1ffe <vTaskSuspendAll>
        {
            free( pv );
    2bb2:	ce 01       	movw	r24, r28
    2bb4:	2e d2       	rcall	.+1116   	; 0x3012 <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
    }
}
    2bb6:	df 91       	pop	r29
        vTaskSuspendAll();
        {
            free( pv );
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
    2bb8:	cf 91       	pop	r28
    2bba:	3a cb       	rjmp	.-2444   	; 0x2230 <xTaskResumeAll>
    }
}
    2bbc:	df 91       	pop	r29
    2bbe:	cf 91       	pop	r28
    2bc0:	08 95       	ret

00002bc2 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
    2bc2:	fc 01       	movw	r30, r24
    2bc4:	03 96       	adiw	r24, 0x03	; 3
    2bc6:	92 83       	std	Z+2, r25	; 0x02
    2bc8:	81 83       	std	Z+1, r24	; 0x01
    2bca:	2f ef       	ldi	r18, 0xFF	; 255
    2bcc:	3f ef       	ldi	r19, 0xFF	; 255
    2bce:	34 83       	std	Z+4, r19	; 0x04
    2bd0:	23 83       	std	Z+3, r18	; 0x03
    2bd2:	96 83       	std	Z+6, r25	; 0x06
    2bd4:	85 83       	std	Z+5, r24	; 0x05
    2bd6:	90 87       	std	Z+8, r25	; 0x08
    2bd8:	87 83       	std	Z+7, r24	; 0x07
    2bda:	10 82       	st	Z, r1
    2bdc:	08 95       	ret

00002bde <vListInitialiseItem>:
    2bde:	fc 01       	movw	r30, r24
    2be0:	11 86       	std	Z+9, r1	; 0x09
    2be2:	10 86       	std	Z+8, r1	; 0x08
    2be4:	08 95       	ret

00002be6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
    2be6:	0f 93       	push	r16
    2be8:	1f 93       	push	r17
    2bea:	cf 93       	push	r28
    2bec:	df 93       	push	r29
    2bee:	8c 01       	movw	r16, r24
    2bf0:	fb 01       	movw	r30, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    2bf2:	80 81       	ld	r24, Z
    2bf4:	91 81       	ldd	r25, Z+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    2bf6:	8f 3f       	cpi	r24, 0xFF	; 255
    2bf8:	2f ef       	ldi	r18, 0xFF	; 255
    2bfa:	92 07       	cpc	r25, r18
    2bfc:	21 f4       	brne	.+8      	; 0x2c06 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    2bfe:	e8 01       	movw	r28, r16
    2c00:	af 81       	ldd	r26, Y+7	; 0x07
    2c02:	b8 85       	ldd	r27, Y+8	; 0x08
    2c04:	0e c0       	rjmp	.+28     	; 0x2c22 <vListInsert+0x3c>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    2c06:	d8 01       	movw	r26, r16
    2c08:	13 96       	adiw	r26, 0x03	; 3
    2c0a:	12 96       	adiw	r26, 0x02	; 2
    2c0c:	2d 91       	ld	r18, X+
    2c0e:	3c 91       	ld	r19, X
    2c10:	13 97       	sbiw	r26, 0x03	; 3
    2c12:	e9 01       	movw	r28, r18
    2c14:	48 81       	ld	r20, Y
    2c16:	59 81       	ldd	r21, Y+1	; 0x01
    2c18:	84 17       	cp	r24, r20
    2c1a:	95 07       	cpc	r25, r21
    2c1c:	10 f0       	brcs	.+4      	; 0x2c22 <vListInsert+0x3c>
    2c1e:	d9 01       	movw	r26, r18
    2c20:	f4 cf       	rjmp	.-24     	; 0x2c0a <vListInsert+0x24>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    2c22:	12 96       	adiw	r26, 0x02	; 2
    2c24:	8d 91       	ld	r24, X+
    2c26:	9c 91       	ld	r25, X
    2c28:	13 97       	sbiw	r26, 0x03	; 3
    2c2a:	93 83       	std	Z+3, r25	; 0x03
    2c2c:	82 83       	std	Z+2, r24	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    2c2e:	ec 01       	movw	r28, r24
    2c30:	fd 83       	std	Y+5, r31	; 0x05
    2c32:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
    2c34:	b5 83       	std	Z+5, r27	; 0x05
    2c36:	a4 83       	std	Z+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
    2c38:	13 96       	adiw	r26, 0x03	; 3
    2c3a:	fc 93       	st	X, r31
    2c3c:	ee 93       	st	-X, r30
    2c3e:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
    2c40:	11 87       	std	Z+9, r17	; 0x09
    2c42:	00 87       	std	Z+8, r16	; 0x08

    ( pxList->uxNumberOfItems )++;
    2c44:	f8 01       	movw	r30, r16
    2c46:	80 81       	ld	r24, Z
    2c48:	8f 5f       	subi	r24, 0xFF	; 255
    2c4a:	80 83       	st	Z, r24
}
    2c4c:	df 91       	pop	r29
    2c4e:	cf 91       	pop	r28
    2c50:	1f 91       	pop	r17
    2c52:	0f 91       	pop	r16
    2c54:	08 95       	ret

00002c56 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    2c56:	cf 93       	push	r28
    2c58:	df 93       	push	r29
    2c5a:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
    2c5c:	a0 85       	ldd	r26, Z+8	; 0x08
    2c5e:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2c60:	82 81       	ldd	r24, Z+2	; 0x02
    2c62:	93 81       	ldd	r25, Z+3	; 0x03
    2c64:	24 81       	ldd	r18, Z+4	; 0x04
    2c66:	35 81       	ldd	r19, Z+5	; 0x05
    2c68:	ec 01       	movw	r28, r24
    2c6a:	3d 83       	std	Y+5, r19	; 0x05
    2c6c:	2c 83       	std	Y+4, r18	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2c6e:	c4 81       	ldd	r28, Z+4	; 0x04
    2c70:	d5 81       	ldd	r29, Z+5	; 0x05
    2c72:	9b 83       	std	Y+3, r25	; 0x03
    2c74:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    2c76:	11 96       	adiw	r26, 0x01	; 1
    2c78:	8d 91       	ld	r24, X+
    2c7a:	9c 91       	ld	r25, X
    2c7c:	12 97       	sbiw	r26, 0x02	; 2
    2c7e:	e8 17       	cp	r30, r24
    2c80:	f9 07       	cpc	r31, r25
    2c82:	21 f4       	brne	.+8      	; 0x2c8c <uxListRemove+0x36>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    2c84:	12 96       	adiw	r26, 0x02	; 2
    2c86:	dc 93       	st	X, r29
    2c88:	ce 93       	st	-X, r28
    2c8a:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    2c8c:	11 86       	std	Z+9, r1	; 0x09
    2c8e:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
    2c90:	8c 91       	ld	r24, X
    2c92:	81 50       	subi	r24, 0x01	; 1
    2c94:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    2c96:	8c 91       	ld	r24, X
}
    2c98:	df 91       	pop	r29
    2c9a:	cf 91       	pop	r28
    2c9c:	08 95       	ret

00002c9e <pxPortInitialiseStack>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
    2c9e:	fc 01       	movw	r30, r24
    2ca0:	60 83       	st	Z, r22
    2ca2:	31 97       	sbiw	r30, 0x01	; 1
    2ca4:	70 83       	st	Z, r23
    2ca6:	31 97       	sbiw	r30, 0x01	; 1
    2ca8:	10 82       	st	Z, r1
    2caa:	31 97       	sbiw	r30, 0x01	; 1
    2cac:	10 82       	st	Z, r1
    2cae:	31 97       	sbiw	r30, 0x01	; 1
    2cb0:	20 e8       	ldi	r18, 0x80	; 128
    2cb2:	20 83       	st	Z, r18
    2cb4:	31 97       	sbiw	r30, 0x01	; 1
    2cb6:	10 82       	st	Z, r1
    2cb8:	31 97       	sbiw	r30, 0x01	; 1
    2cba:	10 82       	st	Z, r1
    2cbc:	31 97       	sbiw	r30, 0x01	; 1
    2cbe:	10 82       	st	Z, r1
    2cc0:	77 97       	sbiw	r30, 0x17	; 23
    2cc2:	40 83       	st	Z, r20
    2cc4:	31 97       	sbiw	r30, 0x01	; 1
    2cc6:	50 83       	st	Z, r21
    2cc8:	86 97       	sbiw	r24, 0x26	; 38
    2cca:	08 95       	ret

00002ccc <vPortYield>:
    2ccc:	0f 92       	push	r0
    2cce:	0f b6       	in	r0, 0x3f	; 63
    2cd0:	f8 94       	cli
    2cd2:	0f 92       	push	r0
    2cd4:	0b b6       	in	r0, 0x3b	; 59
    2cd6:	0f 92       	push	r0
    2cd8:	0c b6       	in	r0, 0x3c	; 60
    2cda:	0f 92       	push	r0
    2cdc:	1f 92       	push	r1
    2cde:	11 24       	eor	r1, r1
    2ce0:	2f 92       	push	r2
    2ce2:	3f 92       	push	r3
    2ce4:	4f 92       	push	r4
    2ce6:	5f 92       	push	r5
    2ce8:	6f 92       	push	r6
    2cea:	7f 92       	push	r7
    2cec:	8f 92       	push	r8
    2cee:	9f 92       	push	r9
    2cf0:	af 92       	push	r10
    2cf2:	bf 92       	push	r11
    2cf4:	cf 92       	push	r12
    2cf6:	df 92       	push	r13
    2cf8:	ef 92       	push	r14
    2cfa:	ff 92       	push	r15
    2cfc:	0f 93       	push	r16
    2cfe:	1f 93       	push	r17
    2d00:	2f 93       	push	r18
    2d02:	3f 93       	push	r19
    2d04:	4f 93       	push	r20
    2d06:	5f 93       	push	r21
    2d08:	6f 93       	push	r22
    2d0a:	7f 93       	push	r23
    2d0c:	8f 93       	push	r24
    2d0e:	9f 93       	push	r25
    2d10:	af 93       	push	r26
    2d12:	bf 93       	push	r27
    2d14:	cf 93       	push	r28
    2d16:	df 93       	push	r29
    2d18:	ef 93       	push	r30
    2d1a:	ff 93       	push	r31
    2d1c:	a0 91 0d 04 	lds	r26, 0x040D	; 0x80040d <pxCurrentTCB>
    2d20:	b0 91 0e 04 	lds	r27, 0x040E	; 0x80040e <pxCurrentTCB+0x1>
    2d24:	0d b6       	in	r0, 0x3d	; 61
    2d26:	0d 92       	st	X+, r0
    2d28:	0e b6       	in	r0, 0x3e	; 62
    2d2a:	0d 92       	st	X+, r0
    2d2c:	4a db       	rcall	.-2412   	; 0x23c2 <vTaskSwitchContext>
    2d2e:	a0 91 0d 04 	lds	r26, 0x040D	; 0x80040d <pxCurrentTCB>
    2d32:	b0 91 0e 04 	lds	r27, 0x040E	; 0x80040e <pxCurrentTCB+0x1>
    2d36:	cd 91       	ld	r28, X+
    2d38:	cd bf       	out	0x3d, r28	; 61
    2d3a:	dd 91       	ld	r29, X+
    2d3c:	de bf       	out	0x3e, r29	; 62
    2d3e:	ff 91       	pop	r31
    2d40:	ef 91       	pop	r30
    2d42:	df 91       	pop	r29
    2d44:	cf 91       	pop	r28
    2d46:	bf 91       	pop	r27
    2d48:	af 91       	pop	r26
    2d4a:	9f 91       	pop	r25
    2d4c:	8f 91       	pop	r24
    2d4e:	7f 91       	pop	r23
    2d50:	6f 91       	pop	r22
    2d52:	5f 91       	pop	r21
    2d54:	4f 91       	pop	r20
    2d56:	3f 91       	pop	r19
    2d58:	2f 91       	pop	r18
    2d5a:	1f 91       	pop	r17
    2d5c:	0f 91       	pop	r16
    2d5e:	ff 90       	pop	r15
    2d60:	ef 90       	pop	r14
    2d62:	df 90       	pop	r13
    2d64:	cf 90       	pop	r12
    2d66:	bf 90       	pop	r11
    2d68:	af 90       	pop	r10
    2d6a:	9f 90       	pop	r9
    2d6c:	8f 90       	pop	r8
    2d6e:	7f 90       	pop	r7
    2d70:	6f 90       	pop	r6
    2d72:	5f 90       	pop	r5
    2d74:	4f 90       	pop	r4
    2d76:	3f 90       	pop	r3
    2d78:	2f 90       	pop	r2
    2d7a:	1f 90       	pop	r1
    2d7c:	0f 90       	pop	r0
    2d7e:	0c be       	out	0x3c, r0	; 60
    2d80:	0f 90       	pop	r0
    2d82:	0b be       	out	0x3b, r0	; 59
    2d84:	0f 90       	pop	r0
    2d86:	0f be       	out	0x3f, r0	; 63
    2d88:	0f 90       	pop	r0
    2d8a:	08 95       	ret

00002d8c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ((hot, flatten, naked));
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    2d8c:	0f 92       	push	r0
    2d8e:	0f b6       	in	r0, 0x3f	; 63
    2d90:	f8 94       	cli
    2d92:	0f 92       	push	r0
    2d94:	0b b6       	in	r0, 0x3b	; 59
    2d96:	0f 92       	push	r0
    2d98:	0c b6       	in	r0, 0x3c	; 60
    2d9a:	0f 92       	push	r0
    2d9c:	1f 92       	push	r1
    2d9e:	11 24       	eor	r1, r1
    2da0:	2f 92       	push	r2
    2da2:	3f 92       	push	r3
    2da4:	4f 92       	push	r4
    2da6:	5f 92       	push	r5
    2da8:	6f 92       	push	r6
    2daa:	7f 92       	push	r7
    2dac:	8f 92       	push	r8
    2dae:	9f 92       	push	r9
    2db0:	af 92       	push	r10
    2db2:	bf 92       	push	r11
    2db4:	cf 92       	push	r12
    2db6:	df 92       	push	r13
    2db8:	ef 92       	push	r14
    2dba:	ff 92       	push	r15
    2dbc:	0f 93       	push	r16
    2dbe:	1f 93       	push	r17
    2dc0:	2f 93       	push	r18
    2dc2:	3f 93       	push	r19
    2dc4:	4f 93       	push	r20
    2dc6:	5f 93       	push	r21
    2dc8:	6f 93       	push	r22
    2dca:	7f 93       	push	r23
    2dcc:	8f 93       	push	r24
    2dce:	9f 93       	push	r25
    2dd0:	af 93       	push	r26
    2dd2:	bf 93       	push	r27
    2dd4:	cf 93       	push	r28
    2dd6:	df 93       	push	r29
    2dd8:	ef 93       	push	r30
    2dda:	ff 93       	push	r31
    2ddc:	a0 91 0d 04 	lds	r26, 0x040D	; 0x80040d <pxCurrentTCB>
    2de0:	b0 91 0e 04 	lds	r27, 0x040E	; 0x80040e <pxCurrentTCB+0x1>
    2de4:	0d b6       	in	r0, 0x3d	; 61
    2de6:	0d 92       	st	X+, r0
    2de8:	0e b6       	in	r0, 0x3e	; 62
    2dea:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
    2dec:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
    2dee:	1a d9       	rcall	.-3532   	; 0x2024 <xTaskIncrementTick>
    2df0:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    2df2:	e7 da       	rcall	.-2610   	; 0x23c2 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
    2df4:	a0 91 0d 04 	lds	r26, 0x040D	; 0x80040d <pxCurrentTCB>
    2df8:	b0 91 0e 04 	lds	r27, 0x040E	; 0x80040e <pxCurrentTCB+0x1>
    2dfc:	cd 91       	ld	r28, X+
    2dfe:	cd bf       	out	0x3d, r28	; 61
    2e00:	dd 91       	ld	r29, X+
    2e02:	de bf       	out	0x3e, r29	; 62
    2e04:	ff 91       	pop	r31
    2e06:	ef 91       	pop	r30
    2e08:	df 91       	pop	r29
    2e0a:	cf 91       	pop	r28
    2e0c:	bf 91       	pop	r27
    2e0e:	af 91       	pop	r26
    2e10:	9f 91       	pop	r25
    2e12:	8f 91       	pop	r24
    2e14:	7f 91       	pop	r23
    2e16:	6f 91       	pop	r22
    2e18:	5f 91       	pop	r21
    2e1a:	4f 91       	pop	r20
    2e1c:	3f 91       	pop	r19
    2e1e:	2f 91       	pop	r18
    2e20:	1f 91       	pop	r17
    2e22:	0f 91       	pop	r16
    2e24:	ff 90       	pop	r15
    2e26:	ef 90       	pop	r14
    2e28:	df 90       	pop	r13
    2e2a:	cf 90       	pop	r12
    2e2c:	bf 90       	pop	r11
    2e2e:	af 90       	pop	r10
    2e30:	9f 90       	pop	r9
    2e32:	8f 90       	pop	r8
    2e34:	7f 90       	pop	r7
    2e36:	6f 90       	pop	r6
    2e38:	5f 90       	pop	r5
    2e3a:	4f 90       	pop	r4
    2e3c:	3f 90       	pop	r3
    2e3e:	2f 90       	pop	r2
    2e40:	1f 90       	pop	r1
    2e42:	0f 90       	pop	r0
    2e44:	0c be       	out	0x3c, r0	; 60
    2e46:	0f 90       	pop	r0
    2e48:	0b be       	out	0x3b, r0	; 59
    2e4a:	0f 90       	pop	r0
    2e4c:	0f be       	out	0x3f, r0	; 63
    2e4e:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    2e50:	08 95       	ret

00002e52 <prvSetupTimerInterrupt>:
 * Setup WDT to generate a tick interrupt.
 */
void prvSetupTimerInterrupt( void )
{
    /* reset watchdog */
    wdt_reset();
    2e52:	a8 95       	wdr
                : "r0"
        );
    }
    else
    {
        __asm__ __volatile__ (
    2e54:	90 ec       	ldi	r25, 0xC0	; 192
    2e56:	88 e1       	ldi	r24, 0x18	; 24
    2e58:	0f b6       	in	r0, 0x3f	; 63
    2e5a:	f8 94       	cli
    2e5c:	a8 95       	wdr
    2e5e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    2e62:	0f be       	out	0x3f, r0	; 63
    2e64:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    2e68:	08 95       	ret

00002e6a <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void )
{
    /* Setup the relevant timer hardware to generate the tick. */
    prvSetupTimerInterrupt();
    2e6a:	f3 df       	rcall	.-26     	; 0x2e52 <prvSetupTimerInterrupt>

    /* Restore the context of the first task that is going to run. */
    portRESTORE_CONTEXT();
    2e6c:	a0 91 0d 04 	lds	r26, 0x040D	; 0x80040d <pxCurrentTCB>
    2e70:	b0 91 0e 04 	lds	r27, 0x040E	; 0x80040e <pxCurrentTCB+0x1>
    2e74:	cd 91       	ld	r28, X+
    2e76:	cd bf       	out	0x3d, r28	; 61
    2e78:	dd 91       	ld	r29, X+
    2e7a:	de bf       	out	0x3e, r29	; 62
    2e7c:	ff 91       	pop	r31
    2e7e:	ef 91       	pop	r30
    2e80:	df 91       	pop	r29
    2e82:	cf 91       	pop	r28
    2e84:	bf 91       	pop	r27
    2e86:	af 91       	pop	r26
    2e88:	9f 91       	pop	r25
    2e8a:	8f 91       	pop	r24
    2e8c:	7f 91       	pop	r23
    2e8e:	6f 91       	pop	r22
    2e90:	5f 91       	pop	r21
    2e92:	4f 91       	pop	r20
    2e94:	3f 91       	pop	r19
    2e96:	2f 91       	pop	r18
    2e98:	1f 91       	pop	r17
    2e9a:	0f 91       	pop	r16
    2e9c:	ff 90       	pop	r15
    2e9e:	ef 90       	pop	r14
    2ea0:	df 90       	pop	r13
    2ea2:	cf 90       	pop	r12
    2ea4:	bf 90       	pop	r11
    2ea6:	af 90       	pop	r10
    2ea8:	9f 90       	pop	r9
    2eaa:	8f 90       	pop	r8
    2eac:	7f 90       	pop	r7
    2eae:	6f 90       	pop	r6
    2eb0:	5f 90       	pop	r5
    2eb2:	4f 90       	pop	r4
    2eb4:	3f 90       	pop	r3
    2eb6:	2f 90       	pop	r2
    2eb8:	1f 90       	pop	r1
    2eba:	0f 90       	pop	r0
    2ebc:	0c be       	out	0x3c, r0	; 60
    2ebe:	0f 90       	pop	r0
    2ec0:	0b be       	out	0x3b, r0	; 59
    2ec2:	0f 90       	pop	r0
    2ec4:	0f be       	out	0x3f, r0	; 63
    2ec6:	0f 90       	pop	r0

    /* Simulate a function call end as generated by the compiler. We will now
    jump to the start of the task the context of which we have just restored. */
    __asm__ __volatile__ ( "ret" );
    2ec8:	08 95       	ret

    /* Should not get here. */
    return pdTRUE;
}
    2eca:	81 e0       	ldi	r24, 0x01	; 1
    2ecc:	08 95       	ret

00002ece <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    2ece:	5e df       	rcall	.-324    	; 0x2d8c <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    2ed0:	18 95       	reti

00002ed2 <__tablejump2__>:
    2ed2:	ee 0f       	add	r30, r30
    2ed4:	ff 1f       	adc	r31, r31
    2ed6:	88 1f       	adc	r24, r24
    2ed8:	8b bf       	out	0x3b, r24	; 59
    2eda:	07 90       	elpm	r0, Z+
    2edc:	f6 91       	elpm	r31, Z
    2ede:	e0 2d       	mov	r30, r0
    2ee0:	19 94       	eijmp

00002ee2 <malloc>:
    2ee2:	0f 93       	push	r16
    2ee4:	1f 93       	push	r17
    2ee6:	cf 93       	push	r28
    2ee8:	df 93       	push	r29
    2eea:	82 30       	cpi	r24, 0x02	; 2
    2eec:	91 05       	cpc	r25, r1
    2eee:	10 f4       	brcc	.+4      	; 0x2ef4 <malloc+0x12>
    2ef0:	82 e0       	ldi	r24, 0x02	; 2
    2ef2:	90 e0       	ldi	r25, 0x00	; 0
    2ef4:	e0 91 eb 05 	lds	r30, 0x05EB	; 0x8005eb <__flp>
    2ef8:	f0 91 ec 05 	lds	r31, 0x05EC	; 0x8005ec <__flp+0x1>
    2efc:	20 e0       	ldi	r18, 0x00	; 0
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	a0 e0       	ldi	r26, 0x00	; 0
    2f02:	b0 e0       	ldi	r27, 0x00	; 0
    2f04:	30 97       	sbiw	r30, 0x00	; 0
    2f06:	19 f1       	breq	.+70     	; 0x2f4e <malloc+0x6c>
    2f08:	40 81       	ld	r20, Z
    2f0a:	51 81       	ldd	r21, Z+1	; 0x01
    2f0c:	02 81       	ldd	r16, Z+2	; 0x02
    2f0e:	13 81       	ldd	r17, Z+3	; 0x03
    2f10:	48 17       	cp	r20, r24
    2f12:	59 07       	cpc	r21, r25
    2f14:	c8 f0       	brcs	.+50     	; 0x2f48 <malloc+0x66>
    2f16:	84 17       	cp	r24, r20
    2f18:	95 07       	cpc	r25, r21
    2f1a:	69 f4       	brne	.+26     	; 0x2f36 <malloc+0x54>
    2f1c:	10 97       	sbiw	r26, 0x00	; 0
    2f1e:	31 f0       	breq	.+12     	; 0x2f2c <malloc+0x4a>
    2f20:	12 96       	adiw	r26, 0x02	; 2
    2f22:	0c 93       	st	X, r16
    2f24:	12 97       	sbiw	r26, 0x02	; 2
    2f26:	13 96       	adiw	r26, 0x03	; 3
    2f28:	1c 93       	st	X, r17
    2f2a:	27 c0       	rjmp	.+78     	; 0x2f7a <malloc+0x98>
    2f2c:	00 93 eb 05 	sts	0x05EB, r16	; 0x8005eb <__flp>
    2f30:	10 93 ec 05 	sts	0x05EC, r17	; 0x8005ec <__flp+0x1>
    2f34:	22 c0       	rjmp	.+68     	; 0x2f7a <malloc+0x98>
    2f36:	21 15       	cp	r18, r1
    2f38:	31 05       	cpc	r19, r1
    2f3a:	19 f0       	breq	.+6      	; 0x2f42 <malloc+0x60>
    2f3c:	42 17       	cp	r20, r18
    2f3e:	53 07       	cpc	r21, r19
    2f40:	18 f4       	brcc	.+6      	; 0x2f48 <malloc+0x66>
    2f42:	9a 01       	movw	r18, r20
    2f44:	bd 01       	movw	r22, r26
    2f46:	ef 01       	movw	r28, r30
    2f48:	df 01       	movw	r26, r30
    2f4a:	f8 01       	movw	r30, r16
    2f4c:	db cf       	rjmp	.-74     	; 0x2f04 <malloc+0x22>
    2f4e:	21 15       	cp	r18, r1
    2f50:	31 05       	cpc	r19, r1
    2f52:	f9 f0       	breq	.+62     	; 0x2f92 <malloc+0xb0>
    2f54:	28 1b       	sub	r18, r24
    2f56:	39 0b       	sbc	r19, r25
    2f58:	24 30       	cpi	r18, 0x04	; 4
    2f5a:	31 05       	cpc	r19, r1
    2f5c:	80 f4       	brcc	.+32     	; 0x2f7e <malloc+0x9c>
    2f5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f60:	9b 81       	ldd	r25, Y+3	; 0x03
    2f62:	61 15       	cp	r22, r1
    2f64:	71 05       	cpc	r23, r1
    2f66:	21 f0       	breq	.+8      	; 0x2f70 <malloc+0x8e>
    2f68:	fb 01       	movw	r30, r22
    2f6a:	93 83       	std	Z+3, r25	; 0x03
    2f6c:	82 83       	std	Z+2, r24	; 0x02
    2f6e:	04 c0       	rjmp	.+8      	; 0x2f78 <malloc+0x96>
    2f70:	90 93 ec 05 	sts	0x05EC, r25	; 0x8005ec <__flp+0x1>
    2f74:	80 93 eb 05 	sts	0x05EB, r24	; 0x8005eb <__flp>
    2f78:	fe 01       	movw	r30, r28
    2f7a:	32 96       	adiw	r30, 0x02	; 2
    2f7c:	44 c0       	rjmp	.+136    	; 0x3006 <malloc+0x124>
    2f7e:	fe 01       	movw	r30, r28
    2f80:	e2 0f       	add	r30, r18
    2f82:	f3 1f       	adc	r31, r19
    2f84:	81 93       	st	Z+, r24
    2f86:	91 93       	st	Z+, r25
    2f88:	22 50       	subi	r18, 0x02	; 2
    2f8a:	31 09       	sbc	r19, r1
    2f8c:	39 83       	std	Y+1, r19	; 0x01
    2f8e:	28 83       	st	Y, r18
    2f90:	3a c0       	rjmp	.+116    	; 0x3006 <malloc+0x124>
    2f92:	20 91 e9 05 	lds	r18, 0x05E9	; 0x8005e9 <__brkval>
    2f96:	30 91 ea 05 	lds	r19, 0x05EA	; 0x8005ea <__brkval+0x1>
    2f9a:	23 2b       	or	r18, r19
    2f9c:	41 f4       	brne	.+16     	; 0x2fae <malloc+0xcc>
    2f9e:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    2fa2:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    2fa6:	30 93 ea 05 	sts	0x05EA, r19	; 0x8005ea <__brkval+0x1>
    2faa:	20 93 e9 05 	sts	0x05E9, r18	; 0x8005e9 <__brkval>
    2fae:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    2fb2:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    2fb6:	21 15       	cp	r18, r1
    2fb8:	31 05       	cpc	r19, r1
    2fba:	41 f4       	brne	.+16     	; 0x2fcc <malloc+0xea>
    2fbc:	2d b7       	in	r18, 0x3d	; 61
    2fbe:	3e b7       	in	r19, 0x3e	; 62
    2fc0:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    2fc4:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    2fc8:	24 1b       	sub	r18, r20
    2fca:	35 0b       	sbc	r19, r21
    2fcc:	e0 91 e9 05 	lds	r30, 0x05E9	; 0x8005e9 <__brkval>
    2fd0:	f0 91 ea 05 	lds	r31, 0x05EA	; 0x8005ea <__brkval+0x1>
    2fd4:	e2 17       	cp	r30, r18
    2fd6:	f3 07       	cpc	r31, r19
    2fd8:	a0 f4       	brcc	.+40     	; 0x3002 <malloc+0x120>
    2fda:	2e 1b       	sub	r18, r30
    2fdc:	3f 0b       	sbc	r19, r31
    2fde:	28 17       	cp	r18, r24
    2fe0:	39 07       	cpc	r19, r25
    2fe2:	78 f0       	brcs	.+30     	; 0x3002 <malloc+0x120>
    2fe4:	ac 01       	movw	r20, r24
    2fe6:	4e 5f       	subi	r20, 0xFE	; 254
    2fe8:	5f 4f       	sbci	r21, 0xFF	; 255
    2fea:	24 17       	cp	r18, r20
    2fec:	35 07       	cpc	r19, r21
    2fee:	48 f0       	brcs	.+18     	; 0x3002 <malloc+0x120>
    2ff0:	4e 0f       	add	r20, r30
    2ff2:	5f 1f       	adc	r21, r31
    2ff4:	50 93 ea 05 	sts	0x05EA, r21	; 0x8005ea <__brkval+0x1>
    2ff8:	40 93 e9 05 	sts	0x05E9, r20	; 0x8005e9 <__brkval>
    2ffc:	81 93       	st	Z+, r24
    2ffe:	91 93       	st	Z+, r25
    3000:	02 c0       	rjmp	.+4      	; 0x3006 <malloc+0x124>
    3002:	e0 e0       	ldi	r30, 0x00	; 0
    3004:	f0 e0       	ldi	r31, 0x00	; 0
    3006:	cf 01       	movw	r24, r30
    3008:	df 91       	pop	r29
    300a:	cf 91       	pop	r28
    300c:	1f 91       	pop	r17
    300e:	0f 91       	pop	r16
    3010:	08 95       	ret

00003012 <free>:
    3012:	cf 93       	push	r28
    3014:	df 93       	push	r29
    3016:	00 97       	sbiw	r24, 0x00	; 0
    3018:	09 f4       	brne	.+2      	; 0x301c <free+0xa>
    301a:	81 c0       	rjmp	.+258    	; 0x311e <free+0x10c>
    301c:	fc 01       	movw	r30, r24
    301e:	32 97       	sbiw	r30, 0x02	; 2
    3020:	13 82       	std	Z+3, r1	; 0x03
    3022:	12 82       	std	Z+2, r1	; 0x02
    3024:	a0 91 eb 05 	lds	r26, 0x05EB	; 0x8005eb <__flp>
    3028:	b0 91 ec 05 	lds	r27, 0x05EC	; 0x8005ec <__flp+0x1>
    302c:	10 97       	sbiw	r26, 0x00	; 0
    302e:	81 f4       	brne	.+32     	; 0x3050 <free+0x3e>
    3030:	20 81       	ld	r18, Z
    3032:	31 81       	ldd	r19, Z+1	; 0x01
    3034:	82 0f       	add	r24, r18
    3036:	93 1f       	adc	r25, r19
    3038:	20 91 e9 05 	lds	r18, 0x05E9	; 0x8005e9 <__brkval>
    303c:	30 91 ea 05 	lds	r19, 0x05EA	; 0x8005ea <__brkval+0x1>
    3040:	28 17       	cp	r18, r24
    3042:	39 07       	cpc	r19, r25
    3044:	51 f5       	brne	.+84     	; 0x309a <free+0x88>
    3046:	f0 93 ea 05 	sts	0x05EA, r31	; 0x8005ea <__brkval+0x1>
    304a:	e0 93 e9 05 	sts	0x05E9, r30	; 0x8005e9 <__brkval>
    304e:	67 c0       	rjmp	.+206    	; 0x311e <free+0x10c>
    3050:	ed 01       	movw	r28, r26
    3052:	20 e0       	ldi	r18, 0x00	; 0
    3054:	30 e0       	ldi	r19, 0x00	; 0
    3056:	ce 17       	cp	r28, r30
    3058:	df 07       	cpc	r29, r31
    305a:	40 f4       	brcc	.+16     	; 0x306c <free+0x5a>
    305c:	4a 81       	ldd	r20, Y+2	; 0x02
    305e:	5b 81       	ldd	r21, Y+3	; 0x03
    3060:	9e 01       	movw	r18, r28
    3062:	41 15       	cp	r20, r1
    3064:	51 05       	cpc	r21, r1
    3066:	f1 f0       	breq	.+60     	; 0x30a4 <free+0x92>
    3068:	ea 01       	movw	r28, r20
    306a:	f5 cf       	rjmp	.-22     	; 0x3056 <free+0x44>
    306c:	d3 83       	std	Z+3, r29	; 0x03
    306e:	c2 83       	std	Z+2, r28	; 0x02
    3070:	40 81       	ld	r20, Z
    3072:	51 81       	ldd	r21, Z+1	; 0x01
    3074:	84 0f       	add	r24, r20
    3076:	95 1f       	adc	r25, r21
    3078:	c8 17       	cp	r28, r24
    307a:	d9 07       	cpc	r29, r25
    307c:	59 f4       	brne	.+22     	; 0x3094 <free+0x82>
    307e:	88 81       	ld	r24, Y
    3080:	99 81       	ldd	r25, Y+1	; 0x01
    3082:	84 0f       	add	r24, r20
    3084:	95 1f       	adc	r25, r21
    3086:	02 96       	adiw	r24, 0x02	; 2
    3088:	91 83       	std	Z+1, r25	; 0x01
    308a:	80 83       	st	Z, r24
    308c:	8a 81       	ldd	r24, Y+2	; 0x02
    308e:	9b 81       	ldd	r25, Y+3	; 0x03
    3090:	93 83       	std	Z+3, r25	; 0x03
    3092:	82 83       	std	Z+2, r24	; 0x02
    3094:	21 15       	cp	r18, r1
    3096:	31 05       	cpc	r19, r1
    3098:	29 f4       	brne	.+10     	; 0x30a4 <free+0x92>
    309a:	f0 93 ec 05 	sts	0x05EC, r31	; 0x8005ec <__flp+0x1>
    309e:	e0 93 eb 05 	sts	0x05EB, r30	; 0x8005eb <__flp>
    30a2:	3d c0       	rjmp	.+122    	; 0x311e <free+0x10c>
    30a4:	e9 01       	movw	r28, r18
    30a6:	fb 83       	std	Y+3, r31	; 0x03
    30a8:	ea 83       	std	Y+2, r30	; 0x02
    30aa:	49 91       	ld	r20, Y+
    30ac:	59 91       	ld	r21, Y+
    30ae:	c4 0f       	add	r28, r20
    30b0:	d5 1f       	adc	r29, r21
    30b2:	ec 17       	cp	r30, r28
    30b4:	fd 07       	cpc	r31, r29
    30b6:	61 f4       	brne	.+24     	; 0x30d0 <free+0xbe>
    30b8:	80 81       	ld	r24, Z
    30ba:	91 81       	ldd	r25, Z+1	; 0x01
    30bc:	84 0f       	add	r24, r20
    30be:	95 1f       	adc	r25, r21
    30c0:	02 96       	adiw	r24, 0x02	; 2
    30c2:	e9 01       	movw	r28, r18
    30c4:	99 83       	std	Y+1, r25	; 0x01
    30c6:	88 83       	st	Y, r24
    30c8:	82 81       	ldd	r24, Z+2	; 0x02
    30ca:	93 81       	ldd	r25, Z+3	; 0x03
    30cc:	9b 83       	std	Y+3, r25	; 0x03
    30ce:	8a 83       	std	Y+2, r24	; 0x02
    30d0:	e0 e0       	ldi	r30, 0x00	; 0
    30d2:	f0 e0       	ldi	r31, 0x00	; 0
    30d4:	12 96       	adiw	r26, 0x02	; 2
    30d6:	8d 91       	ld	r24, X+
    30d8:	9c 91       	ld	r25, X
    30da:	13 97       	sbiw	r26, 0x03	; 3
    30dc:	00 97       	sbiw	r24, 0x00	; 0
    30de:	19 f0       	breq	.+6      	; 0x30e6 <free+0xd4>
    30e0:	fd 01       	movw	r30, r26
    30e2:	dc 01       	movw	r26, r24
    30e4:	f7 cf       	rjmp	.-18     	; 0x30d4 <free+0xc2>
    30e6:	8d 91       	ld	r24, X+
    30e8:	9c 91       	ld	r25, X
    30ea:	11 97       	sbiw	r26, 0x01	; 1
    30ec:	9d 01       	movw	r18, r26
    30ee:	2e 5f       	subi	r18, 0xFE	; 254
    30f0:	3f 4f       	sbci	r19, 0xFF	; 255
    30f2:	82 0f       	add	r24, r18
    30f4:	93 1f       	adc	r25, r19
    30f6:	20 91 e9 05 	lds	r18, 0x05E9	; 0x8005e9 <__brkval>
    30fa:	30 91 ea 05 	lds	r19, 0x05EA	; 0x8005ea <__brkval+0x1>
    30fe:	28 17       	cp	r18, r24
    3100:	39 07       	cpc	r19, r25
    3102:	69 f4       	brne	.+26     	; 0x311e <free+0x10c>
    3104:	30 97       	sbiw	r30, 0x00	; 0
    3106:	29 f4       	brne	.+10     	; 0x3112 <free+0x100>
    3108:	10 92 ec 05 	sts	0x05EC, r1	; 0x8005ec <__flp+0x1>
    310c:	10 92 eb 05 	sts	0x05EB, r1	; 0x8005eb <__flp>
    3110:	02 c0       	rjmp	.+4      	; 0x3116 <free+0x104>
    3112:	13 82       	std	Z+3, r1	; 0x03
    3114:	12 82       	std	Z+2, r1	; 0x02
    3116:	b0 93 ea 05 	sts	0x05EA, r27	; 0x8005ea <__brkval+0x1>
    311a:	a0 93 e9 05 	sts	0x05E9, r26	; 0x8005e9 <__brkval>
    311e:	df 91       	pop	r29
    3120:	cf 91       	pop	r28
    3122:	08 95       	ret

00003124 <memcpy>:
    3124:	fb 01       	movw	r30, r22
    3126:	dc 01       	movw	r26, r24
    3128:	02 c0       	rjmp	.+4      	; 0x312e <memcpy+0xa>
    312a:	01 90       	ld	r0, Z+
    312c:	0d 92       	st	X+, r0
    312e:	41 50       	subi	r20, 0x01	; 1
    3130:	50 40       	sbci	r21, 0x00	; 0
    3132:	d8 f7       	brcc	.-10     	; 0x312a <memcpy+0x6>
    3134:	08 95       	ret

00003136 <memset>:
    3136:	dc 01       	movw	r26, r24
    3138:	01 c0       	rjmp	.+2      	; 0x313c <memset+0x6>
    313a:	6d 93       	st	X+, r22
    313c:	41 50       	subi	r20, 0x01	; 1
    313e:	50 40       	sbci	r21, 0x00	; 0
    3140:	e0 f7       	brcc	.-8      	; 0x313a <memset+0x4>
    3142:	08 95       	ret

00003144 <_exit>:
    3144:	f8 94       	cli

00003146 <__stop_program>:
    3146:	ff cf       	rjmp	.-2      	; 0x3146 <__stop_program>
