
ECU_LEFT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000dc  00800200  00001e6c  00001f00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f7  008002dc  008002dc  00001fdc  2**3
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001fdc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000200c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000628  00000000  00000000  0000204c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00010572  00000000  00000000  00002674  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003423  00000000  00000000  00012be6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003e72  00000000  00000000  00016009  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000123c  00000000  00000000  00019e7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000425e  00000000  00000000  0001b0b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007627  00000000  00000000  0001f316  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000618  00000000  00000000  0002693d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	34 c1       	rjmp	.+616    	; 0x26a <__ctors_end>
       2:	00 00       	nop
       4:	62 c1       	rjmp	.+708    	; 0x2ca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c1       	rjmp	.+704    	; 0x2ca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c1       	rjmp	.+700    	; 0x2ca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c1       	rjmp	.+696    	; 0x2ca <__bad_interrupt>
      12:	00 00       	nop
      14:	5a c1       	rjmp	.+692    	; 0x2ca <__bad_interrupt>
      16:	00 00       	nop
      18:	58 c1       	rjmp	.+688    	; 0x2ca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c1       	rjmp	.+684    	; 0x2ca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c1       	rjmp	.+680    	; 0x2ca <__bad_interrupt>
      22:	00 00       	nop
      24:	52 c1       	rjmp	.+676    	; 0x2ca <__bad_interrupt>
      26:	00 00       	nop
      28:	50 c1       	rjmp	.+672    	; 0x2ca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c1       	rjmp	.+668    	; 0x2ca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c1       	rjmp	.+664    	; 0x2ca <__bad_interrupt>
      32:	00 00       	nop
      34:	4a c1       	rjmp	.+660    	; 0x2ca <__bad_interrupt>
      36:	00 00       	nop
      38:	48 c1       	rjmp	.+656    	; 0x2ca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	46 c1       	rjmp	.+652    	; 0x2ca <__bad_interrupt>
      3e:	00 00       	nop
      40:	44 c1       	rjmp	.+648    	; 0x2ca <__bad_interrupt>
      42:	00 00       	nop
      44:	42 c1       	rjmp	.+644    	; 0x2ca <__bad_interrupt>
      46:	00 00       	nop
      48:	40 c1       	rjmp	.+640    	; 0x2ca <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3e c1       	rjmp	.+636    	; 0x2ca <__bad_interrupt>
      4e:	00 00       	nop
      50:	3c c1       	rjmp	.+632    	; 0x2ca <__bad_interrupt>
      52:	00 00       	nop
      54:	3a c1       	rjmp	.+628    	; 0x2ca <__bad_interrupt>
      56:	00 00       	nop
      58:	38 c1       	rjmp	.+624    	; 0x2ca <__bad_interrupt>
      5a:	00 00       	nop
      5c:	2f c6       	rjmp	.+3166   	; 0xcbc <__vector_23>
      5e:	00 00       	nop
      60:	34 c1       	rjmp	.+616    	; 0x2ca <__bad_interrupt>
      62:	00 00       	nop
      64:	de c4       	rjmp	.+2492   	; 0xa22 <__vector_25>
      66:	00 00       	nop
      68:	12 c5       	rjmp	.+2596   	; 0xa8e <__vector_26>
      6a:	00 00       	nop
      6c:	2e c1       	rjmp	.+604    	; 0x2ca <__bad_interrupt>
      6e:	00 00       	nop
      70:	2c c1       	rjmp	.+600    	; 0x2ca <__bad_interrupt>
      72:	00 00       	nop
      74:	2a c1       	rjmp	.+596    	; 0x2ca <__bad_interrupt>
      76:	00 00       	nop
      78:	28 c1       	rjmp	.+592    	; 0x2ca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	26 c1       	rjmp	.+588    	; 0x2ca <__bad_interrupt>
      7e:	00 00       	nop
      80:	24 c1       	rjmp	.+584    	; 0x2ca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c1       	rjmp	.+580    	; 0x2ca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c1       	rjmp	.+576    	; 0x2ca <__bad_interrupt>
      8a:	00 00       	nop
      8c:	1e c1       	rjmp	.+572    	; 0x2ca <__bad_interrupt>
      8e:	00 00       	nop
      90:	1c c1       	rjmp	.+568    	; 0x2ca <__bad_interrupt>
      92:	00 00       	nop
      94:	1a c1       	rjmp	.+564    	; 0x2ca <__bad_interrupt>
      96:	00 00       	nop
      98:	18 c1       	rjmp	.+560    	; 0x2ca <__bad_interrupt>
      9a:	00 00       	nop
      9c:	16 c1       	rjmp	.+556    	; 0x2ca <__bad_interrupt>
      9e:	00 00       	nop
      a0:	14 c1       	rjmp	.+552    	; 0x2ca <__bad_interrupt>
      a2:	00 00       	nop
      a4:	12 c1       	rjmp	.+548    	; 0x2ca <__bad_interrupt>
      a6:	00 00       	nop
      a8:	10 c1       	rjmp	.+544    	; 0x2ca <__bad_interrupt>
      aa:	00 00       	nop
      ac:	0e c1       	rjmp	.+540    	; 0x2ca <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0c c1       	rjmp	.+536    	; 0x2ca <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0a c1       	rjmp	.+532    	; 0x2ca <__bad_interrupt>
      b6:	00 00       	nop
      b8:	08 c1       	rjmp	.+528    	; 0x2ca <__bad_interrupt>
      ba:	00 00       	nop
      bc:	06 c1       	rjmp	.+524    	; 0x2ca <__bad_interrupt>
      be:	00 00       	nop
      c0:	04 c1       	rjmp	.+520    	; 0x2ca <__bad_interrupt>
      c2:	00 00       	nop
      c4:	02 c1       	rjmp	.+516    	; 0x2ca <__bad_interrupt>
      c6:	00 00       	nop
      c8:	00 c1       	rjmp	.+512    	; 0x2ca <__bad_interrupt>
      ca:	00 00       	nop
      cc:	fe c0       	rjmp	.+508    	; 0x2ca <__bad_interrupt>
      ce:	00 00       	nop
      d0:	fc c0       	rjmp	.+504    	; 0x2ca <__bad_interrupt>
      d2:	00 00       	nop
      d4:	fa c0       	rjmp	.+500    	; 0x2ca <__bad_interrupt>
      d6:	00 00       	nop
      d8:	f8 c0       	rjmp	.+496    	; 0x2ca <__bad_interrupt>
      da:	00 00       	nop
      dc:	f6 c0       	rjmp	.+492    	; 0x2ca <__bad_interrupt>
      de:	00 00       	nop
      e0:	f4 c0       	rjmp	.+488    	; 0x2ca <__bad_interrupt>
      e2:	00 00       	nop
      e4:	bf 07       	cpc	r27, r31
      e6:	c2 07       	cpc	r28, r18
      e8:	b1 07       	cpc	r27, r17
      ea:	b5 07       	cpc	r27, r21
      ec:	bb 07       	cpc	r27, r27
      ee:	f9 07       	cpc	r31, r25
      f0:	c6 07       	cpc	r28, r22
      f2:	ca 07       	cpc	r28, r26
      f4:	d0 07       	cpc	r29, r16
      f6:	d4 07       	cpc	r29, r20
      f8:	d8 07       	cpc	r29, r24
      fa:	de 07       	cpc	r29, r30
      fc:	e2 07       	cpc	r30, r18
      fe:	e6 07       	cpc	r30, r22
     100:	f9 07       	cpc	r31, r25
     102:	ec 07       	cpc	r30, r28
     104:	f0 07       	cpc	r31, r16
     106:	f4 07       	cpc	r31, r20
     108:	5e 0a       	sbc	r5, r30
     10a:	d2 09       	sbc	r29, r2
     10c:	62 0a       	sbc	r6, r18
     10e:	d5 09       	sbc	r29, r5
     110:	d8 09       	sbc	r29, r8
     112:	dc 09       	sbc	r29, r12
     114:	df 09       	sbc	r29, r15
     116:	e2 09       	sbc	r30, r2
     118:	5c 0a       	sbc	r5, r28
     11a:	5c 0a       	sbc	r5, r28
     11c:	e5 09       	sbc	r30, r5
     11e:	e8 09       	sbc	r30, r8
     120:	eb 09       	sbc	r30, r11
     122:	ee 09       	sbc	r30, r14
     124:	f1 09       	sbc	r31, r1
     126:	f4 09       	sbc	r31, r4
     128:	66 0a       	sbc	r6, r22
     12a:	03 0a       	sbc	r0, r19
     12c:	06 0a       	sbc	r0, r22
     12e:	5c 0a       	sbc	r5, r28
     130:	0a 0a       	sbc	r0, r26
     132:	0e 0a       	sbc	r0, r30
     134:	11 0a       	sbc	r1, r17
     136:	14 0a       	sbc	r1, r20
     138:	17 0a       	sbc	r1, r23
     13a:	1a 0a       	sbc	r1, r26
     13c:	49 0a       	sbc	r4, r25
     13e:	1d 0a       	sbc	r1, r29
     140:	20 0a       	sbc	r2, r16
     142:	23 0a       	sbc	r2, r19
     144:	26 0a       	sbc	r2, r22
     146:	29 0a       	sbc	r2, r25
     148:	6a 0a       	sbc	r6, r26
     14a:	38 0a       	sbc	r3, r24
     14c:	3b 0a       	sbc	r3, r27
     14e:	3f 0a       	sbc	r3, r31
     150:	42 0a       	sbc	r4, r18
     152:	5c 0a       	sbc	r5, r28
     154:	46 0a       	sbc	r4, r22
     156:	49 0a       	sbc	r4, r25
     158:	4d 0a       	sbc	r4, r29
     15a:	51 0a       	sbc	r5, r17
     15c:	55 0a       	sbc	r5, r21
     15e:	59 0a       	sbc	r5, r25

00000160 <__trampolines_end>:
     160:	00 00       	nop
     162:	0a 0b       	sbc	r16, r26
     164:	02 09       	sbc	r16, r2
     166:	0c 0d       	add	r16, r12
     168:	0e 08       	sbc	r0, r14
     16a:	07 03       	mulsu	r16, r23
     16c:	04 01       	movw	r0, r8
	...
     18a:	00 00       	nop
     18c:	12 11       	cpse	r17, r2
     18e:	10 00       	.word	0x0010	; ????
	...

000001a6 <digital_pin_to_bit_mask_PGM>:
     1a6:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     1b6:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     1c6:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     1d6:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     1e6:	04 08 10 20 40 80                                   ... @.

000001ec <digital_pin_to_port_PGM>:
     1ec:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1fc:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     20c:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     21c:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     22c:	0b 0b 0b 0b 0b 0b                                   ......

00000232 <port_to_output_PGM>:
     232:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     242:	02 01 00 00 05 01 08 01 0b 01                       ..........

0000024c <port_to_mode_PGM>:
     24c:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     25c:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000266 <__ctors_start>:
     266:	52 02       	muls	r21, r18
     268:	79 05       	cpc	r23, r9

0000026a <__ctors_end>:
     26a:	11 24       	eor	r1, r1
     26c:	1f be       	out	0x3f, r1	; 63
     26e:	cf ef       	ldi	r28, 0xFF	; 255
     270:	d1 e2       	ldi	r29, 0x21	; 33
     272:	de bf       	out	0x3e, r29	; 62
     274:	cd bf       	out	0x3d, r28	; 61
     276:	00 e0       	ldi	r16, 0x00	; 0
     278:	0c bf       	out	0x3c, r16	; 60

0000027a <__do_copy_data>:
     27a:	12 e0       	ldi	r17, 0x02	; 2
     27c:	a0 e0       	ldi	r26, 0x00	; 0
     27e:	b2 e0       	ldi	r27, 0x02	; 2
     280:	ec e6       	ldi	r30, 0x6C	; 108
     282:	fe e1       	ldi	r31, 0x1E	; 30
     284:	00 e0       	ldi	r16, 0x00	; 0
     286:	0b bf       	out	0x3b, r16	; 59
     288:	02 c0       	rjmp	.+4      	; 0x28e <__do_copy_data+0x14>
     28a:	07 90       	elpm	r0, Z+
     28c:	0d 92       	st	X+, r0
     28e:	ac 3d       	cpi	r26, 0xDC	; 220
     290:	b1 07       	cpc	r27, r17
     292:	d9 f7       	brne	.-10     	; 0x28a <__do_copy_data+0x10>

00000294 <__do_clear_bss>:
     294:	23 e0       	ldi	r18, 0x03	; 3
     296:	ac ed       	ldi	r26, 0xDC	; 220
     298:	b2 e0       	ldi	r27, 0x02	; 2
     29a:	01 c0       	rjmp	.+2      	; 0x29e <.do_clear_bss_start>

0000029c <.do_clear_bss_loop>:
     29c:	1d 92       	st	X+, r1

0000029e <.do_clear_bss_start>:
     29e:	a3 3d       	cpi	r26, 0xD3	; 211
     2a0:	b2 07       	cpc	r27, r18
     2a2:	e1 f7       	brne	.-8      	; 0x29c <.do_clear_bss_loop>

000002a4 <__do_global_ctors>:
     2a4:	11 e0       	ldi	r17, 0x01	; 1
     2a6:	c5 e3       	ldi	r28, 0x35	; 53
     2a8:	d1 e0       	ldi	r29, 0x01	; 1
     2aa:	00 e0       	ldi	r16, 0x00	; 0
     2ac:	06 c0       	rjmp	.+12     	; 0x2ba <__do_global_ctors+0x16>
     2ae:	21 97       	sbiw	r28, 0x01	; 1
     2b0:	01 09       	sbc	r16, r1
     2b2:	80 2f       	mov	r24, r16
     2b4:	fe 01       	movw	r30, r28
     2b6:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <__tablejump2__>
     2ba:	c3 33       	cpi	r28, 0x33	; 51
     2bc:	d1 07       	cpc	r29, r17
     2be:	80 e0       	ldi	r24, 0x00	; 0
     2c0:	08 07       	cpc	r16, r24
     2c2:	a9 f7       	brne	.-22     	; 0x2ae <__do_global_ctors+0xa>
     2c4:	44 d4       	rcall	.+2184   	; 0xb4e <main>
     2c6:	0c 94 34 0f 	jmp	0x1e68	; 0x1e68 <_exit>

000002ca <__bad_interrupt>:
     2ca:	9a ce       	rjmp	.-716    	; 0x0 <__vectors>

000002cc <_Z6getBTNv>:
	BTN_LEFT_HANDLER,
	BTN_SELECT_HANDLER
};


void getBTN(){
     2cc:	0f 93       	push	r16
     2ce:	1f 93       	push	r17
     2d0:	cf 93       	push	r28
     2d2:	df 93       	push	r29
	
	int analogReading = BTN_DEFAULT_ADC_VALUE;
	int first_sample, i;
	
	first_sample = analogRead(BTN_ADC_CHANNEL);
     2d4:	80 e0       	ldi	r24, 0x00	; 0
     2d6:	14 d6       	rcall	.+3112   	; 0xf00 <analogRead>
     2d8:	ec 01       	movw	r28, r24
     2da:	0a e0       	ldi	r16, 0x0A	; 10
     2dc:	10 e0       	ldi	r17, 0x00	; 0
	

	
	for(i=0; i<NUMBER_OF_CONSECUTIVE_SAMPLES; i++){
		if(analogRead(BTN_ADC_CHANNEL) != first_sample){
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	0f d6       	rcall	.+3102   	; 0xf00 <analogRead>
     2e2:	c8 17       	cp	r28, r24
     2e4:	d9 07       	cpc	r29, r25
     2e6:	51 f4       	brne	.+20     	; 0x2fc <_Z6getBTNv+0x30>
     2e8:	01 50       	subi	r16, 0x01	; 1
     2ea:	11 09       	sbc	r17, r1
	
	first_sample = analogRead(BTN_ADC_CHANNEL);
	

	
	for(i=0; i<NUMBER_OF_CONSECUTIVE_SAMPLES; i++){
     2ec:	c1 f7       	brne	.-16     	; 0x2de <_Z6getBTNv+0x12>
	
	if(i==NUMBER_OF_CONSECUTIVE_SAMPLES){
		analogReading = first_sample;
	}
	
	if(analogReading == BTN_RIGHT_ADC_VALUE){
     2ee:	20 97       	sbiw	r28, 0x00	; 0
     2f0:	39 f4       	brne	.+14     	; 0x300 <_Z6getBTNv+0x34>
		ptrFunc[BTN_LEFT]();
	}
	else{
		/* return error */
	}
     2f2:	df 91       	pop	r29
     2f4:	cf 91       	pop	r28
     2f6:	1f 91       	pop	r17
	if(i==NUMBER_OF_CONSECUTIVE_SAMPLES){
		analogReading = first_sample;
	}
	
	if(analogReading == BTN_RIGHT_ADC_VALUE){
		ptrFunc[BTN_RIGHT]();
     2f8:	0f 91       	pop	r16
     2fa:	cf c0       	rjmp	.+414    	; 0x49a <_Z17BTN_right_handlerv>
};


void getBTN(){
	
	int analogReading = BTN_DEFAULT_ADC_VALUE;
     2fc:	cf ef       	ldi	r28, 0xFF	; 255
     2fe:	d3 e0       	ldi	r29, 0x03	; 3
	}
	
	if(analogReading == BTN_RIGHT_ADC_VALUE){
		ptrFunc[BTN_RIGHT]();
	}
	else if(analogReading <= BTN_UP_ADC_VALUE_MAX && analogReading >= BTN_UP_ADC_VALUE_MIN){
     300:	ce 01       	movw	r24, r28
     302:	44 97       	sbiw	r24, 0x14	; 20
     304:	89 3c       	cpi	r24, 0xC9	; 201
     306:	91 05       	cpc	r25, r1
     308:	28 f4       	brcc	.+10     	; 0x314 <_Z6getBTNv+0x48>
		ptrFunc[BTN_LEFT]();
	}
	else{
		/* return error */
	}
     30a:	df 91       	pop	r29
     30c:	cf 91       	pop	r28
     30e:	1f 91       	pop	r17
	
	if(analogReading == BTN_RIGHT_ADC_VALUE){
		ptrFunc[BTN_RIGHT]();
	}
	else if(analogReading <= BTN_UP_ADC_VALUE_MAX && analogReading >= BTN_UP_ADC_VALUE_MIN){
		ptrFunc[BTN_UP]();
     310:	0f 91       	pop	r16
     312:	be c0       	rjmp	.+380    	; 0x490 <_Z14BTN_up_handlerv>
	}
	else if(analogReading <= BTN_DOWN_ADC_VALUE_MAX && analogReading >= BTN_DOWN_ADC_VALUE_MIN){
     314:	ce 01       	movw	r24, r28
     316:	8c 59       	subi	r24, 0x9C	; 156
     318:	91 09       	sbc	r25, r1
     31a:	89 3c       	cpi	r24, 0xC9	; 201
     31c:	91 05       	cpc	r25, r1
     31e:	28 f4       	brcc	.+10     	; 0x32a <_Z6getBTNv+0x5e>
		ptrFunc[BTN_LEFT]();
	}
	else{
		/* return error */
	}
     320:	df 91       	pop	r29
     322:	cf 91       	pop	r28
     324:	1f 91       	pop	r17
	}
	else if(analogReading <= BTN_UP_ADC_VALUE_MAX && analogReading >= BTN_UP_ADC_VALUE_MIN){
		ptrFunc[BTN_UP]();
	}
	else if(analogReading <= BTN_DOWN_ADC_VALUE_MAX && analogReading >= BTN_DOWN_ADC_VALUE_MIN){
		ptrFunc[BTN_DOWN]();
     326:	0f 91       	pop	r16
     328:	b7 c0       	rjmp	.+366    	; 0x498 <_Z16BTN_down_handlerv>
	}
	else if(analogReading <= BTN_SELECT_ADC_VALUE_MAX && analogReading >= BTN_SELECT_ADC_VALUE_MIN){
     32a:	ce 01       	movw	r24, r28
     32c:	8c 51       	subi	r24, 0x1C	; 28
     32e:	92 40       	sbci	r25, 0x02	; 2
     330:	89 3c       	cpi	r24, 0xC9	; 201
     332:	91 05       	cpc	r25, r1
		ptrFunc[BTN_LEFT]();
	}
	else{
		/* return error */
	}
     334:	28 f4       	brcc	.+10     	; 0x340 <_Z6getBTNv+0x74>
     336:	df 91       	pop	r29
     338:	cf 91       	pop	r28
     33a:	1f 91       	pop	r17
	}
	else if(analogReading <= BTN_DOWN_ADC_VALUE_MAX && analogReading >= BTN_DOWN_ADC_VALUE_MIN){
		ptrFunc[BTN_DOWN]();
	}
	else if(analogReading <= BTN_SELECT_ADC_VALUE_MAX && analogReading >= BTN_SELECT_ADC_VALUE_MIN){
		ptrFunc[BTN_SELECT]();
     33c:	0f 91       	pop	r16
     33e:	ae c0       	rjmp	.+348    	; 0x49c <_Z18BTN_select_handlerv>
	}
	
	else if(analogReading <= BTN_LEFT_ADC_VALUE_MAX && analogReading >= BTN_LEFT_ADC_VALUE_MIN){
     340:	c6 53       	subi	r28, 0x36	; 54
     342:	d1 40       	sbci	r29, 0x01	; 1
     344:	c9 3c       	cpi	r28, 0xC9	; 201
     346:	d1 05       	cpc	r29, r1
		ptrFunc[BTN_LEFT]();
	}
	else{
		/* return error */
	}
     348:	28 f4       	brcc	.+10     	; 0x354 <_Z6getBTNv+0x88>
     34a:	df 91       	pop	r29
     34c:	cf 91       	pop	r28
     34e:	1f 91       	pop	r17
	else if(analogReading <= BTN_SELECT_ADC_VALUE_MAX && analogReading >= BTN_SELECT_ADC_VALUE_MIN){
		ptrFunc[BTN_SELECT]();
	}
	
	else if(analogReading <= BTN_LEFT_ADC_VALUE_MAX && analogReading >= BTN_LEFT_ADC_VALUE_MIN){
		ptrFunc[BTN_LEFT]();
     350:	0f 91       	pop	r16
     352:	9a c0       	rjmp	.+308    	; 0x488 <_Z16BTN_left_handlerv>
	}
	else{
		/* return error */
	}
     354:	df 91       	pop	r29
     356:	cf 91       	pop	r28
     358:	1f 91       	pop	r17
     35a:	0f 91       	pop	r16
     35c:	08 95       	ret

0000035e <_Z41can_message_simulation_cmd_frame_receivedv>:
			break;
		}
	}
}
void can_message_simulation_cmd_frame_received(){
	switch(frameResponse.data[0]){
     35e:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <frameResponse+0x8>
     362:	81 30       	cpi	r24, 0x01	; 1
     364:	19 f0       	breq	.+6      	; 0x36c <_Z41can_message_simulation_cmd_frame_receivedv+0xe>
     366:	82 30       	cpi	r24, 0x02	; 2
     368:	19 f0       	breq	.+6      	; 0x370 <_Z41can_message_simulation_cmd_frame_receivedv+0x12>
     36a:	08 95       	ret
		case CAN_MSG_SIMULATION_CMD_DATA_KILL:{
			mainEvent = EVENT_KILL_SIMULATION;
     36c:	82 e0       	ldi	r24, 0x02	; 2
     36e:	01 c0       	rjmp	.+2      	; 0x372 <_Z41can_message_simulation_cmd_frame_receivedv+0x14>
			break;
		}
		case CAN_MSG_SIMULATION_CMD_DATA_START:{
			mainEvent = EVENT_START_SIMULATION;
     370:	81 e0       	ldi	r24, 0x01	; 1
     372:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <mainEvent>
     376:	08 95       	ret

00000378 <_Z31can_message_sos_frame_recieviedv>:
		}
	}
}

void can_message_sos_frame_recievied(){
	switch(frameResponse.data[0]){
     378:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <frameResponse+0x8>
     37c:	82 30       	cpi	r24, 0x02	; 2
     37e:	31 f0       	breq	.+12     	; 0x38c <_Z31can_message_sos_frame_recieviedv+0x14>
     380:	84 30       	cpi	r24, 0x04	; 4
     382:	31 f0       	breq	.+12     	; 0x390 <_Z31can_message_sos_frame_recieviedv+0x18>
     384:	81 30       	cpi	r24, 0x01	; 1
     386:	39 f4       	brne	.+14     	; 0x396 <_Z31can_message_sos_frame_recieviedv+0x1e>
		case CAN_MSG_SOS_DATA_ECALL:{
			mainEvent = EVENT_ECALL;
     388:	83 e0       	ldi	r24, 0x03	; 3
     38a:	03 c0       	rjmp	.+6      	; 0x392 <_Z31can_message_sos_frame_recieviedv+0x1a>
			break;
		}
		case CAN_MSG_SOS_DATA_BCALL:{
			mainEvent = EVENT_BCALL;
     38c:	84 e0       	ldi	r24, 0x04	; 4
     38e:	01 c0       	rjmp	.+2      	; 0x392 <_Z31can_message_sos_frame_recieviedv+0x1a>
			break;
		}
		case CAN_MSG_SOS_DATA_END:{
			mainEvent = EVENT_END;
     390:	85 e0       	ldi	r24, 0x05	; 5
     392:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <mainEvent>
     396:	08 95       	ret

00000398 <_Z21can_message_recieviedv>:
#include "Sketch.h"

void can_message_recievied(){
	switch(frameResponse.can_id){
     398:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <frameResponse>
     39c:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <frameResponse+0x1>
     3a0:	a0 91 fa 02 	lds	r26, 0x02FA	; 0x8002fa <frameResponse+0x2>
     3a4:	b0 91 fb 02 	lds	r27, 0x02FB	; 0x8002fb <frameResponse+0x3>
     3a8:	80 31       	cpi	r24, 0x10	; 16
     3aa:	91 05       	cpc	r25, r1
     3ac:	a1 05       	cpc	r26, r1
     3ae:	b1 05       	cpc	r27, r1
     3b0:	51 f0       	breq	.+20     	; 0x3c6 <_Z21can_message_recieviedv+0x2e>
     3b2:	82 31       	cpi	r24, 0x12	; 18
     3b4:	91 05       	cpc	r25, r1
     3b6:	a1 05       	cpc	r26, r1
     3b8:	b1 05       	cpc	r27, r1
     3ba:	31 f0       	breq	.+12     	; 0x3c8 <_Z21can_message_recieviedv+0x30>
     3bc:	09 97       	sbiw	r24, 0x09	; 9
     3be:	a1 05       	cpc	r26, r1
     3c0:	b1 05       	cpc	r27, r1
     3c2:	29 f4       	brne	.+10     	; 0x3ce <_Z21can_message_recieviedv+0x36>
		case CAN_MSG_SIMULATION_CMD_ID:{
			can_message_simulation_cmd_frame_received();
     3c4:	cc cf       	rjmp	.-104    	; 0x35e <_Z41can_message_simulation_cmd_frame_receivedv>
			break;
		}
			
		case CAN_MSG_SOS_ID:{
			can_message_sos_frame_recievied();
     3c6:	d8 cf       	rjmp	.-80     	; 0x378 <_Z31can_message_sos_frame_recieviedv>
     3c8:	86 e0       	ldi	r24, 0x06	; 6
			break;
		}
	}
}
void can_message_speed_frame_recievied(){
	mainEvent = EVENT_SPEED;
     3ca:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <mainEvent>
     3ce:	08 95       	ret

000003d0 <setup>:
     3d0:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <mainState>
bool stateEntry, stateExit;


void setup() {
	mainState = STATE_INIT;
	mainEvent = EVENT_IDLE;
     3d4:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <mainEvent>
	
	stateEntry = true;
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <stateEntry>
	stateExit = false;
     3de:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <__data_end>

	lcd.begin(LCD_COLUMNS, LCD_ROWS);
     3e2:	20 e0       	ldi	r18, 0x00	; 0
     3e4:	42 e0       	ldi	r20, 0x02	; 2
     3e6:	60 e1       	ldi	r22, 0x10	; 16
     3e8:	80 e1       	ldi	r24, 0x10	; 16
     3ea:	93 e0       	ldi	r25, 0x03	; 3
     3ec:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <_ZN13LiquidCrystal5beginEhhh>
	lcd.clear();
     3f0:	80 e1       	ldi	r24, 0x10	; 16
     3f2:	93 e0       	ldi	r25, 0x03	; 3
     3f4:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <_ZN13LiquidCrystal5clearEv>
	
	mcp2515.reset();
     3f8:	89 e0       	ldi	r24, 0x09	; 9
     3fa:	93 e0       	ldi	r25, 0x03	; 3
     3fc:	0e 94 48 0b 	call	0x1690	; 0x1690 <_ZN7MCP25155resetEv>
	mcp2515.setBitrate(CAN_125KBPS, MCP_8MHZ);
     400:	42 e0       	ldi	r20, 0x02	; 2
     402:	6b e0       	ldi	r22, 0x0B	; 11
     404:	89 e0       	ldi	r24, 0x09	; 9
     406:	93 e0       	ldi	r25, 0x03	; 3
     408:	b0 d7       	rcall	.+3936   	; 0x136a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK>
	mcp2515.setNormalMode();
     40a:	89 e0       	ldi	r24, 0x09	; 9
     40c:	93 e0       	ldi	r25, 0x03	; 3
     40e:	ab d7       	rcall	.+3926   	; 0x1366 <_ZN7MCP251513setNormalModeEv>
	
	lcd.setCursor(0,0);
     410:	40 e0       	ldi	r20, 0x00	; 0
     412:	60 e0       	ldi	r22, 0x00	; 0
     414:	80 e1       	ldi	r24, 0x10	; 16
     416:	93 e0       	ldi	r25, 0x03	; 3
     418:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("< GRAD PROJECT >");
     41c:	6a e0       	ldi	r22, 0x0A	; 10
     41e:	72 e0       	ldi	r23, 0x02	; 2
     420:	80 e1       	ldi	r24, 0x10	; 16
     422:	93 e0       	ldi	r25, 0x03	; 3
     424:	dd d3       	rcall	.+1978   	; 0xbe0 <_ZN5Print5printEPKc>
	lcd.setCursor(0,1);
     426:	41 e0       	ldi	r20, 0x01	; 1
     428:	60 e0       	ldi	r22, 0x00	; 0
     42a:	80 e1       	ldi	r24, 0x10	; 16
     42c:	93 e0       	ldi	r25, 0x03	; 3
     42e:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("HELWAN ECE  2023");
     432:	6b e1       	ldi	r22, 0x1B	; 27
     434:	72 e0       	ldi	r23, 0x02	; 2
     436:	80 e1       	ldi	r24, 0x10	; 16
     438:	93 e0       	ldi	r25, 0x03	; 3
     43a:	d2 d3       	rcall	.+1956   	; 0xbe0 <_ZN5Print5printEPKc>
	delay(2000);
     43c:	60 ed       	ldi	r22, 0xD0	; 208
     43e:	77 e0       	ldi	r23, 0x07	; 7
     440:	80 e0       	ldi	r24, 0x00	; 0
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	b6 d4       	rcall	.+2412   	; 0xdb2 <delay>
	lcd.clear();
     446:	80 e1       	ldi	r24, 0x10	; 16
     448:	93 e0       	ldi	r25, 0x03	; 3
     44a:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <_ZN13LiquidCrystal5clearEv>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     44e:	26 e0       	ldi	r18, 0x06	; 6
     450:	40 e8       	ldi	r20, 0x80	; 128
     452:	55 e2       	ldi	r21, 0x25	; 37
     454:	60 e0       	ldi	r22, 0x00	; 0
     456:	70 e0       	ldi	r23, 0x00	; 0
     458:	88 e2       	ldi	r24, 0x28	; 40
     45a:	93 e0       	ldi	r25, 0x03	; 3
     45c:	79 c2       	rjmp	.+1266   	; 0x950 <_ZN14HardwareSerial5beginEmh>

0000045e <loop>:

void loop() {
	
	
	//	Get Events
	getBTN();
     45e:	36 df       	rcall	.-404    	; 0x2cc <_Z6getBTNv>
	
	if(mcp2515.readMessage(&frameResponse) == MCP2515::ERROR_OK){
     460:	68 ef       	ldi	r22, 0xF8	; 248
     462:	72 e0       	ldi	r23, 0x02	; 2
     464:	89 e0       	ldi	r24, 0x09	; 9
     466:	93 e0       	ldi	r25, 0x03	; 3
     468:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <_ZN7MCP251511readMessageEP9can_frame>
     46c:	81 11       	cpse	r24, r1

		can_message_recievied();
     46e:	01 c0       	rjmp	.+2      	; 0x472 <loop+0x14>
     470:	93 df       	rcall	.-218    	; 0x398 <_Z21can_message_recieviedv>
	}
	

	// Handle Events
	switch(mainState){
     472:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <mainState>
     476:	81 30       	cpi	r24, 0x01	; 1
     478:	29 f0       	breq	.+10     	; 0x484 <loop+0x26>
     47a:	18 f0       	brcs	.+6      	; 0x482 <loop+0x24>
     47c:	82 30       	cpi	r24, 0x02	; 2
     47e:	19 f0       	breq	.+6      	; 0x486 <loop+0x28>
		
		case STATE_HALT:{
			stateHALT_handler();
     480:	08 95       	ret
			break;
		}
		
		case STATE_IDLE:{
			stateIDLE_handler();
     482:	2f c0       	rjmp	.+94     	; 0x4e2 <_Z17stateHALT_handlerv>
     484:	61 c0       	rjmp	.+194    	; 0x548 <_Z17stateIDLE_handlerv>
			break;
		}
		
		case STATE_ACTIVE:{
			stateACTIVE_handler();
     486:	29 c1       	rjmp	.+594    	; 0x6da <_Z19stateACTIVE_handlerv>

00000488 <_Z16BTN_left_handlerv>:
     488:	81 e0       	ldi	r24, 0x01	; 1




void BTN_left_handler(){
	mainEvent = EVENT_START_SIMULATION;
     48a:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <mainEvent>
     48e:	08 95       	ret

00000490 <_Z14BTN_up_handlerv>:
}

void BTN_up_handler(){
	mainEvent = EVENT_BCALL;
     490:	84 e0       	ldi	r24, 0x04	; 4
     492:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <mainEvent>
     496:	08 95       	ret

00000498 <_Z16BTN_down_handlerv>:
     498:	08 95       	ret

0000049a <_Z17BTN_right_handlerv>:

void BTN_down_handler(){
	
}

void BTN_right_handler(){
     49a:	08 95       	ret

0000049c <_Z18BTN_select_handlerv>:
	
}

void BTN_select_handler(){
	mainEvent = EVENT_REQ_BCALL;
     49c:	87 e0       	ldi	r24, 0x07	; 7
     49e:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <mainEvent>
     4a2:	08 95       	ret

000004a4 <_GLOBAL__sub_I_lcd>:
}
     4a4:	cf 92       	push	r12
     4a6:	ef 92       	push	r14
     4a8:	0f 93       	push	r16
     4aa:	1f 93       	push	r17
﻿#include "Sketch.h"


LiquidCrystal lcd(rs, en, d4, d5, d6, d7);
     4ac:	87 e0       	ldi	r24, 0x07	; 7
     4ae:	c8 2e       	mov	r12, r24
     4b0:	96 e0       	ldi	r25, 0x06	; 6
     4b2:	e9 2e       	mov	r14, r25
     4b4:	05 e0       	ldi	r16, 0x05	; 5
     4b6:	24 e0       	ldi	r18, 0x04	; 4
     4b8:	49 e0       	ldi	r20, 0x09	; 9
     4ba:	68 e0       	ldi	r22, 0x08	; 8
     4bc:	80 e1       	ldi	r24, 0x10	; 16
     4be:	93 e0       	ldi	r25, 0x03	; 3
     4c0:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <_ZN13LiquidCrystalC1Ehhhhhh>
MCP2515 mcp2515(SS_PIN);
     4c4:	00 e0       	ldi	r16, 0x00	; 0
     4c6:	10 e0       	ldi	r17, 0x00	; 0
     4c8:	20 e8       	ldi	r18, 0x80	; 128
     4ca:	36 e9       	ldi	r19, 0x96	; 150
     4cc:	48 e9       	ldi	r20, 0x98	; 152
     4ce:	50 e0       	ldi	r21, 0x00	; 0
     4d0:	65 e3       	ldi	r22, 0x35	; 53
     4d2:	89 e0       	ldi	r24, 0x09	; 9
     4d4:	93 e0       	ldi	r25, 0x03	; 3
     4d6:	4d d6       	rcall	.+3226   	; 0x1172 <_ZN7MCP2515C1EhmP8SPIClass>
	
}

void BTN_select_handler(){
	mainEvent = EVENT_REQ_BCALL;
}
     4d8:	1f 91       	pop	r17
     4da:	0f 91       	pop	r16
     4dc:	ef 90       	pop	r14
     4de:	cf 90       	pop	r12
     4e0:	08 95       	ret

000004e2 <_Z17stateHALT_handlerv>:
//void superStateRunning_handler(){
	// TODO: maybe one day i will do it right with C OOP and QPC HSM patterns, but now its GOOD ENOUGH
//}

void stateHALT_handler(){
	if(stateEntry == true){
     4e2:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <stateEntry>
     4e6:	88 23       	and	r24, r24
     4e8:	c9 f0       	breq	.+50     	; 0x51c <_Z17stateHALT_handlerv+0x3a>
		stateEntry = false;
     4ea:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <stateEntry>
		
		lcd.clear();
     4ee:	80 e1       	ldi	r24, 0x10	; 16
     4f0:	93 e0       	ldi	r25, 0x03	; 3
     4f2:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <_ZN13LiquidCrystal5clearEv>
		lcd.setCursor(0,0);
     4f6:	40 e0       	ldi	r20, 0x00	; 0
     4f8:	60 e0       	ldi	r22, 0x00	; 0
     4fa:	80 e1       	ldi	r24, 0x10	; 16
     4fc:	93 e0       	ldi	r25, 0x03	; 3
     4fe:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <_ZN13LiquidCrystal9setCursorEhh>
		lcd.print("WAITING ...");
     502:	6c e2       	ldi	r22, 0x2C	; 44
     504:	72 e0       	ldi	r23, 0x02	; 2
     506:	80 e1       	ldi	r24, 0x10	; 16
     508:	93 e0       	ldi	r25, 0x03	; 3
     50a:	6a d3       	rcall	.+1748   	; 0xbe0 <_ZN5Print5printEPKc>

		lcd.setCursor(0,1);
     50c:	41 e0       	ldi	r20, 0x01	; 1
     50e:	60 e0       	ldi	r22, 0x00	; 0
     510:	80 e1       	ldi	r24, 0x10	; 16
     512:	93 e0       	ldi	r25, 0x03	; 3
     514:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <_ZN13LiquidCrystal9setCursorEhh>
		
		speed = 0;
     518:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <speed>
	}
	
	switch(mainEvent){
     51c:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <mainEvent>
     520:	88 23       	and	r24, r24
     522:	41 f0       	breq	.+16     	; 0x534 <_Z17stateHALT_handlerv+0x52>
			
			break;
		}
		
		case EVENT_START_SIMULATION:{
			mainEvent = EVENT_IDLE;
     524:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <mainEvent>
		lcd.setCursor(0,1);
		
		speed = 0;
	}
	
	switch(mainEvent){
     528:	81 30       	cpi	r24, 0x01	; 1
     52a:	21 f4       	brne	.+8      	; 0x534 <_Z17stateHALT_handlerv+0x52>
		}
		
		case EVENT_START_SIMULATION:{
			mainEvent = EVENT_IDLE;
			
			mainState = STATE_IDLE;
     52c:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <mainState>
			stateExit = true;
     530:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <__data_end>
			mainEvent = EVENT_IDLE;
			break;
		}
	}
	
	if(stateExit == true){
     534:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <__data_end>
     538:	88 23       	and	r24, r24
     53a:	29 f0       	breq	.+10     	; 0x546 <_Z17stateHALT_handlerv+0x64>
		stateExit = false;
     53c:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <__data_end>
		stateEntry = true;
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <stateEntry>
     546:	08 95       	ret

00000548 <_Z17stateIDLE_handlerv>:
		
	}
}

void stateIDLE_handler(){
     548:	0f 93       	push	r16
     54a:	1f 93       	push	r17
	if(stateEntry == true){
     54c:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <stateEntry>
     550:	88 23       	and	r24, r24
     552:	d1 f0       	breq	.+52     	; 0x588 <_Z17stateIDLE_handlerv+0x40>
		stateEntry = false;
     554:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <stateEntry>
		
		lcd.clear();
     558:	80 e1       	ldi	r24, 0x10	; 16
     55a:	93 e0       	ldi	r25, 0x03	; 3
     55c:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <_ZN13LiquidCrystal5clearEv>
		lcd.setCursor(0,1);
     560:	41 e0       	ldi	r20, 0x01	; 1
     562:	60 e0       	ldi	r22, 0x00	; 0
     564:	80 e1       	ldi	r24, 0x10	; 16
     566:	93 e0       	ldi	r25, 0x03	; 3
     568:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <_ZN13LiquidCrystal9setCursorEhh>
		lcd.print("STATE     : IDLE");
     56c:	68 e3       	ldi	r22, 0x38	; 56
     56e:	72 e0       	ldi	r23, 0x02	; 2
     570:	80 e1       	ldi	r24, 0x10	; 16
     572:	93 e0       	ldi	r25, 0x03	; 3
     574:	35 d3       	rcall	.+1642   	; 0xbe0 <_ZN5Print5printEPKc>
		stateEntryIntialTime = millis();
     576:	ec d3       	rcall	.+2008   	; 0xd50 <millis>
     578:	60 93 de 02 	sts	0x02DE, r22	; 0x8002de <stateEntryIntialTime>
     57c:	70 93 df 02 	sts	0x02DF, r23	; 0x8002df <stateEntryIntialTime+0x1>
     580:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <stateEntryIntialTime+0x2>
     584:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <stateEntryIntialTime+0x3>
	}
	
	
	if((millis() - stateEntryIntialTime) % SPEED_REFRESH_TIME_MS == 0){
     588:	e3 d3       	rcall	.+1990   	; 0xd50 <millis>
     58a:	00 91 de 02 	lds	r16, 0x02DE	; 0x8002de <stateEntryIntialTime>
     58e:	10 91 df 02 	lds	r17, 0x02DF	; 0x8002df <stateEntryIntialTime+0x1>
     592:	20 91 e0 02 	lds	r18, 0x02E0	; 0x8002e0 <stateEntryIntialTime+0x2>
     596:	30 91 e1 02 	lds	r19, 0x02E1	; 0x8002e1 <stateEntryIntialTime+0x3>
     59a:	60 1b       	sub	r22, r16
     59c:	71 0b       	sbc	r23, r17
     59e:	82 0b       	sbc	r24, r18
     5a0:	93 0b       	sbc	r25, r19
     5a2:	28 ec       	ldi	r18, 0xC8	; 200
     5a4:	30 e0       	ldi	r19, 0x00	; 0
     5a6:	40 e0       	ldi	r20, 0x00	; 0
     5a8:	50 e0       	ldi	r21, 0x00	; 0
     5aa:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <__udivmodsi4>
     5ae:	67 2b       	or	r22, r23
     5b0:	68 2b       	or	r22, r24
     5b2:	69 2b       	or	r22, r25
     5b4:	d9 f4       	brne	.+54     	; 0x5ec <_Z17stateIDLE_handlerv+0xa4>
		stateEntryIntialTime = millis();
     5b6:	cc d3       	rcall	.+1944   	; 0xd50 <millis>
     5b8:	60 93 de 02 	sts	0x02DE, r22	; 0x8002de <stateEntryIntialTime>
     5bc:	70 93 df 02 	sts	0x02DF, r23	; 0x8002df <stateEntryIntialTime+0x1>
     5c0:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <stateEntryIntialTime+0x2>
     5c4:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <stateEntryIntialTime+0x3>
     5c8:	40 e0       	ldi	r20, 0x00	; 0
		lcd.setCursor(0,0);
     5ca:	60 e0       	ldi	r22, 0x00	; 0
     5cc:	80 e1       	ldi	r24, 0x10	; 16
     5ce:	93 e0       	ldi	r25, 0x03	; 3
     5d0:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <_ZN13LiquidCrystal9setCursorEhh>
     5d4:	69 e4       	ldi	r22, 0x49	; 73
		lcd.print("SPEED(KMH): ");
     5d6:	72 e0       	ldi	r23, 0x02	; 2
     5d8:	80 e1       	ldi	r24, 0x10	; 16
     5da:	93 e0       	ldi	r25, 0x03	; 3
     5dc:	01 d3       	rcall	.+1538   	; 0xbe0 <_ZN5Print5printEPKc>
     5de:	4a e0       	ldi	r20, 0x0A	; 10
		lcd.print(speed);
     5e0:	50 e0       	ldi	r21, 0x00	; 0
     5e2:	60 91 08 03 	lds	r22, 0x0308	; 0x800308 <speed>
     5e6:	80 e1       	ldi	r24, 0x10	; 16
     5e8:	93 e0       	ldi	r25, 0x03	; 3
     5ea:	62 d3       	rcall	.+1732   	; 0xcb0 <_ZN5Print5printEhi>
     5ec:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <mainEvent>
	}

	switch(mainEvent){
     5f0:	83 30       	cpi	r24, 0x03	; 3
     5f2:	11 f1       	breq	.+68     	; 0x638 <_Z17stateIDLE_handlerv+0xf0>
     5f4:	58 f4       	brcc	.+22     	; 0x60c <_Z17stateIDLE_handlerv+0xc4>
     5f6:	88 23       	and	r24, r24
     5f8:	09 f4       	brne	.+2      	; 0x5fc <_Z17stateIDLE_handlerv+0xb4>
     5fa:	63 c0       	rjmp	.+198    	; 0x6c2 <_Z17stateIDLE_handlerv+0x17a>
     5fc:	82 30       	cpi	r24, 0x02	; 2
     5fe:	09 f0       	breq	.+2      	; 0x602 <_Z17stateIDLE_handlerv+0xba>
     600:	5e c0       	rjmp	.+188    	; 0x6be <_Z17stateIDLE_handlerv+0x176>
     602:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <mainEvent>
			Serial.println("OVER HERE..")	;
			break;
		}
		
		case EVENT_KILL_SIMULATION:{
			mainEvent = EVENT_IDLE;
     606:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <mainState>
			
			mainState = STATE_HALT;
     60a:	30 c0       	rjmp	.+96     	; 0x66c <_Z17stateIDLE_handlerv+0x124>
     60c:	86 30       	cpi	r24, 0x06	; 6
		lcd.setCursor(0,0);
		lcd.print("SPEED(KMH): ");
		lcd.print(speed);
	}

	switch(mainEvent){
     60e:	19 f1       	breq	.+70     	; 0x656 <_Z17stateIDLE_handlerv+0x10e>
     610:	87 30       	cpi	r24, 0x07	; 7
     612:	81 f1       	breq	.+96     	; 0x674 <_Z17stateIDLE_handlerv+0x12c>
     614:	84 30       	cpi	r24, 0x04	; 4
     616:	09 f0       	breq	.+2      	; 0x61a <_Z17stateIDLE_handlerv+0xd2>
     618:	52 c0       	rjmp	.+164    	; 0x6be <_Z17stateIDLE_handlerv+0x176>
     61a:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <mainEvent>
			speed = frameResponse.data[0];
			break;
		}

		case EVENT_BCALL:{
			mainEvent = EVENT_IDLE;
     61e:	80 e1       	ldi	r24, 0x10	; 16
			
			lcd.clear();
     620:	93 e0       	ldi	r25, 0x03	; 3
     622:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <_ZN13LiquidCrystal5clearEv>
     626:	40 e0       	ldi	r20, 0x00	; 0
			lcd.setCursor(0,0);
     628:	60 e0       	ldi	r22, 0x00	; 0
     62a:	80 e1       	ldi	r24, 0x10	; 16
     62c:	93 e0       	ldi	r25, 0x03	; 3
     62e:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <_ZN13LiquidCrystal9setCursorEhh>
     632:	65 e6       	ldi	r22, 0x65	; 101
			lcd.print("SOS TRIG: MANUAL");
     634:	72 e0       	ldi	r23, 0x02	; 2
     636:	14 c0       	rjmp	.+40     	; 0x660 <_Z17stateIDLE_handlerv+0x118>
     638:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <mainEvent>
			
			break;
		}
		
		case EVENT_ECALL:{
			mainEvent = EVENT_IDLE;
     63c:	80 e1       	ldi	r24, 0x10	; 16
			
			lcd.clear();
     63e:	93 e0       	ldi	r25, 0x03	; 3
     640:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <_ZN13LiquidCrystal5clearEv>
     644:	40 e0       	ldi	r20, 0x00	; 0
			lcd.setCursor(0,0);
     646:	60 e0       	ldi	r22, 0x00	; 0
     648:	80 e1       	ldi	r24, 0x10	; 16
     64a:	93 e0       	ldi	r25, 0x03	; 3
     64c:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <_ZN13LiquidCrystal9setCursorEhh>
     650:	66 e5       	ldi	r22, 0x56	; 86
			lcd.print("SOS TRIG: AUTO");
     652:	72 e0       	ldi	r23, 0x02	; 2
     654:	05 c0       	rjmp	.+10     	; 0x660 <_Z17stateIDLE_handlerv+0x118>
     656:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <frameResponse+0x8>
		}
		
		
		
		case EVENT_SPEED:{
			speed = frameResponse.data[0];
     65a:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <speed>
			break;
     65e:	31 c0       	rjmp	.+98     	; 0x6c2 <_Z17stateIDLE_handlerv+0x17a>
		case EVENT_BCALL:{
			mainEvent = EVENT_IDLE;
			
			lcd.clear();
			lcd.setCursor(0,0);
			lcd.print("SOS TRIG: MANUAL");
     660:	80 e1       	ldi	r24, 0x10	; 16
     662:	93 e0       	ldi	r25, 0x03	; 3
     664:	bd d2       	rcall	.+1402   	; 0xbe0 <_ZN5Print5printEPKc>
     666:	82 e0       	ldi	r24, 0x02	; 2
				
			mainState = STATE_ACTIVE;
     668:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <mainState>
     66c:	81 e0       	ldi	r24, 0x01	; 1
			stateExit = true;
     66e:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <__data_end>
     672:	27 c0       	rjmp	.+78     	; 0x6c2 <_Z17stateIDLE_handlerv+0x17a>
			
			break;
     674:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <mainEvent>
		}
		
		case EVENT_REQ_BCALL:{
			mainEvent = EVENT_IDLE;
     678:	80 e1       	ldi	r24, 0x10	; 16
			
			frameRequest.can_id = CAN_MSG_SOS_ID;
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	a0 e0       	ldi	r26, 0x00	; 0
     67e:	b0 e0       	ldi	r27, 0x00	; 0
     680:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <frameRequest>
     684:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <frameRequest+0x1>
     688:	a0 93 ea 02 	sts	0x02EA, r26	; 0x8002ea <frameRequest+0x2>
     68c:	b0 93 eb 02 	sts	0x02EB, r27	; 0x8002eb <frameRequest+0x3>
     690:	81 e0       	ldi	r24, 0x01	; 1
			frameRequest.can_dlc = CAN_MSG_DLC;
     692:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <frameRequest+0x4>
     696:	83 e0       	ldi	r24, 0x03	; 3
			frameRequest.data[0] = CAN_MSG_SOS_DATA_REQUEST_BCALL;
     698:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <frameRequest+0x8>
     69c:	68 ee       	ldi	r22, 0xE8	; 232
			
			mcp2515.sendMessage(&frameRequest);
     69e:	72 e0       	ldi	r23, 0x02	; 2
     6a0:	89 e0       	ldi	r24, 0x09	; 9
     6a2:	93 e0       	ldi	r25, 0x03	; 3
     6a4:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <_ZN7MCP251511sendMessageEPK9can_frame>
			
			Serial.println("OVER HERE.");
     6a8:	66 e7       	ldi	r22, 0x76	; 118
     6aa:	72 e0       	ldi	r23, 0x02	; 2
     6ac:	88 e2       	ldi	r24, 0x28	; 40
     6ae:	93 e0       	ldi	r25, 0x03	; 3
     6b0:	9b d2       	rcall	.+1334   	; 0xbe8 <_ZN5Print7printlnEPKc>
			Serial.println("OVER HERE..")	;
     6b2:	61 e8       	ldi	r22, 0x81	; 129
     6b4:	72 e0       	ldi	r23, 0x02	; 2
     6b6:	88 e2       	ldi	r24, 0x28	; 40
     6b8:	93 e0       	ldi	r25, 0x03	; 3
     6ba:	96 d2       	rcall	.+1324   	; 0xbe8 <_ZN5Print7printlnEPKc>
     6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <_Z17stateIDLE_handlerv+0x17a>
			break;
     6be:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <mainEvent>
			
			break;	
		}
			
		default:{
			mainEvent = EVENT_IDLE;
     6c2:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <__data_end>
	
	

		
	
	if(stateExit == true){
     6c6:	88 23       	and	r24, r24
     6c8:	29 f0       	breq	.+10     	; 0x6d4 <_Z17stateIDLE_handlerv+0x18c>
     6ca:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <__data_end>
		stateExit = false;
     6ce:	81 e0       	ldi	r24, 0x01	; 1
		stateEntry = true;
     6d0:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <stateEntry>
     6d4:	1f 91       	pop	r17
		
	}
	
}
     6d6:	0f 91       	pop	r16
     6d8:	08 95       	ret

000006da <_Z19stateACTIVE_handlerv>:
     6da:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <stateEntry>


void stateACTIVE_handler(){
	if(stateEntry == true){
     6de:	88 23       	and	r24, r24
     6e0:	69 f0       	breq	.+26     	; 0x6fc <_Z19stateACTIVE_handlerv+0x22>
		stateEntry = false;
     6e2:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <stateEntry>
		
		lcd.setCursor(0,1);
     6e6:	41 e0       	ldi	r20, 0x01	; 1
     6e8:	60 e0       	ldi	r22, 0x00	; 0
     6ea:	80 e1       	ldi	r24, 0x10	; 16
     6ec:	93 e0       	ldi	r25, 0x03	; 3
     6ee:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <_ZN13LiquidCrystal9setCursorEhh>
		lcd.print("STATE   : ACTIVE");
     6f2:	6d e8       	ldi	r22, 0x8D	; 141
     6f4:	72 e0       	ldi	r23, 0x02	; 2
     6f6:	80 e1       	ldi	r24, 0x10	; 16
     6f8:	93 e0       	ldi	r25, 0x03	; 3
     6fa:	72 d2       	rcall	.+1252   	; 0xbe0 <_ZN5Print5printEPKc>
		
	}
	
	
	switch(mainEvent){
     6fc:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <mainEvent>
     700:	82 30       	cpi	r24, 0x02	; 2
     702:	69 f0       	breq	.+26     	; 0x71e <_Z19stateACTIVE_handlerv+0x44>
     704:	85 30       	cpi	r24, 0x05	; 5
     706:	29 f0       	breq	.+10     	; 0x712 <_Z19stateACTIVE_handlerv+0x38>
     708:	88 23       	and	r24, r24
     70a:	81 f0       	breq	.+32     	; 0x72c <_Z19stateACTIVE_handlerv+0x52>
			
			break;
		}

		default:{
			mainEvent = EVENT_IDLE;
     70c:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <mainEvent>
			
			break;
     710:	0d c0       	rjmp	.+26     	; 0x72c <_Z19stateACTIVE_handlerv+0x52>
			
			break;
		}
		
		case EVENT_END:{
			mainEvent = EVENT_IDLE;
     712:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <mainEvent>
			
			mainState = STATE_IDLE;
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <mainState>
     71c:	05 c0       	rjmp	.+10     	; 0x728 <_Z19stateACTIVE_handlerv+0x4e>
			
			break;
		}
		
		case EVENT_KILL_SIMULATION:{
			mainEvent = EVENT_IDLE;
     71e:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <mainEvent>
			
			mainState = STATE_HALT;
     722:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <mainState>
			stateExit = true;
     726:	81 e0       	ldi	r24, 0x01	; 1
     728:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <__data_end>
			break;
		}
	}
	

	if(stateExit == true){
     72c:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <__data_end>
     730:	88 23       	and	r24, r24
     732:	29 f0       	breq	.+10     	; 0x73e <_Z19stateACTIVE_handlerv+0x64>
		stateExit = false;
     734:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <__data_end>
		stateEntry = true;
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <stateEntry>
     73e:	08 95       	ret

00000740 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     740:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     742:	91 8d       	ldd	r25, Z+25	; 0x19
     744:	22 8d       	ldd	r18, Z+26	; 0x1a
     746:	89 2f       	mov	r24, r25
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	80 5c       	subi	r24, 0xC0	; 192
     74c:	9f 4f       	sbci	r25, 0xFF	; 255
     74e:	82 1b       	sub	r24, r18
     750:	91 09       	sbc	r25, r1
}
     752:	8f 73       	andi	r24, 0x3F	; 63
     754:	99 27       	eor	r25, r25
     756:	08 95       	ret

00000758 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     758:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     75a:	91 8d       	ldd	r25, Z+25	; 0x19
     75c:	82 8d       	ldd	r24, Z+26	; 0x1a
     75e:	98 17       	cp	r25, r24
     760:	31 f0       	breq	.+12     	; 0x76e <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     762:	82 8d       	ldd	r24, Z+26	; 0x1a
     764:	e8 0f       	add	r30, r24
     766:	f1 1d       	adc	r31, r1
     768:	85 8d       	ldd	r24, Z+29	; 0x1d
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     76e:	8f ef       	ldi	r24, 0xFF	; 255
     770:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     772:	08 95       	ret

00000774 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     774:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     776:	91 8d       	ldd	r25, Z+25	; 0x19
     778:	82 8d       	ldd	r24, Z+26	; 0x1a
     77a:	98 17       	cp	r25, r24
     77c:	61 f0       	breq	.+24     	; 0x796 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     77e:	82 8d       	ldd	r24, Z+26	; 0x1a
     780:	df 01       	movw	r26, r30
     782:	a8 0f       	add	r26, r24
     784:	b1 1d       	adc	r27, r1
     786:	5d 96       	adiw	r26, 0x1d	; 29
     788:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     78a:	92 8d       	ldd	r25, Z+26	; 0x1a
     78c:	9f 5f       	subi	r25, 0xFF	; 255
     78e:	9f 73       	andi	r25, 0x3F	; 63
     790:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     796:	8f ef       	ldi	r24, 0xFF	; 255
     798:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     79a:	08 95       	ret

0000079c <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     79c:	fc 01       	movw	r30, r24
     79e:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     7a0:	44 8d       	ldd	r20, Z+28	; 0x1c
     7a2:	25 2f       	mov	r18, r21
     7a4:	30 e0       	ldi	r19, 0x00	; 0
     7a6:	84 2f       	mov	r24, r20
     7a8:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     7aa:	82 1b       	sub	r24, r18
     7ac:	93 0b       	sbc	r25, r19
     7ae:	54 17       	cp	r21, r20
     7b0:	10 f0       	brcs	.+4      	; 0x7b6 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     7b2:	cf 96       	adiw	r24, 0x3f	; 63
     7b4:	08 95       	ret
  return tail - head - 1;
     7b6:	01 97       	sbiw	r24, 0x01	; 1
}
     7b8:	08 95       	ret

000007ba <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     7ba:	80 e7       	ldi	r24, 0x70	; 112
     7bc:	95 e0       	ldi	r25, 0x05	; 5
     7be:	89 2b       	or	r24, r25
     7c0:	39 f0       	breq	.+14     	; 0x7d0 <_Z14serialEventRunv+0x16>
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	89 2b       	or	r24, r25
     7c8:	19 f0       	breq	.+6      	; 0x7d0 <_Z14serialEventRunv+0x16>
     7ca:	8a d1       	rcall	.+788    	; 0xae0 <_Z17Serial0_availablev>
     7cc:	81 11       	cpse	r24, r1
     7ce:	25 c0       	rjmp	.+74     	; 0x81a <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	89 2b       	or	r24, r25
     7d6:	41 f0       	breq	.+16     	; 0x7e8 <_Z14serialEventRunv+0x2e>
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	89 2b       	or	r24, r25
     7de:	21 f0       	breq	.+8      	; 0x7e8 <_Z14serialEventRunv+0x2e>
     7e0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     7e4:	81 11       	cpse	r24, r1
     7e6:	1c c0       	rjmp	.+56     	; 0x820 <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	89 2b       	or	r24, r25
     7ee:	41 f0       	breq	.+16     	; 0x800 <_Z14serialEventRunv+0x46>
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	89 2b       	or	r24, r25
     7f6:	21 f0       	breq	.+8      	; 0x800 <_Z14serialEventRunv+0x46>
     7f8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     7fc:	81 11       	cpse	r24, r1
     7fe:	13 c0       	rjmp	.+38     	; 0x826 <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	89 2b       	or	r24, r25
     806:	a1 f0       	breq	.+40     	; 0x830 <_Z14serialEventRunv+0x76>
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	89 2b       	or	r24, r25
     80e:	81 f0       	breq	.+32     	; 0x830 <_Z14serialEventRunv+0x76>
     810:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     814:	81 11       	cpse	r24, r1
     816:	0a c0       	rjmp	.+20     	; 0x82c <_Z14serialEventRunv+0x72>
     818:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     81a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     81e:	d8 cf       	rjmp	.-80     	; 0x7d0 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     820:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     824:	e1 cf       	rjmp	.-62     	; 0x7e8 <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     826:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     82a:	ea cf       	rjmp	.-44     	; 0x800 <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     82c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     830:	08 95       	ret

00000832 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     832:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     834:	84 8d       	ldd	r24, Z+28	; 0x1c
     836:	df 01       	movw	r26, r30
     838:	a8 0f       	add	r26, r24
     83a:	b1 1d       	adc	r27, r1
     83c:	a3 5a       	subi	r26, 0xA3	; 163
     83e:	bf 4f       	sbci	r27, 0xFF	; 255
     840:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     842:	84 8d       	ldd	r24, Z+28	; 0x1c
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	01 96       	adiw	r24, 0x01	; 1
     848:	8f 73       	andi	r24, 0x3F	; 63
     84a:	99 27       	eor	r25, r25
     84c:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     84e:	a6 89       	ldd	r26, Z+22	; 0x16
     850:	b7 89       	ldd	r27, Z+23	; 0x17
     852:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     854:	a0 89       	ldd	r26, Z+16	; 0x10
     856:	b1 89       	ldd	r27, Z+17	; 0x11
     858:	8c 91       	ld	r24, X
     85a:	83 70       	andi	r24, 0x03	; 3
     85c:	80 64       	ori	r24, 0x40	; 64
     85e:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     860:	93 8d       	ldd	r25, Z+27	; 0x1b
     862:	84 8d       	ldd	r24, Z+28	; 0x1c
     864:	98 13       	cpse	r25, r24
     866:	06 c0       	rjmp	.+12     	; 0x874 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     868:	02 88       	ldd	r0, Z+18	; 0x12
     86a:	f3 89       	ldd	r31, Z+19	; 0x13
     86c:	e0 2d       	mov	r30, r0
     86e:	80 81       	ld	r24, Z
     870:	8f 7d       	andi	r24, 0xDF	; 223
     872:	80 83       	st	Z, r24
     874:	08 95       	ret

00000876 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     876:	ef 92       	push	r14
     878:	ff 92       	push	r15
     87a:	0f 93       	push	r16
     87c:	1f 93       	push	r17
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
     882:	ec 01       	movw	r28, r24
  _written = true;
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     888:	9b 8d       	ldd	r25, Y+27	; 0x1b
     88a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     88c:	98 13       	cpse	r25, r24
     88e:	05 c0       	rjmp	.+10     	; 0x89a <_ZN14HardwareSerial5writeEh+0x24>
     890:	e8 89       	ldd	r30, Y+16	; 0x10
     892:	f9 89       	ldd	r31, Y+17	; 0x11
     894:	80 81       	ld	r24, Z
     896:	85 fd       	sbrc	r24, 5
     898:	25 c0       	rjmp	.+74     	; 0x8e4 <_ZN14HardwareSerial5writeEh+0x6e>
     89a:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     89c:	0b 8d       	ldd	r16, Y+27	; 0x1b
     89e:	10 e0       	ldi	r17, 0x00	; 0
     8a0:	0f 5f       	subi	r16, 0xFF	; 255
     8a2:	1f 4f       	sbci	r17, 0xFF	; 255
     8a4:	0f 73       	andi	r16, 0x3F	; 63
     8a6:	11 27       	eor	r17, r17
     8a8:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     8aa:	8c 8d       	ldd	r24, Y+28	; 0x1c
     8ac:	e8 12       	cpse	r14, r24
     8ae:	0b c0       	rjmp	.+22     	; 0x8c6 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
     8b0:	0f b6       	in	r0, 0x3f	; 63
     8b2:	07 fc       	sbrc	r0, 7
     8b4:	fa cf       	rjmp	.-12     	; 0x8aa <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     8b6:	e8 89       	ldd	r30, Y+16	; 0x10
     8b8:	f9 89       	ldd	r31, Y+17	; 0x11
     8ba:	80 81       	ld	r24, Z
     8bc:	85 ff       	sbrs	r24, 5
     8be:	f5 cf       	rjmp	.-22     	; 0x8aa <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     8c0:	ce 01       	movw	r24, r28
     8c2:	b7 df       	rcall	.-146    	; 0x832 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     8c4:	f2 cf       	rjmp	.-28     	; 0x8aa <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     8c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     8c8:	fe 01       	movw	r30, r28
     8ca:	e8 0f       	add	r30, r24
     8cc:	f1 1d       	adc	r31, r1
     8ce:	e3 5a       	subi	r30, 0xA3	; 163
     8d0:	ff 4f       	sbci	r31, 0xFF	; 255
     8d2:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     8d4:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     8d6:	f8 94       	cli
    _tx_buffer_head = i;
     8d8:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     8da:	ea 89       	ldd	r30, Y+18	; 0x12
     8dc:	fb 89       	ldd	r31, Y+19	; 0x13
     8de:	80 81       	ld	r24, Z
     8e0:	80 62       	ori	r24, 0x20	; 32
     8e2:	0a c0       	rjmp	.+20     	; 0x8f8 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     8e4:	9f b7       	in	r25, 0x3f	; 63
     8e6:	f8 94       	cli
      *_udr = c;
     8e8:	ee 89       	ldd	r30, Y+22	; 0x16
     8ea:	ff 89       	ldd	r31, Y+23	; 0x17
     8ec:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     8ee:	e8 89       	ldd	r30, Y+16	; 0x10
     8f0:	f9 89       	ldd	r31, Y+17	; 0x11
     8f2:	80 81       	ld	r24, Z
     8f4:	83 70       	andi	r24, 0x03	; 3
     8f6:	80 64       	ori	r24, 0x40	; 64
     8f8:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     8fa:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	df 91       	pop	r29
     902:	cf 91       	pop	r28
     904:	1f 91       	pop	r17
     906:	0f 91       	pop	r16
     908:	ff 90       	pop	r15
     90a:	ef 90       	pop	r14
     90c:	08 95       	ret

0000090e <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     90e:	cf 93       	push	r28
     910:	df 93       	push	r29
     912:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     914:	88 8d       	ldd	r24, Y+24	; 0x18
     916:	88 23       	and	r24, r24
     918:	c1 f0       	breq	.+48     	; 0x94a <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     91a:	ea 89       	ldd	r30, Y+18	; 0x12
     91c:	fb 89       	ldd	r31, Y+19	; 0x13
     91e:	80 81       	ld	r24, Z
     920:	85 fd       	sbrc	r24, 5
     922:	05 c0       	rjmp	.+10     	; 0x92e <_ZN14HardwareSerial5flushEv+0x20>
     924:	a8 89       	ldd	r26, Y+16	; 0x10
     926:	b9 89       	ldd	r27, Y+17	; 0x11
     928:	8c 91       	ld	r24, X
     92a:	86 fd       	sbrc	r24, 6
     92c:	0e c0       	rjmp	.+28     	; 0x94a <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     92e:	0f b6       	in	r0, 0x3f	; 63
     930:	07 fc       	sbrc	r0, 7
     932:	f5 cf       	rjmp	.-22     	; 0x91e <_ZN14HardwareSerial5flushEv+0x10>
     934:	80 81       	ld	r24, Z
     936:	85 ff       	sbrs	r24, 5
     938:	f2 cf       	rjmp	.-28     	; 0x91e <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     93a:	a8 89       	ldd	r26, Y+16	; 0x10
     93c:	b9 89       	ldd	r27, Y+17	; 0x11
     93e:	8c 91       	ld	r24, X
     940:	85 ff       	sbrs	r24, 5
     942:	ed cf       	rjmp	.-38     	; 0x91e <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     944:	ce 01       	movw	r24, r28
     946:	75 df       	rcall	.-278    	; 0x832 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     948:	e8 cf       	rjmp	.-48     	; 0x91a <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	08 95       	ret

00000950 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     950:	cf 92       	push	r12
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	1f 93       	push	r17
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	ec 01       	movw	r28, r24
     960:	6a 01       	movw	r12, r20
     962:	7b 01       	movw	r14, r22
     964:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     966:	e8 89       	ldd	r30, Y+16	; 0x10
     968:	f9 89       	ldd	r31, Y+17	; 0x11
     96a:	82 e0       	ldi	r24, 0x02	; 2
     96c:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     96e:	41 15       	cp	r20, r1
     970:	51 4e       	sbci	r21, 0xE1	; 225
     972:	61 05       	cpc	r22, r1
     974:	71 05       	cpc	r23, r1
     976:	b1 f0       	breq	.+44     	; 0x9a4 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     978:	60 e0       	ldi	r22, 0x00	; 0
     97a:	79 e0       	ldi	r23, 0x09	; 9
     97c:	8d e3       	ldi	r24, 0x3D	; 61
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	a7 01       	movw	r20, r14
     982:	96 01       	movw	r18, r12
     984:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <__udivmodsi4>
     988:	da 01       	movw	r26, r20
     98a:	c9 01       	movw	r24, r18
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	a1 09       	sbc	r26, r1
     990:	b1 09       	sbc	r27, r1
     992:	b6 95       	lsr	r27
     994:	a7 95       	ror	r26
     996:	97 95       	ror	r25
     998:	87 95       	ror	r24
     99a:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     99c:	21 15       	cp	r18, r1
     99e:	80 e1       	ldi	r24, 0x10	; 16
     9a0:	38 07       	cpc	r19, r24
     9a2:	a8 f0       	brcs	.+42     	; 0x9ce <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     9a4:	e8 89       	ldd	r30, Y+16	; 0x10
     9a6:	f9 89       	ldd	r31, Y+17	; 0x11
     9a8:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     9aa:	60 e8       	ldi	r22, 0x80	; 128
     9ac:	74 e8       	ldi	r23, 0x84	; 132
     9ae:	8e e1       	ldi	r24, 0x1E	; 30
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	a7 01       	movw	r20, r14
     9b4:	96 01       	movw	r18, r12
     9b6:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <__udivmodsi4>
     9ba:	da 01       	movw	r26, r20
     9bc:	c9 01       	movw	r24, r18
     9be:	01 97       	sbiw	r24, 0x01	; 1
     9c0:	a1 09       	sbc	r26, r1
     9c2:	b1 09       	sbc	r27, r1
     9c4:	b6 95       	lsr	r27
     9c6:	a7 95       	ror	r26
     9c8:	97 95       	ror	r25
     9ca:	87 95       	ror	r24
     9cc:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     9ce:	ec 85       	ldd	r30, Y+12	; 0x0c
     9d0:	fd 85       	ldd	r31, Y+13	; 0x0d
     9d2:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     9d4:	ee 85       	ldd	r30, Y+14	; 0x0e
     9d6:	ff 85       	ldd	r31, Y+15	; 0x0f
     9d8:	20 83       	st	Z, r18

  _written = false;
     9da:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     9dc:	ec 89       	ldd	r30, Y+20	; 0x14
     9de:	fd 89       	ldd	r31, Y+21	; 0x15
     9e0:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     9e2:	ea 89       	ldd	r30, Y+18	; 0x12
     9e4:	fb 89       	ldd	r31, Y+19	; 0x13
     9e6:	80 81       	ld	r24, Z
     9e8:	80 61       	ori	r24, 0x10	; 16
     9ea:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     9ec:	ea 89       	ldd	r30, Y+18	; 0x12
     9ee:	fb 89       	ldd	r31, Y+19	; 0x13
     9f0:	80 81       	ld	r24, Z
     9f2:	88 60       	ori	r24, 0x08	; 8
     9f4:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     9f6:	ea 89       	ldd	r30, Y+18	; 0x12
     9f8:	fb 89       	ldd	r31, Y+19	; 0x13
     9fa:	80 81       	ld	r24, Z
     9fc:	80 68       	ori	r24, 0x80	; 128
     9fe:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     a00:	ea 89       	ldd	r30, Y+18	; 0x12
     a02:	fb 89       	ldd	r31, Y+19	; 0x13
     a04:	80 81       	ld	r24, Z
     a06:	8f 7d       	andi	r24, 0xDF	; 223
     a08:	80 83       	st	Z, r24
}
     a0a:	df 91       	pop	r29
     a0c:	cf 91       	pop	r28
     a0e:	1f 91       	pop	r17
     a10:	ff 90       	pop	r15
     a12:	ef 90       	pop	r14
     a14:	df 90       	pop	r13
     a16:	cf 90       	pop	r12
     a18:	08 95       	ret

00000a1a <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	08 95       	ret

00000a20 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     a20:	08 95       	ret

00000a22 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     a22:	1f 92       	push	r1
     a24:	0f 92       	push	r0
     a26:	0f b6       	in	r0, 0x3f	; 63
     a28:	0f 92       	push	r0
     a2a:	11 24       	eor	r1, r1
     a2c:	0b b6       	in	r0, 0x3b	; 59
     a2e:	0f 92       	push	r0
     a30:	2f 93       	push	r18
     a32:	8f 93       	push	r24
     a34:	9f 93       	push	r25
     a36:	ef 93       	push	r30
     a38:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     a3a:	e0 91 38 03 	lds	r30, 0x0338	; 0x800338 <Serial+0x10>
     a3e:	f0 91 39 03 	lds	r31, 0x0339	; 0x800339 <Serial+0x11>
     a42:	80 81       	ld	r24, Z
     a44:	e0 91 3e 03 	lds	r30, 0x033E	; 0x80033e <Serial+0x16>
     a48:	f0 91 3f 03 	lds	r31, 0x033F	; 0x80033f <Serial+0x17>
     a4c:	82 fd       	sbrc	r24, 2
     a4e:	12 c0       	rjmp	.+36     	; 0xa74 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     a50:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     a52:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <Serial+0x19>
     a56:	8f 5f       	subi	r24, 0xFF	; 255
     a58:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     a5a:	20 91 42 03 	lds	r18, 0x0342	; 0x800342 <Serial+0x1a>
     a5e:	82 17       	cp	r24, r18
     a60:	51 f0       	breq	.+20     	; 0xa76 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
     a62:	e0 91 41 03 	lds	r30, 0x0341	; 0x800341 <Serial+0x19>
     a66:	f0 e0       	ldi	r31, 0x00	; 0
     a68:	e8 5d       	subi	r30, 0xD8	; 216
     a6a:	fc 4f       	sbci	r31, 0xFC	; 252
     a6c:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     a6e:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <Serial+0x19>
     a72:	01 c0       	rjmp	.+2      	; 0xa76 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     a74:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     a76:	ff 91       	pop	r31
     a78:	ef 91       	pop	r30
     a7a:	9f 91       	pop	r25
     a7c:	8f 91       	pop	r24
     a7e:	2f 91       	pop	r18
     a80:	0f 90       	pop	r0
     a82:	0b be       	out	0x3b, r0	; 59
     a84:	0f 90       	pop	r0
     a86:	0f be       	out	0x3f, r0	; 63
     a88:	0f 90       	pop	r0
     a8a:	1f 90       	pop	r1
     a8c:	18 95       	reti

00000a8e <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     a8e:	1f 92       	push	r1
     a90:	0f 92       	push	r0
     a92:	0f b6       	in	r0, 0x3f	; 63
     a94:	0f 92       	push	r0
     a96:	11 24       	eor	r1, r1
     a98:	0b b6       	in	r0, 0x3b	; 59
     a9a:	0f 92       	push	r0
     a9c:	2f 93       	push	r18
     a9e:	3f 93       	push	r19
     aa0:	4f 93       	push	r20
     aa2:	5f 93       	push	r21
     aa4:	6f 93       	push	r22
     aa6:	7f 93       	push	r23
     aa8:	8f 93       	push	r24
     aaa:	9f 93       	push	r25
     aac:	af 93       	push	r26
     aae:	bf 93       	push	r27
     ab0:	ef 93       	push	r30
     ab2:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     ab4:	88 e2       	ldi	r24, 0x28	; 40
     ab6:	93 e0       	ldi	r25, 0x03	; 3
     ab8:	bc de       	rcall	.-648    	; 0x832 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     aba:	ff 91       	pop	r31
     abc:	ef 91       	pop	r30
     abe:	bf 91       	pop	r27
     ac0:	af 91       	pop	r26
     ac2:	9f 91       	pop	r25
     ac4:	8f 91       	pop	r24
     ac6:	7f 91       	pop	r23
     ac8:	6f 91       	pop	r22
     aca:	5f 91       	pop	r21
     acc:	4f 91       	pop	r20
     ace:	3f 91       	pop	r19
     ad0:	2f 91       	pop	r18
     ad2:	0f 90       	pop	r0
     ad4:	0b be       	out	0x3b, r0	; 59
     ad6:	0f 90       	pop	r0
     ad8:	0f be       	out	0x3f, r0	; 63
     ada:	0f 90       	pop	r0
     adc:	1f 90       	pop	r1
     ade:	18 95       	reti

00000ae0 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     ae0:	88 e2       	ldi	r24, 0x28	; 40
     ae2:	93 e0       	ldi	r25, 0x03	; 3
     ae4:	2d de       	rcall	.-934    	; 0x740 <_ZN14HardwareSerial9availableEv>
     ae6:	21 e0       	ldi	r18, 0x01	; 1
     ae8:	89 2b       	or	r24, r25
     aea:	09 f4       	brne	.+2      	; 0xaee <_Z17Serial0_availablev+0xe>
     aec:	20 e0       	ldi	r18, 0x00	; 0
}
     aee:	82 2f       	mov	r24, r18
     af0:	08 95       	ret

00000af2 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     af2:	e8 e2       	ldi	r30, 0x28	; 40
     af4:	f3 e0       	ldi	r31, 0x03	; 3
     af6:	13 82       	std	Z+3, r1	; 0x03
     af8:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     afa:	88 ee       	ldi	r24, 0xE8	; 232
     afc:	93 e0       	ldi	r25, 0x03	; 3
     afe:	a0 e0       	ldi	r26, 0x00	; 0
     b00:	b0 e0       	ldi	r27, 0x00	; 0
     b02:	84 83       	std	Z+4, r24	; 0x04
     b04:	95 83       	std	Z+5, r25	; 0x05
     b06:	a6 83       	std	Z+6, r26	; 0x06
     b08:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     b0a:	82 ea       	ldi	r24, 0xA2	; 162
     b0c:	92 e0       	ldi	r25, 0x02	; 2
     b0e:	91 83       	std	Z+1, r25	; 0x01
     b10:	80 83       	st	Z, r24
     b12:	85 ec       	ldi	r24, 0xC5	; 197
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	95 87       	std	Z+13, r25	; 0x0d
     b18:	84 87       	std	Z+12, r24	; 0x0c
     b1a:	84 ec       	ldi	r24, 0xC4	; 196
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	97 87       	std	Z+15, r25	; 0x0f
     b20:	86 87       	std	Z+14, r24	; 0x0e
     b22:	80 ec       	ldi	r24, 0xC0	; 192
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	91 8b       	std	Z+17, r25	; 0x11
     b28:	80 8b       	std	Z+16, r24	; 0x10
     b2a:	81 ec       	ldi	r24, 0xC1	; 193
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	93 8b       	std	Z+19, r25	; 0x13
     b30:	82 8b       	std	Z+18, r24	; 0x12
     b32:	82 ec       	ldi	r24, 0xC2	; 194
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	95 8b       	std	Z+21, r25	; 0x15
     b38:	84 8b       	std	Z+20, r24	; 0x14
     b3a:	86 ec       	ldi	r24, 0xC6	; 198
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	97 8b       	std	Z+23, r25	; 0x17
     b40:	86 8b       	std	Z+22, r24	; 0x16
     b42:	11 8e       	std	Z+25, r1	; 0x19
     b44:	12 8e       	std	Z+26, r1	; 0x1a
     b46:	13 8e       	std	Z+27, r1	; 0x1b
     b48:	14 8e       	std	Z+28, r1	; 0x1c
     b4a:	08 95       	ret

00000b4c <initVariant>:
     b4c:	08 95       	ret

00000b4e <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     b4e:	76 d1       	rcall	.+748    	; 0xe3c <init>

	initVariant();
     b50:	fd df       	rcall	.-6      	; 0xb4c <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     b52:	3e dc       	rcall	.-1924   	; 0x3d0 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     b54:	cd ed       	ldi	r28, 0xDD	; 221
     b56:	d3 e0       	ldi	r29, 0x03	; 3
#endif
	
	setup();
    
	for (;;) {
		loop();
     b58:	82 dc       	rcall	.-1788   	; 0x45e <loop>
		if (serialEventRun) serialEventRun();
     b5a:	20 97       	sbiw	r28, 0x00	; 0
     b5c:	e9 f3       	breq	.-6      	; 0xb58 <main+0xa>
     b5e:	2d de       	rcall	.-934    	; 0x7ba <_Z14serialEventRunv>
     b60:	fb cf       	rjmp	.-10     	; 0xb58 <main+0xa>

00000b62 <_ZN5Print5writeEPKhj>:
     b62:	cf 92       	push	r12
size_t Print::println(const Printable& x)
{
  size_t n = print(x);
  n += println();
  return n;
}
     b64:	df 92       	push	r13
     b66:	ef 92       	push	r14
     b68:	ff 92       	push	r15
     b6a:	0f 93       	push	r16
     b6c:	1f 93       	push	r17
     b6e:	cf 93       	push	r28
     b70:	df 93       	push	r29
     b72:	6c 01       	movw	r12, r24
     b74:	7a 01       	movw	r14, r20
     b76:	8b 01       	movw	r16, r22
     b78:	c0 e0       	ldi	r28, 0x00	; 0
     b7a:	d0 e0       	ldi	r29, 0x00	; 0
     b7c:	ce 15       	cp	r28, r14
     b7e:	df 05       	cpc	r29, r15
     b80:	81 f0       	breq	.+32     	; 0xba2 <_ZN5Print5writeEPKhj+0x40>
     b82:	d8 01       	movw	r26, r16
     b84:	6d 91       	ld	r22, X+
     b86:	8d 01       	movw	r16, r26
     b88:	d6 01       	movw	r26, r12
     b8a:	ed 91       	ld	r30, X+
     b8c:	fc 91       	ld	r31, X
     b8e:	01 90       	ld	r0, Z+
     b90:	f0 81       	ld	r31, Z
     b92:	e0 2d       	mov	r30, r0
     b94:	c6 01       	movw	r24, r12
     b96:	19 95       	eicall
     b98:	89 2b       	or	r24, r25
     b9a:	11 f0       	breq	.+4      	; 0xba0 <_ZN5Print5writeEPKhj+0x3e>
     b9c:	21 96       	adiw	r28, 0x01	; 1
     b9e:	ee cf       	rjmp	.-36     	; 0xb7c <_ZN5Print5writeEPKhj+0x1a>
     ba0:	7e 01       	movw	r14, r28
     ba2:	c7 01       	movw	r24, r14
     ba4:	df 91       	pop	r29
     ba6:	cf 91       	pop	r28
     ba8:	1f 91       	pop	r17
     baa:	0f 91       	pop	r16
     bac:	ff 90       	pop	r15
     bae:	ef 90       	pop	r14
     bb0:	df 90       	pop	r13
     bb2:	cf 90       	pop	r12
     bb4:	08 95       	ret

00000bb6 <_ZN5Print5writeEPKc>:
     bb6:	61 15       	cp	r22, r1
     bb8:	71 05       	cpc	r23, r1
     bba:	79 f0       	breq	.+30     	; 0xbda <_ZN5Print5writeEPKc+0x24>
     bbc:	fb 01       	movw	r30, r22
     bbe:	01 90       	ld	r0, Z+
     bc0:	00 20       	and	r0, r0
     bc2:	e9 f7       	brne	.-6      	; 0xbbe <_ZN5Print5writeEPKc+0x8>
     bc4:	31 97       	sbiw	r30, 0x01	; 1
     bc6:	af 01       	movw	r20, r30
     bc8:	46 1b       	sub	r20, r22
     bca:	57 0b       	sbc	r21, r23
     bcc:	dc 01       	movw	r26, r24
     bce:	ed 91       	ld	r30, X+
     bd0:	fc 91       	ld	r31, X
     bd2:	02 80       	ldd	r0, Z+2	; 0x02
     bd4:	f3 81       	ldd	r31, Z+3	; 0x03
     bd6:	e0 2d       	mov	r30, r0
     bd8:	19 94       	eijmp
     bda:	80 e0       	ldi	r24, 0x00	; 0
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	08 95       	ret

00000be0 <_ZN5Print5printEPKc>:
     be0:	ea cf       	rjmp	.-44     	; 0xbb6 <_ZN5Print5writeEPKc>

00000be2 <_ZN5Print7printlnEv>:
     be2:	60 eb       	ldi	r22, 0xB0	; 176
     be4:	72 e0       	ldi	r23, 0x02	; 2
     be6:	e7 cf       	rjmp	.-50     	; 0xbb6 <_ZN5Print5writeEPKc>

00000be8 <_ZN5Print7printlnEPKc>:
     be8:	0f 93       	push	r16
     bea:	1f 93       	push	r17
     bec:	cf 93       	push	r28
     bee:	df 93       	push	r29
     bf0:	ec 01       	movw	r28, r24
     bf2:	e1 df       	rcall	.-62     	; 0xbb6 <_ZN5Print5writeEPKc>
     bf4:	8c 01       	movw	r16, r24
     bf6:	ce 01       	movw	r24, r28
     bf8:	f4 df       	rcall	.-24     	; 0xbe2 <_ZN5Print7printlnEv>
     bfa:	80 0f       	add	r24, r16
     bfc:	91 1f       	adc	r25, r17
     bfe:	df 91       	pop	r29
     c00:	cf 91       	pop	r28
     c02:	1f 91       	pop	r17
     c04:	0f 91       	pop	r16
     c06:	08 95       	ret

00000c08 <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
     c08:	8f 92       	push	r8
     c0a:	9f 92       	push	r9
     c0c:	af 92       	push	r10
     c0e:	bf 92       	push	r11
     c10:	ef 92       	push	r14
     c12:	ff 92       	push	r15
     c14:	0f 93       	push	r16
     c16:	1f 93       	push	r17
     c18:	cf 93       	push	r28
     c1a:	df 93       	push	r29
     c1c:	cd b7       	in	r28, 0x3d	; 61
     c1e:	de b7       	in	r29, 0x3e	; 62
     c20:	a1 97       	sbiw	r28, 0x21	; 33
     c22:	0f b6       	in	r0, 0x3f	; 63
     c24:	f8 94       	cli
     c26:	de bf       	out	0x3e, r29	; 62
     c28:	0f be       	out	0x3f, r0	; 63
     c2a:	cd bf       	out	0x3d, r28	; 61
     c2c:	7c 01       	movw	r14, r24
     c2e:	fa 01       	movw	r30, r20
     c30:	cb 01       	movw	r24, r22
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     c32:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     c34:	22 30       	cpi	r18, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <_ZN5Print11printNumberEmh+0x32>
     c38:	2a e0       	ldi	r18, 0x0A	; 10
     c3a:	8e 01       	movw	r16, r28
     c3c:	0f 5d       	subi	r16, 0xDF	; 223
     c3e:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    char c = n % base;
     c40:	82 2e       	mov	r8, r18
     c42:	91 2c       	mov	r9, r1
     c44:	a1 2c       	mov	r10, r1
     c46:	b1 2c       	mov	r11, r1
     c48:	bf 01       	movw	r22, r30
     c4a:	a5 01       	movw	r20, r10
     c4c:	94 01       	movw	r18, r8
     c4e:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <__udivmodsi4>
    n /= base;
     c52:	f9 01       	movw	r30, r18
     c54:	ca 01       	movw	r24, r20

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     c56:	01 50       	subi	r16, 0x01	; 1
     c58:	11 09       	sbc	r17, r1
     c5a:	6a 30       	cpi	r22, 0x0A	; 10
     c5c:	10 f4       	brcc	.+4      	; 0xc62 <_ZN5Print11printNumberEmh+0x5a>
     c5e:	60 5d       	subi	r22, 0xD0	; 208
     c60:	01 c0       	rjmp	.+2      	; 0xc64 <_ZN5Print11printNumberEmh+0x5c>
     c62:	69 5c       	subi	r22, 0xC9	; 201
     c64:	d8 01       	movw	r26, r16
     c66:	6c 93       	st	X, r22
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
     c68:	23 2b       	or	r18, r19
     c6a:	24 2b       	or	r18, r20
     c6c:	25 2b       	or	r18, r21
     c6e:	61 f7       	brne	.-40     	; 0xc48 <_ZN5Print11printNumberEmh+0x40>
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
     c70:	b8 01       	movw	r22, r16
     c72:	c7 01       	movw	r24, r14
     c74:	a0 df       	rcall	.-192    	; 0xbb6 <_ZN5Print5writeEPKc>
}
     c76:	a1 96       	adiw	r28, 0x21	; 33
     c78:	0f b6       	in	r0, 0x3f	; 63
     c7a:	f8 94       	cli
     c7c:	de bf       	out	0x3e, r29	; 62
     c7e:	0f be       	out	0x3f, r0	; 63
     c80:	cd bf       	out	0x3d, r28	; 61
     c82:	df 91       	pop	r29
     c84:	cf 91       	pop	r28
     c86:	1f 91       	pop	r17
     c88:	0f 91       	pop	r16
     c8a:	ff 90       	pop	r15
     c8c:	ef 90       	pop	r14
     c8e:	bf 90       	pop	r11
     c90:	af 90       	pop	r10
     c92:	9f 90       	pop	r9
     c94:	8f 90       	pop	r8
     c96:	08 95       	ret

00000c98 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
     c98:	21 15       	cp	r18, r1
     c9a:	31 05       	cpc	r19, r1
     c9c:	41 f4       	brne	.+16     	; 0xcae <_ZN5Print5printEmi+0x16>
     c9e:	dc 01       	movw	r26, r24
     ca0:	ed 91       	ld	r30, X+
     ca2:	fc 91       	ld	r31, X
     ca4:	01 90       	ld	r0, Z+
     ca6:	f0 81       	ld	r31, Z
     ca8:	e0 2d       	mov	r30, r0
     caa:	64 2f       	mov	r22, r20
     cac:	19 94       	eijmp
  else return printNumber(n, base);
     cae:	ac cf       	rjmp	.-168    	; 0xc08 <_ZN5Print11printNumberEmh>

00000cb0 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
     cb0:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
     cb2:	46 2f       	mov	r20, r22
     cb4:	50 e0       	ldi	r21, 0x00	; 0
     cb6:	60 e0       	ldi	r22, 0x00	; 0
     cb8:	70 e0       	ldi	r23, 0x00	; 0
     cba:	ee cf       	rjmp	.-36     	; 0xc98 <_ZN5Print5printEmi>

00000cbc <__vector_23>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     cbc:	1f 92       	push	r1
     cbe:	0f 92       	push	r0
     cc0:	0f b6       	in	r0, 0x3f	; 63
     cc2:	0f 92       	push	r0
     cc4:	11 24       	eor	r1, r1
     cc6:	2f 93       	push	r18
     cc8:	3f 93       	push	r19
     cca:	8f 93       	push	r24
     ccc:	9f 93       	push	r25
     cce:	af 93       	push	r26
     cd0:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     cd2:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <timer0_millis>
     cd6:	90 91 c7 03 	lds	r25, 0x03C7	; 0x8003c7 <timer0_millis+0x1>
     cda:	a0 91 c8 03 	lds	r26, 0x03C8	; 0x8003c8 <timer0_millis+0x2>
     cde:	b0 91 c9 03 	lds	r27, 0x03C9	; 0x8003c9 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
     ce2:	30 91 c5 03 	lds	r19, 0x03C5	; 0x8003c5 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
     ce6:	23 e0       	ldi	r18, 0x03	; 3
     ce8:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
     cea:	2d 37       	cpi	r18, 0x7D	; 125
     cec:	20 f4       	brcc	.+8      	; 0xcf6 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
     cee:	01 96       	adiw	r24, 0x01	; 1
     cf0:	a1 1d       	adc	r26, r1
     cf2:	b1 1d       	adc	r27, r1
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
     cf6:	26 e8       	ldi	r18, 0x86	; 134
     cf8:	23 0f       	add	r18, r19
		m += 1;
     cfa:	02 96       	adiw	r24, 0x02	; 2
     cfc:	a1 1d       	adc	r26, r1
     cfe:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     d00:	20 93 c5 03 	sts	0x03C5, r18	; 0x8003c5 <timer0_fract>
	timer0_millis = m;
     d04:	80 93 c6 03 	sts	0x03C6, r24	; 0x8003c6 <timer0_millis>
     d08:	90 93 c7 03 	sts	0x03C7, r25	; 0x8003c7 <timer0_millis+0x1>
     d0c:	a0 93 c8 03 	sts	0x03C8, r26	; 0x8003c8 <timer0_millis+0x2>
     d10:	b0 93 c9 03 	sts	0x03C9, r27	; 0x8003c9 <timer0_millis+0x3>
	timer0_overflow_count++;
     d14:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <timer0_overflow_count>
     d18:	90 91 cb 03 	lds	r25, 0x03CB	; 0x8003cb <timer0_overflow_count+0x1>
     d1c:	a0 91 cc 03 	lds	r26, 0x03CC	; 0x8003cc <timer0_overflow_count+0x2>
     d20:	b0 91 cd 03 	lds	r27, 0x03CD	; 0x8003cd <timer0_overflow_count+0x3>
     d24:	01 96       	adiw	r24, 0x01	; 1
     d26:	a1 1d       	adc	r26, r1
     d28:	b1 1d       	adc	r27, r1
     d2a:	80 93 ca 03 	sts	0x03CA, r24	; 0x8003ca <timer0_overflow_count>
     d2e:	90 93 cb 03 	sts	0x03CB, r25	; 0x8003cb <timer0_overflow_count+0x1>
     d32:	a0 93 cc 03 	sts	0x03CC, r26	; 0x8003cc <timer0_overflow_count+0x2>
     d36:	b0 93 cd 03 	sts	0x03CD, r27	; 0x8003cd <timer0_overflow_count+0x3>
}
     d3a:	bf 91       	pop	r27
     d3c:	af 91       	pop	r26
     d3e:	9f 91       	pop	r25
     d40:	8f 91       	pop	r24
     d42:	3f 91       	pop	r19
     d44:	2f 91       	pop	r18
     d46:	0f 90       	pop	r0
     d48:	0f be       	out	0x3f, r0	; 63
     d4a:	0f 90       	pop	r0
     d4c:	1f 90       	pop	r1
     d4e:	18 95       	reti

00000d50 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     d50:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
     d52:	f8 94       	cli
	m = timer0_millis;
     d54:	60 91 c6 03 	lds	r22, 0x03C6	; 0x8003c6 <timer0_millis>
     d58:	70 91 c7 03 	lds	r23, 0x03C7	; 0x8003c7 <timer0_millis+0x1>
     d5c:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <timer0_millis+0x2>
     d60:	90 91 c9 03 	lds	r25, 0x03C9	; 0x8003c9 <timer0_millis+0x3>
	SREG = oldSREG;
     d64:	2f bf       	out	0x3f, r18	; 63

	return m;
}
     d66:	08 95       	ret

00000d68 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     d68:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     d6a:	f8 94       	cli
	m = timer0_overflow_count;
     d6c:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <timer0_overflow_count>
     d70:	90 91 cb 03 	lds	r25, 0x03CB	; 0x8003cb <timer0_overflow_count+0x1>
     d74:	a0 91 cc 03 	lds	r26, 0x03CC	; 0x8003cc <timer0_overflow_count+0x2>
     d78:	b0 91 cd 03 	lds	r27, 0x03CD	; 0x8003cd <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
     d7c:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     d7e:	a8 9b       	sbis	0x15, 0	; 21
     d80:	05 c0       	rjmp	.+10     	; 0xd8c <micros+0x24>
     d82:	2f 3f       	cpi	r18, 0xFF	; 255
     d84:	19 f0       	breq	.+6      	; 0xd8c <micros+0x24>
		m++;
     d86:	01 96       	adiw	r24, 0x01	; 1
     d88:	a1 1d       	adc	r26, r1
     d8a:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     d8c:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     d8e:	ba 2f       	mov	r27, r26
     d90:	a9 2f       	mov	r26, r25
     d92:	98 2f       	mov	r25, r24
     d94:	88 27       	eor	r24, r24
     d96:	82 0f       	add	r24, r18
     d98:	91 1d       	adc	r25, r1
     d9a:	a1 1d       	adc	r26, r1
     d9c:	b1 1d       	adc	r27, r1
     d9e:	bc 01       	movw	r22, r24
     da0:	cd 01       	movw	r24, r26
     da2:	42 e0       	ldi	r20, 0x02	; 2
     da4:	66 0f       	add	r22, r22
     da6:	77 1f       	adc	r23, r23
     da8:	88 1f       	adc	r24, r24
     daa:	99 1f       	adc	r25, r25
     dac:	4a 95       	dec	r20
     dae:	d1 f7       	brne	.-12     	; 0xda4 <micros+0x3c>
}
     db0:	08 95       	ret

00000db2 <delay>:

void delay(unsigned long ms)
{
     db2:	8f 92       	push	r8
     db4:	9f 92       	push	r9
     db6:	af 92       	push	r10
     db8:	bf 92       	push	r11
     dba:	cf 92       	push	r12
     dbc:	df 92       	push	r13
     dbe:	ef 92       	push	r14
     dc0:	ff 92       	push	r15
     dc2:	6b 01       	movw	r12, r22
     dc4:	7c 01       	movw	r14, r24
	uint32_t start = micros();
     dc6:	d0 df       	rcall	.-96     	; 0xd68 <micros>
     dc8:	4b 01       	movw	r8, r22
     dca:	5c 01       	movw	r10, r24

	while (ms > 0) {
     dcc:	c1 14       	cp	r12, r1
     dce:	d1 04       	cpc	r13, r1
     dd0:	e1 04       	cpc	r14, r1
     dd2:	f1 04       	cpc	r15, r1
     dd4:	f9 f0       	breq	.+62     	; 0xe14 <delay+0x62>
		yield();
     dd6:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
     dda:	c6 df       	rcall	.-116    	; 0xd68 <micros>
     ddc:	dc 01       	movw	r26, r24
     dde:	cb 01       	movw	r24, r22
     de0:	88 19       	sub	r24, r8
     de2:	99 09       	sbc	r25, r9
     de4:	aa 09       	sbc	r26, r10
     de6:	bb 09       	sbc	r27, r11
     de8:	88 3e       	cpi	r24, 0xE8	; 232
     dea:	93 40       	sbci	r25, 0x03	; 3
     dec:	a1 05       	cpc	r26, r1
     dee:	b1 05       	cpc	r27, r1
     df0:	68 f3       	brcs	.-38     	; 0xdcc <delay+0x1a>
			ms--;
     df2:	21 e0       	ldi	r18, 0x01	; 1
     df4:	c2 1a       	sub	r12, r18
     df6:	d1 08       	sbc	r13, r1
     df8:	e1 08       	sbc	r14, r1
     dfa:	f1 08       	sbc	r15, r1
			start += 1000;
     dfc:	88 ee       	ldi	r24, 0xE8	; 232
     dfe:	88 0e       	add	r8, r24
     e00:	83 e0       	ldi	r24, 0x03	; 3
     e02:	98 1e       	adc	r9, r24
     e04:	a1 1c       	adc	r10, r1
     e06:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
     e08:	c1 14       	cp	r12, r1
     e0a:	d1 04       	cpc	r13, r1
     e0c:	e1 04       	cpc	r14, r1
     e0e:	f1 04       	cpc	r15, r1
     e10:	21 f7       	brne	.-56     	; 0xdda <delay+0x28>
     e12:	dc cf       	rjmp	.-72     	; 0xdcc <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
     e14:	ff 90       	pop	r15
     e16:	ef 90       	pop	r14
     e18:	df 90       	pop	r13
     e1a:	cf 90       	pop	r12
     e1c:	bf 90       	pop	r11
     e1e:	af 90       	pop	r10
     e20:	9f 90       	pop	r9
     e22:	8f 90       	pop	r8
     e24:	08 95       	ret

00000e26 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
     e26:	82 30       	cpi	r24, 0x02	; 2
     e28:	91 05       	cpc	r25, r1
     e2a:	38 f0       	brcs	.+14     	; 0xe3a <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
     e2c:	88 0f       	add	r24, r24
     e2e:	99 1f       	adc	r25, r25
     e30:	88 0f       	add	r24, r24
     e32:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
     e34:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
     e36:	01 97       	sbiw	r24, 0x01	; 1
     e38:	f1 f7       	brne	.-4      	; 0xe36 <delayMicroseconds+0x10>
     e3a:	08 95       	ret

00000e3c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     e3c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     e3e:	84 b5       	in	r24, 0x24	; 36
     e40:	82 60       	ori	r24, 0x02	; 2
     e42:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     e44:	84 b5       	in	r24, 0x24	; 36
     e46:	81 60       	ori	r24, 0x01	; 1
     e48:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     e4a:	85 b5       	in	r24, 0x25	; 37
     e4c:	82 60       	ori	r24, 0x02	; 2
     e4e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     e50:	85 b5       	in	r24, 0x25	; 37
     e52:	81 60       	ori	r24, 0x01	; 1
     e54:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     e56:	ee e6       	ldi	r30, 0x6E	; 110
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	81 60       	ori	r24, 0x01	; 1
     e5e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     e60:	e1 e8       	ldi	r30, 0x81	; 129
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     e66:	80 81       	ld	r24, Z
     e68:	82 60       	ori	r24, 0x02	; 2
     e6a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     e6c:	80 81       	ld	r24, Z
     e6e:	81 60       	ori	r24, 0x01	; 1
     e70:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     e72:	e0 e8       	ldi	r30, 0x80	; 128
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	81 60       	ori	r24, 0x01	; 1
     e7a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     e7c:	e1 eb       	ldi	r30, 0xB1	; 177
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	84 60       	ori	r24, 0x04	; 4
     e84:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     e86:	e0 eb       	ldi	r30, 0xB0	; 176
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	81 60       	ori	r24, 0x01	; 1
     e8e:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
     e90:	e1 e9       	ldi	r30, 0x91	; 145
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	82 60       	ori	r24, 0x02	; 2
     e98:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
     e9a:	80 81       	ld	r24, Z
     e9c:	81 60       	ori	r24, 0x01	; 1
     e9e:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
     ea0:	e0 e9       	ldi	r30, 0x90	; 144
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	81 60       	ori	r24, 0x01	; 1
     ea8:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
     eaa:	e1 ea       	ldi	r30, 0xA1	; 161
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	82 60       	ori	r24, 0x02	; 2
     eb2:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
     eb4:	80 81       	ld	r24, Z
     eb6:	81 60       	ori	r24, 0x01	; 1
     eb8:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
     eba:	e0 ea       	ldi	r30, 0xA0	; 160
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	81 60       	ori	r24, 0x01	; 1
     ec2:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
     ec4:	e1 e2       	ldi	r30, 0x21	; 33
     ec6:	f1 e0       	ldi	r31, 0x01	; 1
     ec8:	80 81       	ld	r24, Z
     eca:	82 60       	ori	r24, 0x02	; 2
     ecc:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
     ece:	80 81       	ld	r24, Z
     ed0:	81 60       	ori	r24, 0x01	; 1
     ed2:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
     ed4:	e0 e2       	ldi	r30, 0x20	; 32
     ed6:	f1 e0       	ldi	r31, 0x01	; 1
     ed8:	80 81       	ld	r24, Z
     eda:	81 60       	ori	r24, 0x01	; 1
     edc:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     ede:	ea e7       	ldi	r30, 0x7A	; 122
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	84 60       	ori	r24, 0x04	; 4
     ee6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     ee8:	80 81       	ld	r24, Z
     eea:	82 60       	ori	r24, 0x02	; 2
     eec:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     eee:	80 81       	ld	r24, Z
     ef0:	81 60       	ori	r24, 0x01	; 1
     ef2:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     ef4:	80 81       	ld	r24, Z
     ef6:	80 68       	ori	r24, 0x80	; 128
     ef8:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     efa:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
     efe:	08 95       	ret

00000f00 <analogRead>:
#if defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#endif
	pin = analogPinToChannel(pin);
#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
     f00:	86 33       	cpi	r24, 0x36	; 54
     f02:	08 f0       	brcs	.+2      	; 0xf06 <analogRead+0x6>
     f04:	86 53       	subi	r24, 0x36	; 54
#endif

#if defined(ADCSRB) && defined(MUX5)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
     f06:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
     f0a:	28 2f       	mov	r18, r24
     f0c:	28 70       	andi	r18, 0x08	; 8
     f0e:	97 7f       	andi	r25, 0xF7	; 247
     f10:	92 2b       	or	r25, r18
     f12:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
     f16:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     f1a:	90 e4       	ldi	r25, 0x40	; 64
     f1c:	29 9f       	mul	r18, r25
     f1e:	90 01       	movw	r18, r0
     f20:	11 24       	eor	r1, r1
     f22:	87 70       	andi	r24, 0x07	; 7
     f24:	82 2b       	or	r24, r18
     f26:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
     f2a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
     f2e:	80 64       	ori	r24, 0x40	; 64
     f30:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
     f34:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
     f38:	86 fd       	sbrc	r24, 6
     f3a:	fc cf       	rjmp	.-8      	; 0xf34 <analogRead+0x34>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
     f3c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
	high = ADCH;
     f40:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
     f44:	90 e0       	ldi	r25, 0x00	; 0
}
     f46:	92 2b       	or	r25, r18
     f48:	08 95       	ret

00000f4a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	fc 01       	movw	r30, r24
     f4e:	31 97       	sbiw	r30, 0x01	; 1
     f50:	e2 31       	cpi	r30, 0x12	; 18
     f52:	f1 05       	cpc	r31, r1
     f54:	08 f0       	brcs	.+2      	; 0xf58 <turnOffPWM+0xe>
     f56:	4d c0       	rjmp	.+154    	; 0xff2 <turnOffPWM+0xa8>
     f58:	88 27       	eor	r24, r24
     f5a:	ee 58       	subi	r30, 0x8E	; 142
     f5c:	ff 4f       	sbci	r31, 0xFF	; 255
     f5e:	8f 4f       	sbci	r24, 0xFF	; 255
     f60:	72 c7       	rjmp	.+3812   	; 0x1e46 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     f62:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
     f66:	8f 77       	andi	r24, 0x7F	; 127
     f68:	03 c0       	rjmp	.+6      	; 0xf70 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     f6a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
     f6e:	8f 7d       	andi	r24, 0xDF	; 223
     f70:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
     f74:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
     f76:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
     f7a:	87 7f       	andi	r24, 0xF7	; 247
     f7c:	f9 cf       	rjmp	.-14     	; 0xf70 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     f7e:	84 b5       	in	r24, 0x24	; 36
     f80:	8f 77       	andi	r24, 0x7F	; 127
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     f84:	84 b5       	in	r24, 0x24	; 36
     f86:	8f 7d       	andi	r24, 0xDF	; 223
     f88:	84 bd       	out	0x24, r24	; 36
     f8a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     f8c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
     f90:	8f 77       	andi	r24, 0x7F	; 127
     f92:	03 c0       	rjmp	.+6      	; 0xf9a <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     f94:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
     f98:	8f 7d       	andi	r24, 0xDF	; 223
     f9a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
     f9e:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
     fa0:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
     fa4:	8f 77       	andi	r24, 0x7F	; 127
     fa6:	07 c0       	rjmp	.+14     	; 0xfb6 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
     fa8:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
     fac:	8f 7d       	andi	r24, 0xDF	; 223
     fae:	03 c0       	rjmp	.+6      	; 0xfb6 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
     fb0:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
     fb4:	87 7f       	andi	r24, 0xF7	; 247
     fb6:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
     fba:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
     fbc:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
     fc0:	8f 77       	andi	r24, 0x7F	; 127
     fc2:	07 c0       	rjmp	.+14     	; 0xfd2 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
     fc4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
     fc8:	8f 7d       	andi	r24, 0xDF	; 223
     fca:	03 c0       	rjmp	.+6      	; 0xfd2 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
     fcc:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
     fd0:	87 7f       	andi	r24, 0xF7	; 247
     fd2:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
     fd6:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
     fd8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
     fdc:	8f 77       	andi	r24, 0x7F	; 127
     fde:	07 c0       	rjmp	.+14     	; 0xfee <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
     fe0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
     fe4:	8f 7d       	andi	r24, 0xDF	; 223
     fe6:	03 c0       	rjmp	.+6      	; 0xfee <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
     fe8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
     fec:	87 7f       	andi	r24, 0xF7	; 247
     fee:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
     ff2:	08 95       	ret

00000ff4 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     ff4:	cf 93       	push	r28
     ff6:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	fc 01       	movw	r30, r24
     ffc:	ea 55       	subi	r30, 0x5A	; 90
     ffe:	fe 4f       	sbci	r31, 0xFE	; 254
    1000:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1002:	fc 01       	movw	r30, r24
    1004:	e4 51       	subi	r30, 0x14	; 20
    1006:	fe 4f       	sbci	r31, 0xFE	; 254
    1008:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    100a:	88 23       	and	r24, r24
    100c:	61 f1       	breq	.+88     	; 0x1066 <__EEPROM_REGION_LENGTH__+0x66>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	fc 01       	movw	r30, r24
    1016:	e4 5b       	subi	r30, 0xB4	; 180
    1018:	fd 4f       	sbci	r31, 0xFD	; 253
    101a:	c5 91       	lpm	r28, Z+
    101c:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    101e:	fc 01       	movw	r30, r24
    1020:	ee 5c       	subi	r30, 0xCE	; 206
    1022:	fd 4f       	sbci	r31, 0xFD	; 253
    1024:	a5 91       	lpm	r26, Z+
    1026:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1028:	61 11       	cpse	r22, r1
    102a:	09 c0       	rjmp	.+18     	; 0x103e <__EEPROM_REGION_LENGTH__+0x3e>
		uint8_t oldSREG = SREG;
    102c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    102e:	f8 94       	cli
		*reg &= ~bit;
    1030:	88 81       	ld	r24, Y
    1032:	20 95       	com	r18
    1034:	82 23       	and	r24, r18
    1036:	88 83       	st	Y, r24
		*out &= ~bit;
    1038:	ec 91       	ld	r30, X
    103a:	2e 23       	and	r18, r30
    103c:	0b c0       	rjmp	.+22     	; 0x1054 <__EEPROM_REGION_LENGTH__+0x54>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    103e:	62 30       	cpi	r22, 0x02	; 2
    1040:	61 f4       	brne	.+24     	; 0x105a <__EEPROM_REGION_LENGTH__+0x5a>
		uint8_t oldSREG = SREG;
    1042:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1044:	f8 94       	cli
		*reg &= ~bit;
    1046:	88 81       	ld	r24, Y
    1048:	32 2f       	mov	r19, r18
    104a:	30 95       	com	r19
    104c:	83 23       	and	r24, r19
    104e:	88 83       	st	Y, r24
		*out |= bit;
    1050:	ec 91       	ld	r30, X
    1052:	2e 2b       	or	r18, r30
    1054:	2c 93       	st	X, r18
		SREG = oldSREG;
    1056:	9f bf       	out	0x3f, r25	; 63
    1058:	06 c0       	rjmp	.+12     	; 0x1066 <__EEPROM_REGION_LENGTH__+0x66>
	} else {
		uint8_t oldSREG = SREG;
    105a:	8f b7       	in	r24, 0x3f	; 63
                cli();
    105c:	f8 94       	cli
		*reg |= bit;
    105e:	e8 81       	ld	r30, Y
    1060:	2e 2b       	or	r18, r30
    1062:	28 83       	st	Y, r18
		SREG = oldSREG;
    1064:	8f bf       	out	0x3f, r24	; 63
	}
}
    1066:	df 91       	pop	r29
    1068:	cf 91       	pop	r28
    106a:	08 95       	ret

0000106c <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    106c:	1f 93       	push	r17
    106e:	cf 93       	push	r28
    1070:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	f9 01       	movw	r30, r18
    1078:	e0 5a       	subi	r30, 0xA0	; 160
    107a:	fe 4f       	sbci	r31, 0xFE	; 254
    107c:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    107e:	f9 01       	movw	r30, r18
    1080:	ea 55       	subi	r30, 0x5A	; 90
    1082:	fe 4f       	sbci	r31, 0xFE	; 254
    1084:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1086:	f9 01       	movw	r30, r18
    1088:	e4 51       	subi	r30, 0x14	; 20
    108a:	fe 4f       	sbci	r31, 0xFE	; 254
    108c:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    108e:	cc 23       	and	r28, r28
    1090:	b9 f0       	breq	.+46     	; 0x10c0 <digitalWrite+0x54>
    1092:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1094:	81 11       	cpse	r24, r1
    1096:	59 df       	rcall	.-334    	; 0xf4a <turnOffPWM>

	out = portOutputRegister(port);
    1098:	ec 2f       	mov	r30, r28
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	ee 0f       	add	r30, r30
    109e:	ff 1f       	adc	r31, r31
    10a0:	ee 5c       	subi	r30, 0xCE	; 206
    10a2:	fd 4f       	sbci	r31, 0xFD	; 253
    10a4:	a5 91       	lpm	r26, Z+
    10a6:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    10a8:	9f b7       	in	r25, 0x3f	; 63
	cli();
    10aa:	f8 94       	cli

	if (val == LOW) {
    10ac:	11 11       	cpse	r17, r1
    10ae:	04 c0       	rjmp	.+8      	; 0x10b8 <digitalWrite+0x4c>
		*out &= ~bit;
    10b0:	8c 91       	ld	r24, X
    10b2:	d0 95       	com	r29
    10b4:	d8 23       	and	r29, r24
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <digitalWrite+0x50>
	} else {
		*out |= bit;
    10b8:	ec 91       	ld	r30, X
    10ba:	de 2b       	or	r29, r30
    10bc:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    10be:	9f bf       	out	0x3f, r25	; 63
}
    10c0:	df 91       	pop	r29
    10c2:	cf 91       	pop	r28
    10c4:	1f 91       	pop	r17
    10c6:	08 95       	ret

000010c8 <_ZN8SPIClass8transferEh>:
    modifyRegister(MCP_CANCTRL, CANCTRL_CLKEN, CANCTRL_CLKEN);

    /* Turn off CLKOUT for SOF */
    modifyRegister(MCP_CNF3, CNF3_SOF, 0x00);
    return ERROR_OK;
}
    10c8:	8e bd       	out	0x2e, r24	; 46
    10ca:	00 00       	nop
    10cc:	0d b4       	in	r0, 0x2d	; 45
    10ce:	07 fe       	sbrs	r0, 7
    10d0:	fd cf       	rjmp	.-6      	; 0x10cc <_ZN8SPIClass8transferEh+0x4>
    10d2:	8e b5       	in	r24, 0x2e	; 46
    10d4:	08 95       	ret

000010d6 <_ZN7MCP25158startSPIEv>:
    10d6:	fc 01       	movw	r30, r24
    10d8:	41 81       	ldd	r20, Z+1	; 0x01
    10da:	52 81       	ldd	r21, Z+2	; 0x02
    10dc:	63 81       	ldd	r22, Z+3	; 0x03
    10de:	74 81       	ldd	r23, Z+4	; 0x04
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	92 e1       	ldi	r25, 0x12	; 18
    10e4:	aa e7       	ldi	r26, 0x7A	; 122
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	20 e0       	ldi	r18, 0x00	; 0
    10ea:	48 17       	cp	r20, r24
    10ec:	59 07       	cpc	r21, r25
    10ee:	6a 07       	cpc	r22, r26
    10f0:	7b 07       	cpc	r23, r27
    10f2:	40 f4       	brcc	.+16     	; 0x1104 <_ZN7MCP25158startSPIEv+0x2e>
    10f4:	b6 95       	lsr	r27
    10f6:	a7 95       	ror	r26
    10f8:	97 95       	ror	r25
    10fa:	87 95       	ror	r24
    10fc:	2f 5f       	subi	r18, 0xFF	; 255
    10fe:	26 30       	cpi	r18, 0x06	; 6
    1100:	a1 f7       	brne	.-24     	; 0x10ea <_ZN7MCP25158startSPIEv+0x14>
    1102:	27 e0       	ldi	r18, 0x07	; 7
    1104:	91 e0       	ldi	r25, 0x01	; 1
    1106:	92 27       	eor	r25, r18
    1108:	29 2f       	mov	r18, r25
    110a:	20 6a       	ori	r18, 0xA0	; 160
    110c:	26 95       	lsr	r18
    110e:	91 70       	andi	r25, 0x01	; 1
    1110:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <_ZN8SPIClass13interruptModeE>
    1114:	88 23       	and	r24, r24
    1116:	99 f0       	breq	.+38     	; 0x113e <_ZN7MCP25158startSPIEv+0x68>
    1118:	8f b7       	in	r24, 0x3f	; 63
    111a:	f8 94       	cli
    111c:	30 91 d0 03 	lds	r19, 0x03D0	; 0x8003d0 <_ZN8SPIClass13interruptModeE>
    1120:	31 30       	cpi	r19, 0x01	; 1
    1122:	59 f4       	brne	.+22     	; 0x113a <_ZN7MCP25158startSPIEv+0x64>
    1124:	3d b3       	in	r19, 0x1d	; 29
    1126:	30 93 ce 03 	sts	0x03CE, r19	; 0x8003ce <_ZN8SPIClass13interruptSaveE>
    112a:	4d b3       	in	r20, 0x1d	; 29
    112c:	30 91 cf 03 	lds	r19, 0x03CF	; 0x8003cf <_ZN8SPIClass13interruptMaskE>
    1130:	30 95       	com	r19
    1132:	34 23       	and	r19, r20
    1134:	3d bb       	out	0x1d, r19	; 29
    1136:	8f bf       	out	0x3f, r24	; 63
    1138:	02 c0       	rjmp	.+4      	; 0x113e <_ZN7MCP25158startSPIEv+0x68>
    113a:	80 93 ce 03 	sts	0x03CE, r24	; 0x8003ce <_ZN8SPIClass13interruptSaveE>
    113e:	2c bd       	out	0x2c, r18	; 44
    1140:	9d bd       	out	0x2d, r25	; 45
    1142:	60 e0       	ldi	r22, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	92 cf       	rjmp	.-220    	; 0x106c <digitalWrite>

00001148 <_ZN7MCP25156endSPIEv>:
    1148:	61 e0       	ldi	r22, 0x01	; 1
    114a:	fc 01       	movw	r30, r24
    114c:	80 81       	ld	r24, Z
    114e:	8e df       	rcall	.-228    	; 0x106c <digitalWrite>
    1150:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <_ZN8SPIClass13interruptModeE>
    1154:	88 23       	and	r24, r24
    1156:	61 f0       	breq	.+24     	; 0x1170 <_ZN7MCP25156endSPIEv+0x28>
    1158:	9f b7       	in	r25, 0x3f	; 63
    115a:	f8 94       	cli
    115c:	20 91 d0 03 	lds	r18, 0x03D0	; 0x8003d0 <_ZN8SPIClass13interruptModeE>
    1160:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <_ZN8SPIClass13interruptSaveE>
    1164:	21 30       	cpi	r18, 0x01	; 1
    1166:	19 f4       	brne	.+6      	; 0x116e <_ZN7MCP25156endSPIEv+0x26>
    1168:	8d bb       	out	0x1d, r24	; 29
    116a:	9f bf       	out	0x3f, r25	; 63
    116c:	08 95       	ret
    116e:	8f bf       	out	0x3f, r24	; 63
    1170:	08 95       	ret

00001172 <_ZN7MCP2515C1EhmP8SPIClass>:
    1172:	8f 92       	push	r8
    1174:	9f 92       	push	r9
    1176:	af 92       	push	r10
    1178:	bf 92       	push	r11
    117a:	ff 92       	push	r15
    117c:	0f 93       	push	r16
    117e:	1f 93       	push	r17
    1180:	cf 93       	push	r28
    1182:	df 93       	push	r29
    1184:	ec 01       	movw	r28, r24
    1186:	f6 2e       	mov	r15, r22
    1188:	49 01       	movw	r8, r18
    118a:	5a 01       	movw	r10, r20
    118c:	01 15       	cp	r16, r1
    118e:	11 05       	cpc	r17, r1
    1190:	19 f0       	breq	.+6      	; 0x1198 <_ZN7MCP2515C1EhmP8SPIClass+0x26>
    1192:	1e 83       	std	Y+6, r17	; 0x06
    1194:	0d 83       	std	Y+5, r16	; 0x05
    1196:	05 c0       	rjmp	.+10     	; 0x11a2 <_ZN7MCP2515C1EhmP8SPIClass+0x30>
    1198:	82 ed       	ldi	r24, 0xD2	; 210
    119a:	93 e0       	ldi	r25, 0x03	; 3
    119c:	9e 83       	std	Y+6, r25	; 0x06
    119e:	8d 83       	std	Y+5, r24	; 0x05
    11a0:	fd d5       	rcall	.+3066   	; 0x1d9c <_ZN8SPIClass5beginEv>
    11a2:	f8 82       	st	Y, r15
    11a4:	89 82       	std	Y+1, r8	; 0x01
    11a6:	9a 82       	std	Y+2, r9	; 0x02
    11a8:	ab 82       	std	Y+3, r10	; 0x03
    11aa:	bc 82       	std	Y+4, r11	; 0x04
    11ac:	61 e0       	ldi	r22, 0x01	; 1
    11ae:	8f 2d       	mov	r24, r15
    11b0:	21 df       	rcall	.-446    	; 0xff4 <pinMode>
    11b2:	ce 01       	movw	r24, r28
    11b4:	df 91       	pop	r29
    11b6:	cf 91       	pop	r28
    11b8:	1f 91       	pop	r17
    11ba:	0f 91       	pop	r16
    11bc:	ff 90       	pop	r15
    11be:	bf 90       	pop	r11
    11c0:	af 90       	pop	r10
    11c2:	9f 90       	pop	r9
    11c4:	8f 90       	pop	r8
    11c6:	c0 cf       	rjmp	.-128    	; 0x1148 <_ZN7MCP25156endSPIEv>

000011c8 <_ZN7MCP251512readRegisterENS_8REGISTERE>:
    11c8:	1f 93       	push	r17
    11ca:	cf 93       	push	r28
    11cc:	df 93       	push	r29
    11ce:	ec 01       	movw	r28, r24
    11d0:	16 2f       	mov	r17, r22
    11d2:	81 df       	rcall	.-254    	; 0x10d6 <_ZN7MCP25158startSPIEv>
    11d4:	83 e0       	ldi	r24, 0x03	; 3
    11d6:	78 df       	rcall	.-272    	; 0x10c8 <_ZN8SPIClass8transferEh>
    11d8:	81 2f       	mov	r24, r17
    11da:	76 df       	rcall	.-276    	; 0x10c8 <_ZN8SPIClass8transferEh>
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    11de:	74 df       	rcall	.-280    	; 0x10c8 <_ZN8SPIClass8transferEh>
    11e0:	18 2f       	mov	r17, r24
    11e2:	ce 01       	movw	r24, r28
    11e4:	b1 df       	rcall	.-158    	; 0x1148 <_ZN7MCP25156endSPIEv>
    11e6:	81 2f       	mov	r24, r17
    11e8:	df 91       	pop	r29
    11ea:	cf 91       	pop	r28
    11ec:	1f 91       	pop	r17
    11ee:	08 95       	ret

000011f0 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>:
    11f0:	df 92       	push	r13
    11f2:	ef 92       	push	r14
    11f4:	ff 92       	push	r15
    11f6:	0f 93       	push	r16
    11f8:	1f 93       	push	r17
    11fa:	cf 93       	push	r28
    11fc:	df 93       	push	r29
    11fe:	8c 01       	movw	r16, r24
    1200:	c6 2f       	mov	r28, r22
    1202:	d4 2e       	mov	r13, r20
    1204:	e5 2e       	mov	r14, r21
    1206:	f2 2e       	mov	r15, r18
    1208:	66 df       	rcall	.-308    	; 0x10d6 <_ZN7MCP25158startSPIEv>
    120a:	83 e0       	ldi	r24, 0x03	; 3
    120c:	5d df       	rcall	.-326    	; 0x10c8 <_ZN8SPIClass8transferEh>
    120e:	8c 2f       	mov	r24, r28
    1210:	5b df       	rcall	.-330    	; 0x10c8 <_ZN8SPIClass8transferEh>
    1212:	cd 2d       	mov	r28, r13
    1214:	de 2d       	mov	r29, r14
    1216:	ce 01       	movw	r24, r28
    1218:	8f 0d       	add	r24, r15
    121a:	91 1d       	adc	r25, r1
    121c:	7c 01       	movw	r14, r24
    121e:	ce 15       	cp	r28, r14
    1220:	df 05       	cpc	r29, r15
    1222:	21 f0       	breq	.+8      	; 0x122c <_ZN7MCP251513readRegistersENS_8REGISTEREPhh+0x3c>
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	50 df       	rcall	.-352    	; 0x10c8 <_ZN8SPIClass8transferEh>
    1228:	89 93       	st	Y+, r24
    122a:	f9 cf       	rjmp	.-14     	; 0x121e <_ZN7MCP251513readRegistersENS_8REGISTEREPhh+0x2e>
    122c:	c8 01       	movw	r24, r16
    122e:	df 91       	pop	r29
    1230:	cf 91       	pop	r28
    1232:	1f 91       	pop	r17
    1234:	0f 91       	pop	r16
    1236:	ff 90       	pop	r15
    1238:	ef 90       	pop	r14
    123a:	df 90       	pop	r13
    123c:	85 cf       	rjmp	.-246    	; 0x1148 <_ZN7MCP25156endSPIEv>

0000123e <_ZN7MCP251511setRegisterENS_8REGISTEREh>:
    123e:	0f 93       	push	r16
    1240:	1f 93       	push	r17
    1242:	cf 93       	push	r28
    1244:	df 93       	push	r29
    1246:	ec 01       	movw	r28, r24
    1248:	06 2f       	mov	r16, r22
    124a:	14 2f       	mov	r17, r20
    124c:	44 df       	rcall	.-376    	; 0x10d6 <_ZN7MCP25158startSPIEv>
    124e:	82 e0       	ldi	r24, 0x02	; 2
    1250:	3b df       	rcall	.-394    	; 0x10c8 <_ZN8SPIClass8transferEh>
    1252:	80 2f       	mov	r24, r16
    1254:	39 df       	rcall	.-398    	; 0x10c8 <_ZN8SPIClass8transferEh>
    1256:	81 2f       	mov	r24, r17
    1258:	37 df       	rcall	.-402    	; 0x10c8 <_ZN8SPIClass8transferEh>
    125a:	ce 01       	movw	r24, r28
    125c:	df 91       	pop	r29
    125e:	cf 91       	pop	r28
    1260:	1f 91       	pop	r17
    1262:	0f 91       	pop	r16
    1264:	71 cf       	rjmp	.-286    	; 0x1148 <_ZN7MCP25156endSPIEv>

00001266 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>:
    1266:	df 92       	push	r13
    1268:	ef 92       	push	r14
    126a:	ff 92       	push	r15
    126c:	0f 93       	push	r16
    126e:	1f 93       	push	r17
    1270:	cf 93       	push	r28
    1272:	df 93       	push	r29
    1274:	8c 01       	movw	r16, r24
    1276:	c6 2f       	mov	r28, r22
    1278:	d4 2e       	mov	r13, r20
    127a:	e5 2e       	mov	r14, r21
    127c:	f2 2e       	mov	r15, r18
    127e:	2b df       	rcall	.-426    	; 0x10d6 <_ZN7MCP25158startSPIEv>
    1280:	82 e0       	ldi	r24, 0x02	; 2
    1282:	22 df       	rcall	.-444    	; 0x10c8 <_ZN8SPIClass8transferEh>
    1284:	8c 2f       	mov	r24, r28
    1286:	20 df       	rcall	.-448    	; 0x10c8 <_ZN8SPIClass8transferEh>
    1288:	cd 2d       	mov	r28, r13
    128a:	de 2d       	mov	r29, r14
    128c:	ce 01       	movw	r24, r28
    128e:	8f 0d       	add	r24, r15
    1290:	91 1d       	adc	r25, r1
    1292:	7c 01       	movw	r14, r24
    1294:	ce 15       	cp	r28, r14
    1296:	df 05       	cpc	r29, r15
    1298:	19 f0       	breq	.+6      	; 0x12a0 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh+0x3a>
    129a:	89 91       	ld	r24, Y+
    129c:	15 df       	rcall	.-470    	; 0x10c8 <_ZN8SPIClass8transferEh>
    129e:	fa cf       	rjmp	.-12     	; 0x1294 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh+0x2e>
    12a0:	c8 01       	movw	r24, r16
    12a2:	df 91       	pop	r29
    12a4:	cf 91       	pop	r28
    12a6:	1f 91       	pop	r17
    12a8:	0f 91       	pop	r16
    12aa:	ff 90       	pop	r15
    12ac:	ef 90       	pop	r14
    12ae:	df 90       	pop	r13
    12b0:	4b cf       	rjmp	.-362    	; 0x1148 <_ZN7MCP25156endSPIEv>

000012b2 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>:
    12b2:	ff 92       	push	r15
    12b4:	0f 93       	push	r16
    12b6:	1f 93       	push	r17
    12b8:	cf 93       	push	r28
    12ba:	df 93       	push	r29
    12bc:	ec 01       	movw	r28, r24
    12be:	f6 2e       	mov	r15, r22
    12c0:	04 2f       	mov	r16, r20
    12c2:	12 2f       	mov	r17, r18
    12c4:	08 df       	rcall	.-496    	; 0x10d6 <_ZN7MCP25158startSPIEv>
    12c6:	85 e0       	ldi	r24, 0x05	; 5
    12c8:	ff de       	rcall	.-514    	; 0x10c8 <_ZN8SPIClass8transferEh>
    12ca:	8f 2d       	mov	r24, r15
    12cc:	fd de       	rcall	.-518    	; 0x10c8 <_ZN8SPIClass8transferEh>
    12ce:	80 2f       	mov	r24, r16
    12d0:	fb de       	rcall	.-522    	; 0x10c8 <_ZN8SPIClass8transferEh>
    12d2:	81 2f       	mov	r24, r17
    12d4:	f9 de       	rcall	.-526    	; 0x10c8 <_ZN8SPIClass8transferEh>
    12d6:	ce 01       	movw	r24, r28
    12d8:	df 91       	pop	r29
    12da:	cf 91       	pop	r28
    12dc:	1f 91       	pop	r17
    12de:	0f 91       	pop	r16
    12e0:	ff 90       	pop	r15
    12e2:	32 cf       	rjmp	.-412    	; 0x1148 <_ZN7MCP25156endSPIEv>

000012e4 <_ZN7MCP25159getStatusEv>:
    12e4:	1f 93       	push	r17
    12e6:	cf 93       	push	r28
    12e8:	df 93       	push	r29
    12ea:	ec 01       	movw	r28, r24
    12ec:	f4 de       	rcall	.-536    	; 0x10d6 <_ZN7MCP25158startSPIEv>
    12ee:	80 ea       	ldi	r24, 0xA0	; 160
    12f0:	eb de       	rcall	.-554    	; 0x10c8 <_ZN8SPIClass8transferEh>
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	e9 de       	rcall	.-558    	; 0x10c8 <_ZN8SPIClass8transferEh>
    12f6:	18 2f       	mov	r17, r24
    12f8:	ce 01       	movw	r24, r28
    12fa:	26 df       	rcall	.-436    	; 0x1148 <_ZN7MCP25156endSPIEv>
    12fc:	81 2f       	mov	r24, r17
    12fe:	df 91       	pop	r29
    1300:	cf 91       	pop	r28
    1302:	1f 91       	pop	r17
    1304:	08 95       	ret

00001306 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>:
    1306:	cf 92       	push	r12
    1308:	df 92       	push	r13
    130a:	ef 92       	push	r14
    130c:	ff 92       	push	r15
    130e:	1f 93       	push	r17
    1310:	cf 93       	push	r28
    1312:	df 93       	push	r29
    1314:	ec 01       	movw	r28, r24
    1316:	16 2f       	mov	r17, r22
    1318:	26 2f       	mov	r18, r22
    131a:	40 ee       	ldi	r20, 0xE0	; 224
    131c:	6f e0       	ldi	r22, 0x0F	; 15
    131e:	c9 df       	rcall	.-110    	; 0x12b2 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
    1320:	17 dd       	rcall	.-1490   	; 0xd50 <millis>
    1322:	6b 01       	movw	r12, r22
    1324:	7c 01       	movw	r14, r24
    1326:	2a e0       	ldi	r18, 0x0A	; 10
    1328:	c2 0e       	add	r12, r18
    132a:	d1 1c       	adc	r13, r1
    132c:	e1 1c       	adc	r14, r1
    132e:	f1 1c       	adc	r15, r1
    1330:	0f dd       	rcall	.-1506   	; 0xd50 <millis>
    1332:	6c 15       	cp	r22, r12
    1334:	7d 05       	cpc	r23, r13
    1336:	8e 05       	cpc	r24, r14
    1338:	9f 05       	cpc	r25, r15
    133a:	40 f4       	brcc	.+16     	; 0x134c <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x46>
    133c:	6e e0       	ldi	r22, 0x0E	; 14
    133e:	ce 01       	movw	r24, r28
    1340:	43 df       	rcall	.-378    	; 0x11c8 <_ZN7MCP251512readRegisterENS_8REGISTERE>
    1342:	80 7e       	andi	r24, 0xE0	; 224
    1344:	18 13       	cpse	r17, r24
    1346:	f4 cf       	rjmp	.-24     	; 0x1330 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x2a>
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	01 c0       	rjmp	.+2      	; 0x134e <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x48>
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	91 e0       	ldi	r25, 0x01	; 1
    1350:	89 27       	eor	r24, r25
    1352:	df 91       	pop	r29
    1354:	cf 91       	pop	r28
    1356:	1f 91       	pop	r17
    1358:	ff 90       	pop	r15
    135a:	ef 90       	pop	r14
    135c:	df 90       	pop	r13
    135e:	cf 90       	pop	r12
    1360:	08 95       	ret

00001362 <_ZN7MCP251513setConfigModeEv>:
    1362:	60 e8       	ldi	r22, 0x80	; 128
    1364:	d0 cf       	rjmp	.-96     	; 0x1306 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>

00001366 <_ZN7MCP251513setNormalModeEv>:
    1366:	60 e0       	ldi	r22, 0x00	; 0
    1368:	ce cf       	rjmp	.-100    	; 0x1306 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>

0000136a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK>:
    136a:	0f 93       	push	r16
    136c:	1f 93       	push	r17
    136e:	cf 93       	push	r28
    1370:	df 93       	push	r29
    1372:	8c 01       	movw	r16, r24
    1374:	c6 2f       	mov	r28, r22
    1376:	d4 2f       	mov	r29, r20
    1378:	f4 df       	rcall	.-24     	; 0x1362 <_ZN7MCP251513setConfigModeEv>
    137a:	81 11       	cpse	r24, r1
    137c:	ba c0       	rjmp	.+372    	; 0x14f2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x188>
    137e:	d1 30       	cpi	r29, 0x01	; 1
    1380:	b1 f1       	breq	.+108    	; 0x13ee <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x84>
    1382:	08 f4       	brcc	.+2      	; 0x1386 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x1c>
    1384:	69 c0       	rjmp	.+210    	; 0x1458 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0xee>
    1386:	d2 30       	cpi	r29, 0x02	; 2
    1388:	09 f0       	breq	.+2      	; 0x138c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x22>
    138a:	96 c0       	rjmp	.+300    	; 0x14b8 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x14e>
    138c:	8c 2f       	mov	r24, r28
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	80 31       	cpi	r24, 0x10	; 16
    1392:	91 05       	cpc	r25, r1
    1394:	08 f0       	brcs	.+2      	; 0x1398 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x2e>
    1396:	90 c0       	rjmp	.+288    	; 0x14b8 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x14e>
    1398:	fc 01       	movw	r30, r24
    139a:	88 27       	eor	r24, r24
    139c:	ec 57       	subi	r30, 0x7C	; 124
    139e:	ff 4f       	sbci	r31, 0xFF	; 255
    13a0:	8f 4f       	sbci	r24, 0xFF	; 255
    13a2:	51 c5       	rjmp	.+2722   	; 0x1e46 <__tablejump2__>
    13a4:	c7 e8       	ldi	r28, 0x87	; 135
    13a6:	df eb       	ldi	r29, 0xBF	; 191
    13a8:	33 c0       	rjmp	.+102    	; 0x1410 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0xa6>
    13aa:	c4 e8       	ldi	r28, 0x84	; 132
    13ac:	d4 ea       	ldi	r29, 0xA4	; 164
    13ae:	8c c0       	rjmp	.+280    	; 0x14c8 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15e>
    13b0:	c5 e8       	ldi	r28, 0x85	; 133
    13b2:	d2 ee       	ldi	r29, 0xE2	; 226
    13b4:	47 e4       	ldi	r20, 0x47	; 71
    13b6:	91 c0       	rjmp	.+290    	; 0x14da <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
    13b8:	c7 e8       	ldi	r28, 0x87	; 135
    13ba:	df eb       	ldi	r29, 0xBF	; 191
    13bc:	6c c0       	rjmp	.+216    	; 0x1496 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x12c>
    13be:	c6 e8       	ldi	r28, 0x86	; 134
    13c0:	d4 eb       	ldi	r29, 0xB4	; 180
    13c2:	69 c0       	rjmp	.+210    	; 0x1496 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x12c>
    13c4:	c7 e8       	ldi	r28, 0x87	; 135
    13c6:	df eb       	ldi	r29, 0xBF	; 191
    13c8:	6a c0       	rjmp	.+212    	; 0x149e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x134>
    13ca:	c6 e8       	ldi	r28, 0x86	; 134
    13cc:	d4 eb       	ldi	r29, 0xB4	; 180
    13ce:	67 c0       	rjmp	.+206    	; 0x149e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x134>
    13d0:	c5 e8       	ldi	r28, 0x85	; 133
    13d2:	d1 eb       	ldi	r29, 0xB1	; 177
    13d4:	64 c0       	rjmp	.+200    	; 0x149e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x134>
    13d6:	c6 e8       	ldi	r28, 0x86	; 134
    13d8:	d4 eb       	ldi	r29, 0xB4	; 180
    13da:	69 c0       	rjmp	.+210    	; 0x14ae <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x144>
    13dc:	c5 e8       	ldi	r28, 0x85	; 133
    13de:	d1 eb       	ldi	r29, 0xB1	; 177
    13e0:	66 c0       	rjmp	.+204    	; 0x14ae <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x144>
    13e2:	c2 e8       	ldi	r28, 0x82	; 130
    13e4:	d0 e9       	ldi	r29, 0x90	; 144
    13e6:	63 c0       	rjmp	.+198    	; 0x14ae <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x144>
    13e8:	c0 e8       	ldi	r28, 0x80	; 128
    13ea:	d0 e8       	ldi	r29, 0x80	; 128
    13ec:	60 c0       	rjmp	.+192    	; 0x14ae <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x144>
    13ee:	8c 2f       	mov	r24, r28
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	80 31       	cpi	r24, 0x10	; 16
    13f4:	91 05       	cpc	r25, r1
    13f6:	08 f0       	brcs	.+2      	; 0x13fa <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x90>
    13f8:	5f c0       	rjmp	.+190    	; 0x14b8 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x14e>
    13fa:	fc 01       	movw	r30, r24
    13fc:	88 27       	eor	r24, r24
    13fe:	ec 56       	subi	r30, 0x6C	; 108
    1400:	ff 4f       	sbci	r31, 0xFF	; 255
    1402:	8f 4f       	sbci	r24, 0xFF	; 255
    1404:	20 c5       	rjmp	.+2624   	; 0x1e46 <__tablejump2__>
    1406:	c7 e8       	ldi	r28, 0x87	; 135
    1408:	df ef       	ldi	r29, 0xFF	; 255
    140a:	5a c0       	rjmp	.+180    	; 0x14c0 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x156>
    140c:	c7 e8       	ldi	r28, 0x87	; 135
    140e:	df ef       	ldi	r29, 0xFF	; 255
    1410:	4f e0       	ldi	r20, 0x0F	; 15
    1412:	63 c0       	rjmp	.+198    	; 0x14da <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
    1414:	c5 e8       	ldi	r28, 0x85	; 133
    1416:	d1 ef       	ldi	r29, 0xF1	; 241
    1418:	4e e4       	ldi	r20, 0x4E	; 78
    141a:	5f c0       	rjmp	.+190    	; 0x14da <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
    141c:	c7 e8       	ldi	r28, 0x87	; 135
    141e:	df ef       	ldi	r29, 0xFF	; 255
    1420:	53 c0       	rjmp	.+166    	; 0x14c8 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15e>
    1422:	c7 e8       	ldi	r28, 0x87	; 135
    1424:	da ef       	ldi	r29, 0xFA	; 250
    1426:	50 c0       	rjmp	.+160    	; 0x14c8 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15e>
    1428:	c7 e8       	ldi	r28, 0x87	; 135
    142a:	df ef       	ldi	r29, 0xFF	; 255
    142c:	34 c0       	rjmp	.+104    	; 0x1496 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x12c>
    142e:	c7 e0       	ldi	r28, 0x07	; 7
    1430:	de eb       	ldi	r29, 0xBE	; 190
    1432:	31 c0       	rjmp	.+98     	; 0x1496 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x12c>
    1434:	c7 e0       	ldi	r28, 0x07	; 7
    1436:	dd ea       	ldi	r29, 0xAD	; 173
    1438:	2e c0       	rjmp	.+92     	; 0x1496 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x12c>
    143a:	c6 e8       	ldi	r28, 0x86	; 134
    143c:	d0 ef       	ldi	r29, 0xF0	; 240
    143e:	2b c0       	rjmp	.+86     	; 0x1496 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x12c>
    1440:	c7 e8       	ldi	r28, 0x87	; 135
    1442:	da ef       	ldi	r29, 0xFA	; 250
    1444:	2c c0       	rjmp	.+88     	; 0x149e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x134>
    1446:	c5 e8       	ldi	r28, 0x85	; 133
    1448:	d1 ef       	ldi	r29, 0xF1	; 241
    144a:	2d c0       	rjmp	.+90     	; 0x14a6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x13c>
    144c:	c6 e8       	ldi	r28, 0x86	; 134
    144e:	d0 ef       	ldi	r29, 0xF0	; 240
    1450:	2e c0       	rjmp	.+92     	; 0x14ae <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x144>
    1452:	c2 e8       	ldi	r28, 0x82	; 130
    1454:	d0 ed       	ldi	r29, 0xD0	; 208
    1456:	2b c0       	rjmp	.+86     	; 0x14ae <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x144>
    1458:	8c 2f       	mov	r24, r28
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	fc 01       	movw	r30, r24
    145e:	34 97       	sbiw	r30, 0x04	; 4
    1460:	ec 30       	cpi	r30, 0x0C	; 12
    1462:	f1 05       	cpc	r31, r1
    1464:	48 f5       	brcc	.+82     	; 0x14b8 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x14e>
    1466:	88 27       	eor	r24, r24
    1468:	ec 55       	subi	r30, 0x5C	; 92
    146a:	ff 4f       	sbci	r31, 0xFF	; 255
    146c:	8f 4f       	sbci	r24, 0xFF	; 255
    146e:	eb c4       	rjmp	.+2518   	; 0x1e46 <__tablejump2__>
    1470:	c7 e8       	ldi	r28, 0x87	; 135
    1472:	df ef       	ldi	r29, 0xFF	; 255
    1474:	02 c0       	rjmp	.+4      	; 0x147a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x110>
    1476:	c7 e8       	ldi	r28, 0x87	; 135
    1478:	da ef       	ldi	r29, 0xFA	; 250
    147a:	49 e0       	ldi	r20, 0x09	; 9
    147c:	2e c0       	rjmp	.+92     	; 0x14da <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
    147e:	c7 e8       	ldi	r28, 0x87	; 135
    1480:	df ef       	ldi	r29, 0xFF	; 255
    1482:	02 c0       	rjmp	.+4      	; 0x1488 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x11e>
    1484:	c7 e8       	ldi	r28, 0x87	; 135
    1486:	de ef       	ldi	r29, 0xFE	; 254
    1488:	44 e0       	ldi	r20, 0x04	; 4
    148a:	27 c0       	rjmp	.+78     	; 0x14da <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
    148c:	c7 e8       	ldi	r28, 0x87	; 135
    148e:	da ef       	ldi	r29, 0xFA	; 250
    1490:	fb cf       	rjmp	.-10     	; 0x1488 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x11e>
    1492:	c7 e8       	ldi	r28, 0x87	; 135
    1494:	da ef       	ldi	r29, 0xFA	; 250
    1496:	43 e0       	ldi	r20, 0x03	; 3
    1498:	20 c0       	rjmp	.+64     	; 0x14da <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
    149a:	c7 e8       	ldi	r28, 0x87	; 135
    149c:	df ef       	ldi	r29, 0xFF	; 255
    149e:	41 e0       	ldi	r20, 0x01	; 1
    14a0:	1c c0       	rjmp	.+56     	; 0x14da <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
    14a2:	c6 e8       	ldi	r28, 0x86	; 134
    14a4:	db ef       	ldi	r29, 0xFB	; 251
    14a6:	41 e4       	ldi	r20, 0x41	; 65
    14a8:	18 c0       	rjmp	.+48     	; 0x14da <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
    14aa:	c7 e8       	ldi	r28, 0x87	; 135
    14ac:	da ef       	ldi	r29, 0xFA	; 250
    14ae:	40 e0       	ldi	r20, 0x00	; 0
    14b0:	14 c0       	rjmp	.+40     	; 0x14da <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
    14b2:	c2 e8       	ldi	r28, 0x82	; 130
    14b4:	d9 ed       	ldi	r29, 0xD9	; 217
    14b6:	fb cf       	rjmp	.-10     	; 0x14ae <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x144>
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	1b c0       	rjmp	.+54     	; 0x14f2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x188>
    14bc:	c7 e8       	ldi	r28, 0x87	; 135
    14be:	df eb       	ldi	r29, 0xBF	; 191
    14c0:	4f e1       	ldi	r20, 0x1F	; 31
    14c2:	0b c0       	rjmp	.+22     	; 0x14da <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
    14c4:	c7 e8       	ldi	r28, 0x87	; 135
    14c6:	df eb       	ldi	r29, 0xBF	; 191
    14c8:	47 e0       	ldi	r20, 0x07	; 7
    14ca:	07 c0       	rjmp	.+14     	; 0x14da <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
    14cc:	c7 e8       	ldi	r28, 0x87	; 135
    14ce:	df ef       	ldi	r29, 0xFF	; 255
    14d0:	4f e3       	ldi	r20, 0x3F	; 63
    14d2:	03 c0       	rjmp	.+6      	; 0x14da <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
    14d4:	c7 e8       	ldi	r28, 0x87	; 135
    14d6:	df ef       	ldi	r29, 0xFF	; 255
    14d8:	4b e0       	ldi	r20, 0x0B	; 11
    14da:	6a e2       	ldi	r22, 0x2A	; 42
    14dc:	c8 01       	movw	r24, r16
    14de:	af de       	rcall	.-674    	; 0x123e <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    14e0:	4d 2f       	mov	r20, r29
    14e2:	69 e2       	ldi	r22, 0x29	; 41
    14e4:	c8 01       	movw	r24, r16
    14e6:	ab de       	rcall	.-682    	; 0x123e <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    14e8:	4c 2f       	mov	r20, r28
    14ea:	68 e2       	ldi	r22, 0x28	; 40
    14ec:	c8 01       	movw	r24, r16
    14ee:	a7 de       	rcall	.-690    	; 0x123e <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    14f0:	80 e0       	ldi	r24, 0x00	; 0
    14f2:	df 91       	pop	r29
    14f4:	cf 91       	pop	r28
    14f6:	1f 91       	pop	r17
    14f8:	0f 91       	pop	r16
    14fa:	08 95       	ret

000014fc <_ZN7MCP25159prepareIdEPhbm>:

void MCP2515::prepareId(uint8_t *buffer, const bool ext, const uint32_t id)
{
    14fc:	0f 93       	push	r16
    14fe:	1f 93       	push	r17
    1500:	fb 01       	movw	r30, r22
    uint16_t canid = (uint16_t)(id & 0x0FFFF);

    if (ext) {
    1502:	44 23       	and	r20, r20
    1504:	b1 f0       	breq	.+44     	; 0x1532 <_ZN7MCP25159prepareIdEPhbm+0x36>
        buffer[MCP_EID0] = (uint8_t) (canid & 0xFF);
    1506:	03 83       	std	Z+3, r16	; 0x03
        buffer[MCP_EID8] = (uint8_t) (canid >> 8);
    1508:	12 83       	std	Z+2, r17	; 0x02
        canid = (uint16_t)(id >> 16);
    150a:	89 01       	movw	r16, r18
    150c:	22 27       	eor	r18, r18
    150e:	33 27       	eor	r19, r19
        buffer[MCP_SIDL] = (uint8_t) (canid & 0x03);
        buffer[MCP_SIDL] += (uint8_t) ((canid & 0x1C) << 3);
        buffer[MCP_SIDL] |= TXB_EXIDE_MASK;
    1510:	90 2f       	mov	r25, r16
    1512:	9c 71       	andi	r25, 0x1C	; 28
    1514:	80 2f       	mov	r24, r16
    1516:	83 70       	andi	r24, 0x03	; 3
    1518:	48 e0       	ldi	r20, 0x08	; 8
    151a:	94 9f       	mul	r25, r20
    151c:	80 0d       	add	r24, r0
    151e:	11 24       	eor	r1, r1
    1520:	88 60       	ori	r24, 0x08	; 8
    1522:	81 83       	std	Z+1, r24	; 0x01
        buffer[MCP_SIDH] = (uint8_t) (canid >> 5);
    1524:	55 e0       	ldi	r21, 0x05	; 5
    1526:	16 95       	lsr	r17
    1528:	07 95       	ror	r16
    152a:	5a 95       	dec	r21
    152c:	e1 f7       	brne	.-8      	; 0x1526 <_ZN7MCP25159prepareIdEPhbm+0x2a>
    152e:	00 83       	st	Z, r16
    1530:	0d c0       	rjmp	.+26     	; 0x154c <_ZN7MCP25159prepareIdEPhbm+0x50>
    } else {
        buffer[MCP_SIDH] = (uint8_t) (canid >> 3);
    1532:	c8 01       	movw	r24, r16
    1534:	23 e0       	ldi	r18, 0x03	; 3
    1536:	96 95       	lsr	r25
    1538:	87 95       	ror	r24
    153a:	2a 95       	dec	r18
    153c:	e1 f7       	brne	.-8      	; 0x1536 <_ZN7MCP25159prepareIdEPhbm+0x3a>
    153e:	80 83       	st	Z, r24
        buffer[MCP_SIDL] = (uint8_t) ((canid & 0x07 ) << 5);
    1540:	02 95       	swap	r16
    1542:	00 0f       	add	r16, r16
    1544:	00 7e       	andi	r16, 0xE0	; 224
    1546:	01 83       	std	Z+1, r16	; 0x01
        buffer[MCP_EID0] = 0;
    1548:	13 82       	std	Z+3, r1	; 0x03
        buffer[MCP_EID8] = 0;
    154a:	12 82       	std	Z+2, r1	; 0x02
    }
}
    154c:	1f 91       	pop	r17
    154e:	0f 91       	pop	r16
    1550:	08 95       	ret

00001552 <_ZN7MCP251513setFilterMaskENS_4MASKEbm>:

MCP2515::ERROR MCP2515::setFilterMask(const MASK mask, const bool ext, const uint32_t ulData)
{
    1552:	8f 92       	push	r8
    1554:	9f 92       	push	r9
    1556:	af 92       	push	r10
    1558:	bf 92       	push	r11
    155a:	cf 92       	push	r12
    155c:	df 92       	push	r13
    155e:	ef 92       	push	r14
    1560:	ff 92       	push	r15
    1562:	0f 93       	push	r16
    1564:	1f 93       	push	r17
    1566:	cf 93       	push	r28
    1568:	df 93       	push	r29
    156a:	00 d0       	rcall	.+0      	; 0x156c <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x1a>
    156c:	1f 92       	push	r1
    156e:	cd b7       	in	r28, 0x3d	; 61
    1570:	de b7       	in	r29, 0x3e	; 62
    1572:	7c 01       	movw	r14, r24
    1574:	d6 2e       	mov	r13, r22
    1576:	c4 2e       	mov	r12, r20
    1578:	48 01       	movw	r8, r16
    157a:	59 01       	movw	r10, r18
    ERROR res = setConfigMode();
    157c:	f2 de       	rcall	.-540    	; 0x1362 <_ZN7MCP251513setConfigModeEv>
    if (res != ERROR_OK) {
    157e:	81 11       	cpse	r24, r1
    1580:	19 c0       	rjmp	.+50     	; 0x15b4 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x62>
        return res;
    }
    
    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
    1582:	95 01       	movw	r18, r10
    1584:	84 01       	movw	r16, r8
    1586:	4c 2d       	mov	r20, r12
    1588:	be 01       	movw	r22, r28
    158a:	6f 5f       	subi	r22, 0xFF	; 255
    158c:	7f 4f       	sbci	r23, 0xFF	; 255
    158e:	c7 01       	movw	r24, r14
    1590:	b5 df       	rcall	.-150    	; 0x14fc <_ZN7MCP25159prepareIdEPhbm>

    REGISTER reg;
    switch (mask) {
    1592:	dd 20       	and	r13, r13
    1594:	29 f0       	breq	.+10     	; 0x15a0 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x4e>
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	d8 12       	cpse	r13, r24
    159a:	0b c0       	rjmp	.+22     	; 0x15b2 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x60>
        case MASK0: reg = MCP_RXM0SIDH; break;
        case MASK1: reg = MCP_RXM1SIDH; break;
    159c:	64 e2       	ldi	r22, 0x24	; 36
    159e:	01 c0       	rjmp	.+2      	; 0x15a2 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x50>
    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);

    REGISTER reg;
    switch (mask) {
        case MASK0: reg = MCP_RXM0SIDH; break;
    15a0:	60 e2       	ldi	r22, 0x20	; 32
        case MASK1: reg = MCP_RXM1SIDH; break;
        default:
            return ERROR_FAIL;
    }

    setRegisters(reg, tbufdata, 4);
    15a2:	24 e0       	ldi	r18, 0x04	; 4
    15a4:	ae 01       	movw	r20, r28
    15a6:	4f 5f       	subi	r20, 0xFF	; 255
    15a8:	5f 4f       	sbci	r21, 0xFF	; 255
    15aa:	c7 01       	movw	r24, r14
    15ac:	5c de       	rcall	.-840    	; 0x1266 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    
    return ERROR_OK;
    15ae:	80 e0       	ldi	r24, 0x00	; 0
    15b0:	01 c0       	rjmp	.+2      	; 0x15b4 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x62>
    REGISTER reg;
    switch (mask) {
        case MASK0: reg = MCP_RXM0SIDH; break;
        case MASK1: reg = MCP_RXM1SIDH; break;
        default:
            return ERROR_FAIL;
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    }

    setRegisters(reg, tbufdata, 4);
    
    return ERROR_OK;
}
    15b4:	0f 90       	pop	r0
    15b6:	0f 90       	pop	r0
    15b8:	0f 90       	pop	r0
    15ba:	0f 90       	pop	r0
    15bc:	df 91       	pop	r29
    15be:	cf 91       	pop	r28
    15c0:	1f 91       	pop	r17
    15c2:	0f 91       	pop	r16
    15c4:	ff 90       	pop	r15
    15c6:	ef 90       	pop	r14
    15c8:	df 90       	pop	r13
    15ca:	cf 90       	pop	r12
    15cc:	bf 90       	pop	r11
    15ce:	af 90       	pop	r10
    15d0:	9f 90       	pop	r9
    15d2:	8f 90       	pop	r8
    15d4:	08 95       	ret

000015d6 <_ZN7MCP25159setFilterENS_3RXFEbm>:

MCP2515::ERROR MCP2515::setFilter(const RXF num, const bool ext, const uint32_t ulData)
{
    15d6:	8f 92       	push	r8
    15d8:	9f 92       	push	r9
    15da:	af 92       	push	r10
    15dc:	bf 92       	push	r11
    15de:	cf 92       	push	r12
    15e0:	df 92       	push	r13
    15e2:	ef 92       	push	r14
    15e4:	ff 92       	push	r15
    15e6:	0f 93       	push	r16
    15e8:	1f 93       	push	r17
    15ea:	cf 93       	push	r28
    15ec:	df 93       	push	r29
    15ee:	00 d0       	rcall	.+0      	; 0x15f0 <_ZN7MCP25159setFilterENS_3RXFEbm+0x1a>
    15f0:	1f 92       	push	r1
    15f2:	cd b7       	in	r28, 0x3d	; 61
    15f4:	de b7       	in	r29, 0x3e	; 62
    15f6:	6c 01       	movw	r12, r24
    15f8:	f6 2e       	mov	r15, r22
    15fa:	e4 2e       	mov	r14, r20
    15fc:	48 01       	movw	r8, r16
    15fe:	59 01       	movw	r10, r18
    ERROR res = setConfigMode();
    1600:	b0 de       	rcall	.-672    	; 0x1362 <_ZN7MCP251513setConfigModeEv>
    if (res != ERROR_OK) {
    1602:	81 11       	cpse	r24, r1
    1604:	34 c0       	rjmp	.+104    	; 0x166e <_ZN7MCP25159setFilterENS_3RXFEbm+0x98>
        return res;
    }

    REGISTER reg;

    switch (num) {
    1606:	82 e0       	ldi	r24, 0x02	; 2
    1608:	f8 16       	cp	r15, r24
    160a:	a9 f0       	breq	.+42     	; 0x1636 <_ZN7MCP25159setFilterENS_3RXFEbm+0x60>
    160c:	8f 15       	cp	r24, r15
    160e:	40 f0       	brcs	.+16     	; 0x1620 <_ZN7MCP25159setFilterENS_3RXFEbm+0x4a>
    1610:	ff 20       	and	r15, r15
    1612:	d1 f0       	breq	.+52     	; 0x1648 <_ZN7MCP25159setFilterENS_3RXFEbm+0x72>
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	f8 12       	cpse	r15, r24
    1618:	29 c0       	rjmp	.+82     	; 0x166c <_ZN7MCP25159setFilterENS_3RXFEbm+0x96>
        case RXF0: reg = MCP_RXF0SIDH; break;
        case RXF1: reg = MCP_RXF1SIDH; break;
    161a:	44 e0       	ldi	r20, 0x04	; 4
    161c:	f4 2e       	mov	r15, r20
    161e:	15 c0       	rjmp	.+42     	; 0x164a <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        return res;
    }

    REGISTER reg;

    switch (num) {
    1620:	84 e0       	ldi	r24, 0x04	; 4
    1622:	f8 16       	cp	r15, r24
    1624:	71 f0       	breq	.+28     	; 0x1642 <_ZN7MCP25159setFilterENS_3RXFEbm+0x6c>
    1626:	f8 16       	cp	r15, r24
    1628:	48 f0       	brcs	.+18     	; 0x163c <_ZN7MCP25159setFilterENS_3RXFEbm+0x66>
    162a:	85 e0       	ldi	r24, 0x05	; 5
    162c:	f8 12       	cpse	r15, r24
    162e:	1e c0       	rjmp	.+60     	; 0x166c <_ZN7MCP25159setFilterENS_3RXFEbm+0x96>
        case RXF0: reg = MCP_RXF0SIDH; break;
        case RXF1: reg = MCP_RXF1SIDH; break;
        case RXF2: reg = MCP_RXF2SIDH; break;
        case RXF3: reg = MCP_RXF3SIDH; break;
        case RXF4: reg = MCP_RXF4SIDH; break;
        case RXF5: reg = MCP_RXF5SIDH; break;
    1630:	88 e1       	ldi	r24, 0x18	; 24
    1632:	f8 2e       	mov	r15, r24
    1634:	0a c0       	rjmp	.+20     	; 0x164a <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
    REGISTER reg;

    switch (num) {
        case RXF0: reg = MCP_RXF0SIDH; break;
        case RXF1: reg = MCP_RXF1SIDH; break;
        case RXF2: reg = MCP_RXF2SIDH; break;
    1636:	38 e0       	ldi	r19, 0x08	; 8
    1638:	f3 2e       	mov	r15, r19
    163a:	07 c0       	rjmp	.+14     	; 0x164a <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF3: reg = MCP_RXF3SIDH; break;
    163c:	20 e1       	ldi	r18, 0x10	; 16
    163e:	f2 2e       	mov	r15, r18
    1640:	04 c0       	rjmp	.+8      	; 0x164a <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF4: reg = MCP_RXF4SIDH; break;
    1642:	94 e1       	ldi	r25, 0x14	; 20
    1644:	f9 2e       	mov	r15, r25
    1646:	01 c0       	rjmp	.+2      	; 0x164a <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
    }

    REGISTER reg;

    switch (num) {
        case RXF0: reg = MCP_RXF0SIDH; break;
    1648:	f1 2c       	mov	r15, r1
        default:
            return ERROR_FAIL;
    }

    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
    164a:	95 01       	movw	r18, r10
    164c:	84 01       	movw	r16, r8
    164e:	4e 2d       	mov	r20, r14
    1650:	be 01       	movw	r22, r28
    1652:	6f 5f       	subi	r22, 0xFF	; 255
    1654:	7f 4f       	sbci	r23, 0xFF	; 255
    1656:	c6 01       	movw	r24, r12
    1658:	51 df       	rcall	.-350    	; 0x14fc <_ZN7MCP25159prepareIdEPhbm>
    setRegisters(reg, tbufdata, 4);
    165a:	24 e0       	ldi	r18, 0x04	; 4
    165c:	ae 01       	movw	r20, r28
    165e:	4f 5f       	subi	r20, 0xFF	; 255
    1660:	5f 4f       	sbci	r21, 0xFF	; 255
    1662:	6f 2d       	mov	r22, r15
    1664:	c6 01       	movw	r24, r12
    1666:	ff dd       	rcall	.-1026   	; 0x1266 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    return ERROR_OK;
    1668:	80 e0       	ldi	r24, 0x00	; 0
    166a:	01 c0       	rjmp	.+2      	; 0x166e <_ZN7MCP25159setFilterENS_3RXFEbm+0x98>
        case RXF2: reg = MCP_RXF2SIDH; break;
        case RXF3: reg = MCP_RXF3SIDH; break;
        case RXF4: reg = MCP_RXF4SIDH; break;
        case RXF5: reg = MCP_RXF5SIDH; break;
        default:
            return ERROR_FAIL;
    166c:	81 e0       	ldi	r24, 0x01	; 1
    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
    setRegisters(reg, tbufdata, 4);

    return ERROR_OK;
}
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	0f 90       	pop	r0
    1674:	0f 90       	pop	r0
    1676:	df 91       	pop	r29
    1678:	cf 91       	pop	r28
    167a:	1f 91       	pop	r17
    167c:	0f 91       	pop	r16
    167e:	ff 90       	pop	r15
    1680:	ef 90       	pop	r14
    1682:	df 90       	pop	r13
    1684:	cf 90       	pop	r12
    1686:	bf 90       	pop	r11
    1688:	af 90       	pop	r10
    168a:	9f 90       	pop	r9
    168c:	8f 90       	pop	r8
    168e:	08 95       	ret

00001690 <_ZN7MCP25155resetEv>:
    digitalWrite(SPICS, HIGH);
    SPIn->endTransaction();
}

MCP2515::ERROR MCP2515::reset(void)
{
    1690:	af 92       	push	r10
    1692:	bf 92       	push	r11
    1694:	cf 92       	push	r12
    1696:	df 92       	push	r13
    1698:	ef 92       	push	r14
    169a:	ff 92       	push	r15
    169c:	0f 93       	push	r16
    169e:	1f 93       	push	r17
    16a0:	cf 93       	push	r28
    16a2:	df 93       	push	r29
    16a4:	cd b7       	in	r28, 0x3d	; 61
    16a6:	de b7       	in	r29, 0x3e	; 62
    16a8:	64 97       	sbiw	r28, 0x14	; 20
    16aa:	0f b6       	in	r0, 0x3f	; 63
    16ac:	f8 94       	cli
    16ae:	de bf       	out	0x3e, r29	; 62
    16b0:	0f be       	out	0x3f, r0	; 63
    16b2:	cd bf       	out	0x3d, r28	; 61
    16b4:	7c 01       	movw	r14, r24
    startSPI();
    16b6:	0f dd       	rcall	.-1506   	; 0x10d6 <_ZN7MCP25158startSPIEv>
    SPIn->transfer(INSTRUCTION_RESET);
    16b8:	80 ec       	ldi	r24, 0xC0	; 192
    16ba:	06 dd       	rcall	.-1524   	; 0x10c8 <_ZN8SPIClass8transferEh>
    endSPI();
    16bc:	c7 01       	movw	r24, r14
    16be:	44 dd       	rcall	.-1400   	; 0x1148 <_ZN7MCP25156endSPIEv>
    16c0:	6a e0       	ldi	r22, 0x0A	; 10

    delay(10);
    16c2:	70 e0       	ldi	r23, 0x00	; 0
    16c4:	80 e0       	ldi	r24, 0x00	; 0
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	74 db       	rcall	.-2328   	; 0xdb2 <delay>
    16ca:	8e 01       	movw	r16, r28

    uint8_t zeros[14];
    memset(zeros, 0, sizeof(zeros));
    16cc:	0f 5f       	subi	r16, 0xFF	; 255
    16ce:	1f 4f       	sbci	r17, 0xFF	; 255
    16d0:	8e e0       	ldi	r24, 0x0E	; 14
    16d2:	f8 01       	movw	r30, r16
    16d4:	11 92       	st	Z+, r1
    16d6:	8a 95       	dec	r24
    16d8:	e9 f7       	brne	.-6      	; 0x16d4 <_ZN7MCP25155resetEv+0x44>
    16da:	2e e0       	ldi	r18, 0x0E	; 14
    setRegisters(MCP_TXB0CTRL, zeros, 14);
    16dc:	a8 01       	movw	r20, r16
    16de:	60 e3       	ldi	r22, 0x30	; 48
    16e0:	c7 01       	movw	r24, r14
    16e2:	c1 dd       	rcall	.-1150   	; 0x1266 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    16e4:	2e e0       	ldi	r18, 0x0E	; 14
    setRegisters(MCP_TXB1CTRL, zeros, 14);
    16e6:	a8 01       	movw	r20, r16
    16e8:	60 e4       	ldi	r22, 0x40	; 64
    16ea:	c7 01       	movw	r24, r14
    16ec:	bc dd       	rcall	.-1160   	; 0x1266 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    16ee:	2e e0       	ldi	r18, 0x0E	; 14
    setRegisters(MCP_TXB2CTRL, zeros, 14);
    16f0:	a8 01       	movw	r20, r16
    16f2:	60 e5       	ldi	r22, 0x50	; 80
    16f4:	c7 01       	movw	r24, r14
    16f6:	b7 dd       	rcall	.-1170   	; 0x1266 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    16f8:	40 e0       	ldi	r20, 0x00	; 0

    setRegister(MCP_RXB0CTRL, 0);
    16fa:	60 e6       	ldi	r22, 0x60	; 96
    16fc:	c7 01       	movw	r24, r14
    16fe:	9f dd       	rcall	.-1218   	; 0x123e <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    1700:	40 e0       	ldi	r20, 0x00	; 0
    setRegister(MCP_RXB1CTRL, 0);
    1702:	60 e7       	ldi	r22, 0x70	; 112
    1704:	c7 01       	movw	r24, r14
    1706:	9b dd       	rcall	.-1226   	; 0x123e <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    1708:	43 ea       	ldi	r20, 0xA3	; 163

    setRegister(MCP_CANINTE, CANINTF_RX0IF | CANINTF_RX1IF | CANINTF_ERRIF | CANINTF_MERRF);
    170a:	6b e2       	ldi	r22, 0x2B	; 43
    170c:	c7 01       	movw	r24, r14
    170e:	97 dd       	rcall	.-1234   	; 0x123e <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    1710:	24 e0       	ldi	r18, 0x04	; 4

    // receives all valid messages using either Standard or Extended Identifiers that
    // meet filter criteria. RXF0 is applied for RXB0, RXF1 is applied for RXB1
    modifyRegister(MCP_RXB0CTRL,
                   RXBnCTRL_RXM_MASK | RXB0CTRL_BUKT | RXB0CTRL_FILHIT_MASK,
                   RXBnCTRL_RXM_STDEXT | RXB0CTRL_BUKT | RXB0CTRL_FILHIT);
    1712:	47 e6       	ldi	r20, 0x67	; 103
    1714:	60 e6       	ldi	r22, 0x60	; 96
    1716:	c7 01       	movw	r24, r14
    1718:	cc dd       	rcall	.-1128   	; 0x12b2 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
    171a:	21 e0       	ldi	r18, 0x01	; 1
    171c:	47 e6       	ldi	r20, 0x67	; 103
    modifyRegister(MCP_RXB1CTRL,
                   RXBnCTRL_RXM_MASK | RXB1CTRL_FILHIT_MASK,
                   RXBnCTRL_RXM_STDEXT | RXB1CTRL_FILHIT);
    171e:	60 e7       	ldi	r22, 0x70	; 112
    1720:	c7 01       	movw	r24, r14
    1722:	c7 dd       	rcall	.-1138   	; 0x12b2 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
    1724:	86 e0       	ldi	r24, 0x06	; 6
    1726:	e1 e0       	ldi	r30, 0x01	; 1
    1728:	f2 e0       	ldi	r31, 0x02	; 2

    // clear filters and masks
    // do not filter any standard frames for RXF0 used by RXB0
    // do not filter any extended frames for RXF1 used by RXB1
    RXF filters[] = {RXF0, RXF1, RXF2, RXF3, RXF4, RXF5};
    172a:	de 01       	movw	r26, r28
    172c:	1f 96       	adiw	r26, 0x0f	; 15
    172e:	01 90       	ld	r0, Z+
    1730:	0d 92       	st	X+, r0
    1732:	8a 95       	dec	r24
    1734:	e1 f7       	brne	.-8      	; 0x172e <_ZN7MCP25155resetEv+0x9e>
    1736:	5e 01       	movw	r10, r28
    1738:	ff e0       	ldi	r31, 0x0F	; 15
    173a:	af 0e       	add	r10, r31
    173c:	b1 1c       	adc	r11, r1
    173e:	c1 2c       	mov	r12, r1
    1740:	d1 2c       	mov	r13, r1
    1742:	f5 01       	movw	r30, r10
    for (int i=0; i<6; i++) {
    1744:	61 91       	ld	r22, Z+
    1746:	5f 01       	movw	r10, r30
        bool ext = (i == 1);
        ERROR result = setFilter(filters[i], ext, 0);
    1748:	41 e0       	ldi	r20, 0x01	; 1
    174a:	f1 e0       	ldi	r31, 0x01	; 1
    174c:	cf 16       	cp	r12, r31
    174e:	d1 04       	cpc	r13, r1
    1750:	09 f0       	breq	.+2      	; 0x1754 <_ZN7MCP25155resetEv+0xc4>
    1752:	40 e0       	ldi	r20, 0x00	; 0
    1754:	00 e0       	ldi	r16, 0x00	; 0
    1756:	10 e0       	ldi	r17, 0x00	; 0
    1758:	98 01       	movw	r18, r16
    175a:	c7 01       	movw	r24, r14
    175c:	3c df       	rcall	.-392    	; 0x15d6 <_ZN7MCP25159setFilterENS_3RXFEbm>
    175e:	81 11       	cpse	r24, r1
    1760:	17 c0       	rjmp	.+46     	; 0x1790 <_ZN7MCP25155resetEv+0x100>
    1762:	8f ef       	ldi	r24, 0xFF	; 255
        if (result != ERROR_OK) {
    1764:	c8 1a       	sub	r12, r24
    1766:	d8 0a       	sbc	r13, r24

    // clear filters and masks
    // do not filter any standard frames for RXF0 used by RXB0
    // do not filter any extended frames for RXF1 used by RXB1
    RXF filters[] = {RXF0, RXF1, RXF2, RXF3, RXF4, RXF5};
    for (int i=0; i<6; i++) {
    1768:	e6 e0       	ldi	r30, 0x06	; 6
    176a:	ce 16       	cp	r12, r30
    176c:	d1 04       	cpc	r13, r1
    176e:	49 f7       	brne	.-46     	; 0x1742 <_ZN7MCP25155resetEv+0xb2>
    1770:	00 e0       	ldi	r16, 0x00	; 0
    1772:	10 e0       	ldi	r17, 0x00	; 0
        }
    }

    MASK masks[] = {MASK0, MASK1};
    for (int i=0; i<2; i++) {
        ERROR result = setFilterMask(masks[i], true, 0);
    1774:	98 01       	movw	r18, r16
    1776:	41 e0       	ldi	r20, 0x01	; 1
    1778:	60 e0       	ldi	r22, 0x00	; 0
    177a:	c7 01       	movw	r24, r14
    177c:	ea de       	rcall	.-556    	; 0x1552 <_ZN7MCP251513setFilterMaskENS_4MASKEbm>
    177e:	81 11       	cpse	r24, r1
    1780:	07 c0       	rjmp	.+14     	; 0x1790 <_ZN7MCP25155resetEv+0x100>
        if (result != ERROR_OK) {
    1782:	00 e0       	ldi	r16, 0x00	; 0
    1784:	10 e0       	ldi	r17, 0x00	; 0
        }
    }

    MASK masks[] = {MASK0, MASK1};
    for (int i=0; i<2; i++) {
        ERROR result = setFilterMask(masks[i], true, 0);
    1786:	98 01       	movw	r18, r16
    1788:	41 e0       	ldi	r20, 0x01	; 1
    178a:	61 e0       	ldi	r22, 0x01	; 1
    178c:	c7 01       	movw	r24, r14
    178e:	e1 de       	rcall	.-574    	; 0x1552 <_ZN7MCP251513setFilterMaskENS_4MASKEbm>
    1790:	64 96       	adiw	r28, 0x14	; 20
    1792:	0f b6       	in	r0, 0x3f	; 63
    1794:	f8 94       	cli
            return result;
        }
    }

    return ERROR_OK;
}
    1796:	de bf       	out	0x3e, r29	; 62
    1798:	0f be       	out	0x3f, r0	; 63
    179a:	cd bf       	out	0x3d, r28	; 61
    179c:	df 91       	pop	r29
    179e:	cf 91       	pop	r28
    17a0:	1f 91       	pop	r17
    17a2:	0f 91       	pop	r16
    17a4:	ff 90       	pop	r15
    17a6:	ef 90       	pop	r14
    17a8:	df 90       	pop	r13
    17aa:	cf 90       	pop	r12
    17ac:	bf 90       	pop	r11
    17ae:	af 90       	pop	r10
    17b0:	08 95       	ret

000017b2 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame>:
    17b2:	4f 92       	push	r4
    17b4:	5f 92       	push	r5
    17b6:	6f 92       	push	r6

    return ERROR_OK;
}

MCP2515::ERROR MCP2515::sendMessage(const TXBn txbn, const struct can_frame *frame)
{
    17b8:	7f 92       	push	r7
    17ba:	af 92       	push	r10
    17bc:	bf 92       	push	r11
    17be:	cf 92       	push	r12
    17c0:	df 92       	push	r13
    17c2:	ef 92       	push	r14
    17c4:	ff 92       	push	r15
    17c6:	0f 93       	push	r16
    17c8:	1f 93       	push	r17
    17ca:	cf 93       	push	r28
    17cc:	df 93       	push	r29
    17ce:	cd b7       	in	r28, 0x3d	; 61
    17d0:	de b7       	in	r29, 0x3e	; 62
    17d2:	2d 97       	sbiw	r28, 0x0d	; 13
    17d4:	0f b6       	in	r0, 0x3f	; 63
    17d6:	f8 94       	cli
    17d8:	de bf       	out	0x3e, r29	; 62
    17da:	0f be       	out	0x3f, r0	; 63
    17dc:	cd bf       	out	0x3d, r28	; 61
    17de:	5c 01       	movw	r10, r24
    17e0:	fa 01       	movw	r30, r20
    if (frame->can_dlc > CAN_MAX_DLEN) {
    17e2:	24 81       	ldd	r18, Z+4	; 0x04
    17e4:	29 30       	cpi	r18, 0x09	; 9
    17e6:	08 f0       	brcs	.+2      	; 0x17ea <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0x38>
    17e8:	57 c0       	rjmp	.+174    	; 0x1898 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0xe6>
        return ERROR_FAILTX;
    }

    const struct TXBn_REGS *txbuf = &TXB[txbn];
    17ea:	e6 2e       	mov	r14, r22
    17ec:	f1 2c       	mov	r15, r1

    uint8_t data[13];

    bool ext = (frame->can_id & CAN_EFF_FLAG);
    17ee:	80 81       	ld	r24, Z
    17f0:	91 81       	ldd	r25, Z+1	; 0x01
    17f2:	a2 81       	ldd	r26, Z+2	; 0x02
    17f4:	b3 81       	ldd	r27, Z+3	; 0x03
    17f6:	ac 01       	movw	r20, r24
    17f8:	bd 01       	movw	r22, r26
    17fa:	44 27       	eor	r20, r20
    17fc:	77 fd       	sbrc	r23, 7
    17fe:	43 95       	inc	r20
    1800:	55 27       	eor	r21, r21
    1802:	66 27       	eor	r22, r22
    1804:	77 27       	eor	r23, r23
    bool rtr = (frame->can_id & CAN_RTR_FLAG);
    1806:	2c 01       	movw	r4, r24
    1808:	3d 01       	movw	r6, r26
    180a:	44 24       	eor	r4, r4
    180c:	55 24       	eor	r5, r5
    180e:	66 24       	eor	r6, r6
    1810:	20 e4       	ldi	r18, 0x40	; 64
    1812:	72 22       	and	r7, r18
    uint32_t id = (frame->can_id & (ext ? CAN_EFF_MASK : CAN_SFF_MASK));
    1814:	b7 fd       	sbrc	r27, 7
    1816:	05 c0       	rjmp	.+10     	; 0x1822 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0x70>
    1818:	0f ef       	ldi	r16, 0xFF	; 255
    181a:	17 e0       	ldi	r17, 0x07	; 7
    181c:	20 e0       	ldi	r18, 0x00	; 0
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	04 c0       	rjmp	.+8      	; 0x182a <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0x78>
    1822:	0f ef       	ldi	r16, 0xFF	; 255
    1824:	1f ef       	ldi	r17, 0xFF	; 255
    1826:	2f ef       	ldi	r18, 0xFF	; 255
    1828:	3f e1       	ldi	r19, 0x1F	; 31
    182a:	6f 01       	movw	r12, r30

    prepareId(data, ext, id);
    182c:	08 23       	and	r16, r24
    182e:	19 23       	and	r17, r25
    1830:	2a 23       	and	r18, r26
    1832:	3b 23       	and	r19, r27
    1834:	be 01       	movw	r22, r28
    1836:	6f 5f       	subi	r22, 0xFF	; 255
    1838:	7f 4f       	sbci	r23, 0xFF	; 255
    183a:	c5 01       	movw	r24, r10
    183c:	5f de       	rcall	.-834    	; 0x14fc <_ZN7MCP25159prepareIdEPhbm>
    183e:	f6 01       	movw	r30, r12
    1840:	14 81       	ldd	r17, Z+4	; 0x04

    data[MCP_DLC] = rtr ? (frame->can_dlc | RTR_MASK) : frame->can_dlc;
    1842:	81 2f       	mov	r24, r17
    1844:	45 28       	or	r4, r5
    1846:	46 28       	or	r4, r6
    1848:	47 28       	or	r4, r7
    184a:	09 f0       	breq	.+2      	; 0x184e <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0x9c>
    184c:	80 64       	ori	r24, 0x40	; 64
    184e:	8d 83       	std	Y+5, r24	; 0x05

    memcpy(&data[MCP_DATA], frame->data, frame->can_dlc);
    1850:	41 2f       	mov	r20, r17
    1852:	50 e0       	ldi	r21, 0x00	; 0
    1854:	b6 01       	movw	r22, r12
    1856:	68 5f       	subi	r22, 0xF8	; 248
    1858:	7f 4f       	sbci	r23, 0xFF	; 255
    185a:	ce 01       	movw	r24, r28
    185c:	06 96       	adiw	r24, 0x06	; 6
    185e:	fb d2       	rcall	.+1526   	; 0x1e56 <memcpy>

    setRegisters(txbuf->SIDH, data, 5 + frame->can_dlc);
    1860:	25 e0       	ldi	r18, 0x05	; 5
    1862:	21 0f       	add	r18, r17
    1864:	87 01       	movw	r16, r14
    1866:	00 0f       	add	r16, r16
    1868:	11 1f       	adc	r17, r17
    186a:	0e 0d       	add	r16, r14
    186c:	1f 1d       	adc	r17, r15
    186e:	09 53       	subi	r16, 0x39	; 57
    1870:	1d 4f       	sbci	r17, 0xFD	; 253
    1872:	ae 01       	movw	r20, r28
    1874:	4f 5f       	subi	r20, 0xFF	; 255
    1876:	5f 4f       	sbci	r21, 0xFF	; 255
    1878:	f8 01       	movw	r30, r16
    187a:	61 81       	ldd	r22, Z+1	; 0x01
    187c:	c5 01       	movw	r24, r10
    187e:	f3 dc       	rcall	.-1562   	; 0x1266 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    modifyRegister(txbuf->CTRL, TXB_TXREQ, TXB_TXREQ);
    1880:	f8 01       	movw	r30, r16
    1882:	10 81       	ld	r17, Z
    1884:	28 e0       	ldi	r18, 0x08	; 8
    1886:	48 e0       	ldi	r20, 0x08	; 8
    1888:	61 2f       	mov	r22, r17
    188a:	c5 01       	movw	r24, r10

    uint8_t ctrl = readRegister(txbuf->CTRL);
    188c:	12 dd       	rcall	.-1500   	; 0x12b2 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
    188e:	61 2f       	mov	r22, r17
    1890:	c5 01       	movw	r24, r10
    1892:	9a dc       	rcall	.-1740   	; 0x11c8 <_ZN7MCP251512readRegisterENS_8REGISTERE>
    if ((ctrl & (TXB_ABTF | TXB_MLOA | TXB_TXERR)) != 0) {
    1894:	80 77       	andi	r24, 0x70	; 112
    1896:	09 f0       	breq	.+2      	; 0x189a <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0xe8>
}

MCP2515::ERROR MCP2515::sendMessage(const TXBn txbn, const struct can_frame *frame)
{
    if (frame->can_dlc > CAN_MAX_DLEN) {
        return ERROR_FAILTX;
    1898:	84 e0       	ldi	r24, 0x04	; 4
    uint8_t ctrl = readRegister(txbuf->CTRL);
    if ((ctrl & (TXB_ABTF | TXB_MLOA | TXB_TXERR)) != 0) {
        return ERROR_FAILTX;
    }
    return ERROR_OK;
}
    189a:	2d 96       	adiw	r28, 0x0d	; 13
    189c:	0f b6       	in	r0, 0x3f	; 63
    189e:	f8 94       	cli
    18a0:	de bf       	out	0x3e, r29	; 62
    18a2:	0f be       	out	0x3f, r0	; 63
    18a4:	cd bf       	out	0x3d, r28	; 61
    18a6:	df 91       	pop	r29
    18a8:	cf 91       	pop	r28
    18aa:	1f 91       	pop	r17
    18ac:	0f 91       	pop	r16
    18ae:	ff 90       	pop	r15
    18b0:	ef 90       	pop	r14
    18b2:	df 90       	pop	r13
    18b4:	cf 90       	pop	r12
    18b6:	bf 90       	pop	r11
    18b8:	af 90       	pop	r10
    18ba:	7f 90       	pop	r7
    18bc:	6f 90       	pop	r6
    18be:	5f 90       	pop	r5
    18c0:	4f 90       	pop	r4
    18c2:	08 95       	ret

000018c4 <_ZN7MCP251511sendMessageEPK9can_frame>:

MCP2515::ERROR MCP2515::sendMessage(const struct can_frame *frame)
{
    18c4:	9f 92       	push	r9
    18c6:	af 92       	push	r10
    18c8:	bf 92       	push	r11
    18ca:	cf 92       	push	r12
    18cc:	df 92       	push	r13
    18ce:	ef 92       	push	r14
    18d0:	ff 92       	push	r15
    18d2:	0f 93       	push	r16
    18d4:	1f 93       	push	r17
    18d6:	cf 93       	push	r28
    18d8:	df 93       	push	r29
    18da:	00 d0       	rcall	.+0      	; 0x18dc <_ZN7MCP251511sendMessageEPK9can_frame+0x18>
    18dc:	cd b7       	in	r28, 0x3d	; 61
    18de:	de b7       	in	r29, 0x3e	; 62
    if (frame->can_dlc > CAN_MAX_DLEN) {
    18e0:	fb 01       	movw	r30, r22
    18e2:	24 81       	ldd	r18, Z+4	; 0x04
    18e4:	29 30       	cpi	r18, 0x09	; 9
    18e6:	d8 f5       	brcc	.+118    	; 0x195e <_ZN7MCP251511sendMessageEPK9can_frame+0x9a>
    18e8:	7b 01       	movw	r14, r22
    18ea:	8c 01       	movw	r16, r24
        return ERROR_FAILTX;
    }

    TXBn txBuffers[N_TXBUFFERS] = {TXB0, TXB1, TXB2};
    18ec:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <__DATA_REGION_ORIGIN__+0x7>
    18f0:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <__DATA_REGION_ORIGIN__+0x8>
    18f4:	a0 91 09 02 	lds	r26, 0x0209	; 0x800209 <__DATA_REGION_ORIGIN__+0x9>
    18f8:	89 83       	std	Y+1, r24	; 0x01
    18fa:	9a 83       	std	Y+2, r25	; 0x02
    18fc:	ab 83       	std	Y+3, r26	; 0x03
    18fe:	ce 01       	movw	r24, r28
    1900:	01 96       	adiw	r24, 0x01	; 1
    1902:	6c 01       	movw	r12, r24
    1904:	5e 01       	movw	r10, r28
    1906:	94 e0       	ldi	r25, 0x04	; 4
    1908:	a9 0e       	add	r10, r25
    190a:	b1 1c       	adc	r11, r1

    for (int i=0; i<N_TXBUFFERS; i++) {
        const struct TXBn_REGS *txbuf = &TXB[txBuffers[i]];
    190c:	f6 01       	movw	r30, r12
    190e:	91 90       	ld	r9, Z+
    1910:	6f 01       	movw	r12, r30
        uint8_t ctrlval = readRegister(txbuf->CTRL);
    1912:	29 2d       	mov	r18, r9
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	f9 01       	movw	r30, r18
    1918:	ee 0f       	add	r30, r30
    191a:	ff 1f       	adc	r31, r31
    191c:	2e 0f       	add	r18, r30
    191e:	3f 1f       	adc	r19, r31
    1920:	f9 01       	movw	r30, r18
    1922:	e9 53       	subi	r30, 0x39	; 57
    1924:	fd 4f       	sbci	r31, 0xFD	; 253
    1926:	60 81       	ld	r22, Z
    1928:	c8 01       	movw	r24, r16
    192a:	4e dc       	rcall	.-1892   	; 0x11c8 <_ZN7MCP251512readRegisterENS_8REGISTERE>
        if ( (ctrlval & TXB_TXREQ) == 0 ) {
    192c:	83 fd       	sbrc	r24, 3
    192e:	12 c0       	rjmp	.+36     	; 0x1954 <_ZN7MCP251511sendMessageEPK9can_frame+0x90>
            return sendMessage(txBuffers[i], frame);
    1930:	a7 01       	movw	r20, r14
    1932:	69 2d       	mov	r22, r9
    1934:	c8 01       	movw	r24, r16
        }
    }

    return ERROR_ALLTXBUSY;
}
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	0f 90       	pop	r0
    193c:	df 91       	pop	r29
    193e:	cf 91       	pop	r28
    1940:	1f 91       	pop	r17
    1942:	0f 91       	pop	r16
    1944:	ff 90       	pop	r15
    1946:	ef 90       	pop	r14
    1948:	df 90       	pop	r13
    194a:	cf 90       	pop	r12
    194c:	bf 90       	pop	r11
    194e:	af 90       	pop	r10

    for (int i=0; i<N_TXBUFFERS; i++) {
        const struct TXBn_REGS *txbuf = &TXB[txBuffers[i]];
        uint8_t ctrlval = readRegister(txbuf->CTRL);
        if ( (ctrlval & TXB_TXREQ) == 0 ) {
            return sendMessage(txBuffers[i], frame);
    1950:	9f 90       	pop	r9
    1952:	2f cf       	rjmp	.-418    	; 0x17b2 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame>
        return ERROR_FAILTX;
    }

    TXBn txBuffers[N_TXBUFFERS] = {TXB0, TXB1, TXB2};

    for (int i=0; i<N_TXBUFFERS; i++) {
    1954:	ca 14       	cp	r12, r10
    1956:	db 04       	cpc	r13, r11
    1958:	c9 f6       	brne	.-78     	; 0x190c <_ZN7MCP251511sendMessageEPK9can_frame+0x48>
        if ( (ctrlval & TXB_TXREQ) == 0 ) {
            return sendMessage(txBuffers[i], frame);
        }
    }

    return ERROR_ALLTXBUSY;
    195a:	82 e0       	ldi	r24, 0x02	; 2
    195c:	01 c0       	rjmp	.+2      	; 0x1960 <_ZN7MCP251511sendMessageEPK9can_frame+0x9c>
}

MCP2515::ERROR MCP2515::sendMessage(const struct can_frame *frame)
{
    if (frame->can_dlc > CAN_MAX_DLEN) {
        return ERROR_FAILTX;
    195e:	84 e0       	ldi	r24, 0x04	; 4
            return sendMessage(txBuffers[i], frame);
        }
    }

    return ERROR_ALLTXBUSY;
}
    1960:	0f 90       	pop	r0
    1962:	0f 90       	pop	r0
    1964:	0f 90       	pop	r0
    1966:	df 91       	pop	r29
    1968:	cf 91       	pop	r28
    196a:	1f 91       	pop	r17
    196c:	0f 91       	pop	r16
    196e:	ff 90       	pop	r15
    1970:	ef 90       	pop	r14
    1972:	df 90       	pop	r13
    1974:	cf 90       	pop	r12
    1976:	bf 90       	pop	r11
    1978:	af 90       	pop	r10
    197a:	9f 90       	pop	r9
    197c:	08 95       	ret

0000197e <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>:

MCP2515::ERROR MCP2515::readMessage(const RXBn rxbn, struct can_frame *frame)
{
    197e:	7f 92       	push	r7
    1980:	8f 92       	push	r8
    1982:	9f 92       	push	r9
    1984:	af 92       	push	r10
    1986:	bf 92       	push	r11
    1988:	cf 92       	push	r12
    198a:	df 92       	push	r13
    198c:	ef 92       	push	r14
    198e:	ff 92       	push	r15
    1990:	0f 93       	push	r16
    1992:	1f 93       	push	r17
    1994:	cf 93       	push	r28
    1996:	df 93       	push	r29
    1998:	00 d0       	rcall	.+0      	; 0x199a <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x1c>
    199a:	1f 92       	push	r1
    199c:	1f 92       	push	r1
    199e:	cd b7       	in	r28, 0x3d	; 61
    19a0:	de b7       	in	r29, 0x3e	; 62
    19a2:	4c 01       	movw	r8, r24
    19a4:	5a 01       	movw	r10, r20
    const struct RXBn_REGS *rxb = &RXB[rxbn];

    uint8_t tbufdata[5];

    readRegisters(rxb->SIDH, tbufdata, 5);
    19a6:	24 e0       	ldi	r18, 0x04	; 4
    19a8:	62 9f       	mul	r22, r18
    19aa:	80 01       	movw	r16, r0
    19ac:	11 24       	eor	r1, r1
    19ae:	f8 01       	movw	r30, r16
    19b0:	e1 54       	subi	r30, 0x41	; 65
    19b2:	fd 4f       	sbci	r31, 0xFD	; 253
    19b4:	25 e0       	ldi	r18, 0x05	; 5
    19b6:	ae 01       	movw	r20, r28
    19b8:	4f 5f       	subi	r20, 0xFF	; 255
    19ba:	5f 4f       	sbci	r21, 0xFF	; 255
    19bc:	61 81       	ldd	r22, Z+1	; 0x01
    19be:	18 dc       	rcall	.-2000   	; 0x11f0 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>

    uint32_t id = (tbufdata[MCP_SIDH]<<3) + (tbufdata[MCP_SIDL]>>5);
    19c0:	8a 81       	ldd	r24, Y+2	; 0x02
    19c2:	99 81       	ldd	r25, Y+1	; 0x01
    19c4:	c8 2e       	mov	r12, r24
    19c6:	d1 2c       	mov	r13, r1
    19c8:	45 e0       	ldi	r20, 0x05	; 5
    19ca:	d5 94       	asr	r13
    19cc:	c7 94       	ror	r12
    19ce:	4a 95       	dec	r20
    19d0:	e1 f7       	brne	.-8      	; 0x19ca <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x4c>
    19d2:	e8 e0       	ldi	r30, 0x08	; 8
    19d4:	9e 9f       	mul	r25, r30
    19d6:	c0 0c       	add	r12, r0
    19d8:	d1 1c       	adc	r13, r1
    19da:	11 24       	eor	r1, r1
    19dc:	0d 2c       	mov	r0, r13
    19de:	00 0c       	add	r0, r0
    19e0:	ee 08       	sbc	r14, r14
    19e2:	ff 08       	sbc	r15, r15

    if ( (tbufdata[MCP_SIDL] & TXB_EXIDE_MASK) ==  TXB_EXIDE_MASK ) {
    19e4:	83 ff       	sbrs	r24, 3
    19e6:	20 c0       	rjmp	.+64     	; 0x1a28 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xaa>
        id = (id<<2) + (tbufdata[MCP_SIDL] & 0x03);
    19e8:	92 e0       	ldi	r25, 0x02	; 2
    19ea:	cc 0c       	add	r12, r12
    19ec:	dd 1c       	adc	r13, r13
    19ee:	ee 1c       	adc	r14, r14
    19f0:	ff 1c       	adc	r15, r15
    19f2:	9a 95       	dec	r25
    19f4:	d1 f7       	brne	.-12     	; 0x19ea <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x6c>
        id = (id<<8) + tbufdata[MCP_EID8];
    19f6:	83 70       	andi	r24, 0x03	; 3
    19f8:	c8 0e       	add	r12, r24
    19fa:	d1 1c       	adc	r13, r1
    19fc:	e1 1c       	adc	r14, r1
    19fe:	f1 1c       	adc	r15, r1
    1a00:	fe 2c       	mov	r15, r14
    1a02:	ed 2c       	mov	r14, r13
    1a04:	dc 2c       	mov	r13, r12
    1a06:	cc 24       	eor	r12, r12
        id = (id<<8) + tbufdata[MCP_EID0];
    1a08:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0a:	c8 0e       	add	r12, r24
    1a0c:	d1 1c       	adc	r13, r1
    1a0e:	e1 1c       	adc	r14, r1
    1a10:	f1 1c       	adc	r15, r1
    1a12:	fe 2c       	mov	r15, r14
    1a14:	ed 2c       	mov	r14, r13
    1a16:	dc 2c       	mov	r13, r12
    1a18:	cc 24       	eor	r12, r12
    1a1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a1c:	c8 0e       	add	r12, r24
    1a1e:	d1 1c       	adc	r13, r1
    1a20:	e1 1c       	adc	r14, r1
    1a22:	f1 1c       	adc	r15, r1
        id |= CAN_EFF_FLAG;
    1a24:	68 94       	set
    1a26:	f7 f8       	bld	r15, 7
    }

    uint8_t dlc = (tbufdata[MCP_DLC] & DLC_MASK);
    1a28:	8d 81       	ldd	r24, Y+5	; 0x05
    1a2a:	8f 70       	andi	r24, 0x0F	; 15
    1a2c:	78 2e       	mov	r7, r24
    if (dlc > CAN_MAX_DLEN) {
    1a2e:	f8 e0       	ldi	r31, 0x08	; 8
    1a30:	f8 17       	cp	r31, r24
    1a32:	10 f1       	brcs	.+68     	; 0x1a78 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xfa>
        return ERROR_FAIL;
    }

    uint8_t ctrl = readRegister(rxb->CTRL);
    1a34:	f8 01       	movw	r30, r16
    1a36:	e1 54       	subi	r30, 0x41	; 65
    1a38:	fd 4f       	sbci	r31, 0xFD	; 253
    1a3a:	60 81       	ld	r22, Z
    1a3c:	c4 01       	movw	r24, r8
    1a3e:	c4 db       	rcall	.-2168   	; 0x11c8 <_ZN7MCP251512readRegisterENS_8REGISTERE>
    if (ctrl & RXBnCTRL_RTR) {
    1a40:	83 ff       	sbrs	r24, 3
    1a42:	02 c0       	rjmp	.+4      	; 0x1a48 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xca>
        id |= CAN_RTR_FLAG;
    1a44:	68 94       	set
    1a46:	f6 f8       	bld	r15, 6
    }

    frame->can_id = id;
    1a48:	f5 01       	movw	r30, r10
    1a4a:	c0 82       	st	Z, r12
    1a4c:	d1 82       	std	Z+1, r13	; 0x01
    1a4e:	e2 82       	std	Z+2, r14	; 0x02
    1a50:	f3 82       	std	Z+3, r15	; 0x03
    frame->can_dlc = dlc;
    1a52:	74 82       	std	Z+4, r7	; 0x04

    readRegisters(rxb->DATA, frame->data, dlc);
    1a54:	a5 01       	movw	r20, r10
    1a56:	48 5f       	subi	r20, 0xF8	; 248
    1a58:	5f 4f       	sbci	r21, 0xFF	; 255
    1a5a:	01 54       	subi	r16, 0x41	; 65
    1a5c:	1d 4f       	sbci	r17, 0xFD	; 253
    1a5e:	27 2d       	mov	r18, r7
    1a60:	f8 01       	movw	r30, r16
    1a62:	62 81       	ldd	r22, Z+2	; 0x02
    1a64:	c4 01       	movw	r24, r8
    1a66:	c4 db       	rcall	.-2168   	; 0x11f0 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>

    modifyRegister(MCP_CANINTF, rxb->CANINTF_RXnIF, 0);
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	f8 01       	movw	r30, r16
    1a6c:	43 81       	ldd	r20, Z+3	; 0x03
    1a6e:	6c e2       	ldi	r22, 0x2C	; 44
    1a70:	c4 01       	movw	r24, r8
    1a72:	1f dc       	rcall	.-1986   	; 0x12b2 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>

    return ERROR_OK;
    1a74:	80 e0       	ldi	r24, 0x00	; 0
    1a76:	01 c0       	rjmp	.+2      	; 0x1a7a <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xfc>
        id |= CAN_EFF_FLAG;
    }

    uint8_t dlc = (tbufdata[MCP_DLC] & DLC_MASK);
    if (dlc > CAN_MAX_DLEN) {
        return ERROR_FAIL;
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    readRegisters(rxb->DATA, frame->data, dlc);

    modifyRegister(MCP_CANINTF, rxb->CANINTF_RXnIF, 0);

    return ERROR_OK;
}
    1a7a:	0f 90       	pop	r0
    1a7c:	0f 90       	pop	r0
    1a7e:	0f 90       	pop	r0
    1a80:	0f 90       	pop	r0
    1a82:	0f 90       	pop	r0
    1a84:	df 91       	pop	r29
    1a86:	cf 91       	pop	r28
    1a88:	1f 91       	pop	r17
    1a8a:	0f 91       	pop	r16
    1a8c:	ff 90       	pop	r15
    1a8e:	ef 90       	pop	r14
    1a90:	df 90       	pop	r13
    1a92:	cf 90       	pop	r12
    1a94:	bf 90       	pop	r11
    1a96:	af 90       	pop	r10
    1a98:	9f 90       	pop	r9
    1a9a:	8f 90       	pop	r8
    1a9c:	7f 90       	pop	r7
    1a9e:	08 95       	ret

00001aa0 <_ZN7MCP251511readMessageEP9can_frame>:

MCP2515::ERROR MCP2515::readMessage(struct can_frame *frame)
{
    1aa0:	0f 93       	push	r16
    1aa2:	1f 93       	push	r17
    1aa4:	cf 93       	push	r28
    1aa6:	df 93       	push	r29
    1aa8:	ec 01       	movw	r28, r24
    1aaa:	8b 01       	movw	r16, r22
    ERROR rc;
    uint8_t stat = getStatus();
    1aac:	1b dc       	rcall	.-1994   	; 0x12e4 <_ZN7MCP25159getStatusEv>

    if ( stat & STAT_RX0IF ) {
    1aae:	80 ff       	sbrs	r24, 0
    1ab0:	03 c0       	rjmp	.+6      	; 0x1ab8 <_ZN7MCP251511readMessageEP9can_frame+0x18>
        rc = readMessage(RXB0, frame);
    1ab2:	a8 01       	movw	r20, r16
    1ab4:	60 e0       	ldi	r22, 0x00	; 0
    1ab6:	04 c0       	rjmp	.+8      	; 0x1ac0 <_ZN7MCP251511readMessageEP9can_frame+0x20>
    } else if ( stat & STAT_RX1IF ) {
    1ab8:	81 ff       	sbrs	r24, 1
    1aba:	08 c0       	rjmp	.+16     	; 0x1acc <_ZN7MCP251511readMessageEP9can_frame+0x2c>
        rc = readMessage(RXB1, frame);
    1abc:	a8 01       	movw	r20, r16
    1abe:	61 e0       	ldi	r22, 0x01	; 1
    1ac0:	ce 01       	movw	r24, r28
    } else {
        rc = ERROR_NOMSG;
    }

    return rc;
}
    1ac2:	df 91       	pop	r29
    1ac4:	cf 91       	pop	r28
    1ac6:	1f 91       	pop	r17
    uint8_t stat = getStatus();

    if ( stat & STAT_RX0IF ) {
        rc = readMessage(RXB0, frame);
    } else if ( stat & STAT_RX1IF ) {
        rc = readMessage(RXB1, frame);
    1ac8:	0f 91       	pop	r16
    1aca:	59 cf       	rjmp	.-334    	; 0x197e <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>
    } else {
        rc = ERROR_NOMSG;
    }

    return rc;
}
    1acc:	85 e0       	ldi	r24, 0x05	; 5
    1ace:	df 91       	pop	r29
    1ad0:	cf 91       	pop	r28
    1ad2:	1f 91       	pop	r17
    1ad4:	0f 91       	pop	r16
    1ad6:	08 95       	ret

00001ad8 <_ZN13LiquidCrystal11pulseEnableEv>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
    1ad8:	cf 93       	push	r28
    1ada:	df 93       	push	r29
    1adc:	ec 01       	movw	r28, r24
    1ade:	60 e0       	ldi	r22, 0x00	; 0
    1ae0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ae2:	c4 da       	rcall	.-2680   	; 0x106c <digitalWrite>
    1ae4:	81 e0       	ldi	r24, 0x01	; 1
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	9e d9       	rcall	.-3268   	; 0xe26 <delayMicroseconds>
    1aea:	61 e0       	ldi	r22, 0x01	; 1
    1aec:	8e 81       	ldd	r24, Y+6	; 0x06
    1aee:	be da       	rcall	.-2692   	; 0x106c <digitalWrite>
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	98 d9       	rcall	.-3280   	; 0xe26 <delayMicroseconds>
    1af6:	60 e0       	ldi	r22, 0x00	; 0
    1af8:	8e 81       	ldd	r24, Y+6	; 0x06
    1afa:	b8 da       	rcall	.-2704   	; 0x106c <digitalWrite>
    1afc:	84 e6       	ldi	r24, 0x64	; 100
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	df 91       	pop	r29
    1b02:	cf 91       	pop	r28
    1b04:	90 c9       	rjmp	.-3296   	; 0xe26 <delayMicroseconds>

00001b06 <_ZN13LiquidCrystal10write4bitsEh>:
    1b06:	cf 92       	push	r12
    1b08:	df 92       	push	r13
    1b0a:	ef 92       	push	r14
    1b0c:	ff 92       	push	r15
    1b0e:	0f 93       	push	r16
    1b10:	1f 93       	push	r17
    1b12:	cf 93       	push	r28
    1b14:	df 93       	push	r29
    1b16:	6c 01       	movw	r12, r24
    1b18:	7c 01       	movw	r14, r24
    1b1a:	87 e0       	ldi	r24, 0x07	; 7
    1b1c:	e8 0e       	add	r14, r24
    1b1e:	f1 1c       	adc	r15, r1
    1b20:	c0 e0       	ldi	r28, 0x00	; 0
    1b22:	d0 e0       	ldi	r29, 0x00	; 0
    1b24:	06 2f       	mov	r16, r22
    1b26:	10 e0       	ldi	r17, 0x00	; 0
    1b28:	b8 01       	movw	r22, r16
    1b2a:	0c 2e       	mov	r0, r28
    1b2c:	02 c0       	rjmp	.+4      	; 0x1b32 <_ZN13LiquidCrystal10write4bitsEh+0x2c>
    1b2e:	75 95       	asr	r23
    1b30:	67 95       	ror	r22
    1b32:	0a 94       	dec	r0
    1b34:	e2 f7       	brpl	.-8      	; 0x1b2e <_ZN13LiquidCrystal10write4bitsEh+0x28>
    1b36:	61 70       	andi	r22, 0x01	; 1
    1b38:	f7 01       	movw	r30, r14
    1b3a:	81 91       	ld	r24, Z+
    1b3c:	7f 01       	movw	r14, r30
    1b3e:	96 da       	rcall	.-2772   	; 0x106c <digitalWrite>
    1b40:	21 96       	adiw	r28, 0x01	; 1
    1b42:	c4 30       	cpi	r28, 0x04	; 4
    1b44:	d1 05       	cpc	r29, r1
    1b46:	81 f7       	brne	.-32     	; 0x1b28 <_ZN13LiquidCrystal10write4bitsEh+0x22>
    1b48:	c6 01       	movw	r24, r12
    1b4a:	df 91       	pop	r29
    1b4c:	cf 91       	pop	r28
    1b4e:	1f 91       	pop	r17
    1b50:	0f 91       	pop	r16
    1b52:	ff 90       	pop	r15
    1b54:	ef 90       	pop	r14
    1b56:	df 90       	pop	r13
    1b58:	cf 90       	pop	r12
    1b5a:	be cf       	rjmp	.-132    	; 0x1ad8 <_ZN13LiquidCrystal11pulseEnableEv>

00001b5c <_ZN13LiquidCrystal10write8bitsEh>:
    1b5c:	cf 92       	push	r12
    1b5e:	df 92       	push	r13
    1b60:	ef 92       	push	r14
    1b62:	ff 92       	push	r15
    1b64:	0f 93       	push	r16
    1b66:	1f 93       	push	r17
    1b68:	cf 93       	push	r28
    1b6a:	df 93       	push	r29
    1b6c:	6c 01       	movw	r12, r24
    1b6e:	7c 01       	movw	r14, r24
    1b70:	87 e0       	ldi	r24, 0x07	; 7
    1b72:	e8 0e       	add	r14, r24
    1b74:	f1 1c       	adc	r15, r1
    1b76:	c0 e0       	ldi	r28, 0x00	; 0
    1b78:	d0 e0       	ldi	r29, 0x00	; 0
    1b7a:	06 2f       	mov	r16, r22
    1b7c:	10 e0       	ldi	r17, 0x00	; 0
    1b7e:	b8 01       	movw	r22, r16
    1b80:	0c 2e       	mov	r0, r28
    1b82:	02 c0       	rjmp	.+4      	; 0x1b88 <_ZN13LiquidCrystal10write8bitsEh+0x2c>
    1b84:	75 95       	asr	r23
    1b86:	67 95       	ror	r22
    1b88:	0a 94       	dec	r0
    1b8a:	e2 f7       	brpl	.-8      	; 0x1b84 <_ZN13LiquidCrystal10write8bitsEh+0x28>
    1b8c:	61 70       	andi	r22, 0x01	; 1
    1b8e:	f7 01       	movw	r30, r14
    1b90:	81 91       	ld	r24, Z+
    1b92:	7f 01       	movw	r14, r30
    1b94:	6b da       	rcall	.-2858   	; 0x106c <digitalWrite>
    1b96:	21 96       	adiw	r28, 0x01	; 1
    1b98:	c8 30       	cpi	r28, 0x08	; 8
    1b9a:	d1 05       	cpc	r29, r1
    1b9c:	81 f7       	brne	.-32     	; 0x1b7e <_ZN13LiquidCrystal10write8bitsEh+0x22>
    1b9e:	c6 01       	movw	r24, r12
    1ba0:	df 91       	pop	r29
    1ba2:	cf 91       	pop	r28
    1ba4:	1f 91       	pop	r17
    1ba6:	0f 91       	pop	r16
    1ba8:	ff 90       	pop	r15
    1baa:	ef 90       	pop	r14
    1bac:	df 90       	pop	r13
    1bae:	cf 90       	pop	r12
    1bb0:	93 cf       	rjmp	.-218    	; 0x1ad8 <_ZN13LiquidCrystal11pulseEnableEv>

00001bb2 <_ZN13LiquidCrystal4sendEhh>:
    1bb2:	1f 93       	push	r17
    1bb4:	cf 93       	push	r28
    1bb6:	df 93       	push	r29
    1bb8:	ec 01       	movw	r28, r24
    1bba:	16 2f       	mov	r17, r22
    1bbc:	64 2f       	mov	r22, r20
    1bbe:	8c 81       	ldd	r24, Y+4	; 0x04
    1bc0:	55 da       	rcall	.-2902   	; 0x106c <digitalWrite>
    1bc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc4:	8f 3f       	cpi	r24, 0xFF	; 255
    1bc6:	11 f0       	breq	.+4      	; 0x1bcc <_ZN13LiquidCrystal4sendEhh+0x1a>
    1bc8:	60 e0       	ldi	r22, 0x00	; 0
    1bca:	50 da       	rcall	.-2912   	; 0x106c <digitalWrite>
    1bcc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bce:	61 2f       	mov	r22, r17
    1bd0:	84 ff       	sbrs	r24, 4
    1bd2:	05 c0       	rjmp	.+10     	; 0x1bde <_ZN13LiquidCrystal4sendEhh+0x2c>
    1bd4:	ce 01       	movw	r24, r28
    1bd6:	df 91       	pop	r29
    1bd8:	cf 91       	pop	r28
    1bda:	1f 91       	pop	r17
    1bdc:	bf cf       	rjmp	.-130    	; 0x1b5c <_ZN13LiquidCrystal10write8bitsEh>
    1bde:	70 e0       	ldi	r23, 0x00	; 0
    1be0:	84 e0       	ldi	r24, 0x04	; 4
    1be2:	75 95       	asr	r23
    1be4:	67 95       	ror	r22
    1be6:	8a 95       	dec	r24
    1be8:	e1 f7       	brne	.-8      	; 0x1be2 <_ZN13LiquidCrystal4sendEhh+0x30>
    1bea:	ce 01       	movw	r24, r28
    1bec:	8c df       	rcall	.-232    	; 0x1b06 <_ZN13LiquidCrystal10write4bitsEh>
    1bee:	61 2f       	mov	r22, r17
    1bf0:	ce 01       	movw	r24, r28
    1bf2:	df 91       	pop	r29
    1bf4:	cf 91       	pop	r28
    1bf6:	1f 91       	pop	r17
    1bf8:	86 cf       	rjmp	.-244    	; 0x1b06 <_ZN13LiquidCrystal10write4bitsEh>

00001bfa <_ZN13LiquidCrystal7commandEh>:
    1bfa:	40 e0       	ldi	r20, 0x00	; 0
    1bfc:	da cf       	rjmp	.-76     	; 0x1bb2 <_ZN13LiquidCrystal4sendEhh>

00001bfe <_ZN13LiquidCrystal5clearEv>:
    1bfe:	61 e0       	ldi	r22, 0x01	; 1
    1c00:	fc df       	rcall	.-8      	; 0x1bfa <_ZN13LiquidCrystal7commandEh>
    1c02:	80 ed       	ldi	r24, 0xD0	; 208
    1c04:	97 e0       	ldi	r25, 0x07	; 7
    1c06:	0f c9       	rjmp	.-3554   	; 0xe26 <delayMicroseconds>

00001c08 <_ZN13LiquidCrystal9setCursorEhh>:
    1c08:	fc 01       	movw	r30, r24
    1c0a:	44 30       	cpi	r20, 0x04	; 4
    1c0c:	08 f0       	brcs	.+2      	; 0x1c10 <_ZN13LiquidCrystal9setCursorEhh+0x8>
    1c0e:	43 e0       	ldi	r20, 0x03	; 3
    1c10:	83 89       	ldd	r24, Z+19	; 0x13
    1c12:	48 17       	cp	r20, r24
    1c14:	10 f0       	brcs	.+4      	; 0x1c1a <_ZN13LiquidCrystal9setCursorEhh+0x12>
    1c16:	4f ef       	ldi	r20, 0xFF	; 255
    1c18:	48 0f       	add	r20, r24
    1c1a:	df 01       	movw	r26, r30
    1c1c:	a4 0f       	add	r26, r20
    1c1e:	b1 1d       	adc	r27, r1
    1c20:	54 96       	adiw	r26, 0x14	; 20
    1c22:	9c 91       	ld	r25, X
    1c24:	69 0f       	add	r22, r25
    1c26:	60 68       	ori	r22, 0x80	; 128
    1c28:	cf 01       	movw	r24, r30
    1c2a:	e7 cf       	rjmp	.-50     	; 0x1bfa <_ZN13LiquidCrystal7commandEh>

00001c2c <_ZN13LiquidCrystal7displayEv>:
    1c2c:	fc 01       	movw	r30, r24
    1c2e:	60 89       	ldd	r22, Z+16	; 0x10
    1c30:	26 2f       	mov	r18, r22
    1c32:	24 60       	ori	r18, 0x04	; 4
    1c34:	20 8b       	std	Z+16, r18	; 0x10
    1c36:	6c 60       	ori	r22, 0x0C	; 12
    1c38:	e0 cf       	rjmp	.-64     	; 0x1bfa <_ZN13LiquidCrystal7commandEh>

00001c3a <_ZN13LiquidCrystal5beginEhhh>:
    1c3a:	ef 92       	push	r14
    1c3c:	ff 92       	push	r15
    1c3e:	0f 93       	push	r16
    1c40:	1f 93       	push	r17
    1c42:	cf 93       	push	r28
    1c44:	df 93       	push	r29
    1c46:	ec 01       	movw	r28, r24
    1c48:	42 30       	cpi	r20, 0x02	; 2
    1c4a:	18 f0       	brcs	.+6      	; 0x1c52 <_ZN13LiquidCrystal5beginEhhh+0x18>
    1c4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c4e:	88 60       	ori	r24, 0x08	; 8
    1c50:	8f 87       	std	Y+15, r24	; 0x0f
    1c52:	4b 8b       	std	Y+19, r20	; 0x13
    1c54:	1c 8a       	std	Y+20, r1	; 0x14
    1c56:	80 e4       	ldi	r24, 0x40	; 64
    1c58:	8d 8b       	std	Y+21, r24	; 0x15
    1c5a:	6e 8b       	std	Y+22, r22	; 0x16
    1c5c:	70 e0       	ldi	r23, 0x00	; 0
    1c5e:	60 5c       	subi	r22, 0xC0	; 192
    1c60:	7f 4f       	sbci	r23, 0xFF	; 255
    1c62:	6f 8b       	std	Y+23, r22	; 0x17
    1c64:	22 23       	and	r18, r18
    1c66:	29 f0       	breq	.+10     	; 0x1c72 <_ZN13LiquidCrystal5beginEhhh+0x38>
    1c68:	41 30       	cpi	r20, 0x01	; 1
    1c6a:	19 f4       	brne	.+6      	; 0x1c72 <_ZN13LiquidCrystal5beginEhhh+0x38>
    1c6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c6e:	84 60       	ori	r24, 0x04	; 4
    1c70:	8f 87       	std	Y+15, r24	; 0x0f
    1c72:	61 e0       	ldi	r22, 0x01	; 1
    1c74:	8c 81       	ldd	r24, Y+4	; 0x04
    1c76:	be d9       	rcall	.-3204   	; 0xff4 <pinMode>
    1c78:	8d 81       	ldd	r24, Y+5	; 0x05
    1c7a:	8f 3f       	cpi	r24, 0xFF	; 255
    1c7c:	11 f0       	breq	.+4      	; 0x1c82 <_ZN13LiquidCrystal5beginEhhh+0x48>
    1c7e:	61 e0       	ldi	r22, 0x01	; 1
    1c80:	b9 d9       	rcall	.-3214   	; 0xff4 <pinMode>
    1c82:	61 e0       	ldi	r22, 0x01	; 1
    1c84:	8e 81       	ldd	r24, Y+6	; 0x06
    1c86:	b6 d9       	rcall	.-3220   	; 0xff4 <pinMode>
    1c88:	7e 01       	movw	r14, r28
    1c8a:	87 e0       	ldi	r24, 0x07	; 7
    1c8c:	e8 0e       	add	r14, r24
    1c8e:	f1 1c       	adc	r15, r1
    1c90:	00 e0       	ldi	r16, 0x00	; 0
    1c92:	10 e0       	ldi	r17, 0x00	; 0
    1c94:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c96:	84 fd       	sbrc	r24, 4
    1c98:	03 c0       	rjmp	.+6      	; 0x1ca0 <_ZN13LiquidCrystal5beginEhhh+0x66>
    1c9a:	84 e0       	ldi	r24, 0x04	; 4
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	02 c0       	rjmp	.+4      	; 0x1ca4 <_ZN13LiquidCrystal5beginEhhh+0x6a>
    1ca0:	88 e0       	ldi	r24, 0x08	; 8
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	08 17       	cp	r16, r24
    1ca6:	19 07       	cpc	r17, r25
    1ca8:	44 f4       	brge	.+16     	; 0x1cba <_ZN13LiquidCrystal5beginEhhh+0x80>
    1caa:	61 e0       	ldi	r22, 0x01	; 1
    1cac:	f7 01       	movw	r30, r14
    1cae:	81 91       	ld	r24, Z+
    1cb0:	7f 01       	movw	r14, r30
    1cb2:	a0 d9       	rcall	.-3264   	; 0xff4 <pinMode>
    1cb4:	0f 5f       	subi	r16, 0xFF	; 255
    1cb6:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb8:	ed cf       	rjmp	.-38     	; 0x1c94 <_ZN13LiquidCrystal5beginEhhh+0x5a>
    1cba:	80 e5       	ldi	r24, 0x50	; 80
    1cbc:	93 ec       	ldi	r25, 0xC3	; 195
    1cbe:	b3 d8       	rcall	.-3738   	; 0xe26 <delayMicroseconds>
    1cc0:	60 e0       	ldi	r22, 0x00	; 0
    1cc2:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc4:	d3 d9       	rcall	.-3162   	; 0x106c <digitalWrite>
    1cc6:	60 e0       	ldi	r22, 0x00	; 0
    1cc8:	8e 81       	ldd	r24, Y+6	; 0x06
    1cca:	d0 d9       	rcall	.-3168   	; 0x106c <digitalWrite>
    1ccc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cce:	8f 3f       	cpi	r24, 0xFF	; 255
    1cd0:	11 f0       	breq	.+4      	; 0x1cd6 <_ZN13LiquidCrystal5beginEhhh+0x9c>
    1cd2:	60 e0       	ldi	r22, 0x00	; 0
    1cd4:	cb d9       	rcall	.-3178   	; 0x106c <digitalWrite>
    1cd6:	6f 85       	ldd	r22, Y+15	; 0x0f
    1cd8:	64 fd       	sbrc	r22, 4
    1cda:	16 c0       	rjmp	.+44     	; 0x1d08 <_ZN13LiquidCrystal5beginEhhh+0xce>
    1cdc:	63 e0       	ldi	r22, 0x03	; 3
    1cde:	ce 01       	movw	r24, r28
    1ce0:	12 df       	rcall	.-476    	; 0x1b06 <_ZN13LiquidCrystal10write4bitsEh>
    1ce2:	84 e9       	ldi	r24, 0x94	; 148
    1ce4:	91 e1       	ldi	r25, 0x11	; 17
    1ce6:	9f d8       	rcall	.-3778   	; 0xe26 <delayMicroseconds>
    1ce8:	63 e0       	ldi	r22, 0x03	; 3
    1cea:	ce 01       	movw	r24, r28
    1cec:	0c df       	rcall	.-488    	; 0x1b06 <_ZN13LiquidCrystal10write4bitsEh>
    1cee:	84 e9       	ldi	r24, 0x94	; 148
    1cf0:	91 e1       	ldi	r25, 0x11	; 17
    1cf2:	99 d8       	rcall	.-3790   	; 0xe26 <delayMicroseconds>
    1cf4:	63 e0       	ldi	r22, 0x03	; 3
    1cf6:	ce 01       	movw	r24, r28
    1cf8:	06 df       	rcall	.-500    	; 0x1b06 <_ZN13LiquidCrystal10write4bitsEh>
    1cfa:	86 e9       	ldi	r24, 0x96	; 150
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	93 d8       	rcall	.-3802   	; 0xe26 <delayMicroseconds>
    1d00:	62 e0       	ldi	r22, 0x02	; 2
    1d02:	ce 01       	movw	r24, r28
    1d04:	00 df       	rcall	.-512    	; 0x1b06 <_ZN13LiquidCrystal10write4bitsEh>
    1d06:	11 c0       	rjmp	.+34     	; 0x1d2a <_ZN13LiquidCrystal5beginEhhh+0xf0>
    1d08:	60 62       	ori	r22, 0x20	; 32
    1d0a:	ce 01       	movw	r24, r28
    1d0c:	76 df       	rcall	.-276    	; 0x1bfa <_ZN13LiquidCrystal7commandEh>
    1d0e:	84 e9       	ldi	r24, 0x94	; 148
    1d10:	91 e1       	ldi	r25, 0x11	; 17
    1d12:	89 d8       	rcall	.-3822   	; 0xe26 <delayMicroseconds>
    1d14:	6f 85       	ldd	r22, Y+15	; 0x0f
    1d16:	60 62       	ori	r22, 0x20	; 32
    1d18:	ce 01       	movw	r24, r28
    1d1a:	6f df       	rcall	.-290    	; 0x1bfa <_ZN13LiquidCrystal7commandEh>
    1d1c:	86 e9       	ldi	r24, 0x96	; 150
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	82 d8       	rcall	.-3836   	; 0xe26 <delayMicroseconds>
    1d22:	6f 85       	ldd	r22, Y+15	; 0x0f
    1d24:	60 62       	ori	r22, 0x20	; 32
    1d26:	ce 01       	movw	r24, r28
    1d28:	68 df       	rcall	.-304    	; 0x1bfa <_ZN13LiquidCrystal7commandEh>
    1d2a:	6f 85       	ldd	r22, Y+15	; 0x0f
    1d2c:	60 62       	ori	r22, 0x20	; 32
    1d2e:	ce 01       	movw	r24, r28
    1d30:	64 df       	rcall	.-312    	; 0x1bfa <_ZN13LiquidCrystal7commandEh>
    1d32:	84 e0       	ldi	r24, 0x04	; 4
    1d34:	88 8b       	std	Y+16, r24	; 0x10
    1d36:	ce 01       	movw	r24, r28
    1d38:	79 df       	rcall	.-270    	; 0x1c2c <_ZN13LiquidCrystal7displayEv>
    1d3a:	ce 01       	movw	r24, r28
    1d3c:	60 df       	rcall	.-320    	; 0x1bfe <_ZN13LiquidCrystal5clearEv>
    1d3e:	82 e0       	ldi	r24, 0x02	; 2
    1d40:	89 8b       	std	Y+17, r24	; 0x11
    1d42:	66 e0       	ldi	r22, 0x06	; 6
    1d44:	ce 01       	movw	r24, r28
    1d46:	df 91       	pop	r29
    1d48:	cf 91       	pop	r28
    1d4a:	1f 91       	pop	r17
    1d4c:	0f 91       	pop	r16
    1d4e:	ff 90       	pop	r15
    1d50:	ef 90       	pop	r14
    1d52:	53 cf       	rjmp	.-346    	; 0x1bfa <_ZN13LiquidCrystal7commandEh>

00001d54 <_ZN13LiquidCrystalC1Ehhhhhh>:
    1d54:	cf 92       	push	r12
    1d56:	ef 92       	push	r14
    1d58:	0f 93       	push	r16
    1d5a:	fc 01       	movw	r30, r24
    1d5c:	13 82       	std	Z+3, r1	; 0x03
    1d5e:	12 82       	std	Z+2, r1	; 0x02
    1d60:	84 ed       	ldi	r24, 0xD4	; 212
    1d62:	92 e0       	ldi	r25, 0x02	; 2
    1d64:	91 83       	std	Z+1, r25	; 0x01
    1d66:	80 83       	st	Z, r24
    1d68:	64 83       	std	Z+4, r22	; 0x04
    1d6a:	8f ef       	ldi	r24, 0xFF	; 255
    1d6c:	85 83       	std	Z+5, r24	; 0x05
    1d6e:	46 83       	std	Z+6, r20	; 0x06
    1d70:	27 83       	std	Z+7, r18	; 0x07
    1d72:	00 87       	std	Z+8, r16	; 0x08
    1d74:	e1 86       	std	Z+9, r14	; 0x09
    1d76:	c2 86       	std	Z+10, r12	; 0x0a
    1d78:	13 86       	std	Z+11, r1	; 0x0b
    1d7a:	14 86       	std	Z+12, r1	; 0x0c
    1d7c:	15 86       	std	Z+13, r1	; 0x0d
    1d7e:	16 86       	std	Z+14, r1	; 0x0e
    1d80:	17 86       	std	Z+15, r1	; 0x0f
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	41 e0       	ldi	r20, 0x01	; 1
    1d86:	60 e1       	ldi	r22, 0x10	; 16
    1d88:	cf 01       	movw	r24, r30
    1d8a:	0f 91       	pop	r16
    1d8c:	ef 90       	pop	r14
    1d8e:	cf 90       	pop	r12
    1d90:	54 cf       	rjmp	.-344    	; 0x1c3a <_ZN13LiquidCrystal5beginEhhh>

00001d92 <_ZN13LiquidCrystal5writeEh>:
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
    1d92:	41 e0       	ldi	r20, 0x01	; 1
    1d94:	0e df       	rcall	.-484    	; 0x1bb2 <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
}
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	08 95       	ret

00001d9c <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    1d9c:	cf 93       	push	r28
  uint8_t sreg = SREG;
    1d9e:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    1da0:	f8 94       	cli
  if (!initialized) {
    1da2:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <_ZN8SPIClass11initializedE>
    1da6:	81 11       	cpse	r24, r1
    1da8:	23 c0       	rjmp	.+70     	; 0x1df0 <_ZN8SPIClass5beginEv+0x54>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    1daa:	e1 e2       	ldi	r30, 0x21	; 33
    1dac:	f2 e0       	ldi	r31, 0x02	; 2
    1dae:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    1db0:	eb ed       	ldi	r30, 0xDB	; 219
    1db2:	f1 e0       	ldi	r31, 0x01	; 1
    1db4:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    1db6:	e8 2f       	mov	r30, r24
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	ee 0f       	add	r30, r30
    1dbc:	ff 1f       	adc	r31, r31
    1dbe:	e4 5b       	subi	r30, 0xB4	; 180
    1dc0:	fd 4f       	sbci	r31, 0xFD	; 253
    1dc2:	a5 91       	lpm	r26, Z+
    1dc4:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    1dc6:	ec 91       	ld	r30, X
    1dc8:	e9 23       	and	r30, r25
    1dca:	19 f4       	brne	.+6      	; 0x1dd2 <_ZN8SPIClass5beginEv+0x36>
      digitalWrite(SS, HIGH);
    1dcc:	61 e0       	ldi	r22, 0x01	; 1
    1dce:	85 e3       	ldi	r24, 0x35	; 53
    1dd0:	4d d9       	rcall	.-3430   	; 0x106c <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    1dd2:	61 e0       	ldi	r22, 0x01	; 1
    1dd4:	85 e3       	ldi	r24, 0x35	; 53
    1dd6:	0e d9       	rcall	.-3556   	; 0xff4 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    1dd8:	8c b5       	in	r24, 0x2c	; 44
    1dda:	80 61       	ori	r24, 0x10	; 16
    1ddc:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    1dde:	8c b5       	in	r24, 0x2c	; 44
    1de0:	80 64       	ori	r24, 0x40	; 64
    1de2:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    1de4:	61 e0       	ldi	r22, 0x01	; 1
    1de6:	84 e3       	ldi	r24, 0x34	; 52
    1de8:	05 d9       	rcall	.-3574   	; 0xff4 <pinMode>
    pinMode(MOSI, OUTPUT);
    1dea:	61 e0       	ldi	r22, 0x01	; 1
    1dec:	83 e3       	ldi	r24, 0x33	; 51
    1dee:	02 d9       	rcall	.-3580   	; 0xff4 <pinMode>
    1df0:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <_ZN8SPIClass11initializedE>
  }
  initialized++; // reference count
    1df4:	8f 5f       	subi	r24, 0xFF	; 255
    1df6:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <_ZN8SPIClass11initializedE>
    1dfa:	cf bf       	out	0x3f, r28	; 63
  SREG = sreg;
    1dfc:	cf 91       	pop	r28
}
    1dfe:	08 95       	ret

00001e00 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1e00:	08 95       	ret

00001e02 <__udivmodsi4>:
    1e02:	a1 e2       	ldi	r26, 0x21	; 33
    1e04:	1a 2e       	mov	r1, r26
    1e06:	aa 1b       	sub	r26, r26
    1e08:	bb 1b       	sub	r27, r27
    1e0a:	fd 01       	movw	r30, r26
    1e0c:	0d c0       	rjmp	.+26     	; 0x1e28 <__udivmodsi4_ep>

00001e0e <__udivmodsi4_loop>:
    1e0e:	aa 1f       	adc	r26, r26
    1e10:	bb 1f       	adc	r27, r27
    1e12:	ee 1f       	adc	r30, r30
    1e14:	ff 1f       	adc	r31, r31
    1e16:	a2 17       	cp	r26, r18
    1e18:	b3 07       	cpc	r27, r19
    1e1a:	e4 07       	cpc	r30, r20
    1e1c:	f5 07       	cpc	r31, r21
    1e1e:	20 f0       	brcs	.+8      	; 0x1e28 <__udivmodsi4_ep>
    1e20:	a2 1b       	sub	r26, r18
    1e22:	b3 0b       	sbc	r27, r19
    1e24:	e4 0b       	sbc	r30, r20
    1e26:	f5 0b       	sbc	r31, r21

00001e28 <__udivmodsi4_ep>:
    1e28:	66 1f       	adc	r22, r22
    1e2a:	77 1f       	adc	r23, r23
    1e2c:	88 1f       	adc	r24, r24
    1e2e:	99 1f       	adc	r25, r25
    1e30:	1a 94       	dec	r1
    1e32:	69 f7       	brne	.-38     	; 0x1e0e <__udivmodsi4_loop>
    1e34:	60 95       	com	r22
    1e36:	70 95       	com	r23
    1e38:	80 95       	com	r24
    1e3a:	90 95       	com	r25
    1e3c:	9b 01       	movw	r18, r22
    1e3e:	ac 01       	movw	r20, r24
    1e40:	bd 01       	movw	r22, r26
    1e42:	cf 01       	movw	r24, r30
    1e44:	08 95       	ret

00001e46 <__tablejump2__>:
    1e46:	ee 0f       	add	r30, r30
    1e48:	ff 1f       	adc	r31, r31
    1e4a:	88 1f       	adc	r24, r24
    1e4c:	8b bf       	out	0x3b, r24	; 59
    1e4e:	07 90       	elpm	r0, Z+
    1e50:	f6 91       	elpm	r31, Z
    1e52:	e0 2d       	mov	r30, r0
    1e54:	19 94       	eijmp

00001e56 <memcpy>:
    1e56:	fb 01       	movw	r30, r22
    1e58:	dc 01       	movw	r26, r24
    1e5a:	02 c0       	rjmp	.+4      	; 0x1e60 <memcpy+0xa>
    1e5c:	01 90       	ld	r0, Z+
    1e5e:	0d 92       	st	X+, r0
    1e60:	41 50       	subi	r20, 0x01	; 1
    1e62:	50 40       	sbci	r21, 0x00	; 0
    1e64:	d8 f7       	brcc	.-10     	; 0x1e5c <memcpy+0x6>
    1e66:	08 95       	ret

00001e68 <_exit>:
    1e68:	f8 94       	cli

00001e6a <__stop_program>:
    1e6a:	ff cf       	rjmp	.-2      	; 0x1e6a <__stop_program>
