
ECU_RIGHT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800200  00001292  00001326  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001292  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000033  00800212  00800212  0000133a  2**3
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001338  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001368  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f0  00000000  00000000  000013a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006a9c  00000000  00000000  00001698  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d41  00000000  00000000  00008134  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000209a  00000000  00000000  00009e75  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000858  00000000  00000000  0000bf10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002272  00000000  00000000  0000c768  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000366d  00000000  00000000  0000e9da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000298  00000000  00000000  00012047  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	40 c1       	rjmp	.+640    	; 0x282 <__ctors_end>
       2:	00 00       	nop
       4:	6c c1       	rjmp	.+728    	; 0x2de <__bad_interrupt>
       6:	00 00       	nop
       8:	6a c1       	rjmp	.+724    	; 0x2de <__bad_interrupt>
       a:	00 00       	nop
       c:	68 c1       	rjmp	.+720    	; 0x2de <__bad_interrupt>
       e:	00 00       	nop
      10:	66 c1       	rjmp	.+716    	; 0x2de <__bad_interrupt>
      12:	00 00       	nop
      14:	64 c1       	rjmp	.+712    	; 0x2de <__bad_interrupt>
      16:	00 00       	nop
      18:	62 c1       	rjmp	.+708    	; 0x2de <__bad_interrupt>
      1a:	00 00       	nop
      1c:	60 c1       	rjmp	.+704    	; 0x2de <__bad_interrupt>
      1e:	00 00       	nop
      20:	5e c1       	rjmp	.+700    	; 0x2de <__bad_interrupt>
      22:	00 00       	nop
      24:	5c c1       	rjmp	.+696    	; 0x2de <__bad_interrupt>
      26:	00 00       	nop
      28:	5a c1       	rjmp	.+692    	; 0x2de <__bad_interrupt>
      2a:	00 00       	nop
      2c:	58 c1       	rjmp	.+688    	; 0x2de <__bad_interrupt>
      2e:	00 00       	nop
      30:	56 c1       	rjmp	.+684    	; 0x2de <__bad_interrupt>
      32:	00 00       	nop
      34:	54 c1       	rjmp	.+680    	; 0x2de <__bad_interrupt>
      36:	00 00       	nop
      38:	52 c1       	rjmp	.+676    	; 0x2de <__bad_interrupt>
      3a:	00 00       	nop
      3c:	50 c1       	rjmp	.+672    	; 0x2de <__bad_interrupt>
      3e:	00 00       	nop
      40:	4e c1       	rjmp	.+668    	; 0x2de <__bad_interrupt>
      42:	00 00       	nop
      44:	4c c1       	rjmp	.+664    	; 0x2de <__bad_interrupt>
      46:	00 00       	nop
      48:	4a c1       	rjmp	.+660    	; 0x2de <__bad_interrupt>
      4a:	00 00       	nop
      4c:	48 c1       	rjmp	.+656    	; 0x2de <__bad_interrupt>
      4e:	00 00       	nop
      50:	46 c1       	rjmp	.+652    	; 0x2de <__bad_interrupt>
      52:	00 00       	nop
      54:	44 c1       	rjmp	.+648    	; 0x2de <__bad_interrupt>
      56:	00 00       	nop
      58:	42 c1       	rjmp	.+644    	; 0x2de <__bad_interrupt>
      5a:	00 00       	nop
      5c:	be c2       	rjmp	.+1404   	; 0x5da <__vector_23>
      5e:	00 00       	nop
      60:	3e c1       	rjmp	.+636    	; 0x2de <__bad_interrupt>
      62:	00 00       	nop
      64:	3c c1       	rjmp	.+632    	; 0x2de <__bad_interrupt>
      66:	00 00       	nop
      68:	3a c1       	rjmp	.+628    	; 0x2de <__bad_interrupt>
      6a:	00 00       	nop
      6c:	38 c1       	rjmp	.+624    	; 0x2de <__bad_interrupt>
      6e:	00 00       	nop
      70:	36 c1       	rjmp	.+620    	; 0x2de <__bad_interrupt>
      72:	00 00       	nop
      74:	34 c1       	rjmp	.+616    	; 0x2de <__bad_interrupt>
      76:	00 00       	nop
      78:	32 c1       	rjmp	.+612    	; 0x2de <__bad_interrupt>
      7a:	00 00       	nop
      7c:	30 c1       	rjmp	.+608    	; 0x2de <__bad_interrupt>
      7e:	00 00       	nop
      80:	2e c1       	rjmp	.+604    	; 0x2de <__bad_interrupt>
      82:	00 00       	nop
      84:	2c c1       	rjmp	.+600    	; 0x2de <__bad_interrupt>
      86:	00 00       	nop
      88:	2a c1       	rjmp	.+596    	; 0x2de <__bad_interrupt>
      8a:	00 00       	nop
      8c:	28 c1       	rjmp	.+592    	; 0x2de <__bad_interrupt>
      8e:	00 00       	nop
      90:	26 c1       	rjmp	.+588    	; 0x2de <__bad_interrupt>
      92:	00 00       	nop
      94:	24 c1       	rjmp	.+584    	; 0x2de <__bad_interrupt>
      96:	00 00       	nop
      98:	22 c1       	rjmp	.+580    	; 0x2de <__bad_interrupt>
      9a:	00 00       	nop
      9c:	20 c1       	rjmp	.+576    	; 0x2de <__bad_interrupt>
      9e:	00 00       	nop
      a0:	1e c1       	rjmp	.+572    	; 0x2de <__bad_interrupt>
      a2:	00 00       	nop
      a4:	1c c1       	rjmp	.+568    	; 0x2de <__bad_interrupt>
      a6:	00 00       	nop
      a8:	1a c1       	rjmp	.+564    	; 0x2de <__bad_interrupt>
      aa:	00 00       	nop
      ac:	18 c1       	rjmp	.+560    	; 0x2de <__bad_interrupt>
      ae:	00 00       	nop
      b0:	16 c1       	rjmp	.+556    	; 0x2de <__bad_interrupt>
      b2:	00 00       	nop
      b4:	14 c1       	rjmp	.+552    	; 0x2de <__bad_interrupt>
      b6:	00 00       	nop
      b8:	12 c1       	rjmp	.+548    	; 0x2de <__bad_interrupt>
      ba:	00 00       	nop
      bc:	10 c1       	rjmp	.+544    	; 0x2de <__bad_interrupt>
      be:	00 00       	nop
      c0:	0e c1       	rjmp	.+540    	; 0x2de <__bad_interrupt>
      c2:	00 00       	nop
      c4:	0c c1       	rjmp	.+536    	; 0x2de <__bad_interrupt>
      c6:	00 00       	nop
      c8:	0a c1       	rjmp	.+532    	; 0x2de <__bad_interrupt>
      ca:	00 00       	nop
      cc:	08 c1       	rjmp	.+528    	; 0x2de <__bad_interrupt>
      ce:	00 00       	nop
      d0:	06 c1       	rjmp	.+524    	; 0x2de <__bad_interrupt>
      d2:	00 00       	nop
      d4:	04 c1       	rjmp	.+520    	; 0x2de <__bad_interrupt>
      d6:	00 00       	nop
      d8:	02 c1       	rjmp	.+516    	; 0x2de <__bad_interrupt>
      da:	00 00       	nop
      dc:	00 c1       	rjmp	.+512    	; 0x2de <__bad_interrupt>
      de:	00 00       	nop
      e0:	fe c0       	rjmp	.+508    	; 0x2de <__bad_interrupt>
      e2:	00 00       	nop
      e4:	1d 04       	cpc	r1, r13
      e6:	20 04       	cpc	r2, r0
      e8:	0f 04       	cpc	r0, r15
      ea:	13 04       	cpc	r1, r3
      ec:	19 04       	cpc	r1, r9
      ee:	57 04       	cpc	r5, r7
      f0:	24 04       	cpc	r2, r4
      f2:	28 04       	cpc	r2, r8
      f4:	2e 04       	cpc	r2, r14
      f6:	32 04       	cpc	r3, r2
      f8:	36 04       	cpc	r3, r6
      fa:	3c 04       	cpc	r3, r12
      fc:	40 04       	cpc	r4, r0
      fe:	44 04       	cpc	r4, r4
     100:	57 04       	cpc	r5, r7
     102:	4a 04       	cpc	r4, r10
     104:	4e 04       	cpc	r4, r14
     106:	52 04       	cpc	r5, r2
     108:	e4 06       	cpc	r14, r20
     10a:	58 06       	cpc	r5, r24
     10c:	e8 06       	cpc	r14, r24
     10e:	5b 06       	cpc	r5, r27
     110:	5e 06       	cpc	r5, r30
     112:	62 06       	cpc	r6, r18
     114:	65 06       	cpc	r6, r21
     116:	68 06       	cpc	r6, r24
     118:	e2 06       	cpc	r14, r18
     11a:	e2 06       	cpc	r14, r18
     11c:	6b 06       	cpc	r6, r27
     11e:	6e 06       	cpc	r6, r30
     120:	71 06       	cpc	r7, r17
     122:	74 06       	cpc	r7, r20
     124:	77 06       	cpc	r7, r23
     126:	7a 06       	cpc	r7, r26
     128:	ec 06       	cpc	r14, r28
     12a:	89 06       	cpc	r8, r25
     12c:	8c 06       	cpc	r8, r28
     12e:	e2 06       	cpc	r14, r18
     130:	90 06       	cpc	r9, r16
     132:	94 06       	cpc	r9, r20
     134:	97 06       	cpc	r9, r23
     136:	9a 06       	cpc	r9, r26
     138:	9d 06       	cpc	r9, r29
     13a:	a0 06       	cpc	r10, r16
     13c:	cf 06       	cpc	r12, r31
     13e:	a3 06       	cpc	r10, r19
     140:	a6 06       	cpc	r10, r22
     142:	a9 06       	cpc	r10, r25
     144:	ac 06       	cpc	r10, r28
     146:	af 06       	cpc	r10, r31
     148:	f0 06       	cpc	r15, r16
     14a:	be 06       	cpc	r11, r30
     14c:	c1 06       	cpc	r12, r17
     14e:	c5 06       	cpc	r12, r21
     150:	c8 06       	cpc	r12, r24
     152:	e2 06       	cpc	r14, r18
     154:	cc 06       	cpc	r12, r28
     156:	cf 06       	cpc	r12, r31
     158:	d3 06       	cpc	r13, r19
     15a:	d7 06       	cpc	r13, r23
     15c:	db 06       	cpc	r13, r27
     15e:	df 06       	cpc	r13, r31

00000160 <__trampolines_end>:
     160:	00 00       	nop
     162:	0a 0b       	sbc	r16, r26
     164:	02 09       	sbc	r16, r2
     166:	0c 0d       	add	r16, r12
     168:	0e 08       	sbc	r0, r14
     16a:	07 03       	mulsu	r16, r23
     16c:	04 01       	movw	r0, r8
	...
     18a:	00 00       	nop
     18c:	12 11       	cpse	r17, r2
     18e:	10 00       	.word	0x0010	; ????
	...

000001a6 <digital_pin_to_bit_mask_PGM>:
     1a6:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     1b6:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     1c6:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     1d6:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     1e6:	04 08 10 20 40 80                                   ... @.

000001ec <digital_pin_to_port_PGM>:
     1ec:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1fc:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     20c:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     21c:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     22c:	0b 0b 0b 0b 0b 0b                                   ......

00000232 <port_to_input_PGM>:
     232:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     242:	00 01 00 00 03 01 06 01 09 01                       ..........

0000024c <port_to_output_PGM>:
     24c:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     25c:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000266 <port_to_mode_PGM>:
     266:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     276:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000280 <__ctors_start>:
     280:	04 02       	muls	r16, r20

00000282 <__ctors_end>:
     282:	11 24       	eor	r1, r1
     284:	1f be       	out	0x3f, r1	; 63
     286:	cf ef       	ldi	r28, 0xFF	; 255
     288:	d1 e2       	ldi	r29, 0x21	; 33
     28a:	de bf       	out	0x3e, r29	; 62
     28c:	cd bf       	out	0x3d, r28	; 61
     28e:	00 e0       	ldi	r16, 0x00	; 0
     290:	0c bf       	out	0x3c, r16	; 60

00000292 <__do_copy_data>:
     292:	12 e0       	ldi	r17, 0x02	; 2
     294:	a0 e0       	ldi	r26, 0x00	; 0
     296:	b2 e0       	ldi	r27, 0x02	; 2
     298:	e2 e9       	ldi	r30, 0x92	; 146
     29a:	f2 e1       	ldi	r31, 0x12	; 18
     29c:	00 e0       	ldi	r16, 0x00	; 0
     29e:	0b bf       	out	0x3b, r16	; 59
     2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <__do_copy_data+0x14>
     2a2:	07 90       	elpm	r0, Z+
     2a4:	0d 92       	st	X+, r0
     2a6:	a2 31       	cpi	r26, 0x12	; 18
     2a8:	b1 07       	cpc	r27, r17
     2aa:	d9 f7       	brne	.-10     	; 0x2a2 <__do_copy_data+0x10>

000002ac <__do_clear_bss>:
     2ac:	22 e0       	ldi	r18, 0x02	; 2
     2ae:	a2 e1       	ldi	r26, 0x12	; 18
     2b0:	b2 e0       	ldi	r27, 0x02	; 2
     2b2:	01 c0       	rjmp	.+2      	; 0x2b6 <.do_clear_bss_start>

000002b4 <.do_clear_bss_loop>:
     2b4:	1d 92       	st	X+, r1

000002b6 <.do_clear_bss_start>:
     2b6:	a5 34       	cpi	r26, 0x45	; 69
     2b8:	b2 07       	cpc	r27, r18
     2ba:	e1 f7       	brne	.-8      	; 0x2b4 <.do_clear_bss_loop>

000002bc <__do_global_ctors>:
     2bc:	11 e0       	ldi	r17, 0x01	; 1
     2be:	c1 e4       	ldi	r28, 0x41	; 65
     2c0:	d1 e0       	ldi	r29, 0x01	; 1
     2c2:	00 e0       	ldi	r16, 0x00	; 0
     2c4:	05 c0       	rjmp	.+10     	; 0x2d0 <__do_global_ctors+0x14>
     2c6:	21 97       	sbiw	r28, 0x01	; 1
     2c8:	01 09       	sbc	r16, r1
     2ca:	80 2f       	mov	r24, r16
     2cc:	fe 01       	movw	r30, r28
     2ce:	d7 d7       	rcall	.+4014   	; 0x127e <__tablejump2__>
     2d0:	c0 34       	cpi	r28, 0x40	; 64
     2d2:	d1 07       	cpc	r29, r17
     2d4:	80 e0       	ldi	r24, 0x00	; 0
     2d6:	08 07       	cpc	r16, r24
     2d8:	b1 f7       	brne	.-20     	; 0x2c6 <__do_global_ctors+0xa>
     2da:	74 d1       	rcall	.+744    	; 0x5c4 <main>
     2dc:	d8 c7       	rjmp	.+4016   	; 0x128e <_exit>

000002de <__bad_interrupt>:
     2de:	90 ce       	rjmp	.-736    	; 0x0 <__vectors>

000002e0 <_Z41can_message_simulation_cmd_frame_receivedv>:
			break;
		}
	}
}
void can_message_simulation_cmd_frame_received(){
	switch(frameResponse.data[0]){
     2e0:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <frameResponse+0x8>
     2e4:	81 30       	cpi	r24, 0x01	; 1
     2e6:	19 f0       	breq	.+6      	; 0x2ee <_Z41can_message_simulation_cmd_frame_receivedv+0xe>
     2e8:	82 30       	cpi	r24, 0x02	; 2
     2ea:	19 f0       	breq	.+6      	; 0x2f2 <_Z41can_message_simulation_cmd_frame_receivedv+0x12>
     2ec:	08 95       	ret
		case CAN_MSG_SIMULATION_CMD_DATA_KILL:{
			mainEvent = EVENT_KILL_SIMULATION;
     2ee:	82 e0       	ldi	r24, 0x02	; 2
     2f0:	01 c0       	rjmp	.+2      	; 0x2f4 <_Z41can_message_simulation_cmd_frame_receivedv+0x14>
			break;
		}
		case CAN_MSG_SIMULATION_CMD_DATA_START:{
			mainEvent = EVENT_START_SIMULATION;
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <mainEvent>
     2f8:	08 95       	ret

000002fa <_Z31can_message_dms_frame_recieviedv>:
	}
}


void can_message_dms_frame_recievied(){
	switch(frameResponse.data[0]){
     2fa:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <frameResponse+0x8>
     2fe:	81 30       	cpi	r24, 0x01	; 1
     300:	21 f0       	breq	.+8      	; 0x30a <_Z31can_message_dms_frame_recieviedv+0x10>
     302:	82 30       	cpi	r24, 0x02	; 2
     304:	29 f4       	brne	.+10     	; 0x310 <_Z31can_message_dms_frame_recieviedv+0x16>
		case CAN_MSG_DMS_DATA_SLEEP:{
			mainEvent = EVENT_SLEEP;
     306:	83 e0       	ldi	r24, 0x03	; 3
     308:	01 c0       	rjmp	.+2      	; 0x30c <_Z31can_message_dms_frame_recieviedv+0x12>
			break;
		}
		case CAN_MSG_DMS_DATA_DISTRACTED:{
			mainEvent = EVENT_DISTRACTED;
     30a:	84 e0       	ldi	r24, 0x04	; 4
     30c:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <mainEvent>
     310:	08 95       	ret

00000312 <_Z21can_message_recieviedv>:
#include "Sketch.h"

void can_message_recievied(){
	switch(frameResponse.can_id){
     312:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <frameResponse>
     316:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <frameResponse+0x1>
     31a:	a0 91 22 02 	lds	r26, 0x0222	; 0x800222 <frameResponse+0x2>
     31e:	b0 91 23 02 	lds	r27, 0x0223	; 0x800223 <frameResponse+0x3>
     322:	89 30       	cpi	r24, 0x09	; 9
     324:	91 05       	cpc	r25, r1
     326:	a1 05       	cpc	r26, r1
     328:	b1 05       	cpc	r27, r1
     32a:	29 f0       	breq	.+10     	; 0x336 <_Z21can_message_recieviedv+0x24>
     32c:	41 97       	sbiw	r24, 0x11	; 17
     32e:	a1 05       	cpc	r26, r1
     330:	b1 05       	cpc	r27, r1
     332:	11 f0       	breq	.+4      	; 0x338 <_Z21can_message_recieviedv+0x26>
     334:	08 95       	ret
		case CAN_MSG_SIMULATION_CMD_ID:{
			can_message_simulation_cmd_frame_received();
     336:	d4 cf       	rjmp	.-88     	; 0x2e0 <_Z41can_message_simulation_cmd_frame_receivedv>
			break;
		}
			
		case CAN_MSG_DMS_ID:{
			can_message_dms_frame_recievied();
     338:	e0 cf       	rjmp	.-64     	; 0x2fa <_Z31can_message_dms_frame_recieviedv>

0000033a <setup>:
     33a:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <mainState>
bool isDmsActive;


void setup() {
	mainState = STATE_INIT;
	mainEvent = EVENT_IDLE;
     33e:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <mainEvent>
	
	stateEntry = true;
     342:	81 e0       	ldi	r24, 0x01	; 1
     344:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <stateEntry>
	stateExit = false;
     348:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <stateExit>

	
	mcp2515.reset();
     34c:	80 e3       	ldi	r24, 0x30	; 48
     34e:	92 e0       	ldi	r25, 0x02	; 2
     350:	25 d6       	rcall	.+3146   	; 0xf9c <_ZN7MCP25155resetEv>
	mcp2515.setBitrate(CAN_125KBPS, MCP_8MHZ);
     352:	42 e0       	ldi	r20, 0x02	; 2
     354:	6b e0       	ldi	r22, 0x0B	; 11
     356:	80 e3       	ldi	r24, 0x30	; 48
     358:	92 e0       	ldi	r25, 0x02	; 2
     35a:	8d d4       	rcall	.+2330   	; 0xc76 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK>
	mcp2515.setNormalMode();
     35c:	80 e3       	ldi	r24, 0x30	; 48
     35e:	92 e0       	ldi	r25, 0x02	; 2
     360:	88 d4       	rcall	.+2320   	; 0xc72 <_ZN7MCP251513setNormalModeEv>
	
	pinMode(PIN_BUZZER, OUTPUT);
     362:	61 e0       	ldi	r22, 0x01	; 1
     364:	8d e2       	ldi	r24, 0x2D	; 45
     366:	a4 d2       	rcall	.+1352   	; 0x8b0 <pinMode>
	pinMode(PIN_LED_RED, OUTPUT);
     368:	61 e0       	ldi	r22, 0x01	; 1
     36a:	8c e2       	ldi	r24, 0x2C	; 44
     36c:	a1 d2       	rcall	.+1346   	; 0x8b0 <pinMode>
	pinMode(PIN_LED_GREEN, OUTPUT);
     36e:	61 e0       	ldi	r22, 0x01	; 1
     370:	89 e2       	ldi	r24, 0x29	; 41
     372:	9e d2       	rcall	.+1340   	; 0x8b0 <pinMode>
	pinMode(PIN_LED_YELLOW, OUTPUT);
     374:	61 e0       	ldi	r22, 0x01	; 1
     376:	8a e2       	ldi	r24, 0x2A	; 42
     378:	9b d2       	rcall	.+1334   	; 0x8b0 <pinMode>
	
	pinMode(PIN_BUTTON, INPUT_PULLUP);
     37a:	62 e0       	ldi	r22, 0x02	; 2
     37c:	80 e3       	ldi	r24, 0x30	; 48
     37e:	98 d2       	rcall	.+1328   	; 0x8b0 <pinMode>
	
	digitalWrite(PIN_BUZZER, HIGH);
     380:	61 e0       	ldi	r22, 0x01	; 1
     382:	8d e2       	ldi	r24, 0x2D	; 45
     384:	d1 d2       	rcall	.+1442   	; 0x928 <digitalWrite>
	digitalWrite(PIN_LED_RED, HIGH);
     386:	61 e0       	ldi	r22, 0x01	; 1
     388:	8c e2       	ldi	r24, 0x2C	; 44
     38a:	ce d2       	rcall	.+1436   	; 0x928 <digitalWrite>
     38c:	61 e0       	ldi	r22, 0x01	; 1
	digitalWrite(PIN_LED_GREEN, HIGH);
     38e:	89 e2       	ldi	r24, 0x29	; 41
     390:	cb d2       	rcall	.+1430   	; 0x928 <digitalWrite>
     392:	61 e0       	ldi	r22, 0x01	; 1
	digitalWrite(PIN_LED_YELLOW, HIGH);
     394:	8a e2       	ldi	r24, 0x2A	; 42
     396:	c8 d2       	rcall	.+1424   	; 0x928 <digitalWrite>
     398:	60 ed       	ldi	r22, 0xD0	; 208
	
	delay(2000);
     39a:	77 e0       	ldi	r23, 0x07	; 7
     39c:	80 e0       	ldi	r24, 0x00	; 0
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	97 d1       	rcall	.+814    	; 0x6d0 <delay>
	
	digitalWrite(PIN_BUZZER, LOW);
     3a2:	60 e0       	ldi	r22, 0x00	; 0
     3a4:	8d e2       	ldi	r24, 0x2D	; 45
     3a6:	c0 d2       	rcall	.+1408   	; 0x928 <digitalWrite>
     3a8:	60 e0       	ldi	r22, 0x00	; 0
	digitalWrite(PIN_LED_RED, LOW);
     3aa:	8c e2       	ldi	r24, 0x2C	; 44
     3ac:	bd d2       	rcall	.+1402   	; 0x928 <digitalWrite>
     3ae:	60 e0       	ldi	r22, 0x00	; 0
     3b0:	89 e2       	ldi	r24, 0x29	; 41
	digitalWrite(PIN_LED_GREEN, LOW);
     3b2:	ba d2       	rcall	.+1396   	; 0x928 <digitalWrite>
     3b4:	60 e0       	ldi	r22, 0x00	; 0
     3b6:	8a e2       	ldi	r24, 0x2A	; 42
     3b8:	b7 c2       	rjmp	.+1390   	; 0x928 <digitalWrite>

000003ba <loop>:
	digitalWrite(PIN_LED_YELLOW, LOW);
     3ba:	60 e2       	ldi	r22, 0x20	; 32
     3bc:	72 e0       	ldi	r23, 0x02	; 2
     3be:	80 e3       	ldi	r24, 0x30	; 48
     3c0:	92 e0       	ldi	r25, 0x02	; 2
void loop() {
	
	
	//	Get Events

	if(mcp2515.readMessage(&frameResponse) == MCP2515::ERROR_OK){
     3c2:	0e d7       	rcall	.+3612   	; 0x11e0 <_ZN7MCP251511readMessageEP9can_frame>
     3c4:	81 11       	cpse	r24, r1
     3c6:	02 c0       	rjmp	.+4      	; 0x3cc <loop+0x12>
		can_message_recievied();
     3c8:	a4 df       	rcall	.-184    	; 0x312 <_Z21can_message_recieviedv>
     3ca:	0d c0       	rjmp	.+26     	; 0x3e6 <loop+0x2c>
	}
	
	else if(digitalRead(PIN_BUTTON) == LOW){
     3cc:	80 e3       	ldi	r24, 0x30	; 48
     3ce:	da d2       	rcall	.+1460   	; 0x984 <digitalRead>
     3d0:	89 2b       	or	r24, r25
     3d2:	11 f4       	brne	.+4      	; 0x3d8 <loop+0x1e>
     3d4:	86 e0       	ldi	r24, 0x06	; 6
		mainEvent = EVENT_BUTTON_PRESSED;
     3d6:	05 c0       	rjmp	.+10     	; 0x3e2 <loop+0x28>
	}else if (digitalRead(PIN_BUTTON) == HIGH){
     3d8:	80 e3       	ldi	r24, 0x30	; 48
     3da:	d4 d2       	rcall	.+1448   	; 0x984 <digitalRead>
     3dc:	01 97       	sbiw	r24, 0x01	; 1
     3de:	19 f4       	brne	.+6      	; 0x3e6 <loop+0x2c>
     3e0:	87 e0       	ldi	r24, 0x07	; 7
		mainEvent = EVENT_BUTTON_NOT_PRESSED;
     3e2:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <mainEvent>
     3e6:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <mainState>
	}
	
	// Handle Events
	switch(mainState){
     3ea:	81 30       	cpi	r24, 0x01	; 1
     3ec:	39 f0       	breq	.+14     	; 0x3fc <loop+0x42>
     3ee:	20 f0       	brcs	.+8      	; 0x3f8 <loop+0x3e>
     3f0:	82 30       	cpi	r24, 0x02	; 2
			stateIDLE_handler();
			break;
		}
		
		case STATE_ACTIVE:{
			stateACTIVE_handler();
     3f2:	29 f4       	brne	.+10     	; 0x3fe <loop+0x44>
			break;
     3f4:	84 d0       	rcall	.+264    	; 0x4fe <_Z19stateACTIVE_handlerv>
	
	// Handle Events
	switch(mainState){
		
		case STATE_HALT:{
			stateHALT_handler();
     3f6:	03 c0       	rjmp	.+6      	; 0x3fe <loop+0x44>
     3f8:	16 d0       	rcall	.+44     	; 0x426 <_Z17stateHALT_handlerv>
			break;
		}
		
		case STATE_IDLE:{
			stateIDLE_handler();
     3fa:	01 c0       	rjmp	.+2      	; 0x3fe <loop+0x44>
     3fc:	3c d0       	rcall	.+120    	; 0x476 <_Z17stateIDLE_handlerv>
		default:{
			
		}
	}
	
	delay(10);
     3fe:	6a e0       	ldi	r22, 0x0A	; 10
     400:	70 e0       	ldi	r23, 0x00	; 0
     402:	80 e0       	ldi	r24, 0x00	; 0
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	64 c1       	rjmp	.+712    	; 0x6d0 <delay>

00000408 <_GLOBAL__sub_I_mcp2515>:
     408:	0f 93       	push	r16
     40a:	1f 93       	push	r17
﻿#include "Sketch.h"

MCP2515 mcp2515(PIN_SS);
     40c:	00 e0       	ldi	r16, 0x00	; 0
     40e:	10 e0       	ldi	r17, 0x00	; 0
     410:	20 e8       	ldi	r18, 0x80	; 128
     412:	36 e9       	ldi	r19, 0x96	; 150
     414:	48 e9       	ldi	r20, 0x98	; 152
     416:	50 e0       	ldi	r21, 0x00	; 0
     418:	61 e3       	ldi	r22, 0x31	; 49
     41a:	80 e3       	ldi	r24, 0x30	; 48
     41c:	92 e0       	ldi	r25, 0x02	; 2
     41e:	2f d3       	rcall	.+1630   	; 0xa7e <_ZN7MCP2515C1EhmP8SPIClass>
			
		}
	}
	
	delay(10);
     420:	1f 91       	pop	r17
     422:	0f 91       	pop	r16
     424:	08 95       	ret

00000426 <_Z17stateHALT_handlerv>:
//void superStateRunning_handler(){
	// TODO: maybe one day i will do it right with C OOP and QPC HSM patterns, but now its GOOD ENOUGH
//}

void stateHALT_handler(){
	if(stateEntry == true){
     426:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <stateEntry>
     42a:	88 23       	and	r24, r24
     42c:	59 f0       	breq	.+22     	; 0x444 <_Z17stateHALT_handlerv+0x1e>
		stateEntry = false;
     42e:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <stateEntry>
		
		digitalWrite(PIN_LED_RED, HIGH);
     432:	61 e0       	ldi	r22, 0x01	; 1
     434:	8c e2       	ldi	r24, 0x2C	; 44
     436:	78 d2       	rcall	.+1264   	; 0x928 <digitalWrite>
		digitalWrite(PIN_BUZZER, LOW);
     438:	60 e0       	ldi	r22, 0x00	; 0
     43a:	8d e2       	ldi	r24, 0x2D	; 45
     43c:	75 d2       	rcall	.+1258   	; 0x928 <digitalWrite>
		digitalWrite(PIN_LED_GREEN, LOW);
     43e:	60 e0       	ldi	r22, 0x00	; 0
     440:	89 e2       	ldi	r24, 0x29	; 41
     442:	72 d2       	rcall	.+1252   	; 0x928 <digitalWrite>
	}
	
	switch(mainEvent){
     444:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <mainEvent>
     448:	88 23       	and	r24, r24
     44a:	41 f0       	breq	.+16     	; 0x45c <_Z17stateHALT_handlerv+0x36>
			
			break;
		}
		
		case EVENT_START_SIMULATION:{
			mainEvent = EVENT_IDLE;
     44c:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <mainEvent>
		digitalWrite(PIN_LED_RED, HIGH);
		digitalWrite(PIN_BUZZER, LOW);
		digitalWrite(PIN_LED_GREEN, LOW);
	}
	
	switch(mainEvent){
     450:	81 30       	cpi	r24, 0x01	; 1
     452:	21 f4       	brne	.+8      	; 0x45c <_Z17stateHALT_handlerv+0x36>
		}
		
		case EVENT_START_SIMULATION:{
			mainEvent = EVENT_IDLE;
			
			mainState = STATE_IDLE;
     454:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <mainState>
			stateExit = true;
     458:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <stateExit>
			mainEvent = EVENT_IDLE;
			break;
		}
	}
	
	if(stateExit == true){
     45c:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <stateExit>
     460:	88 23       	and	r24, r24
     462:	41 f0       	breq	.+16     	; 0x474 <_Z17stateHALT_handlerv+0x4e>
		stateExit = false;
     464:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <stateExit>
		stateEntry = true;
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <stateEntry>
		
		
		digitalWrite(PIN_LED_RED, LOW);
     46e:	60 e0       	ldi	r22, 0x00	; 0
     470:	8c e2       	ldi	r24, 0x2C	; 44
     472:	5a c2       	rjmp	.+1204   	; 0x928 <digitalWrite>
     474:	08 95       	ret

00000476 <_Z17stateIDLE_handlerv>:
	}
}

void stateIDLE_handler(){
	if(stateEntry == true){
     476:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <stateEntry>
     47a:	88 23       	and	r24, r24
     47c:	29 f0       	breq	.+10     	; 0x488 <_Z17stateIDLE_handlerv+0x12>
		stateEntry = false;
     47e:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <stateEntry>
		
		
		digitalWrite(PIN_LED_GREEN, HIGH);
     482:	61 e0       	ldi	r22, 0x01	; 1
     484:	89 e2       	ldi	r24, 0x29	; 41
     486:	50 d2       	rcall	.+1184   	; 0x928 <digitalWrite>
	}
	

	switch(mainEvent){
     488:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <mainEvent>
     48c:	85 30       	cpi	r24, 0x05	; 5
     48e:	58 f4       	brcc	.+22     	; 0x4a6 <_Z17stateIDLE_handlerv+0x30>
     490:	83 30       	cpi	r24, 0x03	; 3
     492:	88 f4       	brcc	.+34     	; 0x4b6 <_Z17stateIDLE_handlerv+0x40>
     494:	88 23       	and	r24, r24
     496:	31 f1       	breq	.+76     	; 0x4e4 <_Z17stateIDLE_handlerv+0x6e>
     498:	82 30       	cpi	r24, 0x02	; 2
     49a:	11 f5       	brne	.+68     	; 0x4e0 <_Z17stateIDLE_handlerv+0x6a>
			digitalWrite(PIN_LED_YELLOW, LOW);
			break;
		}
		
		case EVENT_KILL_SIMULATION:{
			mainEvent = EVENT_IDLE;
     49c:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <mainEvent>
			
			mainState = STATE_HALT;
     4a0:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <mainState>
     4a4:	19 c0       	rjmp	.+50     	; 0x4d8 <_Z17stateIDLE_handlerv+0x62>
		
		digitalWrite(PIN_LED_GREEN, HIGH);
	}
	

	switch(mainEvent){
     4a6:	86 30       	cpi	r24, 0x06	; 6
     4a8:	81 f0       	breq	.+32     	; 0x4ca <_Z17stateIDLE_handlerv+0x54>
     4aa:	87 30       	cpi	r24, 0x07	; 7
     4ac:	c9 f4       	brne	.+50     	; 0x4e0 <_Z17stateIDLE_handlerv+0x6a>
			digitalWrite(PIN_LED_YELLOW, HIGH);
			break;
		}
		
		case EVENT_BUTTON_NOT_PRESSED:{
			isDmsActive = false;
     4ae:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <__data_end>
			digitalWrite(PIN_LED_YELLOW, LOW);
     4b2:	60 e0       	ldi	r22, 0x00	; 0
     4b4:	0e c0       	rjmp	.+28     	; 0x4d2 <_Z17stateIDLE_handlerv+0x5c>
			break;
		}
		
		case EVENT_SLEEP:
		case EVENT_DISTRACTED:{
			mainEvent = EVENT_IDLE;
     4b6:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <mainEvent>
			
			if(isDmsActive == true){
     4ba:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__data_end>
     4be:	88 23       	and	r24, r24
     4c0:	89 f0       	breq	.+34     	; 0x4e4 <_Z17stateIDLE_handlerv+0x6e>
				mainState = STATE_ACTIVE;
     4c2:	82 e0       	ldi	r24, 0x02	; 2
     4c4:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <mainState>
     4c8:	07 c0       	rjmp	.+14     	; 0x4d8 <_Z17stateIDLE_handlerv+0x62>
	
			break;
		}
		
		case EVENT_BUTTON_PRESSED:{
			isDmsActive = true;
     4ca:	81 e0       	ldi	r24, 0x01	; 1
     4cc:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <__data_end>
			digitalWrite(PIN_LED_YELLOW, HIGH);
     4d0:	61 e0       	ldi	r22, 0x01	; 1
			break;
		}
		
		case EVENT_BUTTON_NOT_PRESSED:{
			isDmsActive = false;
			digitalWrite(PIN_LED_YELLOW, LOW);
     4d2:	8a e2       	ldi	r24, 0x2A	; 42
     4d4:	29 d2       	rcall	.+1106   	; 0x928 <digitalWrite>
			break;
     4d6:	06 c0       	rjmp	.+12     	; 0x4e4 <_Z17stateIDLE_handlerv+0x6e>
		
		case EVENT_KILL_SIMULATION:{
			mainEvent = EVENT_IDLE;
			
			mainState = STATE_HALT;
			stateExit = true;
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <stateExit>
			
			break;	
     4de:	02 c0       	rjmp	.+4      	; 0x4e4 <_Z17stateIDLE_handlerv+0x6e>
		}
			
		default:{
			mainEvent = EVENT_IDLE;
     4e0:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <mainEvent>
			break;
		}
	}
	
	
	if(stateExit == true){
     4e4:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <stateExit>
     4e8:	88 23       	and	r24, r24
     4ea:	41 f0       	breq	.+16     	; 0x4fc <_Z17stateIDLE_handlerv+0x86>
		stateExit = false;
     4ec:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <stateExit>
		stateEntry = true;
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <stateEntry>
		
		digitalWrite(PIN_LED_GREEN, LOW);
     4f6:	60 e0       	ldi	r22, 0x00	; 0
     4f8:	89 e2       	ldi	r24, 0x29	; 41
     4fa:	16 c2       	rjmp	.+1068   	; 0x928 <digitalWrite>
     4fc:	08 95       	ret

000004fe <_Z19stateACTIVE_handlerv>:
	}
	
}


void stateACTIVE_handler(){
     4fe:	0f 93       	push	r16
     500:	1f 93       	push	r17
	if(stateEntry == true){
     502:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <stateEntry>
     506:	88 23       	and	r24, r24
     508:	71 f0       	breq	.+28     	; 0x526 <_Z19stateACTIVE_handlerv+0x28>
		stateEntry = false;
     50a:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <stateEntry>
		
		stateEntryIntialTime = millis();
     50e:	af d0       	rcall	.+350    	; 0x66e <millis>
     510:	60 93 15 02 	sts	0x0215, r22	; 0x800215 <stateEntryIntialTime>
     514:	70 93 16 02 	sts	0x0216, r23	; 0x800216 <stateEntryIntialTime+0x1>
     518:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <stateEntryIntialTime+0x2>
     51c:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <stateEntryIntialTime+0x3>
		digitalWrite(PIN_BUZZER, HIGH);
     520:	61 e0       	ldi	r22, 0x01	; 1
     522:	8d e2       	ldi	r24, 0x2D	; 45
	}
	
	
	if(millis() - stateEntryIntialTime >= BUZZER_ON_TIME_MS){
     524:	01 d2       	rcall	.+1026   	; 0x928 <digitalWrite>
     526:	a3 d0       	rcall	.+326    	; 0x66e <millis>
     528:	00 91 15 02 	lds	r16, 0x0215	; 0x800215 <stateEntryIntialTime>
     52c:	10 91 16 02 	lds	r17, 0x0216	; 0x800216 <stateEntryIntialTime+0x1>
     530:	20 91 17 02 	lds	r18, 0x0217	; 0x800217 <stateEntryIntialTime+0x2>
     534:	30 91 18 02 	lds	r19, 0x0218	; 0x800218 <stateEntryIntialTime+0x3>
     538:	dc 01       	movw	r26, r24
     53a:	cb 01       	movw	r24, r22
     53c:	80 1b       	sub	r24, r16
     53e:	91 0b       	sbc	r25, r17
     540:	a2 0b       	sbc	r26, r18
     542:	b3 0b       	sbc	r27, r19
     544:	88 3b       	cpi	r24, 0xB8	; 184
     546:	9b 40       	sbci	r25, 0x0B	; 11
     548:	a1 05       	cpc	r26, r1
     54a:	b1 05       	cpc	r27, r1
     54c:	18 f0       	brcs	.+6      	; 0x554 <_Z19stateACTIVE_handlerv+0x56>
		mainEvent = EVENT_END_ALERT;
     54e:	85 e0       	ldi	r24, 0x05	; 5
     550:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <mainEvent>
	}
	
	switch(mainEvent){
     554:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <mainEvent>
     558:	85 30       	cpi	r24, 0x05	; 5
     55a:	89 f0       	breq	.+34     	; 0x57e <_Z19stateACTIVE_handlerv+0x80>
     55c:	40 f4       	brcc	.+16     	; 0x56e <_Z19stateACTIVE_handlerv+0x70>
     55e:	82 30       	cpi	r24, 0x02	; 2
     560:	e9 f4       	brne	.+58     	; 0x59c <_Z19stateACTIVE_handlerv+0x9e>
			stateExit = true;
			break;
		}
		
		case EVENT_KILL_SIMULATION:{
			mainEvent = EVENT_IDLE;
     562:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <mainEvent>
			
			mainState = STATE_HALT;
     566:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <mainState>
			stateExit = true;
     56a:	81 e0       	ldi	r24, 0x01	; 1
     56c:	0d c0       	rjmp	.+26     	; 0x588 <_Z19stateACTIVE_handlerv+0x8a>
	
	if(millis() - stateEntryIntialTime >= BUZZER_ON_TIME_MS){
		mainEvent = EVENT_END_ALERT;
	}
	
	switch(mainEvent){
     56e:	86 30       	cpi	r24, 0x06	; 6
     570:	71 f0       	breq	.+28     	; 0x58e <_Z19stateACTIVE_handlerv+0x90>
     572:	87 30       	cpi	r24, 0x07	; 7
     574:	99 f4       	brne	.+38     	; 0x59c <_Z19stateACTIVE_handlerv+0x9e>
			digitalWrite(PIN_LED_YELLOW, HIGH);
			break;
		}
		
		case EVENT_BUTTON_NOT_PRESSED:{
			isDmsActive = false;
     576:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <__data_end>
			digitalWrite(PIN_LED_YELLOW, LOW);
     57a:	60 e0       	ldi	r22, 0x00	; 0
     57c:	0c c0       	rjmp	.+24     	; 0x596 <_Z19stateACTIVE_handlerv+0x98>
	}
	
	switch(mainEvent){
		
		case EVENT_END_ALERT:{
			mainEvent = EVENT_IDLE;
     57e:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <mainEvent>
			
			mainState = STATE_IDLE;
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <mainState>
		
		case EVENT_KILL_SIMULATION:{
			mainEvent = EVENT_IDLE;
			
			mainState = STATE_HALT;
			stateExit = true;
     588:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <stateExit>
			
			break;
     58c:	09 c0       	rjmp	.+18     	; 0x5a0 <_Z19stateACTIVE_handlerv+0xa2>
		}
		
		case EVENT_BUTTON_PRESSED:{
			isDmsActive = true;
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <__data_end>
			break;
		}
		
		case EVENT_BUTTON_NOT_PRESSED:{
			isDmsActive = false;
			digitalWrite(PIN_LED_YELLOW, LOW);
     594:	61 e0       	ldi	r22, 0x01	; 1
     596:	8a e2       	ldi	r24, 0x2A	; 42
     598:	c7 d1       	rcall	.+910    	; 0x928 <digitalWrite>
			break;
     59a:	02 c0       	rjmp	.+4      	; 0x5a0 <_Z19stateACTIVE_handlerv+0xa2>
		}

		default:{
			mainEvent = EVENT_IDLE;
     59c:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <mainEvent>
			
			break;
		}
	}
	
	if(stateExit == true){
     5a0:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <stateExit>
     5a4:	88 23       	and	r24, r24
     5a6:	51 f0       	breq	.+20     	; 0x5bc <_Z19stateACTIVE_handlerv+0xbe>
		stateExit = false;
     5a8:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <stateExit>
		stateEntry = true;
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <stateEntry>
		
		digitalWrite(PIN_BUZZER, LOW);
     5b2:	60 e0       	ldi	r22, 0x00	; 0
	}
     5b4:	8d e2       	ldi	r24, 0x2D	; 45
     5b6:	1f 91       	pop	r17
	
	if(stateExit == true){
		stateExit = false;
		stateEntry = true;
		
		digitalWrite(PIN_BUZZER, LOW);
     5b8:	0f 91       	pop	r16
     5ba:	b6 c1       	rjmp	.+876    	; 0x928 <digitalWrite>
	}
     5bc:	1f 91       	pop	r17
     5be:	0f 91       	pop	r16
     5c0:	08 95       	ret

000005c2 <initVariant>:
     5c2:	08 95       	ret

000005c4 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     5c4:	be d0       	rcall	.+380    	; 0x742 <init>

	initVariant();
     5c6:	fd df       	rcall	.-6      	; 0x5c2 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     5c8:	b8 de       	rcall	.-656    	; 0x33a <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     5ca:	c0 e0       	ldi	r28, 0x00	; 0
     5cc:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
     5ce:	f5 de       	rcall	.-534    	; 0x3ba <loop>
     5d0:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
     5d2:	e9 f3       	breq	.-6      	; 0x5ce <main+0xa>
     5d4:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     5d8:	fa cf       	rjmp	.-12     	; 0x5ce <main+0xa>

000005da <__vector_23>:
     5da:	1f 92       	push	r1
	

#endif

	// busy wait
	__asm__ __volatile__ (
     5dc:	0f 92       	push	r0
     5de:	0f b6       	in	r0, 0x3f	; 63
     5e0:	0f 92       	push	r0
     5e2:	11 24       	eor	r1, r1
     5e4:	2f 93       	push	r18
     5e6:	3f 93       	push	r19
     5e8:	8f 93       	push	r24
     5ea:	9f 93       	push	r25
     5ec:	af 93       	push	r26
     5ee:	bf 93       	push	r27
     5f0:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <timer0_millis>
     5f4:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <timer0_millis+0x1>
     5f8:	a0 91 3a 02 	lds	r26, 0x023A	; 0x80023a <timer0_millis+0x2>
     5fc:	b0 91 3b 02 	lds	r27, 0x023B	; 0x80023b <timer0_millis+0x3>
     600:	30 91 37 02 	lds	r19, 0x0237	; 0x800237 <timer0_fract>
     604:	23 e0       	ldi	r18, 0x03	; 3
     606:	23 0f       	add	r18, r19
     608:	2d 37       	cpi	r18, 0x7D	; 125
     60a:	20 f4       	brcc	.+8      	; 0x614 <__vector_23+0x3a>
     60c:	01 96       	adiw	r24, 0x01	; 1
     60e:	a1 1d       	adc	r26, r1
     610:	b1 1d       	adc	r27, r1
     612:	05 c0       	rjmp	.+10     	; 0x61e <__vector_23+0x44>
     614:	26 e8       	ldi	r18, 0x86	; 134
     616:	23 0f       	add	r18, r19
     618:	02 96       	adiw	r24, 0x02	; 2
     61a:	a1 1d       	adc	r26, r1
     61c:	b1 1d       	adc	r27, r1
     61e:	20 93 37 02 	sts	0x0237, r18	; 0x800237 <timer0_fract>
     622:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <timer0_millis>
     626:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <timer0_millis+0x1>
     62a:	a0 93 3a 02 	sts	0x023A, r26	; 0x80023a <timer0_millis+0x2>
     62e:	b0 93 3b 02 	sts	0x023B, r27	; 0x80023b <timer0_millis+0x3>
     632:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <timer0_overflow_count>
     636:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <timer0_overflow_count+0x1>
     63a:	a0 91 3e 02 	lds	r26, 0x023E	; 0x80023e <timer0_overflow_count+0x2>
     63e:	b0 91 3f 02 	lds	r27, 0x023F	; 0x80023f <timer0_overflow_count+0x3>
     642:	01 96       	adiw	r24, 0x01	; 1
     644:	a1 1d       	adc	r26, r1
     646:	b1 1d       	adc	r27, r1
     648:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <timer0_overflow_count>
     64c:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <timer0_overflow_count+0x1>
     650:	a0 93 3e 02 	sts	0x023E, r26	; 0x80023e <timer0_overflow_count+0x2>
     654:	b0 93 3f 02 	sts	0x023F, r27	; 0x80023f <timer0_overflow_count+0x3>
     658:	bf 91       	pop	r27
     65a:	af 91       	pop	r26
     65c:	9f 91       	pop	r25
     65e:	8f 91       	pop	r24
     660:	3f 91       	pop	r19
     662:	2f 91       	pop	r18
     664:	0f 90       	pop	r0
     666:	0f be       	out	0x3f, r0	; 63
     668:	0f 90       	pop	r0
     66a:	1f 90       	pop	r1
     66c:	18 95       	reti

0000066e <millis>:
     66e:	2f b7       	in	r18, 0x3f	; 63
     670:	f8 94       	cli
     672:	60 91 38 02 	lds	r22, 0x0238	; 0x800238 <timer0_millis>
     676:	70 91 39 02 	lds	r23, 0x0239	; 0x800239 <timer0_millis+0x1>
     67a:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <timer0_millis+0x2>
     67e:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <timer0_millis+0x3>
     682:	2f bf       	out	0x3f, r18	; 63
     684:	08 95       	ret

00000686 <micros>:
     686:	3f b7       	in	r19, 0x3f	; 63
     688:	f8 94       	cli
     68a:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <timer0_overflow_count>
     68e:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <timer0_overflow_count+0x1>
     692:	a0 91 3e 02 	lds	r26, 0x023E	; 0x80023e <timer0_overflow_count+0x2>
     696:	b0 91 3f 02 	lds	r27, 0x023F	; 0x80023f <timer0_overflow_count+0x3>
     69a:	26 b5       	in	r18, 0x26	; 38
     69c:	a8 9b       	sbis	0x15, 0	; 21
     69e:	05 c0       	rjmp	.+10     	; 0x6aa <micros+0x24>
     6a0:	2f 3f       	cpi	r18, 0xFF	; 255
     6a2:	19 f0       	breq	.+6      	; 0x6aa <micros+0x24>
     6a4:	01 96       	adiw	r24, 0x01	; 1
     6a6:	a1 1d       	adc	r26, r1
     6a8:	b1 1d       	adc	r27, r1
     6aa:	3f bf       	out	0x3f, r19	; 63
     6ac:	ba 2f       	mov	r27, r26
     6ae:	a9 2f       	mov	r26, r25
     6b0:	98 2f       	mov	r25, r24
     6b2:	88 27       	eor	r24, r24
     6b4:	82 0f       	add	r24, r18
     6b6:	91 1d       	adc	r25, r1
     6b8:	a1 1d       	adc	r26, r1
     6ba:	b1 1d       	adc	r27, r1
     6bc:	bc 01       	movw	r22, r24
     6be:	cd 01       	movw	r24, r26
     6c0:	42 e0       	ldi	r20, 0x02	; 2
     6c2:	66 0f       	add	r22, r22
     6c4:	77 1f       	adc	r23, r23
     6c6:	88 1f       	adc	r24, r24
     6c8:	99 1f       	adc	r25, r25
     6ca:	4a 95       	dec	r20
     6cc:	d1 f7       	brne	.-12     	; 0x6c2 <micros+0x3c>
     6ce:	08 95       	ret

000006d0 <delay>:
     6d0:	8f 92       	push	r8
     6d2:	9f 92       	push	r9
     6d4:	af 92       	push	r10
     6d6:	bf 92       	push	r11
     6d8:	cf 92       	push	r12
     6da:	df 92       	push	r13
     6dc:	ef 92       	push	r14
     6de:	ff 92       	push	r15
     6e0:	6b 01       	movw	r12, r22
     6e2:	7c 01       	movw	r14, r24
     6e4:	d0 df       	rcall	.-96     	; 0x686 <micros>
     6e6:	4b 01       	movw	r8, r22
     6e8:	5c 01       	movw	r10, r24
     6ea:	c1 14       	cp	r12, r1
     6ec:	d1 04       	cpc	r13, r1
     6ee:	e1 04       	cpc	r14, r1
     6f0:	f1 04       	cpc	r15, r1
     6f2:	f1 f0       	breq	.+60     	; 0x730 <delay+0x60>
     6f4:	c3 d5       	rcall	.+2950   	; 0x127c <yield>
     6f6:	c7 df       	rcall	.-114    	; 0x686 <micros>
     6f8:	dc 01       	movw	r26, r24
     6fa:	cb 01       	movw	r24, r22
     6fc:	88 19       	sub	r24, r8
     6fe:	99 09       	sbc	r25, r9
     700:	aa 09       	sbc	r26, r10
     702:	bb 09       	sbc	r27, r11
     704:	88 3e       	cpi	r24, 0xE8	; 232
     706:	93 40       	sbci	r25, 0x03	; 3
     708:	a1 05       	cpc	r26, r1
     70a:	b1 05       	cpc	r27, r1
     70c:	70 f3       	brcs	.-36     	; 0x6ea <delay+0x1a>
     70e:	21 e0       	ldi	r18, 0x01	; 1
     710:	c2 1a       	sub	r12, r18
     712:	d1 08       	sbc	r13, r1
     714:	e1 08       	sbc	r14, r1
     716:	f1 08       	sbc	r15, r1
     718:	88 ee       	ldi	r24, 0xE8	; 232
     71a:	88 0e       	add	r8, r24
     71c:	83 e0       	ldi	r24, 0x03	; 3
     71e:	98 1e       	adc	r9, r24
     720:	a1 1c       	adc	r10, r1
     722:	b1 1c       	adc	r11, r1
     724:	c1 14       	cp	r12, r1
     726:	d1 04       	cpc	r13, r1
     728:	e1 04       	cpc	r14, r1
     72a:	f1 04       	cpc	r15, r1
     72c:	21 f7       	brne	.-56     	; 0x6f6 <delay+0x26>
     72e:	dd cf       	rjmp	.-70     	; 0x6ea <delay+0x1a>
     730:	ff 90       	pop	r15
     732:	ef 90       	pop	r14
     734:	df 90       	pop	r13
     736:	cf 90       	pop	r12
     738:	bf 90       	pop	r11
     73a:	af 90       	pop	r10
     73c:	9f 90       	pop	r9
     73e:	8f 90       	pop	r8
     740:	08 95       	ret

00000742 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     742:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     744:	84 b5       	in	r24, 0x24	; 36
     746:	82 60       	ori	r24, 0x02	; 2
     748:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     74a:	84 b5       	in	r24, 0x24	; 36
     74c:	81 60       	ori	r24, 0x01	; 1
     74e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     750:	85 b5       	in	r24, 0x25	; 37
     752:	82 60       	ori	r24, 0x02	; 2
     754:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     756:	85 b5       	in	r24, 0x25	; 37
     758:	81 60       	ori	r24, 0x01	; 1
     75a:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     75c:	ee e6       	ldi	r30, 0x6E	; 110
     75e:	f0 e0       	ldi	r31, 0x00	; 0
     760:	80 81       	ld	r24, Z
     762:	81 60       	ori	r24, 0x01	; 1
     764:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     766:	e1 e8       	ldi	r30, 0x81	; 129
     768:	f0 e0       	ldi	r31, 0x00	; 0
     76a:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     76c:	80 81       	ld	r24, Z
     76e:	82 60       	ori	r24, 0x02	; 2
     770:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     772:	80 81       	ld	r24, Z
     774:	81 60       	ori	r24, 0x01	; 1
     776:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     778:	e0 e8       	ldi	r30, 0x80	; 128
     77a:	f0 e0       	ldi	r31, 0x00	; 0
     77c:	80 81       	ld	r24, Z
     77e:	81 60       	ori	r24, 0x01	; 1
     780:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     782:	e1 eb       	ldi	r30, 0xB1	; 177
     784:	f0 e0       	ldi	r31, 0x00	; 0
     786:	80 81       	ld	r24, Z
     788:	84 60       	ori	r24, 0x04	; 4
     78a:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     78c:	e0 eb       	ldi	r30, 0xB0	; 176
     78e:	f0 e0       	ldi	r31, 0x00	; 0
     790:	80 81       	ld	r24, Z
     792:	81 60       	ori	r24, 0x01	; 1
     794:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
     796:	e1 e9       	ldi	r30, 0x91	; 145
     798:	f0 e0       	ldi	r31, 0x00	; 0
     79a:	80 81       	ld	r24, Z
     79c:	82 60       	ori	r24, 0x02	; 2
     79e:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
     7a0:	80 81       	ld	r24, Z
     7a2:	81 60       	ori	r24, 0x01	; 1
     7a4:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
     7a6:	e0 e9       	ldi	r30, 0x90	; 144
     7a8:	f0 e0       	ldi	r31, 0x00	; 0
     7aa:	80 81       	ld	r24, Z
     7ac:	81 60       	ori	r24, 0x01	; 1
     7ae:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
     7b0:	e1 ea       	ldi	r30, 0xA1	; 161
     7b2:	f0 e0       	ldi	r31, 0x00	; 0
     7b4:	80 81       	ld	r24, Z
     7b6:	82 60       	ori	r24, 0x02	; 2
     7b8:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
     7ba:	80 81       	ld	r24, Z
     7bc:	81 60       	ori	r24, 0x01	; 1
     7be:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
     7c0:	e0 ea       	ldi	r30, 0xA0	; 160
     7c2:	f0 e0       	ldi	r31, 0x00	; 0
     7c4:	80 81       	ld	r24, Z
     7c6:	81 60       	ori	r24, 0x01	; 1
     7c8:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
     7ca:	e1 e2       	ldi	r30, 0x21	; 33
     7cc:	f1 e0       	ldi	r31, 0x01	; 1
     7ce:	80 81       	ld	r24, Z
     7d0:	82 60       	ori	r24, 0x02	; 2
     7d2:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
     7d4:	80 81       	ld	r24, Z
     7d6:	81 60       	ori	r24, 0x01	; 1
     7d8:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
     7da:	e0 e2       	ldi	r30, 0x20	; 32
     7dc:	f1 e0       	ldi	r31, 0x01	; 1
     7de:	80 81       	ld	r24, Z
     7e0:	81 60       	ori	r24, 0x01	; 1
     7e2:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     7e4:	ea e7       	ldi	r30, 0x7A	; 122
     7e6:	f0 e0       	ldi	r31, 0x00	; 0
     7e8:	80 81       	ld	r24, Z
     7ea:	84 60       	ori	r24, 0x04	; 4
     7ec:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     7ee:	80 81       	ld	r24, Z
     7f0:	82 60       	ori	r24, 0x02	; 2
     7f2:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     7f4:	80 81       	ld	r24, Z
     7f6:	81 60       	ori	r24, 0x01	; 1
     7f8:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     7fa:	80 81       	ld	r24, Z
     7fc:	80 68       	ori	r24, 0x80	; 128
     7fe:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     800:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
     804:	08 95       	ret

00000806 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	fc 01       	movw	r30, r24
     80a:	31 97       	sbiw	r30, 0x01	; 1
     80c:	e2 31       	cpi	r30, 0x12	; 18
     80e:	f1 05       	cpc	r31, r1
     810:	08 f0       	brcs	.+2      	; 0x814 <turnOffPWM+0xe>
     812:	4d c0       	rjmp	.+154    	; 0x8ae <turnOffPWM+0xa8>
     814:	88 27       	eor	r24, r24
     816:	ee 58       	subi	r30, 0x8E	; 142
     818:	ff 4f       	sbci	r31, 0xFF	; 255
     81a:	8f 4f       	sbci	r24, 0xFF	; 255
     81c:	30 c5       	rjmp	.+2656   	; 0x127e <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     81e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
     822:	8f 77       	andi	r24, 0x7F	; 127
     824:	03 c0       	rjmp	.+6      	; 0x82c <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     826:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
     82a:	8f 7d       	andi	r24, 0xDF	; 223
     82c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
     830:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
     832:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
     836:	87 7f       	andi	r24, 0xF7	; 247
     838:	f9 cf       	rjmp	.-14     	; 0x82c <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     83a:	84 b5       	in	r24, 0x24	; 36
     83c:	8f 77       	andi	r24, 0x7F	; 127
     83e:	02 c0       	rjmp	.+4      	; 0x844 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     840:	84 b5       	in	r24, 0x24	; 36
     842:	8f 7d       	andi	r24, 0xDF	; 223
     844:	84 bd       	out	0x24, r24	; 36
     846:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     848:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
     84c:	8f 77       	andi	r24, 0x7F	; 127
     84e:	03 c0       	rjmp	.+6      	; 0x856 <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     850:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
     854:	8f 7d       	andi	r24, 0xDF	; 223
     856:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
     85a:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
     85c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
     860:	8f 77       	andi	r24, 0x7F	; 127
     862:	07 c0       	rjmp	.+14     	; 0x872 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
     864:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
     868:	8f 7d       	andi	r24, 0xDF	; 223
     86a:	03 c0       	rjmp	.+6      	; 0x872 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
     86c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
     870:	87 7f       	andi	r24, 0xF7	; 247
     872:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
     876:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
     878:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
     87c:	8f 77       	andi	r24, 0x7F	; 127
     87e:	07 c0       	rjmp	.+14     	; 0x88e <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
     880:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
     884:	8f 7d       	andi	r24, 0xDF	; 223
     886:	03 c0       	rjmp	.+6      	; 0x88e <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
     888:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
     88c:	87 7f       	andi	r24, 0xF7	; 247
     88e:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
     892:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
     894:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
     898:	8f 77       	andi	r24, 0x7F	; 127
     89a:	07 c0       	rjmp	.+14     	; 0x8aa <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
     89c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
     8a0:	8f 7d       	andi	r24, 0xDF	; 223
     8a2:	03 c0       	rjmp	.+6      	; 0x8aa <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
     8a4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
     8a8:	87 7f       	andi	r24, 0xF7	; 247
     8aa:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
     8ae:	08 95       	ret

000008b0 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     8b0:	cf 93       	push	r28
     8b2:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	fc 01       	movw	r30, r24
     8b8:	ea 55       	subi	r30, 0x5A	; 90
     8ba:	fe 4f       	sbci	r31, 0xFE	; 254
     8bc:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     8be:	fc 01       	movw	r30, r24
     8c0:	e4 51       	subi	r30, 0x14	; 20
     8c2:	fe 4f       	sbci	r31, 0xFE	; 254
     8c4:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     8c6:	88 23       	and	r24, r24
     8c8:	61 f1       	breq	.+88     	; 0x922 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	88 0f       	add	r24, r24
     8ce:	99 1f       	adc	r25, r25
     8d0:	fc 01       	movw	r30, r24
     8d2:	ea 59       	subi	r30, 0x9A	; 154
     8d4:	fd 4f       	sbci	r31, 0xFD	; 253
     8d6:	c5 91       	lpm	r28, Z+
     8d8:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
     8da:	fc 01       	movw	r30, r24
     8dc:	e4 5b       	subi	r30, 0xB4	; 180
     8de:	fd 4f       	sbci	r31, 0xFD	; 253
     8e0:	a5 91       	lpm	r26, Z+
     8e2:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
     8e4:	61 11       	cpse	r22, r1
     8e6:	09 c0       	rjmp	.+18     	; 0x8fa <pinMode+0x4a>
		uint8_t oldSREG = SREG;
     8e8:	9f b7       	in	r25, 0x3f	; 63
                cli();
     8ea:	f8 94       	cli
		*reg &= ~bit;
     8ec:	88 81       	ld	r24, Y
     8ee:	20 95       	com	r18
     8f0:	82 23       	and	r24, r18
     8f2:	88 83       	st	Y, r24
		*out &= ~bit;
     8f4:	ec 91       	ld	r30, X
     8f6:	2e 23       	and	r18, r30
     8f8:	0b c0       	rjmp	.+22     	; 0x910 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     8fa:	62 30       	cpi	r22, 0x02	; 2
     8fc:	61 f4       	brne	.+24     	; 0x916 <pinMode+0x66>
		uint8_t oldSREG = SREG;
     8fe:	9f b7       	in	r25, 0x3f	; 63
                cli();
     900:	f8 94       	cli
		*reg &= ~bit;
     902:	88 81       	ld	r24, Y
     904:	32 2f       	mov	r19, r18
     906:	30 95       	com	r19
     908:	83 23       	and	r24, r19
     90a:	88 83       	st	Y, r24
		*out |= bit;
     90c:	ec 91       	ld	r30, X
     90e:	2e 2b       	or	r18, r30
     910:	2c 93       	st	X, r18
		SREG = oldSREG;
     912:	9f bf       	out	0x3f, r25	; 63
     914:	06 c0       	rjmp	.+12     	; 0x922 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
     916:	8f b7       	in	r24, 0x3f	; 63
                cli();
     918:	f8 94       	cli
		*reg |= bit;
     91a:	e8 81       	ld	r30, Y
     91c:	2e 2b       	or	r18, r30
     91e:	28 83       	st	Y, r18
		SREG = oldSREG;
     920:	8f bf       	out	0x3f, r24	; 63
	}
}
     922:	df 91       	pop	r29
     924:	cf 91       	pop	r28
     926:	08 95       	ret

00000928 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     928:	1f 93       	push	r17
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     92e:	28 2f       	mov	r18, r24
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	f9 01       	movw	r30, r18
     934:	e0 5a       	subi	r30, 0xA0	; 160
     936:	fe 4f       	sbci	r31, 0xFE	; 254
     938:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     93a:	f9 01       	movw	r30, r18
     93c:	ea 55       	subi	r30, 0x5A	; 90
     93e:	fe 4f       	sbci	r31, 0xFE	; 254
     940:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     942:	f9 01       	movw	r30, r18
     944:	e4 51       	subi	r30, 0x14	; 20
     946:	fe 4f       	sbci	r31, 0xFE	; 254
     948:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     94a:	cc 23       	and	r28, r28
     94c:	b9 f0       	breq	.+46     	; 0x97c <digitalWrite+0x54>
     94e:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     950:	81 11       	cpse	r24, r1
     952:	59 df       	rcall	.-334    	; 0x806 <turnOffPWM>

	out = portOutputRegister(port);
     954:	ec 2f       	mov	r30, r28
     956:	f0 e0       	ldi	r31, 0x00	; 0
     958:	ee 0f       	add	r30, r30
     95a:	ff 1f       	adc	r31, r31
     95c:	e4 5b       	subi	r30, 0xB4	; 180
     95e:	fd 4f       	sbci	r31, 0xFD	; 253
     960:	a5 91       	lpm	r26, Z+
     962:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     964:	9f b7       	in	r25, 0x3f	; 63
	cli();
     966:	f8 94       	cli

	if (val == LOW) {
     968:	11 11       	cpse	r17, r1
     96a:	04 c0       	rjmp	.+8      	; 0x974 <digitalWrite+0x4c>
		*out &= ~bit;
     96c:	8c 91       	ld	r24, X
     96e:	d0 95       	com	r29
     970:	d8 23       	and	r29, r24
     972:	02 c0       	rjmp	.+4      	; 0x978 <digitalWrite+0x50>
	} else {
		*out |= bit;
     974:	ec 91       	ld	r30, X
     976:	de 2b       	or	r29, r30
     978:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
     97a:	9f bf       	out	0x3f, r25	; 63
}
     97c:	df 91       	pop	r29
     97e:	cf 91       	pop	r28
     980:	1f 91       	pop	r17
     982:	08 95       	ret

00000984 <digitalRead>:

int digitalRead(uint8_t pin)
{
     984:	cf 93       	push	r28
     986:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     988:	28 2f       	mov	r18, r24
     98a:	30 e0       	ldi	r19, 0x00	; 0
     98c:	f9 01       	movw	r30, r18
     98e:	e0 5a       	subi	r30, 0xA0	; 160
     990:	fe 4f       	sbci	r31, 0xFE	; 254
     992:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     994:	f9 01       	movw	r30, r18
     996:	ea 55       	subi	r30, 0x5A	; 90
     998:	fe 4f       	sbci	r31, 0xFE	; 254
     99a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     99c:	f9 01       	movw	r30, r18
     99e:	e4 51       	subi	r30, 0x14	; 20
     9a0:	fe 4f       	sbci	r31, 0xFE	; 254
     9a2:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
     9a4:	cc 23       	and	r28, r28
     9a6:	89 f0       	breq	.+34     	; 0x9ca <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     9a8:	81 11       	cpse	r24, r1
     9aa:	2d df       	rcall	.-422    	; 0x806 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
     9ac:	ec 2f       	mov	r30, r28
     9ae:	f0 e0       	ldi	r31, 0x00	; 0
     9b0:	ee 0f       	add	r30, r30
     9b2:	ff 1f       	adc	r31, r31
     9b4:	ee 5c       	subi	r30, 0xCE	; 206
     9b6:	fd 4f       	sbci	r31, 0xFD	; 253
     9b8:	a5 91       	lpm	r26, Z+
     9ba:	b4 91       	lpm	r27, Z
     9bc:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
     9be:	ed 23       	and	r30, r29
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	21 f4       	brne	.+8      	; 0x9ce <digitalRead+0x4a>
     9c6:	80 e0       	ldi	r24, 0x00	; 0
     9c8:	02 c0       	rjmp	.+4      	; 0x9ce <digitalRead+0x4a>
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
     9ce:	df 91       	pop	r29
     9d0:	cf 91       	pop	r28
     9d2:	08 95       	ret

000009d4 <_ZN8SPIClass8transferEh>:
            return sendMessage(txBuffers[i], frame);
        }
    }

    return ERROR_ALLTXBUSY;
}
     9d4:	8e bd       	out	0x2e, r24	; 46
     9d6:	00 00       	nop
     9d8:	0d b4       	in	r0, 0x2d	; 45
     9da:	07 fe       	sbrs	r0, 7
     9dc:	fd cf       	rjmp	.-6      	; 0x9d8 <_ZN8SPIClass8transferEh+0x4>
     9de:	8e b5       	in	r24, 0x2e	; 46
     9e0:	08 95       	ret

000009e2 <_ZN7MCP25158startSPIEv>:
     9e2:	fc 01       	movw	r30, r24
     9e4:	41 81       	ldd	r20, Z+1	; 0x01
     9e6:	52 81       	ldd	r21, Z+2	; 0x02
     9e8:	63 81       	ldd	r22, Z+3	; 0x03
     9ea:	74 81       	ldd	r23, Z+4	; 0x04
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	92 e1       	ldi	r25, 0x12	; 18
     9f0:	aa e7       	ldi	r26, 0x7A	; 122
     9f2:	b0 e0       	ldi	r27, 0x00	; 0
     9f4:	20 e0       	ldi	r18, 0x00	; 0
     9f6:	48 17       	cp	r20, r24
     9f8:	59 07       	cpc	r21, r25
     9fa:	6a 07       	cpc	r22, r26
     9fc:	7b 07       	cpc	r23, r27
     9fe:	40 f4       	brcc	.+16     	; 0xa10 <_ZN7MCP25158startSPIEv+0x2e>
     a00:	b6 95       	lsr	r27
     a02:	a7 95       	ror	r26
     a04:	97 95       	ror	r25
     a06:	87 95       	ror	r24
     a08:	2f 5f       	subi	r18, 0xFF	; 255
     a0a:	26 30       	cpi	r18, 0x06	; 6
     a0c:	a1 f7       	brne	.-24     	; 0x9f6 <_ZN7MCP25158startSPIEv+0x14>
     a0e:	27 e0       	ldi	r18, 0x07	; 7
     a10:	91 e0       	ldi	r25, 0x01	; 1
     a12:	92 27       	eor	r25, r18
     a14:	29 2f       	mov	r18, r25
     a16:	20 6a       	ori	r18, 0xA0	; 160
     a18:	26 95       	lsr	r18
     a1a:	91 70       	andi	r25, 0x01	; 1
     a1c:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <_ZN8SPIClass13interruptModeE>
     a20:	88 23       	and	r24, r24
     a22:	99 f0       	breq	.+38     	; 0xa4a <_ZN7MCP25158startSPIEv+0x68>
     a24:	8f b7       	in	r24, 0x3f	; 63
     a26:	f8 94       	cli
     a28:	30 91 42 02 	lds	r19, 0x0242	; 0x800242 <_ZN8SPIClass13interruptModeE>
     a2c:	31 30       	cpi	r19, 0x01	; 1
     a2e:	59 f4       	brne	.+22     	; 0xa46 <_ZN7MCP25158startSPIEv+0x64>
     a30:	3d b3       	in	r19, 0x1d	; 29
     a32:	30 93 40 02 	sts	0x0240, r19	; 0x800240 <_ZN8SPIClass13interruptSaveE>
     a36:	4d b3       	in	r20, 0x1d	; 29
     a38:	30 91 41 02 	lds	r19, 0x0241	; 0x800241 <_ZN8SPIClass13interruptMaskE>
     a3c:	30 95       	com	r19
     a3e:	34 23       	and	r19, r20
     a40:	3d bb       	out	0x1d, r19	; 29
     a42:	8f bf       	out	0x3f, r24	; 63
     a44:	02 c0       	rjmp	.+4      	; 0xa4a <_ZN7MCP25158startSPIEv+0x68>
     a46:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <_ZN8SPIClass13interruptSaveE>
     a4a:	2c bd       	out	0x2c, r18	; 44
     a4c:	9d bd       	out	0x2d, r25	; 45
     a4e:	60 e0       	ldi	r22, 0x00	; 0
     a50:	80 81       	ld	r24, Z
     a52:	6a cf       	rjmp	.-300    	; 0x928 <digitalWrite>

00000a54 <_ZN7MCP25156endSPIEv>:
     a54:	61 e0       	ldi	r22, 0x01	; 1
     a56:	fc 01       	movw	r30, r24
     a58:	80 81       	ld	r24, Z
     a5a:	66 df       	rcall	.-308    	; 0x928 <digitalWrite>
     a5c:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <_ZN8SPIClass13interruptModeE>
     a60:	88 23       	and	r24, r24
     a62:	61 f0       	breq	.+24     	; 0xa7c <_ZN7MCP25156endSPIEv+0x28>
     a64:	9f b7       	in	r25, 0x3f	; 63
     a66:	f8 94       	cli
     a68:	20 91 42 02 	lds	r18, 0x0242	; 0x800242 <_ZN8SPIClass13interruptModeE>
     a6c:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <_ZN8SPIClass13interruptSaveE>
     a70:	21 30       	cpi	r18, 0x01	; 1
     a72:	19 f4       	brne	.+6      	; 0xa7a <_ZN7MCP25156endSPIEv+0x26>
     a74:	8d bb       	out	0x1d, r24	; 29
     a76:	9f bf       	out	0x3f, r25	; 63
     a78:	08 95       	ret
     a7a:	8f bf       	out	0x3f, r24	; 63
     a7c:	08 95       	ret

00000a7e <_ZN7MCP2515C1EhmP8SPIClass>:
     a7e:	8f 92       	push	r8
     a80:	9f 92       	push	r9
     a82:	af 92       	push	r10
     a84:	bf 92       	push	r11
     a86:	ff 92       	push	r15
     a88:	0f 93       	push	r16
     a8a:	1f 93       	push	r17
     a8c:	cf 93       	push	r28
     a8e:	df 93       	push	r29
     a90:	ec 01       	movw	r28, r24
     a92:	f6 2e       	mov	r15, r22
     a94:	49 01       	movw	r8, r18
     a96:	5a 01       	movw	r10, r20
     a98:	01 15       	cp	r16, r1
     a9a:	11 05       	cpc	r17, r1
     a9c:	19 f0       	breq	.+6      	; 0xaa4 <_ZN7MCP2515C1EhmP8SPIClass+0x26>
     a9e:	1e 83       	std	Y+6, r17	; 0x06
     aa0:	0d 83       	std	Y+5, r16	; 0x05
     aa2:	05 c0       	rjmp	.+10     	; 0xaae <_ZN7MCP2515C1EhmP8SPIClass+0x30>
     aa4:	84 e4       	ldi	r24, 0x44	; 68
     aa6:	92 e0       	ldi	r25, 0x02	; 2
     aa8:	9e 83       	std	Y+6, r25	; 0x06
     aaa:	8d 83       	std	Y+5, r24	; 0x05
     aac:	b5 d3       	rcall	.+1898   	; 0x1218 <_ZN8SPIClass5beginEv>
     aae:	f8 82       	st	Y, r15
     ab0:	89 82       	std	Y+1, r8	; 0x01
     ab2:	9a 82       	std	Y+2, r9	; 0x02
     ab4:	ab 82       	std	Y+3, r10	; 0x03
     ab6:	bc 82       	std	Y+4, r11	; 0x04
     ab8:	61 e0       	ldi	r22, 0x01	; 1
     aba:	8f 2d       	mov	r24, r15
     abc:	f9 de       	rcall	.-526    	; 0x8b0 <pinMode>
     abe:	ce 01       	movw	r24, r28
     ac0:	df 91       	pop	r29
     ac2:	cf 91       	pop	r28
     ac4:	1f 91       	pop	r17
     ac6:	0f 91       	pop	r16
     ac8:	ff 90       	pop	r15
     aca:	bf 90       	pop	r11
     acc:	af 90       	pop	r10
     ace:	9f 90       	pop	r9
     ad0:	8f 90       	pop	r8
     ad2:	c0 cf       	rjmp	.-128    	; 0xa54 <_ZN7MCP25156endSPIEv>

00000ad4 <_ZN7MCP251512readRegisterENS_8REGISTERE>:
     ad4:	1f 93       	push	r17
     ad6:	cf 93       	push	r28
     ad8:	df 93       	push	r29
     ada:	ec 01       	movw	r28, r24
     adc:	16 2f       	mov	r17, r22
     ade:	81 df       	rcall	.-254    	; 0x9e2 <_ZN7MCP25158startSPIEv>
     ae0:	83 e0       	ldi	r24, 0x03	; 3
     ae2:	78 df       	rcall	.-272    	; 0x9d4 <_ZN8SPIClass8transferEh>
     ae4:	81 2f       	mov	r24, r17
     ae6:	76 df       	rcall	.-276    	; 0x9d4 <_ZN8SPIClass8transferEh>
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	74 df       	rcall	.-280    	; 0x9d4 <_ZN8SPIClass8transferEh>
     aec:	18 2f       	mov	r17, r24
     aee:	ce 01       	movw	r24, r28
     af0:	b1 df       	rcall	.-158    	; 0xa54 <_ZN7MCP25156endSPIEv>
     af2:	81 2f       	mov	r24, r17
     af4:	df 91       	pop	r29
     af6:	cf 91       	pop	r28
     af8:	1f 91       	pop	r17
     afa:	08 95       	ret

00000afc <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>:
     afc:	df 92       	push	r13
     afe:	ef 92       	push	r14
     b00:	ff 92       	push	r15
     b02:	0f 93       	push	r16
     b04:	1f 93       	push	r17
     b06:	cf 93       	push	r28
     b08:	df 93       	push	r29
     b0a:	8c 01       	movw	r16, r24
     b0c:	c6 2f       	mov	r28, r22
     b0e:	d4 2e       	mov	r13, r20
     b10:	e5 2e       	mov	r14, r21
     b12:	f2 2e       	mov	r15, r18
     b14:	66 df       	rcall	.-308    	; 0x9e2 <_ZN7MCP25158startSPIEv>
     b16:	83 e0       	ldi	r24, 0x03	; 3
     b18:	5d df       	rcall	.-326    	; 0x9d4 <_ZN8SPIClass8transferEh>
     b1a:	8c 2f       	mov	r24, r28
     b1c:	5b df       	rcall	.-330    	; 0x9d4 <_ZN8SPIClass8transferEh>
     b1e:	cd 2d       	mov	r28, r13
     b20:	de 2d       	mov	r29, r14
     b22:	ce 01       	movw	r24, r28
     b24:	8f 0d       	add	r24, r15
     b26:	91 1d       	adc	r25, r1
     b28:	7c 01       	movw	r14, r24
     b2a:	ce 15       	cp	r28, r14
     b2c:	df 05       	cpc	r29, r15
     b2e:	21 f0       	breq	.+8      	; 0xb38 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh+0x3c>
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	50 df       	rcall	.-352    	; 0x9d4 <_ZN8SPIClass8transferEh>
     b34:	89 93       	st	Y+, r24
     b36:	f9 cf       	rjmp	.-14     	; 0xb2a <_ZN7MCP251513readRegistersENS_8REGISTEREPhh+0x2e>
     b38:	c8 01       	movw	r24, r16
     b3a:	df 91       	pop	r29
     b3c:	cf 91       	pop	r28
     b3e:	1f 91       	pop	r17
     b40:	0f 91       	pop	r16
     b42:	ff 90       	pop	r15
     b44:	ef 90       	pop	r14
     b46:	df 90       	pop	r13
     b48:	85 cf       	rjmp	.-246    	; 0xa54 <_ZN7MCP25156endSPIEv>

00000b4a <_ZN7MCP251511setRegisterENS_8REGISTEREh>:
     b4a:	0f 93       	push	r16
     b4c:	1f 93       	push	r17
     b4e:	cf 93       	push	r28
     b50:	df 93       	push	r29
     b52:	ec 01       	movw	r28, r24
     b54:	06 2f       	mov	r16, r22
     b56:	14 2f       	mov	r17, r20
     b58:	44 df       	rcall	.-376    	; 0x9e2 <_ZN7MCP25158startSPIEv>
     b5a:	82 e0       	ldi	r24, 0x02	; 2
     b5c:	3b df       	rcall	.-394    	; 0x9d4 <_ZN8SPIClass8transferEh>
     b5e:	80 2f       	mov	r24, r16
     b60:	39 df       	rcall	.-398    	; 0x9d4 <_ZN8SPIClass8transferEh>
     b62:	81 2f       	mov	r24, r17
     b64:	37 df       	rcall	.-402    	; 0x9d4 <_ZN8SPIClass8transferEh>
     b66:	ce 01       	movw	r24, r28
     b68:	df 91       	pop	r29
     b6a:	cf 91       	pop	r28
     b6c:	1f 91       	pop	r17
     b6e:	0f 91       	pop	r16
     b70:	71 cf       	rjmp	.-286    	; 0xa54 <_ZN7MCP25156endSPIEv>

00000b72 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>:
     b72:	df 92       	push	r13
     b74:	ef 92       	push	r14
     b76:	ff 92       	push	r15
     b78:	0f 93       	push	r16
     b7a:	1f 93       	push	r17
     b7c:	cf 93       	push	r28
     b7e:	df 93       	push	r29
     b80:	8c 01       	movw	r16, r24
     b82:	c6 2f       	mov	r28, r22
     b84:	d4 2e       	mov	r13, r20
     b86:	e5 2e       	mov	r14, r21
     b88:	f2 2e       	mov	r15, r18
     b8a:	2b df       	rcall	.-426    	; 0x9e2 <_ZN7MCP25158startSPIEv>
     b8c:	82 e0       	ldi	r24, 0x02	; 2
     b8e:	22 df       	rcall	.-444    	; 0x9d4 <_ZN8SPIClass8transferEh>
     b90:	8c 2f       	mov	r24, r28
     b92:	20 df       	rcall	.-448    	; 0x9d4 <_ZN8SPIClass8transferEh>
     b94:	cd 2d       	mov	r28, r13
     b96:	de 2d       	mov	r29, r14
     b98:	ce 01       	movw	r24, r28
     b9a:	8f 0d       	add	r24, r15
     b9c:	91 1d       	adc	r25, r1
     b9e:	7c 01       	movw	r14, r24
     ba0:	ce 15       	cp	r28, r14
     ba2:	df 05       	cpc	r29, r15
     ba4:	19 f0       	breq	.+6      	; 0xbac <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh+0x3a>
     ba6:	89 91       	ld	r24, Y+
     ba8:	15 df       	rcall	.-470    	; 0x9d4 <_ZN8SPIClass8transferEh>
     baa:	fa cf       	rjmp	.-12     	; 0xba0 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh+0x2e>
     bac:	c8 01       	movw	r24, r16
     bae:	df 91       	pop	r29
     bb0:	cf 91       	pop	r28
     bb2:	1f 91       	pop	r17
     bb4:	0f 91       	pop	r16
     bb6:	ff 90       	pop	r15
     bb8:	ef 90       	pop	r14
     bba:	df 90       	pop	r13
     bbc:	4b cf       	rjmp	.-362    	; 0xa54 <_ZN7MCP25156endSPIEv>

00000bbe <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>:
     bbe:	ff 92       	push	r15
     bc0:	0f 93       	push	r16
     bc2:	1f 93       	push	r17
     bc4:	cf 93       	push	r28
     bc6:	df 93       	push	r29
     bc8:	ec 01       	movw	r28, r24
     bca:	f6 2e       	mov	r15, r22
     bcc:	04 2f       	mov	r16, r20
     bce:	12 2f       	mov	r17, r18
     bd0:	08 df       	rcall	.-496    	; 0x9e2 <_ZN7MCP25158startSPIEv>
     bd2:	85 e0       	ldi	r24, 0x05	; 5
     bd4:	ff de       	rcall	.-514    	; 0x9d4 <_ZN8SPIClass8transferEh>
     bd6:	8f 2d       	mov	r24, r15
     bd8:	fd de       	rcall	.-518    	; 0x9d4 <_ZN8SPIClass8transferEh>
     bda:	80 2f       	mov	r24, r16
     bdc:	fb de       	rcall	.-522    	; 0x9d4 <_ZN8SPIClass8transferEh>
     bde:	81 2f       	mov	r24, r17
     be0:	f9 de       	rcall	.-526    	; 0x9d4 <_ZN8SPIClass8transferEh>
     be2:	ce 01       	movw	r24, r28
     be4:	df 91       	pop	r29
     be6:	cf 91       	pop	r28
     be8:	1f 91       	pop	r17
     bea:	0f 91       	pop	r16
     bec:	ff 90       	pop	r15
     bee:	32 cf       	rjmp	.-412    	; 0xa54 <_ZN7MCP25156endSPIEv>

00000bf0 <_ZN7MCP25159getStatusEv>:
     bf0:	1f 93       	push	r17
     bf2:	cf 93       	push	r28
     bf4:	df 93       	push	r29
     bf6:	ec 01       	movw	r28, r24
     bf8:	f4 de       	rcall	.-536    	; 0x9e2 <_ZN7MCP25158startSPIEv>
     bfa:	80 ea       	ldi	r24, 0xA0	; 160
     bfc:	eb de       	rcall	.-554    	; 0x9d4 <_ZN8SPIClass8transferEh>
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	e9 de       	rcall	.-558    	; 0x9d4 <_ZN8SPIClass8transferEh>
     c02:	18 2f       	mov	r17, r24
     c04:	ce 01       	movw	r24, r28
     c06:	26 df       	rcall	.-436    	; 0xa54 <_ZN7MCP25156endSPIEv>
     c08:	81 2f       	mov	r24, r17
     c0a:	df 91       	pop	r29
     c0c:	cf 91       	pop	r28
     c0e:	1f 91       	pop	r17
     c10:	08 95       	ret

00000c12 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>:
     c12:	cf 92       	push	r12
     c14:	df 92       	push	r13
     c16:	ef 92       	push	r14
     c18:	ff 92       	push	r15
     c1a:	1f 93       	push	r17
     c1c:	cf 93       	push	r28
     c1e:	df 93       	push	r29
     c20:	ec 01       	movw	r28, r24
     c22:	16 2f       	mov	r17, r22
     c24:	26 2f       	mov	r18, r22
     c26:	40 ee       	ldi	r20, 0xE0	; 224
     c28:	6f e0       	ldi	r22, 0x0F	; 15
     c2a:	c9 df       	rcall	.-110    	; 0xbbe <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
     c2c:	20 dd       	rcall	.-1472   	; 0x66e <millis>
     c2e:	6b 01       	movw	r12, r22
     c30:	7c 01       	movw	r14, r24
     c32:	2a e0       	ldi	r18, 0x0A	; 10
     c34:	c2 0e       	add	r12, r18
     c36:	d1 1c       	adc	r13, r1
     c38:	e1 1c       	adc	r14, r1
     c3a:	f1 1c       	adc	r15, r1
     c3c:	18 dd       	rcall	.-1488   	; 0x66e <millis>
     c3e:	6c 15       	cp	r22, r12
     c40:	7d 05       	cpc	r23, r13
     c42:	8e 05       	cpc	r24, r14
     c44:	9f 05       	cpc	r25, r15
     c46:	40 f4       	brcc	.+16     	; 0xc58 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x46>
     c48:	6e e0       	ldi	r22, 0x0E	; 14
     c4a:	ce 01       	movw	r24, r28
     c4c:	43 df       	rcall	.-378    	; 0xad4 <_ZN7MCP251512readRegisterENS_8REGISTERE>
     c4e:	80 7e       	andi	r24, 0xE0	; 224
     c50:	18 13       	cpse	r17, r24
     c52:	f4 cf       	rjmp	.-24     	; 0xc3c <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x2a>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	01 c0       	rjmp	.+2      	; 0xc5a <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x48>
     c58:	80 e0       	ldi	r24, 0x00	; 0
     c5a:	91 e0       	ldi	r25, 0x01	; 1
     c5c:	89 27       	eor	r24, r25
     c5e:	df 91       	pop	r29
     c60:	cf 91       	pop	r28
     c62:	1f 91       	pop	r17
     c64:	ff 90       	pop	r15
     c66:	ef 90       	pop	r14
     c68:	df 90       	pop	r13
     c6a:	cf 90       	pop	r12
     c6c:	08 95       	ret

00000c6e <_ZN7MCP251513setConfigModeEv>:
     c6e:	60 e8       	ldi	r22, 0x80	; 128
     c70:	d0 cf       	rjmp	.-96     	; 0xc12 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>

00000c72 <_ZN7MCP251513setNormalModeEv>:
     c72:	60 e0       	ldi	r22, 0x00	; 0
     c74:	ce cf       	rjmp	.-100    	; 0xc12 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>

00000c76 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK>:
     c76:	0f 93       	push	r16
     c78:	1f 93       	push	r17
     c7a:	cf 93       	push	r28
     c7c:	df 93       	push	r29
     c7e:	8c 01       	movw	r16, r24
     c80:	c6 2f       	mov	r28, r22
     c82:	d4 2f       	mov	r29, r20
     c84:	f4 df       	rcall	.-24     	; 0xc6e <_ZN7MCP251513setConfigModeEv>
     c86:	81 11       	cpse	r24, r1
     c88:	ba c0       	rjmp	.+372    	; 0xdfe <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x188>
     c8a:	d1 30       	cpi	r29, 0x01	; 1
     c8c:	b1 f1       	breq	.+108    	; 0xcfa <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x84>
     c8e:	08 f4       	brcc	.+2      	; 0xc92 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x1c>
     c90:	69 c0       	rjmp	.+210    	; 0xd64 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0xee>
     c92:	d2 30       	cpi	r29, 0x02	; 2
     c94:	09 f0       	breq	.+2      	; 0xc98 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x22>
     c96:	96 c0       	rjmp	.+300    	; 0xdc4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x14e>
     c98:	8c 2f       	mov	r24, r28
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	80 31       	cpi	r24, 0x10	; 16
     c9e:	91 05       	cpc	r25, r1
     ca0:	08 f0       	brcs	.+2      	; 0xca4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x2e>
     ca2:	90 c0       	rjmp	.+288    	; 0xdc4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x14e>
     ca4:	fc 01       	movw	r30, r24
     ca6:	88 27       	eor	r24, r24
     ca8:	ec 57       	subi	r30, 0x7C	; 124
     caa:	ff 4f       	sbci	r31, 0xFF	; 255
     cac:	8f 4f       	sbci	r24, 0xFF	; 255
     cae:	e7 c2       	rjmp	.+1486   	; 0x127e <__tablejump2__>
     cb0:	c7 e8       	ldi	r28, 0x87	; 135
     cb2:	df eb       	ldi	r29, 0xBF	; 191
     cb4:	33 c0       	rjmp	.+102    	; 0xd1c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0xa6>
     cb6:	c4 e8       	ldi	r28, 0x84	; 132
     cb8:	d4 ea       	ldi	r29, 0xA4	; 164
     cba:	8c c0       	rjmp	.+280    	; 0xdd4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15e>
     cbc:	c5 e8       	ldi	r28, 0x85	; 133
     cbe:	d2 ee       	ldi	r29, 0xE2	; 226
     cc0:	47 e4       	ldi	r20, 0x47	; 71
     cc2:	91 c0       	rjmp	.+290    	; 0xde6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
     cc4:	c7 e8       	ldi	r28, 0x87	; 135
     cc6:	df eb       	ldi	r29, 0xBF	; 191
     cc8:	6c c0       	rjmp	.+216    	; 0xda2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x12c>
     cca:	c6 e8       	ldi	r28, 0x86	; 134
     ccc:	d4 eb       	ldi	r29, 0xB4	; 180
     cce:	69 c0       	rjmp	.+210    	; 0xda2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x12c>
     cd0:	c7 e8       	ldi	r28, 0x87	; 135
     cd2:	df eb       	ldi	r29, 0xBF	; 191
     cd4:	6a c0       	rjmp	.+212    	; 0xdaa <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x134>
     cd6:	c6 e8       	ldi	r28, 0x86	; 134
     cd8:	d4 eb       	ldi	r29, 0xB4	; 180
     cda:	67 c0       	rjmp	.+206    	; 0xdaa <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x134>
     cdc:	c5 e8       	ldi	r28, 0x85	; 133
     cde:	d1 eb       	ldi	r29, 0xB1	; 177
     ce0:	64 c0       	rjmp	.+200    	; 0xdaa <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x134>
     ce2:	c6 e8       	ldi	r28, 0x86	; 134
     ce4:	d4 eb       	ldi	r29, 0xB4	; 180
     ce6:	69 c0       	rjmp	.+210    	; 0xdba <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x144>
     ce8:	c5 e8       	ldi	r28, 0x85	; 133
     cea:	d1 eb       	ldi	r29, 0xB1	; 177
     cec:	66 c0       	rjmp	.+204    	; 0xdba <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x144>
     cee:	c2 e8       	ldi	r28, 0x82	; 130
     cf0:	d0 e9       	ldi	r29, 0x90	; 144
     cf2:	63 c0       	rjmp	.+198    	; 0xdba <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x144>
     cf4:	c0 e8       	ldi	r28, 0x80	; 128
     cf6:	d0 e8       	ldi	r29, 0x80	; 128
     cf8:	60 c0       	rjmp	.+192    	; 0xdba <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x144>
     cfa:	8c 2f       	mov	r24, r28
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	80 31       	cpi	r24, 0x10	; 16
     d00:	91 05       	cpc	r25, r1
     d02:	08 f0       	brcs	.+2      	; 0xd06 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x90>
     d04:	5f c0       	rjmp	.+190    	; 0xdc4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x14e>
     d06:	fc 01       	movw	r30, r24
     d08:	88 27       	eor	r24, r24
     d0a:	ec 56       	subi	r30, 0x6C	; 108
     d0c:	ff 4f       	sbci	r31, 0xFF	; 255
     d0e:	8f 4f       	sbci	r24, 0xFF	; 255
     d10:	b6 c2       	rjmp	.+1388   	; 0x127e <__tablejump2__>
     d12:	c7 e8       	ldi	r28, 0x87	; 135
     d14:	df ef       	ldi	r29, 0xFF	; 255
     d16:	5a c0       	rjmp	.+180    	; 0xdcc <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x156>
     d18:	c7 e8       	ldi	r28, 0x87	; 135
     d1a:	df ef       	ldi	r29, 0xFF	; 255
     d1c:	4f e0       	ldi	r20, 0x0F	; 15
     d1e:	63 c0       	rjmp	.+198    	; 0xde6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
     d20:	c5 e8       	ldi	r28, 0x85	; 133
     d22:	d1 ef       	ldi	r29, 0xF1	; 241
     d24:	4e e4       	ldi	r20, 0x4E	; 78
     d26:	5f c0       	rjmp	.+190    	; 0xde6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
     d28:	c7 e8       	ldi	r28, 0x87	; 135
     d2a:	df ef       	ldi	r29, 0xFF	; 255
     d2c:	53 c0       	rjmp	.+166    	; 0xdd4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15e>
     d2e:	c7 e8       	ldi	r28, 0x87	; 135
     d30:	da ef       	ldi	r29, 0xFA	; 250
     d32:	50 c0       	rjmp	.+160    	; 0xdd4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15e>
     d34:	c7 e8       	ldi	r28, 0x87	; 135
     d36:	df ef       	ldi	r29, 0xFF	; 255
     d38:	34 c0       	rjmp	.+104    	; 0xda2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x12c>
     d3a:	c7 e0       	ldi	r28, 0x07	; 7
     d3c:	de eb       	ldi	r29, 0xBE	; 190
     d3e:	31 c0       	rjmp	.+98     	; 0xda2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x12c>
     d40:	c7 e0       	ldi	r28, 0x07	; 7
     d42:	dd ea       	ldi	r29, 0xAD	; 173
     d44:	2e c0       	rjmp	.+92     	; 0xda2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x12c>
     d46:	c6 e8       	ldi	r28, 0x86	; 134
     d48:	d0 ef       	ldi	r29, 0xF0	; 240
     d4a:	2b c0       	rjmp	.+86     	; 0xda2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x12c>
     d4c:	c7 e8       	ldi	r28, 0x87	; 135
     d4e:	da ef       	ldi	r29, 0xFA	; 250
     d50:	2c c0       	rjmp	.+88     	; 0xdaa <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x134>
     d52:	c5 e8       	ldi	r28, 0x85	; 133
     d54:	d1 ef       	ldi	r29, 0xF1	; 241
     d56:	2d c0       	rjmp	.+90     	; 0xdb2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x13c>
     d58:	c6 e8       	ldi	r28, 0x86	; 134
     d5a:	d0 ef       	ldi	r29, 0xF0	; 240
     d5c:	2e c0       	rjmp	.+92     	; 0xdba <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x144>
     d5e:	c2 e8       	ldi	r28, 0x82	; 130
     d60:	d0 ed       	ldi	r29, 0xD0	; 208
     d62:	2b c0       	rjmp	.+86     	; 0xdba <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x144>
     d64:	8c 2f       	mov	r24, r28
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	fc 01       	movw	r30, r24
     d6a:	34 97       	sbiw	r30, 0x04	; 4
     d6c:	ec 30       	cpi	r30, 0x0C	; 12
     d6e:	f1 05       	cpc	r31, r1
     d70:	48 f5       	brcc	.+82     	; 0xdc4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x14e>
     d72:	88 27       	eor	r24, r24
     d74:	ec 55       	subi	r30, 0x5C	; 92
     d76:	ff 4f       	sbci	r31, 0xFF	; 255
     d78:	8f 4f       	sbci	r24, 0xFF	; 255
     d7a:	81 c2       	rjmp	.+1282   	; 0x127e <__tablejump2__>
     d7c:	c7 e8       	ldi	r28, 0x87	; 135
     d7e:	df ef       	ldi	r29, 0xFF	; 255
     d80:	02 c0       	rjmp	.+4      	; 0xd86 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x110>
     d82:	c7 e8       	ldi	r28, 0x87	; 135
     d84:	da ef       	ldi	r29, 0xFA	; 250
     d86:	49 e0       	ldi	r20, 0x09	; 9
     d88:	2e c0       	rjmp	.+92     	; 0xde6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
     d8a:	c7 e8       	ldi	r28, 0x87	; 135
     d8c:	df ef       	ldi	r29, 0xFF	; 255
     d8e:	02 c0       	rjmp	.+4      	; 0xd94 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x11e>
     d90:	c7 e8       	ldi	r28, 0x87	; 135
     d92:	de ef       	ldi	r29, 0xFE	; 254
     d94:	44 e0       	ldi	r20, 0x04	; 4
     d96:	27 c0       	rjmp	.+78     	; 0xde6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
     d98:	c7 e8       	ldi	r28, 0x87	; 135
     d9a:	da ef       	ldi	r29, 0xFA	; 250
     d9c:	fb cf       	rjmp	.-10     	; 0xd94 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x11e>
     d9e:	c7 e8       	ldi	r28, 0x87	; 135
     da0:	da ef       	ldi	r29, 0xFA	; 250
     da2:	43 e0       	ldi	r20, 0x03	; 3
     da4:	20 c0       	rjmp	.+64     	; 0xde6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
     da6:	c7 e8       	ldi	r28, 0x87	; 135
     da8:	df ef       	ldi	r29, 0xFF	; 255
     daa:	41 e0       	ldi	r20, 0x01	; 1
     dac:	1c c0       	rjmp	.+56     	; 0xde6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
     dae:	c6 e8       	ldi	r28, 0x86	; 134
     db0:	db ef       	ldi	r29, 0xFB	; 251
     db2:	41 e4       	ldi	r20, 0x41	; 65
     db4:	18 c0       	rjmp	.+48     	; 0xde6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
     db6:	c7 e8       	ldi	r28, 0x87	; 135
     db8:	da ef       	ldi	r29, 0xFA	; 250
     dba:	40 e0       	ldi	r20, 0x00	; 0
     dbc:	14 c0       	rjmp	.+40     	; 0xde6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
     dbe:	c2 e8       	ldi	r28, 0x82	; 130
     dc0:	d9 ed       	ldi	r29, 0xD9	; 217
     dc2:	fb cf       	rjmp	.-10     	; 0xdba <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x144>
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	1b c0       	rjmp	.+54     	; 0xdfe <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x188>
     dc8:	c7 e8       	ldi	r28, 0x87	; 135
     dca:	df eb       	ldi	r29, 0xBF	; 191
     dcc:	4f e1       	ldi	r20, 0x1F	; 31
     dce:	0b c0       	rjmp	.+22     	; 0xde6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
     dd0:	c7 e8       	ldi	r28, 0x87	; 135
     dd2:	df eb       	ldi	r29, 0xBF	; 191
     dd4:	47 e0       	ldi	r20, 0x07	; 7
     dd6:	07 c0       	rjmp	.+14     	; 0xde6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
     dd8:	c7 e8       	ldi	r28, 0x87	; 135
     dda:	df ef       	ldi	r29, 0xFF	; 255
     ddc:	4f e3       	ldi	r20, 0x3F	; 63
     dde:	03 c0       	rjmp	.+6      	; 0xde6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
     de0:	c7 e8       	ldi	r28, 0x87	; 135
     de2:	df ef       	ldi	r29, 0xFF	; 255
     de4:	4b e0       	ldi	r20, 0x0B	; 11
     de6:	6a e2       	ldi	r22, 0x2A	; 42
     de8:	c8 01       	movw	r24, r16
     dea:	af de       	rcall	.-674    	; 0xb4a <_ZN7MCP251511setRegisterENS_8REGISTEREh>
     dec:	4d 2f       	mov	r20, r29
     dee:	69 e2       	ldi	r22, 0x29	; 41
     df0:	c8 01       	movw	r24, r16
     df2:	ab de       	rcall	.-682    	; 0xb4a <_ZN7MCP251511setRegisterENS_8REGISTEREh>
     df4:	4c 2f       	mov	r20, r28
     df6:	68 e2       	ldi	r22, 0x28	; 40
     df8:	c8 01       	movw	r24, r16
     dfa:	a7 de       	rcall	.-690    	; 0xb4a <_ZN7MCP251511setRegisterENS_8REGISTEREh>
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	df 91       	pop	r29
     e00:	cf 91       	pop	r28
     e02:	1f 91       	pop	r17
     e04:	0f 91       	pop	r16
     e06:	08 95       	ret

00000e08 <_ZN7MCP25159prepareIdEPhbm>:
     e08:	0f 93       	push	r16
     e0a:	1f 93       	push	r17
     e0c:	fb 01       	movw	r30, r22
     e0e:	44 23       	and	r20, r20
     e10:	b1 f0       	breq	.+44     	; 0xe3e <_ZN7MCP25159prepareIdEPhbm+0x36>
     e12:	03 83       	std	Z+3, r16	; 0x03
     e14:	12 83       	std	Z+2, r17	; 0x02
     e16:	89 01       	movw	r16, r18
     e18:	22 27       	eor	r18, r18
     e1a:	33 27       	eor	r19, r19
     e1c:	90 2f       	mov	r25, r16
     e1e:	9c 71       	andi	r25, 0x1C	; 28
     e20:	80 2f       	mov	r24, r16
     e22:	83 70       	andi	r24, 0x03	; 3
     e24:	48 e0       	ldi	r20, 0x08	; 8
     e26:	94 9f       	mul	r25, r20
     e28:	80 0d       	add	r24, r0
     e2a:	11 24       	eor	r1, r1
     e2c:	88 60       	ori	r24, 0x08	; 8
     e2e:	81 83       	std	Z+1, r24	; 0x01
     e30:	55 e0       	ldi	r21, 0x05	; 5
     e32:	16 95       	lsr	r17
     e34:	07 95       	ror	r16
     e36:	5a 95       	dec	r21
     e38:	e1 f7       	brne	.-8      	; 0xe32 <_ZN7MCP25159prepareIdEPhbm+0x2a>
     e3a:	00 83       	st	Z, r16
     e3c:	0d c0       	rjmp	.+26     	; 0xe58 <_ZN7MCP25159prepareIdEPhbm+0x50>
     e3e:	c8 01       	movw	r24, r16
     e40:	23 e0       	ldi	r18, 0x03	; 3
     e42:	96 95       	lsr	r25
     e44:	87 95       	ror	r24
     e46:	2a 95       	dec	r18
     e48:	e1 f7       	brne	.-8      	; 0xe42 <_ZN7MCP25159prepareIdEPhbm+0x3a>
     e4a:	80 83       	st	Z, r24
     e4c:	02 95       	swap	r16
     e4e:	00 0f       	add	r16, r16
     e50:	00 7e       	andi	r16, 0xE0	; 224
     e52:	01 83       	std	Z+1, r16	; 0x01
     e54:	13 82       	std	Z+3, r1	; 0x03
     e56:	12 82       	std	Z+2, r1	; 0x02
     e58:	1f 91       	pop	r17
     e5a:	0f 91       	pop	r16
     e5c:	08 95       	ret

00000e5e <_ZN7MCP251513setFilterMaskENS_4MASKEbm>:
     e5e:	8f 92       	push	r8
     e60:	9f 92       	push	r9
     e62:	af 92       	push	r10
     e64:	bf 92       	push	r11
     e66:	cf 92       	push	r12
     e68:	df 92       	push	r13
     e6a:	ef 92       	push	r14
     e6c:	ff 92       	push	r15
     e6e:	0f 93       	push	r16
     e70:	1f 93       	push	r17
     e72:	cf 93       	push	r28
     e74:	df 93       	push	r29
     e76:	00 d0       	rcall	.+0      	; 0xe78 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x1a>
     e78:	1f 92       	push	r1
     e7a:	cd b7       	in	r28, 0x3d	; 61
     e7c:	de b7       	in	r29, 0x3e	; 62
     e7e:	7c 01       	movw	r14, r24
     e80:	d6 2e       	mov	r13, r22
     e82:	c4 2e       	mov	r12, r20
     e84:	48 01       	movw	r8, r16
     e86:	59 01       	movw	r10, r18
     e88:	f2 de       	rcall	.-540    	; 0xc6e <_ZN7MCP251513setConfigModeEv>
     e8a:	81 11       	cpse	r24, r1
     e8c:	19 c0       	rjmp	.+50     	; 0xec0 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x62>
     e8e:	95 01       	movw	r18, r10
     e90:	84 01       	movw	r16, r8
     e92:	4c 2d       	mov	r20, r12
     e94:	be 01       	movw	r22, r28
     e96:	6f 5f       	subi	r22, 0xFF	; 255
     e98:	7f 4f       	sbci	r23, 0xFF	; 255
     e9a:	c7 01       	movw	r24, r14
     e9c:	b5 df       	rcall	.-150    	; 0xe08 <_ZN7MCP25159prepareIdEPhbm>
     e9e:	dd 20       	and	r13, r13
     ea0:	29 f0       	breq	.+10     	; 0xeac <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x4e>
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	d8 12       	cpse	r13, r24
     ea6:	0b c0       	rjmp	.+22     	; 0xebe <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x60>
     ea8:	64 e2       	ldi	r22, 0x24	; 36
     eaa:	01 c0       	rjmp	.+2      	; 0xeae <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x50>
     eac:	60 e2       	ldi	r22, 0x20	; 32
     eae:	24 e0       	ldi	r18, 0x04	; 4
     eb0:	ae 01       	movw	r20, r28
     eb2:	4f 5f       	subi	r20, 0xFF	; 255
     eb4:	5f 4f       	sbci	r21, 0xFF	; 255
     eb6:	c7 01       	movw	r24, r14
     eb8:	5c de       	rcall	.-840    	; 0xb72 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	01 c0       	rjmp	.+2      	; 0xec0 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x62>
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	0f 90       	pop	r0
     ec2:	0f 90       	pop	r0
     ec4:	0f 90       	pop	r0
     ec6:	0f 90       	pop	r0
     ec8:	df 91       	pop	r29
     eca:	cf 91       	pop	r28
     ecc:	1f 91       	pop	r17
     ece:	0f 91       	pop	r16
     ed0:	ff 90       	pop	r15
     ed2:	ef 90       	pop	r14
     ed4:	df 90       	pop	r13
     ed6:	cf 90       	pop	r12
     ed8:	bf 90       	pop	r11
     eda:	af 90       	pop	r10
     edc:	9f 90       	pop	r9
     ede:	8f 90       	pop	r8
     ee0:	08 95       	ret

00000ee2 <_ZN7MCP25159setFilterENS_3RXFEbm>:
     ee2:	8f 92       	push	r8
     ee4:	9f 92       	push	r9
     ee6:	af 92       	push	r10
     ee8:	bf 92       	push	r11
     eea:	cf 92       	push	r12
     eec:	df 92       	push	r13
     eee:	ef 92       	push	r14
     ef0:	ff 92       	push	r15
     ef2:	0f 93       	push	r16
     ef4:	1f 93       	push	r17
     ef6:	cf 93       	push	r28
     ef8:	df 93       	push	r29
     efa:	00 d0       	rcall	.+0      	; 0xefc <_ZN7MCP25159setFilterENS_3RXFEbm+0x1a>
     efc:	1f 92       	push	r1
     efe:	cd b7       	in	r28, 0x3d	; 61
     f00:	de b7       	in	r29, 0x3e	; 62
     f02:	6c 01       	movw	r12, r24
     f04:	f6 2e       	mov	r15, r22
     f06:	e4 2e       	mov	r14, r20
     f08:	48 01       	movw	r8, r16
     f0a:	59 01       	movw	r10, r18
     f0c:	b0 de       	rcall	.-672    	; 0xc6e <_ZN7MCP251513setConfigModeEv>
     f0e:	81 11       	cpse	r24, r1
     f10:	34 c0       	rjmp	.+104    	; 0xf7a <_ZN7MCP25159setFilterENS_3RXFEbm+0x98>
     f12:	82 e0       	ldi	r24, 0x02	; 2
     f14:	f8 16       	cp	r15, r24
     f16:	a9 f0       	breq	.+42     	; 0xf42 <_ZN7MCP25159setFilterENS_3RXFEbm+0x60>
     f18:	8f 15       	cp	r24, r15
     f1a:	40 f0       	brcs	.+16     	; 0xf2c <_ZN7MCP25159setFilterENS_3RXFEbm+0x4a>
     f1c:	ff 20       	and	r15, r15
     f1e:	d1 f0       	breq	.+52     	; 0xf54 <_ZN7MCP25159setFilterENS_3RXFEbm+0x72>
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	f8 12       	cpse	r15, r24
     f24:	29 c0       	rjmp	.+82     	; 0xf78 <_ZN7MCP25159setFilterENS_3RXFEbm+0x96>
     f26:	44 e0       	ldi	r20, 0x04	; 4
     f28:	f4 2e       	mov	r15, r20
     f2a:	15 c0       	rjmp	.+42     	; 0xf56 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
     f2c:	84 e0       	ldi	r24, 0x04	; 4
     f2e:	f8 16       	cp	r15, r24
     f30:	71 f0       	breq	.+28     	; 0xf4e <_ZN7MCP25159setFilterENS_3RXFEbm+0x6c>
     f32:	f8 16       	cp	r15, r24
     f34:	48 f0       	brcs	.+18     	; 0xf48 <_ZN7MCP25159setFilterENS_3RXFEbm+0x66>
     f36:	85 e0       	ldi	r24, 0x05	; 5
     f38:	f8 12       	cpse	r15, r24
     f3a:	1e c0       	rjmp	.+60     	; 0xf78 <_ZN7MCP25159setFilterENS_3RXFEbm+0x96>
     f3c:	88 e1       	ldi	r24, 0x18	; 24
     f3e:	f8 2e       	mov	r15, r24
     f40:	0a c0       	rjmp	.+20     	; 0xf56 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
     f42:	38 e0       	ldi	r19, 0x08	; 8
     f44:	f3 2e       	mov	r15, r19
     f46:	07 c0       	rjmp	.+14     	; 0xf56 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
     f48:	20 e1       	ldi	r18, 0x10	; 16
     f4a:	f2 2e       	mov	r15, r18
     f4c:	04 c0       	rjmp	.+8      	; 0xf56 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
     f4e:	94 e1       	ldi	r25, 0x14	; 20
     f50:	f9 2e       	mov	r15, r25
     f52:	01 c0       	rjmp	.+2      	; 0xf56 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
     f54:	f1 2c       	mov	r15, r1
     f56:	95 01       	movw	r18, r10
     f58:	84 01       	movw	r16, r8
     f5a:	4e 2d       	mov	r20, r14
     f5c:	be 01       	movw	r22, r28
     f5e:	6f 5f       	subi	r22, 0xFF	; 255
     f60:	7f 4f       	sbci	r23, 0xFF	; 255
     f62:	c6 01       	movw	r24, r12
     f64:	51 df       	rcall	.-350    	; 0xe08 <_ZN7MCP25159prepareIdEPhbm>
     f66:	24 e0       	ldi	r18, 0x04	; 4
     f68:	ae 01       	movw	r20, r28
     f6a:	4f 5f       	subi	r20, 0xFF	; 255
     f6c:	5f 4f       	sbci	r21, 0xFF	; 255
     f6e:	6f 2d       	mov	r22, r15
     f70:	c6 01       	movw	r24, r12
     f72:	ff dd       	rcall	.-1026   	; 0xb72 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	01 c0       	rjmp	.+2      	; 0xf7a <_ZN7MCP25159setFilterENS_3RXFEbm+0x98>
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	0f 90       	pop	r0
     f82:	df 91       	pop	r29
     f84:	cf 91       	pop	r28
     f86:	1f 91       	pop	r17
     f88:	0f 91       	pop	r16
     f8a:	ff 90       	pop	r15
     f8c:	ef 90       	pop	r14
     f8e:	df 90       	pop	r13
     f90:	cf 90       	pop	r12
     f92:	bf 90       	pop	r11
     f94:	af 90       	pop	r10
     f96:	9f 90       	pop	r9
     f98:	8f 90       	pop	r8
     f9a:	08 95       	ret

00000f9c <_ZN7MCP25155resetEv>:
     f9c:	af 92       	push	r10
     f9e:	bf 92       	push	r11
     fa0:	cf 92       	push	r12
     fa2:	df 92       	push	r13
     fa4:	ef 92       	push	r14
     fa6:	ff 92       	push	r15
     fa8:	0f 93       	push	r16
     faa:	1f 93       	push	r17
     fac:	cf 93       	push	r28
     fae:	df 93       	push	r29
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
     fb4:	64 97       	sbiw	r28, 0x14	; 20
     fb6:	0f b6       	in	r0, 0x3f	; 63
     fb8:	f8 94       	cli
     fba:	de bf       	out	0x3e, r29	; 62
     fbc:	0f be       	out	0x3f, r0	; 63
     fbe:	cd bf       	out	0x3d, r28	; 61
     fc0:	7c 01       	movw	r14, r24
     fc2:	0f dd       	rcall	.-1506   	; 0x9e2 <_ZN7MCP25158startSPIEv>
     fc4:	80 ec       	ldi	r24, 0xC0	; 192
     fc6:	06 dd       	rcall	.-1524   	; 0x9d4 <_ZN8SPIClass8transferEh>
     fc8:	c7 01       	movw	r24, r14
     fca:	44 dd       	rcall	.-1400   	; 0xa54 <_ZN7MCP25156endSPIEv>
     fcc:	6a e0       	ldi	r22, 0x0A	; 10
     fce:	70 e0       	ldi	r23, 0x00	; 0
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	7d db       	rcall	.-2310   	; 0x6d0 <delay>
     fd6:	8e 01       	movw	r16, r28
     fd8:	0f 5f       	subi	r16, 0xFF	; 255
     fda:	1f 4f       	sbci	r17, 0xFF	; 255
     fdc:	8e e0       	ldi	r24, 0x0E	; 14
     fde:	f8 01       	movw	r30, r16
     fe0:	11 92       	st	Z+, r1
     fe2:	8a 95       	dec	r24
     fe4:	e9 f7       	brne	.-6      	; 0xfe0 <_ZN7MCP25155resetEv+0x44>
     fe6:	2e e0       	ldi	r18, 0x0E	; 14
     fe8:	a8 01       	movw	r20, r16
     fea:	60 e3       	ldi	r22, 0x30	; 48
     fec:	c7 01       	movw	r24, r14
     fee:	c1 dd       	rcall	.-1150   	; 0xb72 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
     ff0:	2e e0       	ldi	r18, 0x0E	; 14
     ff2:	a8 01       	movw	r20, r16
     ff4:	60 e4       	ldi	r22, 0x40	; 64
     ff6:	c7 01       	movw	r24, r14
     ff8:	bc dd       	rcall	.-1160   	; 0xb72 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
     ffa:	2e e0       	ldi	r18, 0x0E	; 14
     ffc:	a8 01       	movw	r20, r16
     ffe:	60 e5       	ldi	r22, 0x50	; 80
    1000:	c7 01       	movw	r24, r14
    1002:	b7 dd       	rcall	.-1170   	; 0xb72 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    1004:	40 e0       	ldi	r20, 0x00	; 0
    1006:	60 e6       	ldi	r22, 0x60	; 96
    1008:	c7 01       	movw	r24, r14
    100a:	9f dd       	rcall	.-1218   	; 0xb4a <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    100c:	40 e0       	ldi	r20, 0x00	; 0
    100e:	60 e7       	ldi	r22, 0x70	; 112
    1010:	c7 01       	movw	r24, r14
    1012:	9b dd       	rcall	.-1226   	; 0xb4a <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    1014:	43 ea       	ldi	r20, 0xA3	; 163
    1016:	6b e2       	ldi	r22, 0x2B	; 43
    1018:	c7 01       	movw	r24, r14
    101a:	97 dd       	rcall	.-1234   	; 0xb4a <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    101c:	24 e0       	ldi	r18, 0x04	; 4
    101e:	47 e6       	ldi	r20, 0x67	; 103
    1020:	60 e6       	ldi	r22, 0x60	; 96
    1022:	c7 01       	movw	r24, r14
    1024:	cc dd       	rcall	.-1128   	; 0xbbe <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
    1026:	21 e0       	ldi	r18, 0x01	; 1
    1028:	47 e6       	ldi	r20, 0x67	; 103
    102a:	60 e7       	ldi	r22, 0x70	; 112
    102c:	c7 01       	movw	r24, r14
    102e:	c7 dd       	rcall	.-1138   	; 0xbbe <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
    1030:	86 e0       	ldi	r24, 0x06	; 6
    1032:	e0 e0       	ldi	r30, 0x00	; 0
    1034:	f2 e0       	ldi	r31, 0x02	; 2
    1036:	de 01       	movw	r26, r28
    1038:	1f 96       	adiw	r26, 0x0f	; 15
    103a:	01 90       	ld	r0, Z+
    103c:	0d 92       	st	X+, r0
    103e:	8a 95       	dec	r24
    1040:	e1 f7       	brne	.-8      	; 0x103a <__EEPROM_REGION_LENGTH__+0x3a>
    1042:	5e 01       	movw	r10, r28
    1044:	ff e0       	ldi	r31, 0x0F	; 15
    1046:	af 0e       	add	r10, r31
    1048:	b1 1c       	adc	r11, r1
    104a:	c1 2c       	mov	r12, r1
    104c:	d1 2c       	mov	r13, r1
    104e:	f5 01       	movw	r30, r10
    1050:	61 91       	ld	r22, Z+
    1052:	5f 01       	movw	r10, r30
    1054:	41 e0       	ldi	r20, 0x01	; 1
    1056:	f1 e0       	ldi	r31, 0x01	; 1
    1058:	cf 16       	cp	r12, r31
    105a:	d1 04       	cpc	r13, r1
    105c:	09 f0       	breq	.+2      	; 0x1060 <__EEPROM_REGION_LENGTH__+0x60>
    105e:	40 e0       	ldi	r20, 0x00	; 0
    1060:	00 e0       	ldi	r16, 0x00	; 0
    1062:	10 e0       	ldi	r17, 0x00	; 0
    1064:	98 01       	movw	r18, r16
    1066:	c7 01       	movw	r24, r14
    1068:	3c df       	rcall	.-392    	; 0xee2 <_ZN7MCP25159setFilterENS_3RXFEbm>
    106a:	81 11       	cpse	r24, r1
    106c:	17 c0       	rjmp	.+46     	; 0x109c <__EEPROM_REGION_LENGTH__+0x9c>
    106e:	8f ef       	ldi	r24, 0xFF	; 255
    1070:	c8 1a       	sub	r12, r24
    1072:	d8 0a       	sbc	r13, r24
    1074:	e6 e0       	ldi	r30, 0x06	; 6
    1076:	ce 16       	cp	r12, r30
    1078:	d1 04       	cpc	r13, r1
    107a:	49 f7       	brne	.-46     	; 0x104e <__EEPROM_REGION_LENGTH__+0x4e>
    107c:	00 e0       	ldi	r16, 0x00	; 0
    107e:	10 e0       	ldi	r17, 0x00	; 0
    1080:	98 01       	movw	r18, r16
    1082:	41 e0       	ldi	r20, 0x01	; 1
    1084:	60 e0       	ldi	r22, 0x00	; 0
    1086:	c7 01       	movw	r24, r14
    1088:	ea de       	rcall	.-556    	; 0xe5e <_ZN7MCP251513setFilterMaskENS_4MASKEbm>
    108a:	81 11       	cpse	r24, r1
    108c:	07 c0       	rjmp	.+14     	; 0x109c <__EEPROM_REGION_LENGTH__+0x9c>
    108e:	00 e0       	ldi	r16, 0x00	; 0
    1090:	10 e0       	ldi	r17, 0x00	; 0
    1092:	98 01       	movw	r18, r16
    1094:	41 e0       	ldi	r20, 0x01	; 1
    1096:	61 e0       	ldi	r22, 0x01	; 1
    1098:	c7 01       	movw	r24, r14
    109a:	e1 de       	rcall	.-574    	; 0xe5e <_ZN7MCP251513setFilterMaskENS_4MASKEbm>
    109c:	64 96       	adiw	r28, 0x14	; 20
    109e:	0f b6       	in	r0, 0x3f	; 63
    10a0:	f8 94       	cli
    10a2:	de bf       	out	0x3e, r29	; 62
    10a4:	0f be       	out	0x3f, r0	; 63
    10a6:	cd bf       	out	0x3d, r28	; 61
    10a8:	df 91       	pop	r29
    10aa:	cf 91       	pop	r28
    10ac:	1f 91       	pop	r17
    10ae:	0f 91       	pop	r16
    10b0:	ff 90       	pop	r15
    10b2:	ef 90       	pop	r14
    10b4:	df 90       	pop	r13
    10b6:	cf 90       	pop	r12
    10b8:	bf 90       	pop	r11
    10ba:	af 90       	pop	r10
    10bc:	08 95       	ret

000010be <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>:

MCP2515::ERROR MCP2515::readMessage(const RXBn rxbn, struct can_frame *frame)
{
    10be:	7f 92       	push	r7
    10c0:	8f 92       	push	r8
    10c2:	9f 92       	push	r9
    10c4:	af 92       	push	r10
    10c6:	bf 92       	push	r11
    10c8:	cf 92       	push	r12
    10ca:	df 92       	push	r13
    10cc:	ef 92       	push	r14
    10ce:	ff 92       	push	r15
    10d0:	0f 93       	push	r16
    10d2:	1f 93       	push	r17
    10d4:	cf 93       	push	r28
    10d6:	df 93       	push	r29
    10d8:	00 d0       	rcall	.+0      	; 0x10da <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x1c>
    10da:	1f 92       	push	r1
    10dc:	1f 92       	push	r1
    10de:	cd b7       	in	r28, 0x3d	; 61
    10e0:	de b7       	in	r29, 0x3e	; 62
    10e2:	4c 01       	movw	r8, r24
    10e4:	5a 01       	movw	r10, r20
    const struct RXBn_REGS *rxb = &RXB[rxbn];

    uint8_t tbufdata[5];

    readRegisters(rxb->SIDH, tbufdata, 5);
    10e6:	24 e0       	ldi	r18, 0x04	; 4
    10e8:	62 9f       	mul	r22, r18
    10ea:	80 01       	movw	r16, r0
    10ec:	11 24       	eor	r1, r1
    10ee:	f8 01       	movw	r30, r16
    10f0:	e7 5f       	subi	r30, 0xF7	; 247
    10f2:	fd 4f       	sbci	r31, 0xFD	; 253
    10f4:	25 e0       	ldi	r18, 0x05	; 5
    10f6:	ae 01       	movw	r20, r28
    10f8:	4f 5f       	subi	r20, 0xFF	; 255
    10fa:	5f 4f       	sbci	r21, 0xFF	; 255
    10fc:	61 81       	ldd	r22, Z+1	; 0x01
    10fe:	fe dc       	rcall	.-1540   	; 0xafc <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>

    uint32_t id = (tbufdata[MCP_SIDH]<<3) + (tbufdata[MCP_SIDL]>>5);
    1100:	8a 81       	ldd	r24, Y+2	; 0x02
    1102:	99 81       	ldd	r25, Y+1	; 0x01
    1104:	c8 2e       	mov	r12, r24
    1106:	d1 2c       	mov	r13, r1
    1108:	45 e0       	ldi	r20, 0x05	; 5
    110a:	d5 94       	asr	r13
    110c:	c7 94       	ror	r12
    110e:	4a 95       	dec	r20
    1110:	e1 f7       	brne	.-8      	; 0x110a <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x4c>
    1112:	e8 e0       	ldi	r30, 0x08	; 8
    1114:	9e 9f       	mul	r25, r30
    1116:	c0 0c       	add	r12, r0
    1118:	d1 1c       	adc	r13, r1
    111a:	11 24       	eor	r1, r1
    111c:	0d 2c       	mov	r0, r13
    111e:	00 0c       	add	r0, r0
    1120:	ee 08       	sbc	r14, r14
    1122:	ff 08       	sbc	r15, r15

    if ( (tbufdata[MCP_SIDL] & TXB_EXIDE_MASK) ==  TXB_EXIDE_MASK ) {
    1124:	83 ff       	sbrs	r24, 3
    1126:	20 c0       	rjmp	.+64     	; 0x1168 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xaa>
        id = (id<<2) + (tbufdata[MCP_SIDL] & 0x03);
    1128:	92 e0       	ldi	r25, 0x02	; 2
    112a:	cc 0c       	add	r12, r12
    112c:	dd 1c       	adc	r13, r13
    112e:	ee 1c       	adc	r14, r14
    1130:	ff 1c       	adc	r15, r15
    1132:	9a 95       	dec	r25
    1134:	d1 f7       	brne	.-12     	; 0x112a <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x6c>
        id = (id<<8) + tbufdata[MCP_EID8];
    1136:	83 70       	andi	r24, 0x03	; 3
    1138:	c8 0e       	add	r12, r24
    113a:	d1 1c       	adc	r13, r1
    113c:	e1 1c       	adc	r14, r1
    113e:	f1 1c       	adc	r15, r1
    1140:	fe 2c       	mov	r15, r14
    1142:	ed 2c       	mov	r14, r13
    1144:	dc 2c       	mov	r13, r12
    1146:	cc 24       	eor	r12, r12
        id = (id<<8) + tbufdata[MCP_EID0];
    1148:	8b 81       	ldd	r24, Y+3	; 0x03
    114a:	c8 0e       	add	r12, r24
    114c:	d1 1c       	adc	r13, r1
    114e:	e1 1c       	adc	r14, r1
    1150:	f1 1c       	adc	r15, r1
    1152:	fe 2c       	mov	r15, r14
    1154:	ed 2c       	mov	r14, r13
    1156:	dc 2c       	mov	r13, r12
    1158:	cc 24       	eor	r12, r12
    115a:	8c 81       	ldd	r24, Y+4	; 0x04
    115c:	c8 0e       	add	r12, r24
    115e:	d1 1c       	adc	r13, r1
    1160:	e1 1c       	adc	r14, r1
    1162:	f1 1c       	adc	r15, r1
        id |= CAN_EFF_FLAG;
    1164:	68 94       	set
    1166:	f7 f8       	bld	r15, 7
    }

    uint8_t dlc = (tbufdata[MCP_DLC] & DLC_MASK);
    1168:	8d 81       	ldd	r24, Y+5	; 0x05
    116a:	8f 70       	andi	r24, 0x0F	; 15
    116c:	78 2e       	mov	r7, r24
    if (dlc > CAN_MAX_DLEN) {
    116e:	f8 e0       	ldi	r31, 0x08	; 8
    1170:	f8 17       	cp	r31, r24
    1172:	10 f1       	brcs	.+68     	; 0x11b8 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xfa>
        return ERROR_FAIL;
    }

    uint8_t ctrl = readRegister(rxb->CTRL);
    1174:	f8 01       	movw	r30, r16
    1176:	e7 5f       	subi	r30, 0xF7	; 247
    1178:	fd 4f       	sbci	r31, 0xFD	; 253
    117a:	60 81       	ld	r22, Z
    117c:	c4 01       	movw	r24, r8
    117e:	aa dc       	rcall	.-1708   	; 0xad4 <_ZN7MCP251512readRegisterENS_8REGISTERE>
    if (ctrl & RXBnCTRL_RTR) {
    1180:	83 ff       	sbrs	r24, 3
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xca>
        id |= CAN_RTR_FLAG;
    1184:	68 94       	set
    1186:	f6 f8       	bld	r15, 6
    }

    frame->can_id = id;
    1188:	f5 01       	movw	r30, r10
    118a:	c0 82       	st	Z, r12
    118c:	d1 82       	std	Z+1, r13	; 0x01
    118e:	e2 82       	std	Z+2, r14	; 0x02
    1190:	f3 82       	std	Z+3, r15	; 0x03
    frame->can_dlc = dlc;
    1192:	74 82       	std	Z+4, r7	; 0x04

    readRegisters(rxb->DATA, frame->data, dlc);
    1194:	a5 01       	movw	r20, r10
    1196:	48 5f       	subi	r20, 0xF8	; 248
    1198:	5f 4f       	sbci	r21, 0xFF	; 255
    119a:	07 5f       	subi	r16, 0xF7	; 247
    119c:	1d 4f       	sbci	r17, 0xFD	; 253
    119e:	27 2d       	mov	r18, r7
    11a0:	f8 01       	movw	r30, r16
    11a2:	62 81       	ldd	r22, Z+2	; 0x02
    11a4:	c4 01       	movw	r24, r8
    11a6:	aa dc       	rcall	.-1708   	; 0xafc <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>

    modifyRegister(MCP_CANINTF, rxb->CANINTF_RXnIF, 0);
    11a8:	20 e0       	ldi	r18, 0x00	; 0
    11aa:	f8 01       	movw	r30, r16
    11ac:	43 81       	ldd	r20, Z+3	; 0x03
    11ae:	6c e2       	ldi	r22, 0x2C	; 44
    11b0:	c4 01       	movw	r24, r8
    11b2:	05 dd       	rcall	.-1526   	; 0xbbe <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>

    return ERROR_OK;
    11b4:	80 e0       	ldi	r24, 0x00	; 0
    11b6:	01 c0       	rjmp	.+2      	; 0x11ba <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xfc>
        id |= CAN_EFF_FLAG;
    }

    uint8_t dlc = (tbufdata[MCP_DLC] & DLC_MASK);
    if (dlc > CAN_MAX_DLEN) {
        return ERROR_FAIL;
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    readRegisters(rxb->DATA, frame->data, dlc);

    modifyRegister(MCP_CANINTF, rxb->CANINTF_RXnIF, 0);

    return ERROR_OK;
}
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	0f 90       	pop	r0
    11c2:	0f 90       	pop	r0
    11c4:	df 91       	pop	r29
    11c6:	cf 91       	pop	r28
    11c8:	1f 91       	pop	r17
    11ca:	0f 91       	pop	r16
    11cc:	ff 90       	pop	r15
    11ce:	ef 90       	pop	r14
    11d0:	df 90       	pop	r13
    11d2:	cf 90       	pop	r12
    11d4:	bf 90       	pop	r11
    11d6:	af 90       	pop	r10
    11d8:	9f 90       	pop	r9
    11da:	8f 90       	pop	r8
    11dc:	7f 90       	pop	r7
    11de:	08 95       	ret

000011e0 <_ZN7MCP251511readMessageEP9can_frame>:

MCP2515::ERROR MCP2515::readMessage(struct can_frame *frame)
{
    11e0:	0f 93       	push	r16
    11e2:	1f 93       	push	r17
    11e4:	cf 93       	push	r28
    11e6:	df 93       	push	r29
    11e8:	ec 01       	movw	r28, r24
    11ea:	8b 01       	movw	r16, r22
    ERROR rc;
    uint8_t stat = getStatus();
    11ec:	01 dd       	rcall	.-1534   	; 0xbf0 <_ZN7MCP25159getStatusEv>

    if ( stat & STAT_RX0IF ) {
    11ee:	80 ff       	sbrs	r24, 0
    11f0:	03 c0       	rjmp	.+6      	; 0x11f8 <_ZN7MCP251511readMessageEP9can_frame+0x18>
        rc = readMessage(RXB0, frame);
    11f2:	a8 01       	movw	r20, r16
    11f4:	60 e0       	ldi	r22, 0x00	; 0
    11f6:	04 c0       	rjmp	.+8      	; 0x1200 <_ZN7MCP251511readMessageEP9can_frame+0x20>
    } else if ( stat & STAT_RX1IF ) {
    11f8:	81 ff       	sbrs	r24, 1
    11fa:	08 c0       	rjmp	.+16     	; 0x120c <_ZN7MCP251511readMessageEP9can_frame+0x2c>
        rc = readMessage(RXB1, frame);
    11fc:	a8 01       	movw	r20, r16
    11fe:	61 e0       	ldi	r22, 0x01	; 1
    1200:	ce 01       	movw	r24, r28
    } else {
        rc = ERROR_NOMSG;
    }

    return rc;
}
    1202:	df 91       	pop	r29
    1204:	cf 91       	pop	r28
    1206:	1f 91       	pop	r17
    uint8_t stat = getStatus();

    if ( stat & STAT_RX0IF ) {
        rc = readMessage(RXB0, frame);
    } else if ( stat & STAT_RX1IF ) {
        rc = readMessage(RXB1, frame);
    1208:	0f 91       	pop	r16
    120a:	59 cf       	rjmp	.-334    	; 0x10be <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>
    } else {
        rc = ERROR_NOMSG;
    }

    return rc;
}
    120c:	85 e0       	ldi	r24, 0x05	; 5
    120e:	df 91       	pop	r29
    1210:	cf 91       	pop	r28
    1212:	1f 91       	pop	r17
    1214:	0f 91       	pop	r16
    1216:	08 95       	ret

00001218 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    1218:	cf 93       	push	r28
  uint8_t sreg = SREG;
    121a:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    121c:	f8 94       	cli
  if (!initialized) {
    121e:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <_ZN8SPIClass11initializedE>
    1222:	81 11       	cpse	r24, r1
    1224:	23 c0       	rjmp	.+70     	; 0x126c <_ZN8SPIClass5beginEv+0x54>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    1226:	e1 e2       	ldi	r30, 0x21	; 33
    1228:	f2 e0       	ldi	r31, 0x02	; 2
    122a:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    122c:	eb ed       	ldi	r30, 0xDB	; 219
    122e:	f1 e0       	ldi	r31, 0x01	; 1
    1230:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    1232:	e8 2f       	mov	r30, r24
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	ee 0f       	add	r30, r30
    1238:	ff 1f       	adc	r31, r31
    123a:	ea 59       	subi	r30, 0x9A	; 154
    123c:	fd 4f       	sbci	r31, 0xFD	; 253
    123e:	a5 91       	lpm	r26, Z+
    1240:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    1242:	ec 91       	ld	r30, X
    1244:	e9 23       	and	r30, r25
    1246:	19 f4       	brne	.+6      	; 0x124e <_ZN8SPIClass5beginEv+0x36>
      digitalWrite(SS, HIGH);
    1248:	61 e0       	ldi	r22, 0x01	; 1
    124a:	85 e3       	ldi	r24, 0x35	; 53
    124c:	6d db       	rcall	.-2342   	; 0x928 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    124e:	61 e0       	ldi	r22, 0x01	; 1
    1250:	85 e3       	ldi	r24, 0x35	; 53
    1252:	2e db       	rcall	.-2468   	; 0x8b0 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    1254:	8c b5       	in	r24, 0x2c	; 44
    1256:	80 61       	ori	r24, 0x10	; 16
    1258:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    125a:	8c b5       	in	r24, 0x2c	; 44
    125c:	80 64       	ori	r24, 0x40	; 64
    125e:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    1260:	61 e0       	ldi	r22, 0x01	; 1
    1262:	84 e3       	ldi	r24, 0x34	; 52
    1264:	25 db       	rcall	.-2486   	; 0x8b0 <pinMode>
    pinMode(MOSI, OUTPUT);
    1266:	61 e0       	ldi	r22, 0x01	; 1
    1268:	83 e3       	ldi	r24, 0x33	; 51
    126a:	22 db       	rcall	.-2492   	; 0x8b0 <pinMode>
    126c:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <_ZN8SPIClass11initializedE>
  }
  initialized++; // reference count
    1270:	8f 5f       	subi	r24, 0xFF	; 255
    1272:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <_ZN8SPIClass11initializedE>
    1276:	cf bf       	out	0x3f, r28	; 63
  SREG = sreg;
    1278:	cf 91       	pop	r28
}
    127a:	08 95       	ret

0000127c <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    127c:	08 95       	ret

0000127e <__tablejump2__>:
    127e:	ee 0f       	add	r30, r30
    1280:	ff 1f       	adc	r31, r31
    1282:	88 1f       	adc	r24, r24
    1284:	8b bf       	out	0x3b, r24	; 59
    1286:	07 90       	elpm	r0, Z+
    1288:	f6 91       	elpm	r31, Z
    128a:	e0 2d       	mov	r30, r0
    128c:	19 94       	eijmp

0000128e <_exit>:
    128e:	f8 94       	cli

00001290 <__stop_program>:
    1290:	ff cf       	rjmp	.-2      	; 0x1290 <__stop_program>
