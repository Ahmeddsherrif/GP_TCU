
ECU_RIGHT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800200  000011a2  00001236  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000033  00800212  00800212  0000124a  2**3
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001248  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001278  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f0  00000000  00000000  000012b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006987  00000000  00000000  000015a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d41  00000000  00000000  00007f2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ffe  00000000  00000000  00009c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000858  00000000  00000000  0000bc70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002240  00000000  00000000  0000c4c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000366d  00000000  00000000  0000e708  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000298  00000000  00000000  00011d75  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	33 c1       	rjmp	.+614    	; 0x268 <__ctors_end>
       2:	00 00       	nop
       4:	5f c1       	rjmp	.+702    	; 0x2c4 <__bad_interrupt>
       6:	00 00       	nop
       8:	5d c1       	rjmp	.+698    	; 0x2c4 <__bad_interrupt>
       a:	00 00       	nop
       c:	5b c1       	rjmp	.+694    	; 0x2c4 <__bad_interrupt>
       e:	00 00       	nop
      10:	59 c1       	rjmp	.+690    	; 0x2c4 <__bad_interrupt>
      12:	00 00       	nop
      14:	57 c1       	rjmp	.+686    	; 0x2c4 <__bad_interrupt>
      16:	00 00       	nop
      18:	55 c1       	rjmp	.+682    	; 0x2c4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	53 c1       	rjmp	.+678    	; 0x2c4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	51 c1       	rjmp	.+674    	; 0x2c4 <__bad_interrupt>
      22:	00 00       	nop
      24:	4f c1       	rjmp	.+670    	; 0x2c4 <__bad_interrupt>
      26:	00 00       	nop
      28:	4d c1       	rjmp	.+666    	; 0x2c4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4b c1       	rjmp	.+662    	; 0x2c4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	49 c1       	rjmp	.+658    	; 0x2c4 <__bad_interrupt>
      32:	00 00       	nop
      34:	47 c1       	rjmp	.+654    	; 0x2c4 <__bad_interrupt>
      36:	00 00       	nop
      38:	45 c1       	rjmp	.+650    	; 0x2c4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	43 c1       	rjmp	.+646    	; 0x2c4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	41 c1       	rjmp	.+642    	; 0x2c4 <__bad_interrupt>
      42:	00 00       	nop
      44:	3f c1       	rjmp	.+638    	; 0x2c4 <__bad_interrupt>
      46:	00 00       	nop
      48:	3d c1       	rjmp	.+634    	; 0x2c4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3b c1       	rjmp	.+630    	; 0x2c4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	39 c1       	rjmp	.+626    	; 0x2c4 <__bad_interrupt>
      52:	00 00       	nop
      54:	37 c1       	rjmp	.+622    	; 0x2c4 <__bad_interrupt>
      56:	00 00       	nop
      58:	35 c1       	rjmp	.+618    	; 0x2c4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	6e c2       	rjmp	.+1244   	; 0x53a <__vector_23>
      5e:	00 00       	nop
      60:	31 c1       	rjmp	.+610    	; 0x2c4 <__bad_interrupt>
      62:	00 00       	nop
      64:	2f c1       	rjmp	.+606    	; 0x2c4 <__bad_interrupt>
      66:	00 00       	nop
      68:	2d c1       	rjmp	.+602    	; 0x2c4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2b c1       	rjmp	.+598    	; 0x2c4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	29 c1       	rjmp	.+594    	; 0x2c4 <__bad_interrupt>
      72:	00 00       	nop
      74:	27 c1       	rjmp	.+590    	; 0x2c4 <__bad_interrupt>
      76:	00 00       	nop
      78:	25 c1       	rjmp	.+586    	; 0x2c4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	23 c1       	rjmp	.+582    	; 0x2c4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	21 c1       	rjmp	.+578    	; 0x2c4 <__bad_interrupt>
      82:	00 00       	nop
      84:	1f c1       	rjmp	.+574    	; 0x2c4 <__bad_interrupt>
      86:	00 00       	nop
      88:	1d c1       	rjmp	.+570    	; 0x2c4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	1b c1       	rjmp	.+566    	; 0x2c4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	19 c1       	rjmp	.+562    	; 0x2c4 <__bad_interrupt>
      92:	00 00       	nop
      94:	17 c1       	rjmp	.+558    	; 0x2c4 <__bad_interrupt>
      96:	00 00       	nop
      98:	15 c1       	rjmp	.+554    	; 0x2c4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	13 c1       	rjmp	.+550    	; 0x2c4 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	11 c1       	rjmp	.+546    	; 0x2c4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	0f c1       	rjmp	.+542    	; 0x2c4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0d c1       	rjmp	.+538    	; 0x2c4 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	0b c1       	rjmp	.+534    	; 0x2c4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	09 c1       	rjmp	.+530    	; 0x2c4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	07 c1       	rjmp	.+526    	; 0x2c4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	05 c1       	rjmp	.+522    	; 0x2c4 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	03 c1       	rjmp	.+518    	; 0x2c4 <__bad_interrupt>
      be:	00 00       	nop
      c0:	01 c1       	rjmp	.+514    	; 0x2c4 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	ff c0       	rjmp	.+510    	; 0x2c4 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	fd c0       	rjmp	.+506    	; 0x2c4 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	fb c0       	rjmp	.+502    	; 0x2c4 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	f9 c0       	rjmp	.+498    	; 0x2c4 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	f7 c0       	rjmp	.+494    	; 0x2c4 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	f5 c0       	rjmp	.+490    	; 0x2c4 <__bad_interrupt>
      da:	00 00       	nop
      dc:	f3 c0       	rjmp	.+486    	; 0x2c4 <__bad_interrupt>
      de:	00 00       	nop
      e0:	f1 c0       	rjmp	.+482    	; 0x2c4 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	cd 03       	fmulsu	r20, r21
      e6:	d0 03       	fmuls	r21, r16
      e8:	bf 03       	fmulsu	r19, r23
      ea:	c3 03       	fmuls	r20, r19
      ec:	c9 03       	fmulsu	r20, r17
      ee:	07 04       	cpc	r0, r7
      f0:	d4 03       	fmuls	r21, r20
      f2:	d8 03       	fmulsu	r21, r16
      f4:	de 03       	fmulsu	r21, r22
      f6:	e2 03       	fmuls	r22, r18
      f8:	e6 03       	fmuls	r22, r22
      fa:	ec 03       	fmulsu	r22, r20
      fc:	f0 03       	fmuls	r23, r16
      fe:	f4 03       	fmuls	r23, r20
     100:	07 04       	cpc	r0, r7
     102:	fa 03       	fmulsu	r23, r18
     104:	fe 03       	fmulsu	r23, r22
     106:	02 04       	cpc	r0, r2
     108:	6c 06       	cpc	r6, r28
     10a:	e0 05       	cpc	r30, r0
     10c:	70 06       	cpc	r7, r16
     10e:	e3 05       	cpc	r30, r3
     110:	e6 05       	cpc	r30, r6
     112:	ea 05       	cpc	r30, r10
     114:	ed 05       	cpc	r30, r13
     116:	f0 05       	cpc	r31, r0
     118:	6a 06       	cpc	r6, r26
     11a:	6a 06       	cpc	r6, r26
     11c:	f3 05       	cpc	r31, r3
     11e:	f6 05       	cpc	r31, r6
     120:	f9 05       	cpc	r31, r9
     122:	fc 05       	cpc	r31, r12
     124:	ff 05       	cpc	r31, r15
     126:	02 06       	cpc	r0, r18
     128:	74 06       	cpc	r7, r20
     12a:	11 06       	cpc	r1, r17
     12c:	14 06       	cpc	r1, r20
     12e:	6a 06       	cpc	r6, r26
     130:	18 06       	cpc	r1, r24
     132:	1c 06       	cpc	r1, r28
     134:	1f 06       	cpc	r1, r31
     136:	22 06       	cpc	r2, r18
     138:	25 06       	cpc	r2, r21
     13a:	28 06       	cpc	r2, r24
     13c:	57 06       	cpc	r5, r23
     13e:	2b 06       	cpc	r2, r27
     140:	2e 06       	cpc	r2, r30
     142:	31 06       	cpc	r3, r17
     144:	34 06       	cpc	r3, r20
     146:	37 06       	cpc	r3, r23
     148:	78 06       	cpc	r7, r24
     14a:	46 06       	cpc	r4, r22
     14c:	49 06       	cpc	r4, r25
     14e:	4d 06       	cpc	r4, r29
     150:	50 06       	cpc	r5, r16
     152:	6a 06       	cpc	r6, r26
     154:	54 06       	cpc	r5, r20
     156:	57 06       	cpc	r5, r23
     158:	5b 06       	cpc	r5, r27
     15a:	5f 06       	cpc	r5, r31
     15c:	63 06       	cpc	r6, r19
     15e:	67 06       	cpc	r6, r23

00000160 <__trampolines_end>:
     160:	00 00       	nop
     162:	0a 0b       	sbc	r16, r26
     164:	02 09       	sbc	r16, r2
     166:	0c 0d       	add	r16, r12
     168:	0e 08       	sbc	r0, r14
     16a:	07 03       	mulsu	r16, r23
     16c:	04 01       	movw	r0, r8
	...
     18a:	00 00       	nop
     18c:	12 11       	cpse	r17, r2
     18e:	10 00       	.word	0x0010	; ????
	...

000001a6 <digital_pin_to_bit_mask_PGM>:
     1a6:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     1b6:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     1c6:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     1d6:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     1e6:	04 08 10 20 40 80                                   ... @.

000001ec <digital_pin_to_port_PGM>:
     1ec:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1fc:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     20c:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     21c:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     22c:	0b 0b 0b 0b 0b 0b                                   ......

00000232 <port_to_output_PGM>:
     232:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     242:	02 01 00 00 05 01 08 01 0b 01                       ..........

0000024c <port_to_mode_PGM>:
     24c:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     25c:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000266 <__ctors_start>:
     266:	dd 01       	movw	r26, r26

00000268 <__ctors_end>:
     268:	11 24       	eor	r1, r1
     26a:	1f be       	out	0x3f, r1	; 63
     26c:	cf ef       	ldi	r28, 0xFF	; 255
     26e:	d1 e2       	ldi	r29, 0x21	; 33
     270:	de bf       	out	0x3e, r29	; 62
     272:	cd bf       	out	0x3d, r28	; 61
     274:	00 e0       	ldi	r16, 0x00	; 0
     276:	0c bf       	out	0x3c, r16	; 60

00000278 <__do_copy_data>:
     278:	12 e0       	ldi	r17, 0x02	; 2
     27a:	a0 e0       	ldi	r26, 0x00	; 0
     27c:	b2 e0       	ldi	r27, 0x02	; 2
     27e:	e2 ea       	ldi	r30, 0xA2	; 162
     280:	f1 e1       	ldi	r31, 0x11	; 17
     282:	00 e0       	ldi	r16, 0x00	; 0
     284:	0b bf       	out	0x3b, r16	; 59
     286:	02 c0       	rjmp	.+4      	; 0x28c <__do_copy_data+0x14>
     288:	07 90       	elpm	r0, Z+
     28a:	0d 92       	st	X+, r0
     28c:	a2 31       	cpi	r26, 0x12	; 18
     28e:	b1 07       	cpc	r27, r17
     290:	d9 f7       	brne	.-10     	; 0x288 <__do_copy_data+0x10>

00000292 <__do_clear_bss>:
     292:	22 e0       	ldi	r18, 0x02	; 2
     294:	a2 e1       	ldi	r26, 0x12	; 18
     296:	b2 e0       	ldi	r27, 0x02	; 2
     298:	01 c0       	rjmp	.+2      	; 0x29c <.do_clear_bss_start>

0000029a <.do_clear_bss_loop>:
     29a:	1d 92       	st	X+, r1

0000029c <.do_clear_bss_start>:
     29c:	a5 34       	cpi	r26, 0x45	; 69
     29e:	b2 07       	cpc	r27, r18
     2a0:	e1 f7       	brne	.-8      	; 0x29a <.do_clear_bss_loop>

000002a2 <__do_global_ctors>:
     2a2:	11 e0       	ldi	r17, 0x01	; 1
     2a4:	c4 e3       	ldi	r28, 0x34	; 52
     2a6:	d1 e0       	ldi	r29, 0x01	; 1
     2a8:	00 e0       	ldi	r16, 0x00	; 0
     2aa:	05 c0       	rjmp	.+10     	; 0x2b6 <__do_global_ctors+0x14>
     2ac:	21 97       	sbiw	r28, 0x01	; 1
     2ae:	01 09       	sbc	r16, r1
     2b0:	80 2f       	mov	r24, r16
     2b2:	fe 01       	movw	r30, r28
     2b4:	6c d7       	rcall	.+3800   	; 0x118e <__tablejump2__>
     2b6:	c3 33       	cpi	r28, 0x33	; 51
     2b8:	d1 07       	cpc	r29, r17
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	08 07       	cpc	r16, r24
     2be:	b1 f7       	brne	.-20     	; 0x2ac <__do_global_ctors+0xa>
     2c0:	31 d1       	rcall	.+610    	; 0x524 <main>
     2c2:	6d c7       	rjmp	.+3802   	; 0x119e <_exit>

000002c4 <__bad_interrupt>:
     2c4:	9d ce       	rjmp	.-710    	; 0x0 <__vectors>

000002c6 <_Z41can_message_simulation_cmd_frame_receivedv>:
			break;
		}
	}
}
void can_message_simulation_cmd_frame_received(){
	switch(frameResponse.data[0]){
     2c6:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <frameResponse+0x8>
     2ca:	81 30       	cpi	r24, 0x01	; 1
     2cc:	19 f0       	breq	.+6      	; 0x2d4 <_Z41can_message_simulation_cmd_frame_receivedv+0xe>
     2ce:	82 30       	cpi	r24, 0x02	; 2
     2d0:	19 f0       	breq	.+6      	; 0x2d8 <_Z41can_message_simulation_cmd_frame_receivedv+0x12>
     2d2:	08 95       	ret
		case CAN_MSG_SIMULATION_CMD_DATA_KILL:{
			mainEvent = EVENT_KILL_SIMULATION;
     2d4:	82 e0       	ldi	r24, 0x02	; 2
     2d6:	01 c0       	rjmp	.+2      	; 0x2da <_Z41can_message_simulation_cmd_frame_receivedv+0x14>
			break;
		}
		case CAN_MSG_SIMULATION_CMD_DATA_START:{
			mainEvent = EVENT_START_SIMULATION;
     2d8:	81 e0       	ldi	r24, 0x01	; 1
     2da:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <mainEvent>
     2de:	08 95       	ret

000002e0 <_Z31can_message_dms_frame_recieviedv>:
	}
}


void can_message_dms_frame_recievied(){
	switch(frameResponse.data[0]){
     2e0:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <frameResponse+0x8>
     2e4:	81 30       	cpi	r24, 0x01	; 1
     2e6:	21 f0       	breq	.+8      	; 0x2f0 <_Z31can_message_dms_frame_recieviedv+0x10>
     2e8:	82 30       	cpi	r24, 0x02	; 2
     2ea:	29 f4       	brne	.+10     	; 0x2f6 <_Z31can_message_dms_frame_recieviedv+0x16>
		case CAN_MSG_DMS_DATA_SLEEP:{
			mainEvent = EVENT_SLEEP;
     2ec:	83 e0       	ldi	r24, 0x03	; 3
     2ee:	01 c0       	rjmp	.+2      	; 0x2f2 <_Z31can_message_dms_frame_recieviedv+0x12>
			break;
		}
		case CAN_MSG_DMS_DATA_DISTRACTED:{
			mainEvent = EVENT_DISTRACTED;
     2f0:	84 e0       	ldi	r24, 0x04	; 4
     2f2:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <mainEvent>
     2f6:	08 95       	ret

000002f8 <_Z21can_message_recieviedv>:
#include "Sketch.h"

void can_message_recievied(){
	switch(frameResponse.can_id){
     2f8:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <frameResponse>
     2fc:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <frameResponse+0x1>
     300:	a0 91 22 02 	lds	r26, 0x0222	; 0x800222 <frameResponse+0x2>
     304:	b0 91 23 02 	lds	r27, 0x0223	; 0x800223 <frameResponse+0x3>
     308:	89 30       	cpi	r24, 0x09	; 9
     30a:	91 05       	cpc	r25, r1
     30c:	a1 05       	cpc	r26, r1
     30e:	b1 05       	cpc	r27, r1
     310:	29 f0       	breq	.+10     	; 0x31c <_Z21can_message_recieviedv+0x24>
     312:	41 97       	sbiw	r24, 0x11	; 17
     314:	a1 05       	cpc	r26, r1
     316:	b1 05       	cpc	r27, r1
     318:	11 f0       	breq	.+4      	; 0x31e <_Z21can_message_recieviedv+0x26>
     31a:	08 95       	ret
		case CAN_MSG_SIMULATION_CMD_ID:{
			can_message_simulation_cmd_frame_received();
     31c:	d4 cf       	rjmp	.-88     	; 0x2c6 <_Z41can_message_simulation_cmd_frame_receivedv>
			break;
		}
			
		case CAN_MSG_DMS_ID:{
			can_message_dms_frame_recievied();
     31e:	e0 cf       	rjmp	.-64     	; 0x2e0 <_Z31can_message_dms_frame_recieviedv>

00000320 <setup>:
     320:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <mainState>
bool stateEntry, stateExit;


void setup() {
	mainState = STATE_INIT;
	mainEvent = EVENT_IDLE;
     324:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <mainEvent>
	
	stateEntry = true;
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <stateEntry>
	stateExit = false;
     32e:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <__data_end>

	
	mcp2515.reset();
     332:	80 e3       	ldi	r24, 0x30	; 48
     334:	92 e0       	ldi	r25, 0x02	; 2
     336:	ba d5       	rcall	.+2932   	; 0xeac <_ZN7MCP25155resetEv>
	mcp2515.setBitrate(CAN_125KBPS, MCP_8MHZ);
     338:	42 e0       	ldi	r20, 0x02	; 2
     33a:	6b e0       	ldi	r22, 0x0B	; 11
     33c:	80 e3       	ldi	r24, 0x30	; 48
     33e:	92 e0       	ldi	r25, 0x02	; 2
     340:	22 d4       	rcall	.+2116   	; 0xb86 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK>
	mcp2515.setNormalMode();
     342:	80 e3       	ldi	r24, 0x30	; 48
     344:	92 e0       	ldi	r25, 0x02	; 2
     346:	1d d4       	rcall	.+2106   	; 0xb82 <_ZN7MCP251513setNormalModeEv>
	
	pinMode(PIN_BUZZER, OUTPUT);
     348:	61 e0       	ldi	r22, 0x01	; 1
     34a:	82 e0       	ldi	r24, 0x02	; 2
     34c:	61 d2       	rcall	.+1218   	; 0x810 <pinMode>
	pinMode(PIN_LED_RED, OUTPUT);
     34e:	61 e0       	ldi	r22, 0x01	; 1
     350:	83 e0       	ldi	r24, 0x03	; 3
     352:	5e d2       	rcall	.+1212   	; 0x810 <pinMode>
	pinMode(PIN_LED_GREEN, OUTPUT);
     354:	61 e0       	ldi	r22, 0x01	; 1
     356:	84 e0       	ldi	r24, 0x04	; 4
     358:	5b d2       	rcall	.+1206   	; 0x810 <pinMode>
	
	digitalWrite(PIN_BUZZER, HIGH);
     35a:	61 e0       	ldi	r22, 0x01	; 1
     35c:	82 e0       	ldi	r24, 0x02	; 2
     35e:	94 d2       	rcall	.+1320   	; 0x888 <digitalWrite>
	digitalWrite(PIN_LED_RED, HIGH);
     360:	61 e0       	ldi	r22, 0x01	; 1
     362:	83 e0       	ldi	r24, 0x03	; 3
     364:	91 d2       	rcall	.+1314   	; 0x888 <digitalWrite>
	digitalWrite(PIN_LED_GREEN, HIGH);
     366:	61 e0       	ldi	r22, 0x01	; 1
     368:	84 e0       	ldi	r24, 0x04	; 4
     36a:	8e d2       	rcall	.+1308   	; 0x888 <digitalWrite>
	
	delay(2000);
     36c:	60 ed       	ldi	r22, 0xD0	; 208
     36e:	77 e0       	ldi	r23, 0x07	; 7
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	90 e0       	ldi	r25, 0x00	; 0
	
	digitalWrite(PIN_BUZZER, LOW);
     374:	5d d1       	rcall	.+698    	; 0x630 <delay>
     376:	60 e0       	ldi	r22, 0x00	; 0
     378:	82 e0       	ldi	r24, 0x02	; 2
     37a:	86 d2       	rcall	.+1292   	; 0x888 <digitalWrite>
	digitalWrite(PIN_LED_RED, LOW);
     37c:	60 e0       	ldi	r22, 0x00	; 0
     37e:	83 e0       	ldi	r24, 0x03	; 3
     380:	83 d2       	rcall	.+1286   	; 0x888 <digitalWrite>
     382:	60 e0       	ldi	r22, 0x00	; 0
	digitalWrite(PIN_LED_GREEN, LOW);
     384:	84 e0       	ldi	r24, 0x04	; 4
     386:	80 c2       	rjmp	.+1280   	; 0x888 <digitalWrite>

00000388 <loop>:
     388:	60 e2       	ldi	r22, 0x20	; 32
     38a:	72 e0       	ldi	r23, 0x02	; 2
void loop() {
	
	
	//	Get Events

	if(mcp2515.readMessage(&frameResponse) == MCP2515::ERROR_OK){
     38c:	80 e3       	ldi	r24, 0x30	; 48
     38e:	92 e0       	ldi	r25, 0x02	; 2
     390:	af d6       	rcall	.+3422   	; 0x10f0 <_ZN7MCP251511readMessageEP9can_frame>
     392:	81 11       	cpse	r24, r1
     394:	01 c0       	rjmp	.+2      	; 0x398 <loop+0x10>
		can_message_recievied();
     396:	b0 df       	rcall	.-160    	; 0x2f8 <_Z21can_message_recieviedv>
     398:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <mainState>
	}
	
	// Handle Events
	switch(mainState){
     39c:	81 30       	cpi	r24, 0x01	; 1
     39e:	39 f0       	breq	.+14     	; 0x3ae <loop+0x26>
     3a0:	20 f0       	brcs	.+8      	; 0x3aa <loop+0x22>
     3a2:	82 30       	cpi	r24, 0x02	; 2
     3a4:	29 f4       	brne	.+10     	; 0x3b0 <loop+0x28>
			stateIDLE_handler();
			break;
		}
		
		case STATE_ACTIVE:{
			stateACTIVE_handler();
     3a6:	70 d0       	rcall	.+224    	; 0x488 <_Z19stateACTIVE_handlerv>
	
	// Handle Events
	switch(mainState){
		
		case STATE_HALT:{
			stateHALT_handler();
     3a8:	03 c0       	rjmp	.+6      	; 0x3b0 <loop+0x28>
     3aa:	16 d0       	rcall	.+44     	; 0x3d8 <_Z17stateHALT_handlerv>
			break;
     3ac:	01 c0       	rjmp	.+2      	; 0x3b0 <loop+0x28>
		}
		
		case STATE_IDLE:{
			stateIDLE_handler();
     3ae:	3c d0       	rcall	.+120    	; 0x428 <_Z17stateIDLE_handlerv>
		default:{
			
		}
	}
	
	delay(10);
     3b0:	6a e0       	ldi	r22, 0x0A	; 10
     3b2:	70 e0       	ldi	r23, 0x00	; 0
     3b4:	80 e0       	ldi	r24, 0x00	; 0
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	3b c1       	rjmp	.+630    	; 0x630 <delay>

000003ba <_GLOBAL__sub_I_mcp2515>:
     3ba:	0f 93       	push	r16
     3bc:	1f 93       	push	r17
﻿#include "Sketch.h"

MCP2515 mcp2515(PIN_SS);
     3be:	00 e0       	ldi	r16, 0x00	; 0
     3c0:	10 e0       	ldi	r17, 0x00	; 0
     3c2:	20 e8       	ldi	r18, 0x80	; 128
     3c4:	36 e9       	ldi	r19, 0x96	; 150
     3c6:	48 e9       	ldi	r20, 0x98	; 152
     3c8:	50 e0       	ldi	r21, 0x00	; 0
     3ca:	65 e3       	ldi	r22, 0x35	; 53
     3cc:	80 e3       	ldi	r24, 0x30	; 48
     3ce:	92 e0       	ldi	r25, 0x02	; 2
     3d0:	de d2       	rcall	.+1468   	; 0x98e <_ZN7MCP2515C1EhmP8SPIClass>
			
		}
	}
	
	delay(10);
     3d2:	1f 91       	pop	r17
     3d4:	0f 91       	pop	r16
     3d6:	08 95       	ret

000003d8 <_Z17stateHALT_handlerv>:
//void superStateRunning_handler(){
	// TODO: maybe one day i will do it right with C OOP and QPC HSM patterns, but now its GOOD ENOUGH
//}

void stateHALT_handler(){
	if(stateEntry == true){
     3d8:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <stateEntry>
     3dc:	88 23       	and	r24, r24
     3de:	59 f0       	breq	.+22     	; 0x3f6 <_Z17stateHALT_handlerv+0x1e>
		stateEntry = false;
     3e0:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <stateEntry>
		
		digitalWrite(PIN_LED_RED, HIGH);
     3e4:	61 e0       	ldi	r22, 0x01	; 1
     3e6:	83 e0       	ldi	r24, 0x03	; 3
     3e8:	4f d2       	rcall	.+1182   	; 0x888 <digitalWrite>
		digitalWrite(PIN_BUZZER, LOW);
     3ea:	60 e0       	ldi	r22, 0x00	; 0
     3ec:	82 e0       	ldi	r24, 0x02	; 2
     3ee:	4c d2       	rcall	.+1176   	; 0x888 <digitalWrite>
		digitalWrite(PIN_LED_GREEN, LOW);
     3f0:	60 e0       	ldi	r22, 0x00	; 0
     3f2:	84 e0       	ldi	r24, 0x04	; 4
     3f4:	49 d2       	rcall	.+1170   	; 0x888 <digitalWrite>
	}
	
	switch(mainEvent){
     3f6:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <mainEvent>
     3fa:	88 23       	and	r24, r24
     3fc:	41 f0       	breq	.+16     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
			
			break;
		}
		
		case EVENT_START_SIMULATION:{
			mainEvent = EVENT_IDLE;
     3fe:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <mainEvent>
		digitalWrite(PIN_LED_RED, HIGH);
		digitalWrite(PIN_BUZZER, LOW);
		digitalWrite(PIN_LED_GREEN, LOW);
	}
	
	switch(mainEvent){
     402:	81 30       	cpi	r24, 0x01	; 1
     404:	21 f4       	brne	.+8      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
		}
		
		case EVENT_START_SIMULATION:{
			mainEvent = EVENT_IDLE;
			
			mainState = STATE_IDLE;
     406:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <mainState>
			stateExit = true;
     40a:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <__data_end>
			mainEvent = EVENT_IDLE;
			break;
		}
	}
	
	if(stateExit == true){
     40e:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__data_end>
     412:	88 23       	and	r24, r24
     414:	41 f0       	breq	.+16     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
		stateExit = false;
     416:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <__data_end>
		stateEntry = true;
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <stateEntry>
		
		
		digitalWrite(PIN_LED_RED, LOW);
     420:	60 e0       	ldi	r22, 0x00	; 0
     422:	83 e0       	ldi	r24, 0x03	; 3
     424:	31 c2       	rjmp	.+1122   	; 0x888 <digitalWrite>
     426:	08 95       	ret

00000428 <_Z17stateIDLE_handlerv>:
	}
}

void stateIDLE_handler(){
	if(stateEntry == true){
     428:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <stateEntry>
     42c:	88 23       	and	r24, r24
     42e:	29 f0       	breq	.+10     	; 0x43a <_Z17stateIDLE_handlerv+0x12>
		stateEntry = false;
     430:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <stateEntry>
		
		
		digitalWrite(PIN_LED_GREEN, HIGH);
     434:	61 e0       	ldi	r22, 0x01	; 1
     436:	84 e0       	ldi	r24, 0x04	; 4
     438:	27 d2       	rcall	.+1102   	; 0x888 <digitalWrite>
	}
	

	switch(mainEvent){
     43a:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <mainEvent>
     43e:	82 30       	cpi	r24, 0x02	; 2
     440:	61 f0       	breq	.+24     	; 0x45a <_Z17stateIDLE_handlerv+0x32>
     442:	18 f4       	brcc	.+6      	; 0x44a <_Z17stateIDLE_handlerv+0x22>
     444:	88 23       	and	r24, r24
     446:	99 f0       	breq	.+38     	; 0x46e <_Z17stateIDLE_handlerv+0x46>
     448:	10 c0       	rjmp	.+32     	; 0x46a <_Z17stateIDLE_handlerv+0x42>
     44a:	85 30       	cpi	r24, 0x05	; 5
     44c:	70 f4       	brcc	.+28     	; 0x46a <_Z17stateIDLE_handlerv+0x42>
			break;
		}
		
		case EVENT_SLEEP:
		case EVENT_DISTRACTED:{
			mainEvent = EVENT_IDLE;
     44e:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <mainEvent>
			
			mainState = STATE_ACTIVE;
     452:	82 e0       	ldi	r24, 0x02	; 2
     454:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <mainState>
     458:	04 c0       	rjmp	.+8      	; 0x462 <_Z17stateIDLE_handlerv+0x3a>
	
			break;
		}
		
		case EVENT_KILL_SIMULATION:{
			mainEvent = EVENT_IDLE;
     45a:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <mainEvent>
			
			mainState = STATE_HALT;
     45e:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <mainState>
			stateExit = true;
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <__data_end>
			
			break;	
     468:	02 c0       	rjmp	.+4      	; 0x46e <_Z17stateIDLE_handlerv+0x46>
		}
			
		default:{
			mainEvent = EVENT_IDLE;
     46a:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <mainEvent>
			break;
		}
	}
	
	
	if(stateExit == true){
     46e:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__data_end>
     472:	88 23       	and	r24, r24
     474:	41 f0       	breq	.+16     	; 0x486 <_Z17stateIDLE_handlerv+0x5e>
		stateExit = false;
     476:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <__data_end>
		stateEntry = true;
     47a:	81 e0       	ldi	r24, 0x01	; 1
     47c:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <stateEntry>
		
		digitalWrite(PIN_LED_GREEN, LOW);
     480:	60 e0       	ldi	r22, 0x00	; 0
     482:	84 e0       	ldi	r24, 0x04	; 4
     484:	01 c2       	rjmp	.+1026   	; 0x888 <digitalWrite>
     486:	08 95       	ret

00000488 <_Z19stateACTIVE_handlerv>:
	}
	
}


void stateACTIVE_handler(){
     488:	0f 93       	push	r16
     48a:	1f 93       	push	r17
	if(stateEntry == true){
     48c:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <stateEntry>
     490:	88 23       	and	r24, r24
     492:	71 f0       	breq	.+28     	; 0x4b0 <_Z19stateACTIVE_handlerv+0x28>
		stateEntry = false;
     494:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <stateEntry>
		
		stateEntryIntialTime = millis();
     498:	9a d0       	rcall	.+308    	; 0x5ce <millis>
     49a:	60 93 14 02 	sts	0x0214, r22	; 0x800214 <stateEntryIntialTime>
     49e:	70 93 15 02 	sts	0x0215, r23	; 0x800215 <stateEntryIntialTime+0x1>
     4a2:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <stateEntryIntialTime+0x2>
     4a6:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <stateEntryIntialTime+0x3>
		digitalWrite(PIN_BUZZER, HIGH);
     4aa:	61 e0       	ldi	r22, 0x01	; 1
     4ac:	82 e0       	ldi	r24, 0x02	; 2
	}
	
	
	if(millis() - stateEntryIntialTime >= BUZZER_ON_TIME_MS){
     4ae:	ec d1       	rcall	.+984    	; 0x888 <digitalWrite>
     4b0:	8e d0       	rcall	.+284    	; 0x5ce <millis>
     4b2:	00 91 14 02 	lds	r16, 0x0214	; 0x800214 <stateEntryIntialTime>
     4b6:	10 91 15 02 	lds	r17, 0x0215	; 0x800215 <stateEntryIntialTime+0x1>
     4ba:	20 91 16 02 	lds	r18, 0x0216	; 0x800216 <stateEntryIntialTime+0x2>
     4be:	30 91 17 02 	lds	r19, 0x0217	; 0x800217 <stateEntryIntialTime+0x3>
     4c2:	dc 01       	movw	r26, r24
     4c4:	cb 01       	movw	r24, r22
     4c6:	80 1b       	sub	r24, r16
     4c8:	91 0b       	sbc	r25, r17
     4ca:	a2 0b       	sbc	r26, r18
     4cc:	b3 0b       	sbc	r27, r19
     4ce:	88 3b       	cpi	r24, 0xB8	; 184
     4d0:	9b 40       	sbci	r25, 0x0B	; 11
     4d2:	a1 05       	cpc	r26, r1
     4d4:	b1 05       	cpc	r27, r1
     4d6:	18 f0       	brcs	.+6      	; 0x4de <_Z19stateACTIVE_handlerv+0x56>
		mainEvent = EVENT_END_ALERT;
     4d8:	85 e0       	ldi	r24, 0x05	; 5
     4da:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <mainEvent>
	}
	
	switch(mainEvent){
     4de:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <mainEvent>
			stateExit = true;
			break;
		}
		
		case EVENT_KILL_SIMULATION:{
			mainEvent = EVENT_IDLE;
     4e2:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <mainEvent>
	
	if(millis() - stateEntryIntialTime >= BUZZER_ON_TIME_MS){
		mainEvent = EVENT_END_ALERT;
	}
	
	switch(mainEvent){
     4e6:	82 30       	cpi	r24, 0x02	; 2
     4e8:	31 f0       	breq	.+12     	; 0x4f6 <_Z19stateACTIVE_handlerv+0x6e>
     4ea:	85 30       	cpi	r24, 0x05	; 5
     4ec:	49 f4       	brne	.+18     	; 0x500 <_Z19stateACTIVE_handlerv+0x78>
		
		case EVENT_END_ALERT:{
			mainEvent = EVENT_IDLE;
			
			mainState = STATE_IDLE;
     4ee:	81 e0       	ldi	r24, 0x01	; 1
     4f0:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <mainState>
     4f4:	03 c0       	rjmp	.+6      	; 0x4fc <_Z19stateACTIVE_handlerv+0x74>
		}
		
		case EVENT_KILL_SIMULATION:{
			mainEvent = EVENT_IDLE;
			
			mainState = STATE_HALT;
     4f6:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <mainState>
			stateExit = true;
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <__data_end>
			
			break;
		}
	}
	
	if(stateExit == true){
     500:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__data_end>
     504:	88 23       	and	r24, r24
     506:	51 f0       	breq	.+20     	; 0x51c <_Z19stateACTIVE_handlerv+0x94>
		stateExit = false;
     508:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <__data_end>
		stateEntry = true;
     50c:	81 e0       	ldi	r24, 0x01	; 1
     50e:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <stateEntry>
		
		digitalWrite(PIN_BUZZER, LOW);
     512:	60 e0       	ldi	r22, 0x00	; 0
	}
     514:	82 e0       	ldi	r24, 0x02	; 2
     516:	1f 91       	pop	r17
	
	if(stateExit == true){
		stateExit = false;
		stateEntry = true;
		
		digitalWrite(PIN_BUZZER, LOW);
     518:	0f 91       	pop	r16
     51a:	b6 c1       	rjmp	.+876    	; 0x888 <digitalWrite>
	}
     51c:	1f 91       	pop	r17
     51e:	0f 91       	pop	r16
     520:	08 95       	ret

00000522 <initVariant>:
     522:	08 95       	ret

00000524 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     524:	be d0       	rcall	.+380    	; 0x6a2 <init>

	initVariant();
     526:	fd df       	rcall	.-6      	; 0x522 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     528:	fb de       	rcall	.-522    	; 0x320 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     52a:	c0 e0       	ldi	r28, 0x00	; 0
     52c:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
     52e:	2c df       	rcall	.-424    	; 0x388 <loop>
     530:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
     532:	e9 f3       	breq	.-6      	; 0x52e <main+0xa>
     534:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     538:	fa cf       	rjmp	.-12     	; 0x52e <main+0xa>

0000053a <__vector_23>:
     53a:	1f 92       	push	r1
	

#endif

	// busy wait
	__asm__ __volatile__ (
     53c:	0f 92       	push	r0
     53e:	0f b6       	in	r0, 0x3f	; 63
     540:	0f 92       	push	r0
     542:	11 24       	eor	r1, r1
     544:	2f 93       	push	r18
     546:	3f 93       	push	r19
     548:	8f 93       	push	r24
     54a:	9f 93       	push	r25
     54c:	af 93       	push	r26
     54e:	bf 93       	push	r27
     550:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <timer0_millis>
     554:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <timer0_millis+0x1>
     558:	a0 91 3a 02 	lds	r26, 0x023A	; 0x80023a <timer0_millis+0x2>
     55c:	b0 91 3b 02 	lds	r27, 0x023B	; 0x80023b <timer0_millis+0x3>
     560:	30 91 37 02 	lds	r19, 0x0237	; 0x800237 <timer0_fract>
     564:	23 e0       	ldi	r18, 0x03	; 3
     566:	23 0f       	add	r18, r19
     568:	2d 37       	cpi	r18, 0x7D	; 125
     56a:	20 f4       	brcc	.+8      	; 0x574 <__vector_23+0x3a>
     56c:	01 96       	adiw	r24, 0x01	; 1
     56e:	a1 1d       	adc	r26, r1
     570:	b1 1d       	adc	r27, r1
     572:	05 c0       	rjmp	.+10     	; 0x57e <__vector_23+0x44>
     574:	26 e8       	ldi	r18, 0x86	; 134
     576:	23 0f       	add	r18, r19
     578:	02 96       	adiw	r24, 0x02	; 2
     57a:	a1 1d       	adc	r26, r1
     57c:	b1 1d       	adc	r27, r1
     57e:	20 93 37 02 	sts	0x0237, r18	; 0x800237 <timer0_fract>
     582:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <timer0_millis>
     586:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <timer0_millis+0x1>
     58a:	a0 93 3a 02 	sts	0x023A, r26	; 0x80023a <timer0_millis+0x2>
     58e:	b0 93 3b 02 	sts	0x023B, r27	; 0x80023b <timer0_millis+0x3>
     592:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <timer0_overflow_count>
     596:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <timer0_overflow_count+0x1>
     59a:	a0 91 3e 02 	lds	r26, 0x023E	; 0x80023e <timer0_overflow_count+0x2>
     59e:	b0 91 3f 02 	lds	r27, 0x023F	; 0x80023f <timer0_overflow_count+0x3>
     5a2:	01 96       	adiw	r24, 0x01	; 1
     5a4:	a1 1d       	adc	r26, r1
     5a6:	b1 1d       	adc	r27, r1
     5a8:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <timer0_overflow_count>
     5ac:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <timer0_overflow_count+0x1>
     5b0:	a0 93 3e 02 	sts	0x023E, r26	; 0x80023e <timer0_overflow_count+0x2>
     5b4:	b0 93 3f 02 	sts	0x023F, r27	; 0x80023f <timer0_overflow_count+0x3>
     5b8:	bf 91       	pop	r27
     5ba:	af 91       	pop	r26
     5bc:	9f 91       	pop	r25
     5be:	8f 91       	pop	r24
     5c0:	3f 91       	pop	r19
     5c2:	2f 91       	pop	r18
     5c4:	0f 90       	pop	r0
     5c6:	0f be       	out	0x3f, r0	; 63
     5c8:	0f 90       	pop	r0
     5ca:	1f 90       	pop	r1
     5cc:	18 95       	reti

000005ce <millis>:
     5ce:	2f b7       	in	r18, 0x3f	; 63
     5d0:	f8 94       	cli
     5d2:	60 91 38 02 	lds	r22, 0x0238	; 0x800238 <timer0_millis>
     5d6:	70 91 39 02 	lds	r23, 0x0239	; 0x800239 <timer0_millis+0x1>
     5da:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <timer0_millis+0x2>
     5de:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <timer0_millis+0x3>
     5e2:	2f bf       	out	0x3f, r18	; 63
     5e4:	08 95       	ret

000005e6 <micros>:
     5e6:	3f b7       	in	r19, 0x3f	; 63
     5e8:	f8 94       	cli
     5ea:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <timer0_overflow_count>
     5ee:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <timer0_overflow_count+0x1>
     5f2:	a0 91 3e 02 	lds	r26, 0x023E	; 0x80023e <timer0_overflow_count+0x2>
     5f6:	b0 91 3f 02 	lds	r27, 0x023F	; 0x80023f <timer0_overflow_count+0x3>
     5fa:	26 b5       	in	r18, 0x26	; 38
     5fc:	a8 9b       	sbis	0x15, 0	; 21
     5fe:	05 c0       	rjmp	.+10     	; 0x60a <micros+0x24>
     600:	2f 3f       	cpi	r18, 0xFF	; 255
     602:	19 f0       	breq	.+6      	; 0x60a <micros+0x24>
     604:	01 96       	adiw	r24, 0x01	; 1
     606:	a1 1d       	adc	r26, r1
     608:	b1 1d       	adc	r27, r1
     60a:	3f bf       	out	0x3f, r19	; 63
     60c:	ba 2f       	mov	r27, r26
     60e:	a9 2f       	mov	r26, r25
     610:	98 2f       	mov	r25, r24
     612:	88 27       	eor	r24, r24
     614:	82 0f       	add	r24, r18
     616:	91 1d       	adc	r25, r1
     618:	a1 1d       	adc	r26, r1
     61a:	b1 1d       	adc	r27, r1
     61c:	bc 01       	movw	r22, r24
     61e:	cd 01       	movw	r24, r26
     620:	42 e0       	ldi	r20, 0x02	; 2
     622:	66 0f       	add	r22, r22
     624:	77 1f       	adc	r23, r23
     626:	88 1f       	adc	r24, r24
     628:	99 1f       	adc	r25, r25
     62a:	4a 95       	dec	r20
     62c:	d1 f7       	brne	.-12     	; 0x622 <micros+0x3c>
     62e:	08 95       	ret

00000630 <delay>:
     630:	8f 92       	push	r8
     632:	9f 92       	push	r9
     634:	af 92       	push	r10
     636:	bf 92       	push	r11
     638:	cf 92       	push	r12
     63a:	df 92       	push	r13
     63c:	ef 92       	push	r14
     63e:	ff 92       	push	r15
     640:	6b 01       	movw	r12, r22
     642:	7c 01       	movw	r14, r24
     644:	d0 df       	rcall	.-96     	; 0x5e6 <micros>
     646:	4b 01       	movw	r8, r22
     648:	5c 01       	movw	r10, r24
     64a:	c1 14       	cp	r12, r1
     64c:	d1 04       	cpc	r13, r1
     64e:	e1 04       	cpc	r14, r1
     650:	f1 04       	cpc	r15, r1
     652:	f1 f0       	breq	.+60     	; 0x690 <delay+0x60>
     654:	9b d5       	rcall	.+2870   	; 0x118c <yield>
     656:	c7 df       	rcall	.-114    	; 0x5e6 <micros>
     658:	dc 01       	movw	r26, r24
     65a:	cb 01       	movw	r24, r22
     65c:	88 19       	sub	r24, r8
     65e:	99 09       	sbc	r25, r9
     660:	aa 09       	sbc	r26, r10
     662:	bb 09       	sbc	r27, r11
     664:	88 3e       	cpi	r24, 0xE8	; 232
     666:	93 40       	sbci	r25, 0x03	; 3
     668:	a1 05       	cpc	r26, r1
     66a:	b1 05       	cpc	r27, r1
     66c:	70 f3       	brcs	.-36     	; 0x64a <delay+0x1a>
     66e:	21 e0       	ldi	r18, 0x01	; 1
     670:	c2 1a       	sub	r12, r18
     672:	d1 08       	sbc	r13, r1
     674:	e1 08       	sbc	r14, r1
     676:	f1 08       	sbc	r15, r1
     678:	88 ee       	ldi	r24, 0xE8	; 232
     67a:	88 0e       	add	r8, r24
     67c:	83 e0       	ldi	r24, 0x03	; 3
     67e:	98 1e       	adc	r9, r24
     680:	a1 1c       	adc	r10, r1
     682:	b1 1c       	adc	r11, r1
     684:	c1 14       	cp	r12, r1
     686:	d1 04       	cpc	r13, r1
     688:	e1 04       	cpc	r14, r1
     68a:	f1 04       	cpc	r15, r1
     68c:	21 f7       	brne	.-56     	; 0x656 <delay+0x26>
     68e:	dd cf       	rjmp	.-70     	; 0x64a <delay+0x1a>
     690:	ff 90       	pop	r15
     692:	ef 90       	pop	r14
     694:	df 90       	pop	r13
     696:	cf 90       	pop	r12
     698:	bf 90       	pop	r11
     69a:	af 90       	pop	r10
     69c:	9f 90       	pop	r9
     69e:	8f 90       	pop	r8
     6a0:	08 95       	ret

000006a2 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     6a2:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     6a4:	84 b5       	in	r24, 0x24	; 36
     6a6:	82 60       	ori	r24, 0x02	; 2
     6a8:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     6aa:	84 b5       	in	r24, 0x24	; 36
     6ac:	81 60       	ori	r24, 0x01	; 1
     6ae:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     6b0:	85 b5       	in	r24, 0x25	; 37
     6b2:	82 60       	ori	r24, 0x02	; 2
     6b4:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     6b6:	85 b5       	in	r24, 0x25	; 37
     6b8:	81 60       	ori	r24, 0x01	; 1
     6ba:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     6bc:	ee e6       	ldi	r30, 0x6E	; 110
     6be:	f0 e0       	ldi	r31, 0x00	; 0
     6c0:	80 81       	ld	r24, Z
     6c2:	81 60       	ori	r24, 0x01	; 1
     6c4:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     6c6:	e1 e8       	ldi	r30, 0x81	; 129
     6c8:	f0 e0       	ldi	r31, 0x00	; 0
     6ca:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     6cc:	80 81       	ld	r24, Z
     6ce:	82 60       	ori	r24, 0x02	; 2
     6d0:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     6d2:	80 81       	ld	r24, Z
     6d4:	81 60       	ori	r24, 0x01	; 1
     6d6:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     6d8:	e0 e8       	ldi	r30, 0x80	; 128
     6da:	f0 e0       	ldi	r31, 0x00	; 0
     6dc:	80 81       	ld	r24, Z
     6de:	81 60       	ori	r24, 0x01	; 1
     6e0:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     6e2:	e1 eb       	ldi	r30, 0xB1	; 177
     6e4:	f0 e0       	ldi	r31, 0x00	; 0
     6e6:	80 81       	ld	r24, Z
     6e8:	84 60       	ori	r24, 0x04	; 4
     6ea:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     6ec:	e0 eb       	ldi	r30, 0xB0	; 176
     6ee:	f0 e0       	ldi	r31, 0x00	; 0
     6f0:	80 81       	ld	r24, Z
     6f2:	81 60       	ori	r24, 0x01	; 1
     6f4:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
     6f6:	e1 e9       	ldi	r30, 0x91	; 145
     6f8:	f0 e0       	ldi	r31, 0x00	; 0
     6fa:	80 81       	ld	r24, Z
     6fc:	82 60       	ori	r24, 0x02	; 2
     6fe:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
     700:	80 81       	ld	r24, Z
     702:	81 60       	ori	r24, 0x01	; 1
     704:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
     706:	e0 e9       	ldi	r30, 0x90	; 144
     708:	f0 e0       	ldi	r31, 0x00	; 0
     70a:	80 81       	ld	r24, Z
     70c:	81 60       	ori	r24, 0x01	; 1
     70e:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
     710:	e1 ea       	ldi	r30, 0xA1	; 161
     712:	f0 e0       	ldi	r31, 0x00	; 0
     714:	80 81       	ld	r24, Z
     716:	82 60       	ori	r24, 0x02	; 2
     718:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
     71a:	80 81       	ld	r24, Z
     71c:	81 60       	ori	r24, 0x01	; 1
     71e:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
     720:	e0 ea       	ldi	r30, 0xA0	; 160
     722:	f0 e0       	ldi	r31, 0x00	; 0
     724:	80 81       	ld	r24, Z
     726:	81 60       	ori	r24, 0x01	; 1
     728:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
     72a:	e1 e2       	ldi	r30, 0x21	; 33
     72c:	f1 e0       	ldi	r31, 0x01	; 1
     72e:	80 81       	ld	r24, Z
     730:	82 60       	ori	r24, 0x02	; 2
     732:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
     734:	80 81       	ld	r24, Z
     736:	81 60       	ori	r24, 0x01	; 1
     738:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
     73a:	e0 e2       	ldi	r30, 0x20	; 32
     73c:	f1 e0       	ldi	r31, 0x01	; 1
     73e:	80 81       	ld	r24, Z
     740:	81 60       	ori	r24, 0x01	; 1
     742:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     744:	ea e7       	ldi	r30, 0x7A	; 122
     746:	f0 e0       	ldi	r31, 0x00	; 0
     748:	80 81       	ld	r24, Z
     74a:	84 60       	ori	r24, 0x04	; 4
     74c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     74e:	80 81       	ld	r24, Z
     750:	82 60       	ori	r24, 0x02	; 2
     752:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     754:	80 81       	ld	r24, Z
     756:	81 60       	ori	r24, 0x01	; 1
     758:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     75a:	80 81       	ld	r24, Z
     75c:	80 68       	ori	r24, 0x80	; 128
     75e:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     760:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
     764:	08 95       	ret

00000766 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	fc 01       	movw	r30, r24
     76a:	31 97       	sbiw	r30, 0x01	; 1
     76c:	e2 31       	cpi	r30, 0x12	; 18
     76e:	f1 05       	cpc	r31, r1
     770:	08 f0       	brcs	.+2      	; 0x774 <turnOffPWM+0xe>
     772:	4d c0       	rjmp	.+154    	; 0x80e <turnOffPWM+0xa8>
     774:	88 27       	eor	r24, r24
     776:	ee 58       	subi	r30, 0x8E	; 142
     778:	ff 4f       	sbci	r31, 0xFF	; 255
     77a:	8f 4f       	sbci	r24, 0xFF	; 255
     77c:	08 c5       	rjmp	.+2576   	; 0x118e <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     77e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
     782:	8f 77       	andi	r24, 0x7F	; 127
     784:	03 c0       	rjmp	.+6      	; 0x78c <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     786:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
     78a:	8f 7d       	andi	r24, 0xDF	; 223
     78c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
     790:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
     792:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
     796:	87 7f       	andi	r24, 0xF7	; 247
     798:	f9 cf       	rjmp	.-14     	; 0x78c <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     79a:	84 b5       	in	r24, 0x24	; 36
     79c:	8f 77       	andi	r24, 0x7F	; 127
     79e:	02 c0       	rjmp	.+4      	; 0x7a4 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     7a0:	84 b5       	in	r24, 0x24	; 36
     7a2:	8f 7d       	andi	r24, 0xDF	; 223
     7a4:	84 bd       	out	0x24, r24	; 36
     7a6:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     7a8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
     7ac:	8f 77       	andi	r24, 0x7F	; 127
     7ae:	03 c0       	rjmp	.+6      	; 0x7b6 <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     7b0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
     7b4:	8f 7d       	andi	r24, 0xDF	; 223
     7b6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
     7ba:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
     7bc:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
     7c0:	8f 77       	andi	r24, 0x7F	; 127
     7c2:	07 c0       	rjmp	.+14     	; 0x7d2 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
     7c4:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
     7c8:	8f 7d       	andi	r24, 0xDF	; 223
     7ca:	03 c0       	rjmp	.+6      	; 0x7d2 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
     7cc:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
     7d0:	87 7f       	andi	r24, 0xF7	; 247
     7d2:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
     7d6:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
     7d8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
     7dc:	8f 77       	andi	r24, 0x7F	; 127
     7de:	07 c0       	rjmp	.+14     	; 0x7ee <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
     7e0:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
     7e4:	8f 7d       	andi	r24, 0xDF	; 223
     7e6:	03 c0       	rjmp	.+6      	; 0x7ee <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
     7e8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
     7ec:	87 7f       	andi	r24, 0xF7	; 247
     7ee:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
     7f2:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
     7f4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
     7f8:	8f 77       	andi	r24, 0x7F	; 127
     7fa:	07 c0       	rjmp	.+14     	; 0x80a <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
     7fc:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
     800:	8f 7d       	andi	r24, 0xDF	; 223
     802:	03 c0       	rjmp	.+6      	; 0x80a <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
     804:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
     808:	87 7f       	andi	r24, 0xF7	; 247
     80a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
     80e:	08 95       	ret

00000810 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     810:	cf 93       	push	r28
     812:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	fc 01       	movw	r30, r24
     818:	ea 55       	subi	r30, 0x5A	; 90
     81a:	fe 4f       	sbci	r31, 0xFE	; 254
     81c:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     81e:	fc 01       	movw	r30, r24
     820:	e4 51       	subi	r30, 0x14	; 20
     822:	fe 4f       	sbci	r31, 0xFE	; 254
     824:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     826:	88 23       	and	r24, r24
     828:	61 f1       	breq	.+88     	; 0x882 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	88 0f       	add	r24, r24
     82e:	99 1f       	adc	r25, r25
     830:	fc 01       	movw	r30, r24
     832:	e4 5b       	subi	r30, 0xB4	; 180
     834:	fd 4f       	sbci	r31, 0xFD	; 253
     836:	c5 91       	lpm	r28, Z+
     838:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
     83a:	fc 01       	movw	r30, r24
     83c:	ee 5c       	subi	r30, 0xCE	; 206
     83e:	fd 4f       	sbci	r31, 0xFD	; 253
     840:	a5 91       	lpm	r26, Z+
     842:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
     844:	61 11       	cpse	r22, r1
     846:	09 c0       	rjmp	.+18     	; 0x85a <pinMode+0x4a>
		uint8_t oldSREG = SREG;
     848:	9f b7       	in	r25, 0x3f	; 63
                cli();
     84a:	f8 94       	cli
		*reg &= ~bit;
     84c:	88 81       	ld	r24, Y
     84e:	20 95       	com	r18
     850:	82 23       	and	r24, r18
     852:	88 83       	st	Y, r24
		*out &= ~bit;
     854:	ec 91       	ld	r30, X
     856:	2e 23       	and	r18, r30
     858:	0b c0       	rjmp	.+22     	; 0x870 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     85a:	62 30       	cpi	r22, 0x02	; 2
     85c:	61 f4       	brne	.+24     	; 0x876 <pinMode+0x66>
		uint8_t oldSREG = SREG;
     85e:	9f b7       	in	r25, 0x3f	; 63
                cli();
     860:	f8 94       	cli
		*reg &= ~bit;
     862:	88 81       	ld	r24, Y
     864:	32 2f       	mov	r19, r18
     866:	30 95       	com	r19
     868:	83 23       	and	r24, r19
     86a:	88 83       	st	Y, r24
		*out |= bit;
     86c:	ec 91       	ld	r30, X
     86e:	2e 2b       	or	r18, r30
     870:	2c 93       	st	X, r18
		SREG = oldSREG;
     872:	9f bf       	out	0x3f, r25	; 63
     874:	06 c0       	rjmp	.+12     	; 0x882 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
     876:	8f b7       	in	r24, 0x3f	; 63
                cli();
     878:	f8 94       	cli
		*reg |= bit;
     87a:	e8 81       	ld	r30, Y
     87c:	2e 2b       	or	r18, r30
     87e:	28 83       	st	Y, r18
		SREG = oldSREG;
     880:	8f bf       	out	0x3f, r24	; 63
	}
}
     882:	df 91       	pop	r29
     884:	cf 91       	pop	r28
     886:	08 95       	ret

00000888 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     888:	1f 93       	push	r17
     88a:	cf 93       	push	r28
     88c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     88e:	28 2f       	mov	r18, r24
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	f9 01       	movw	r30, r18
     894:	e0 5a       	subi	r30, 0xA0	; 160
     896:	fe 4f       	sbci	r31, 0xFE	; 254
     898:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     89a:	f9 01       	movw	r30, r18
     89c:	ea 55       	subi	r30, 0x5A	; 90
     89e:	fe 4f       	sbci	r31, 0xFE	; 254
     8a0:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     8a2:	f9 01       	movw	r30, r18
     8a4:	e4 51       	subi	r30, 0x14	; 20
     8a6:	fe 4f       	sbci	r31, 0xFE	; 254
     8a8:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     8aa:	cc 23       	and	r28, r28
     8ac:	b9 f0       	breq	.+46     	; 0x8dc <digitalWrite+0x54>
     8ae:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     8b0:	81 11       	cpse	r24, r1
     8b2:	59 df       	rcall	.-334    	; 0x766 <turnOffPWM>

	out = portOutputRegister(port);
     8b4:	ec 2f       	mov	r30, r28
     8b6:	f0 e0       	ldi	r31, 0x00	; 0
     8b8:	ee 0f       	add	r30, r30
     8ba:	ff 1f       	adc	r31, r31
     8bc:	ee 5c       	subi	r30, 0xCE	; 206
     8be:	fd 4f       	sbci	r31, 0xFD	; 253
     8c0:	a5 91       	lpm	r26, Z+
     8c2:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     8c4:	9f b7       	in	r25, 0x3f	; 63
	cli();
     8c6:	f8 94       	cli

	if (val == LOW) {
     8c8:	11 11       	cpse	r17, r1
     8ca:	04 c0       	rjmp	.+8      	; 0x8d4 <digitalWrite+0x4c>
		*out &= ~bit;
     8cc:	8c 91       	ld	r24, X
     8ce:	d0 95       	com	r29
     8d0:	d8 23       	and	r29, r24
     8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <digitalWrite+0x50>
	} else {
		*out |= bit;
     8d4:	ec 91       	ld	r30, X
     8d6:	de 2b       	or	r29, r30
     8d8:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
     8da:	9f bf       	out	0x3f, r25	; 63
}
     8dc:	df 91       	pop	r29
     8de:	cf 91       	pop	r28
     8e0:	1f 91       	pop	r17
     8e2:	08 95       	ret

000008e4 <_ZN8SPIClass8transferEh>:
            return sendMessage(txBuffers[i], frame);
        }
    }

    return ERROR_ALLTXBUSY;
}
     8e4:	8e bd       	out	0x2e, r24	; 46
     8e6:	00 00       	nop
     8e8:	0d b4       	in	r0, 0x2d	; 45
     8ea:	07 fe       	sbrs	r0, 7
     8ec:	fd cf       	rjmp	.-6      	; 0x8e8 <_ZN8SPIClass8transferEh+0x4>
     8ee:	8e b5       	in	r24, 0x2e	; 46
     8f0:	08 95       	ret

000008f2 <_ZN7MCP25158startSPIEv>:
     8f2:	fc 01       	movw	r30, r24
     8f4:	41 81       	ldd	r20, Z+1	; 0x01
     8f6:	52 81       	ldd	r21, Z+2	; 0x02
     8f8:	63 81       	ldd	r22, Z+3	; 0x03
     8fa:	74 81       	ldd	r23, Z+4	; 0x04
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	92 e1       	ldi	r25, 0x12	; 18
     900:	aa e7       	ldi	r26, 0x7A	; 122
     902:	b0 e0       	ldi	r27, 0x00	; 0
     904:	20 e0       	ldi	r18, 0x00	; 0
     906:	48 17       	cp	r20, r24
     908:	59 07       	cpc	r21, r25
     90a:	6a 07       	cpc	r22, r26
     90c:	7b 07       	cpc	r23, r27
     90e:	40 f4       	brcc	.+16     	; 0x920 <_ZN7MCP25158startSPIEv+0x2e>
     910:	b6 95       	lsr	r27
     912:	a7 95       	ror	r26
     914:	97 95       	ror	r25
     916:	87 95       	ror	r24
     918:	2f 5f       	subi	r18, 0xFF	; 255
     91a:	26 30       	cpi	r18, 0x06	; 6
     91c:	a1 f7       	brne	.-24     	; 0x906 <_ZN7MCP25158startSPIEv+0x14>
     91e:	27 e0       	ldi	r18, 0x07	; 7
     920:	91 e0       	ldi	r25, 0x01	; 1
     922:	92 27       	eor	r25, r18
     924:	29 2f       	mov	r18, r25
     926:	20 6a       	ori	r18, 0xA0	; 160
     928:	26 95       	lsr	r18
     92a:	91 70       	andi	r25, 0x01	; 1
     92c:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <_ZN8SPIClass13interruptModeE>
     930:	88 23       	and	r24, r24
     932:	99 f0       	breq	.+38     	; 0x95a <_ZN7MCP25158startSPIEv+0x68>
     934:	8f b7       	in	r24, 0x3f	; 63
     936:	f8 94       	cli
     938:	30 91 42 02 	lds	r19, 0x0242	; 0x800242 <_ZN8SPIClass13interruptModeE>
     93c:	31 30       	cpi	r19, 0x01	; 1
     93e:	59 f4       	brne	.+22     	; 0x956 <_ZN7MCP25158startSPIEv+0x64>
     940:	3d b3       	in	r19, 0x1d	; 29
     942:	30 93 40 02 	sts	0x0240, r19	; 0x800240 <_ZN8SPIClass13interruptSaveE>
     946:	4d b3       	in	r20, 0x1d	; 29
     948:	30 91 41 02 	lds	r19, 0x0241	; 0x800241 <_ZN8SPIClass13interruptMaskE>
     94c:	30 95       	com	r19
     94e:	34 23       	and	r19, r20
     950:	3d bb       	out	0x1d, r19	; 29
     952:	8f bf       	out	0x3f, r24	; 63
     954:	02 c0       	rjmp	.+4      	; 0x95a <_ZN7MCP25158startSPIEv+0x68>
     956:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <_ZN8SPIClass13interruptSaveE>
     95a:	2c bd       	out	0x2c, r18	; 44
     95c:	9d bd       	out	0x2d, r25	; 45
     95e:	60 e0       	ldi	r22, 0x00	; 0
     960:	80 81       	ld	r24, Z
     962:	92 cf       	rjmp	.-220    	; 0x888 <digitalWrite>

00000964 <_ZN7MCP25156endSPIEv>:
     964:	61 e0       	ldi	r22, 0x01	; 1
     966:	fc 01       	movw	r30, r24
     968:	80 81       	ld	r24, Z
     96a:	8e df       	rcall	.-228    	; 0x888 <digitalWrite>
     96c:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <_ZN8SPIClass13interruptModeE>
     970:	88 23       	and	r24, r24
     972:	61 f0       	breq	.+24     	; 0x98c <_ZN7MCP25156endSPIEv+0x28>
     974:	9f b7       	in	r25, 0x3f	; 63
     976:	f8 94       	cli
     978:	20 91 42 02 	lds	r18, 0x0242	; 0x800242 <_ZN8SPIClass13interruptModeE>
     97c:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <_ZN8SPIClass13interruptSaveE>
     980:	21 30       	cpi	r18, 0x01	; 1
     982:	19 f4       	brne	.+6      	; 0x98a <_ZN7MCP25156endSPIEv+0x26>
     984:	8d bb       	out	0x1d, r24	; 29
     986:	9f bf       	out	0x3f, r25	; 63
     988:	08 95       	ret
     98a:	8f bf       	out	0x3f, r24	; 63
     98c:	08 95       	ret

0000098e <_ZN7MCP2515C1EhmP8SPIClass>:
     98e:	8f 92       	push	r8
     990:	9f 92       	push	r9
     992:	af 92       	push	r10
     994:	bf 92       	push	r11
     996:	ff 92       	push	r15
     998:	0f 93       	push	r16
     99a:	1f 93       	push	r17
     99c:	cf 93       	push	r28
     99e:	df 93       	push	r29
     9a0:	ec 01       	movw	r28, r24
     9a2:	f6 2e       	mov	r15, r22
     9a4:	49 01       	movw	r8, r18
     9a6:	5a 01       	movw	r10, r20
     9a8:	01 15       	cp	r16, r1
     9aa:	11 05       	cpc	r17, r1
     9ac:	19 f0       	breq	.+6      	; 0x9b4 <_ZN7MCP2515C1EhmP8SPIClass+0x26>
     9ae:	1e 83       	std	Y+6, r17	; 0x06
     9b0:	0d 83       	std	Y+5, r16	; 0x05
     9b2:	05 c0       	rjmp	.+10     	; 0x9be <_ZN7MCP2515C1EhmP8SPIClass+0x30>
     9b4:	84 e4       	ldi	r24, 0x44	; 68
     9b6:	92 e0       	ldi	r25, 0x02	; 2
     9b8:	9e 83       	std	Y+6, r25	; 0x06
     9ba:	8d 83       	std	Y+5, r24	; 0x05
     9bc:	b5 d3       	rcall	.+1898   	; 0x1128 <_ZN8SPIClass5beginEv>
     9be:	f8 82       	st	Y, r15
     9c0:	89 82       	std	Y+1, r8	; 0x01
     9c2:	9a 82       	std	Y+2, r9	; 0x02
     9c4:	ab 82       	std	Y+3, r10	; 0x03
     9c6:	bc 82       	std	Y+4, r11	; 0x04
     9c8:	61 e0       	ldi	r22, 0x01	; 1
     9ca:	8f 2d       	mov	r24, r15
     9cc:	21 df       	rcall	.-446    	; 0x810 <pinMode>
     9ce:	ce 01       	movw	r24, r28
     9d0:	df 91       	pop	r29
     9d2:	cf 91       	pop	r28
     9d4:	1f 91       	pop	r17
     9d6:	0f 91       	pop	r16
     9d8:	ff 90       	pop	r15
     9da:	bf 90       	pop	r11
     9dc:	af 90       	pop	r10
     9de:	9f 90       	pop	r9
     9e0:	8f 90       	pop	r8
     9e2:	c0 cf       	rjmp	.-128    	; 0x964 <_ZN7MCP25156endSPIEv>

000009e4 <_ZN7MCP251512readRegisterENS_8REGISTERE>:
     9e4:	1f 93       	push	r17
     9e6:	cf 93       	push	r28
     9e8:	df 93       	push	r29
     9ea:	ec 01       	movw	r28, r24
     9ec:	16 2f       	mov	r17, r22
     9ee:	81 df       	rcall	.-254    	; 0x8f2 <_ZN7MCP25158startSPIEv>
     9f0:	83 e0       	ldi	r24, 0x03	; 3
     9f2:	78 df       	rcall	.-272    	; 0x8e4 <_ZN8SPIClass8transferEh>
     9f4:	81 2f       	mov	r24, r17
     9f6:	76 df       	rcall	.-276    	; 0x8e4 <_ZN8SPIClass8transferEh>
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	74 df       	rcall	.-280    	; 0x8e4 <_ZN8SPIClass8transferEh>
     9fc:	18 2f       	mov	r17, r24
     9fe:	ce 01       	movw	r24, r28
     a00:	b1 df       	rcall	.-158    	; 0x964 <_ZN7MCP25156endSPIEv>
     a02:	81 2f       	mov	r24, r17
     a04:	df 91       	pop	r29
     a06:	cf 91       	pop	r28
     a08:	1f 91       	pop	r17
     a0a:	08 95       	ret

00000a0c <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>:
     a0c:	df 92       	push	r13
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	cf 93       	push	r28
     a18:	df 93       	push	r29
     a1a:	8c 01       	movw	r16, r24
     a1c:	c6 2f       	mov	r28, r22
     a1e:	d4 2e       	mov	r13, r20
     a20:	e5 2e       	mov	r14, r21
     a22:	f2 2e       	mov	r15, r18
     a24:	66 df       	rcall	.-308    	; 0x8f2 <_ZN7MCP25158startSPIEv>
     a26:	83 e0       	ldi	r24, 0x03	; 3
     a28:	5d df       	rcall	.-326    	; 0x8e4 <_ZN8SPIClass8transferEh>
     a2a:	8c 2f       	mov	r24, r28
     a2c:	5b df       	rcall	.-330    	; 0x8e4 <_ZN8SPIClass8transferEh>
     a2e:	cd 2d       	mov	r28, r13
     a30:	de 2d       	mov	r29, r14
     a32:	ce 01       	movw	r24, r28
     a34:	8f 0d       	add	r24, r15
     a36:	91 1d       	adc	r25, r1
     a38:	7c 01       	movw	r14, r24
     a3a:	ce 15       	cp	r28, r14
     a3c:	df 05       	cpc	r29, r15
     a3e:	21 f0       	breq	.+8      	; 0xa48 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh+0x3c>
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	50 df       	rcall	.-352    	; 0x8e4 <_ZN8SPIClass8transferEh>
     a44:	89 93       	st	Y+, r24
     a46:	f9 cf       	rjmp	.-14     	; 0xa3a <_ZN7MCP251513readRegistersENS_8REGISTEREPhh+0x2e>
     a48:	c8 01       	movw	r24, r16
     a4a:	df 91       	pop	r29
     a4c:	cf 91       	pop	r28
     a4e:	1f 91       	pop	r17
     a50:	0f 91       	pop	r16
     a52:	ff 90       	pop	r15
     a54:	ef 90       	pop	r14
     a56:	df 90       	pop	r13
     a58:	85 cf       	rjmp	.-246    	; 0x964 <_ZN7MCP25156endSPIEv>

00000a5a <_ZN7MCP251511setRegisterENS_8REGISTEREh>:
     a5a:	0f 93       	push	r16
     a5c:	1f 93       	push	r17
     a5e:	cf 93       	push	r28
     a60:	df 93       	push	r29
     a62:	ec 01       	movw	r28, r24
     a64:	06 2f       	mov	r16, r22
     a66:	14 2f       	mov	r17, r20
     a68:	44 df       	rcall	.-376    	; 0x8f2 <_ZN7MCP25158startSPIEv>
     a6a:	82 e0       	ldi	r24, 0x02	; 2
     a6c:	3b df       	rcall	.-394    	; 0x8e4 <_ZN8SPIClass8transferEh>
     a6e:	80 2f       	mov	r24, r16
     a70:	39 df       	rcall	.-398    	; 0x8e4 <_ZN8SPIClass8transferEh>
     a72:	81 2f       	mov	r24, r17
     a74:	37 df       	rcall	.-402    	; 0x8e4 <_ZN8SPIClass8transferEh>
     a76:	ce 01       	movw	r24, r28
     a78:	df 91       	pop	r29
     a7a:	cf 91       	pop	r28
     a7c:	1f 91       	pop	r17
     a7e:	0f 91       	pop	r16
     a80:	71 cf       	rjmp	.-286    	; 0x964 <_ZN7MCP25156endSPIEv>

00000a82 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>:
     a82:	df 92       	push	r13
     a84:	ef 92       	push	r14
     a86:	ff 92       	push	r15
     a88:	0f 93       	push	r16
     a8a:	1f 93       	push	r17
     a8c:	cf 93       	push	r28
     a8e:	df 93       	push	r29
     a90:	8c 01       	movw	r16, r24
     a92:	c6 2f       	mov	r28, r22
     a94:	d4 2e       	mov	r13, r20
     a96:	e5 2e       	mov	r14, r21
     a98:	f2 2e       	mov	r15, r18
     a9a:	2b df       	rcall	.-426    	; 0x8f2 <_ZN7MCP25158startSPIEv>
     a9c:	82 e0       	ldi	r24, 0x02	; 2
     a9e:	22 df       	rcall	.-444    	; 0x8e4 <_ZN8SPIClass8transferEh>
     aa0:	8c 2f       	mov	r24, r28
     aa2:	20 df       	rcall	.-448    	; 0x8e4 <_ZN8SPIClass8transferEh>
     aa4:	cd 2d       	mov	r28, r13
     aa6:	de 2d       	mov	r29, r14
     aa8:	ce 01       	movw	r24, r28
     aaa:	8f 0d       	add	r24, r15
     aac:	91 1d       	adc	r25, r1
     aae:	7c 01       	movw	r14, r24
     ab0:	ce 15       	cp	r28, r14
     ab2:	df 05       	cpc	r29, r15
     ab4:	19 f0       	breq	.+6      	; 0xabc <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh+0x3a>
     ab6:	89 91       	ld	r24, Y+
     ab8:	15 df       	rcall	.-470    	; 0x8e4 <_ZN8SPIClass8transferEh>
     aba:	fa cf       	rjmp	.-12     	; 0xab0 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh+0x2e>
     abc:	c8 01       	movw	r24, r16
     abe:	df 91       	pop	r29
     ac0:	cf 91       	pop	r28
     ac2:	1f 91       	pop	r17
     ac4:	0f 91       	pop	r16
     ac6:	ff 90       	pop	r15
     ac8:	ef 90       	pop	r14
     aca:	df 90       	pop	r13
     acc:	4b cf       	rjmp	.-362    	; 0x964 <_ZN7MCP25156endSPIEv>

00000ace <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>:
     ace:	ff 92       	push	r15
     ad0:	0f 93       	push	r16
     ad2:	1f 93       	push	r17
     ad4:	cf 93       	push	r28
     ad6:	df 93       	push	r29
     ad8:	ec 01       	movw	r28, r24
     ada:	f6 2e       	mov	r15, r22
     adc:	04 2f       	mov	r16, r20
     ade:	12 2f       	mov	r17, r18
     ae0:	08 df       	rcall	.-496    	; 0x8f2 <_ZN7MCP25158startSPIEv>
     ae2:	85 e0       	ldi	r24, 0x05	; 5
     ae4:	ff de       	rcall	.-514    	; 0x8e4 <_ZN8SPIClass8transferEh>
     ae6:	8f 2d       	mov	r24, r15
     ae8:	fd de       	rcall	.-518    	; 0x8e4 <_ZN8SPIClass8transferEh>
     aea:	80 2f       	mov	r24, r16
     aec:	fb de       	rcall	.-522    	; 0x8e4 <_ZN8SPIClass8transferEh>
     aee:	81 2f       	mov	r24, r17
     af0:	f9 de       	rcall	.-526    	; 0x8e4 <_ZN8SPIClass8transferEh>
     af2:	ce 01       	movw	r24, r28
     af4:	df 91       	pop	r29
     af6:	cf 91       	pop	r28
     af8:	1f 91       	pop	r17
     afa:	0f 91       	pop	r16
     afc:	ff 90       	pop	r15
     afe:	32 cf       	rjmp	.-412    	; 0x964 <_ZN7MCP25156endSPIEv>

00000b00 <_ZN7MCP25159getStatusEv>:
     b00:	1f 93       	push	r17
     b02:	cf 93       	push	r28
     b04:	df 93       	push	r29
     b06:	ec 01       	movw	r28, r24
     b08:	f4 de       	rcall	.-536    	; 0x8f2 <_ZN7MCP25158startSPIEv>
     b0a:	80 ea       	ldi	r24, 0xA0	; 160
     b0c:	eb de       	rcall	.-554    	; 0x8e4 <_ZN8SPIClass8transferEh>
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	e9 de       	rcall	.-558    	; 0x8e4 <_ZN8SPIClass8transferEh>
     b12:	18 2f       	mov	r17, r24
     b14:	ce 01       	movw	r24, r28
     b16:	26 df       	rcall	.-436    	; 0x964 <_ZN7MCP25156endSPIEv>
     b18:	81 2f       	mov	r24, r17
     b1a:	df 91       	pop	r29
     b1c:	cf 91       	pop	r28
     b1e:	1f 91       	pop	r17
     b20:	08 95       	ret

00000b22 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>:
     b22:	cf 92       	push	r12
     b24:	df 92       	push	r13
     b26:	ef 92       	push	r14
     b28:	ff 92       	push	r15
     b2a:	1f 93       	push	r17
     b2c:	cf 93       	push	r28
     b2e:	df 93       	push	r29
     b30:	ec 01       	movw	r28, r24
     b32:	16 2f       	mov	r17, r22
     b34:	26 2f       	mov	r18, r22
     b36:	40 ee       	ldi	r20, 0xE0	; 224
     b38:	6f e0       	ldi	r22, 0x0F	; 15
     b3a:	c9 df       	rcall	.-110    	; 0xace <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
     b3c:	48 dd       	rcall	.-1392   	; 0x5ce <millis>
     b3e:	6b 01       	movw	r12, r22
     b40:	7c 01       	movw	r14, r24
     b42:	2a e0       	ldi	r18, 0x0A	; 10
     b44:	c2 0e       	add	r12, r18
     b46:	d1 1c       	adc	r13, r1
     b48:	e1 1c       	adc	r14, r1
     b4a:	f1 1c       	adc	r15, r1
     b4c:	40 dd       	rcall	.-1408   	; 0x5ce <millis>
     b4e:	6c 15       	cp	r22, r12
     b50:	7d 05       	cpc	r23, r13
     b52:	8e 05       	cpc	r24, r14
     b54:	9f 05       	cpc	r25, r15
     b56:	40 f4       	brcc	.+16     	; 0xb68 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x46>
     b58:	6e e0       	ldi	r22, 0x0E	; 14
     b5a:	ce 01       	movw	r24, r28
     b5c:	43 df       	rcall	.-378    	; 0x9e4 <_ZN7MCP251512readRegisterENS_8REGISTERE>
     b5e:	80 7e       	andi	r24, 0xE0	; 224
     b60:	18 13       	cpse	r17, r24
     b62:	f4 cf       	rjmp	.-24     	; 0xb4c <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x2a>
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	01 c0       	rjmp	.+2      	; 0xb6a <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x48>
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	91 e0       	ldi	r25, 0x01	; 1
     b6c:	89 27       	eor	r24, r25
     b6e:	df 91       	pop	r29
     b70:	cf 91       	pop	r28
     b72:	1f 91       	pop	r17
     b74:	ff 90       	pop	r15
     b76:	ef 90       	pop	r14
     b78:	df 90       	pop	r13
     b7a:	cf 90       	pop	r12
     b7c:	08 95       	ret

00000b7e <_ZN7MCP251513setConfigModeEv>:
     b7e:	60 e8       	ldi	r22, 0x80	; 128
     b80:	d0 cf       	rjmp	.-96     	; 0xb22 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>

00000b82 <_ZN7MCP251513setNormalModeEv>:
     b82:	60 e0       	ldi	r22, 0x00	; 0
     b84:	ce cf       	rjmp	.-100    	; 0xb22 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>

00000b86 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK>:
     b86:	0f 93       	push	r16
     b88:	1f 93       	push	r17
     b8a:	cf 93       	push	r28
     b8c:	df 93       	push	r29
     b8e:	8c 01       	movw	r16, r24
     b90:	c6 2f       	mov	r28, r22
     b92:	d4 2f       	mov	r29, r20
     b94:	f4 df       	rcall	.-24     	; 0xb7e <_ZN7MCP251513setConfigModeEv>
     b96:	81 11       	cpse	r24, r1
     b98:	ba c0       	rjmp	.+372    	; 0xd0e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x188>
     b9a:	d1 30       	cpi	r29, 0x01	; 1
     b9c:	b1 f1       	breq	.+108    	; 0xc0a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x84>
     b9e:	08 f4       	brcc	.+2      	; 0xba2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x1c>
     ba0:	69 c0       	rjmp	.+210    	; 0xc74 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0xee>
     ba2:	d2 30       	cpi	r29, 0x02	; 2
     ba4:	09 f0       	breq	.+2      	; 0xba8 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x22>
     ba6:	96 c0       	rjmp	.+300    	; 0xcd4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x14e>
     ba8:	8c 2f       	mov	r24, r28
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	80 31       	cpi	r24, 0x10	; 16
     bae:	91 05       	cpc	r25, r1
     bb0:	08 f0       	brcs	.+2      	; 0xbb4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x2e>
     bb2:	90 c0       	rjmp	.+288    	; 0xcd4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x14e>
     bb4:	fc 01       	movw	r30, r24
     bb6:	88 27       	eor	r24, r24
     bb8:	ec 57       	subi	r30, 0x7C	; 124
     bba:	ff 4f       	sbci	r31, 0xFF	; 255
     bbc:	8f 4f       	sbci	r24, 0xFF	; 255
     bbe:	e7 c2       	rjmp	.+1486   	; 0x118e <__tablejump2__>
     bc0:	c7 e8       	ldi	r28, 0x87	; 135
     bc2:	df eb       	ldi	r29, 0xBF	; 191
     bc4:	33 c0       	rjmp	.+102    	; 0xc2c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0xa6>
     bc6:	c4 e8       	ldi	r28, 0x84	; 132
     bc8:	d4 ea       	ldi	r29, 0xA4	; 164
     bca:	8c c0       	rjmp	.+280    	; 0xce4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15e>
     bcc:	c5 e8       	ldi	r28, 0x85	; 133
     bce:	d2 ee       	ldi	r29, 0xE2	; 226
     bd0:	47 e4       	ldi	r20, 0x47	; 71
     bd2:	91 c0       	rjmp	.+290    	; 0xcf6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
     bd4:	c7 e8       	ldi	r28, 0x87	; 135
     bd6:	df eb       	ldi	r29, 0xBF	; 191
     bd8:	6c c0       	rjmp	.+216    	; 0xcb2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x12c>
     bda:	c6 e8       	ldi	r28, 0x86	; 134
     bdc:	d4 eb       	ldi	r29, 0xB4	; 180
     bde:	69 c0       	rjmp	.+210    	; 0xcb2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x12c>
     be0:	c7 e8       	ldi	r28, 0x87	; 135
     be2:	df eb       	ldi	r29, 0xBF	; 191
     be4:	6a c0       	rjmp	.+212    	; 0xcba <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x134>
     be6:	c6 e8       	ldi	r28, 0x86	; 134
     be8:	d4 eb       	ldi	r29, 0xB4	; 180
     bea:	67 c0       	rjmp	.+206    	; 0xcba <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x134>
     bec:	c5 e8       	ldi	r28, 0x85	; 133
     bee:	d1 eb       	ldi	r29, 0xB1	; 177
     bf0:	64 c0       	rjmp	.+200    	; 0xcba <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x134>
     bf2:	c6 e8       	ldi	r28, 0x86	; 134
     bf4:	d4 eb       	ldi	r29, 0xB4	; 180
     bf6:	69 c0       	rjmp	.+210    	; 0xcca <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x144>
     bf8:	c5 e8       	ldi	r28, 0x85	; 133
     bfa:	d1 eb       	ldi	r29, 0xB1	; 177
     bfc:	66 c0       	rjmp	.+204    	; 0xcca <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x144>
     bfe:	c2 e8       	ldi	r28, 0x82	; 130
     c00:	d0 e9       	ldi	r29, 0x90	; 144
     c02:	63 c0       	rjmp	.+198    	; 0xcca <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x144>
     c04:	c0 e8       	ldi	r28, 0x80	; 128
     c06:	d0 e8       	ldi	r29, 0x80	; 128
     c08:	60 c0       	rjmp	.+192    	; 0xcca <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x144>
     c0a:	8c 2f       	mov	r24, r28
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	80 31       	cpi	r24, 0x10	; 16
     c10:	91 05       	cpc	r25, r1
     c12:	08 f0       	brcs	.+2      	; 0xc16 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x90>
     c14:	5f c0       	rjmp	.+190    	; 0xcd4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x14e>
     c16:	fc 01       	movw	r30, r24
     c18:	88 27       	eor	r24, r24
     c1a:	ec 56       	subi	r30, 0x6C	; 108
     c1c:	ff 4f       	sbci	r31, 0xFF	; 255
     c1e:	8f 4f       	sbci	r24, 0xFF	; 255
     c20:	b6 c2       	rjmp	.+1388   	; 0x118e <__tablejump2__>
     c22:	c7 e8       	ldi	r28, 0x87	; 135
     c24:	df ef       	ldi	r29, 0xFF	; 255
     c26:	5a c0       	rjmp	.+180    	; 0xcdc <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x156>
     c28:	c7 e8       	ldi	r28, 0x87	; 135
     c2a:	df ef       	ldi	r29, 0xFF	; 255
     c2c:	4f e0       	ldi	r20, 0x0F	; 15
     c2e:	63 c0       	rjmp	.+198    	; 0xcf6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
     c30:	c5 e8       	ldi	r28, 0x85	; 133
     c32:	d1 ef       	ldi	r29, 0xF1	; 241
     c34:	4e e4       	ldi	r20, 0x4E	; 78
     c36:	5f c0       	rjmp	.+190    	; 0xcf6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
     c38:	c7 e8       	ldi	r28, 0x87	; 135
     c3a:	df ef       	ldi	r29, 0xFF	; 255
     c3c:	53 c0       	rjmp	.+166    	; 0xce4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15e>
     c3e:	c7 e8       	ldi	r28, 0x87	; 135
     c40:	da ef       	ldi	r29, 0xFA	; 250
     c42:	50 c0       	rjmp	.+160    	; 0xce4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15e>
     c44:	c7 e8       	ldi	r28, 0x87	; 135
     c46:	df ef       	ldi	r29, 0xFF	; 255
     c48:	34 c0       	rjmp	.+104    	; 0xcb2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x12c>
     c4a:	c7 e0       	ldi	r28, 0x07	; 7
     c4c:	de eb       	ldi	r29, 0xBE	; 190
     c4e:	31 c0       	rjmp	.+98     	; 0xcb2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x12c>
     c50:	c7 e0       	ldi	r28, 0x07	; 7
     c52:	dd ea       	ldi	r29, 0xAD	; 173
     c54:	2e c0       	rjmp	.+92     	; 0xcb2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x12c>
     c56:	c6 e8       	ldi	r28, 0x86	; 134
     c58:	d0 ef       	ldi	r29, 0xF0	; 240
     c5a:	2b c0       	rjmp	.+86     	; 0xcb2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x12c>
     c5c:	c7 e8       	ldi	r28, 0x87	; 135
     c5e:	da ef       	ldi	r29, 0xFA	; 250
     c60:	2c c0       	rjmp	.+88     	; 0xcba <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x134>
     c62:	c5 e8       	ldi	r28, 0x85	; 133
     c64:	d1 ef       	ldi	r29, 0xF1	; 241
     c66:	2d c0       	rjmp	.+90     	; 0xcc2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x13c>
     c68:	c6 e8       	ldi	r28, 0x86	; 134
     c6a:	d0 ef       	ldi	r29, 0xF0	; 240
     c6c:	2e c0       	rjmp	.+92     	; 0xcca <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x144>
     c6e:	c2 e8       	ldi	r28, 0x82	; 130
     c70:	d0 ed       	ldi	r29, 0xD0	; 208
     c72:	2b c0       	rjmp	.+86     	; 0xcca <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x144>
     c74:	8c 2f       	mov	r24, r28
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	fc 01       	movw	r30, r24
     c7a:	34 97       	sbiw	r30, 0x04	; 4
     c7c:	ec 30       	cpi	r30, 0x0C	; 12
     c7e:	f1 05       	cpc	r31, r1
     c80:	48 f5       	brcc	.+82     	; 0xcd4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x14e>
     c82:	88 27       	eor	r24, r24
     c84:	ec 55       	subi	r30, 0x5C	; 92
     c86:	ff 4f       	sbci	r31, 0xFF	; 255
     c88:	8f 4f       	sbci	r24, 0xFF	; 255
     c8a:	81 c2       	rjmp	.+1282   	; 0x118e <__tablejump2__>
     c8c:	c7 e8       	ldi	r28, 0x87	; 135
     c8e:	df ef       	ldi	r29, 0xFF	; 255
     c90:	02 c0       	rjmp	.+4      	; 0xc96 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x110>
     c92:	c7 e8       	ldi	r28, 0x87	; 135
     c94:	da ef       	ldi	r29, 0xFA	; 250
     c96:	49 e0       	ldi	r20, 0x09	; 9
     c98:	2e c0       	rjmp	.+92     	; 0xcf6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
     c9a:	c7 e8       	ldi	r28, 0x87	; 135
     c9c:	df ef       	ldi	r29, 0xFF	; 255
     c9e:	02 c0       	rjmp	.+4      	; 0xca4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x11e>
     ca0:	c7 e8       	ldi	r28, 0x87	; 135
     ca2:	de ef       	ldi	r29, 0xFE	; 254
     ca4:	44 e0       	ldi	r20, 0x04	; 4
     ca6:	27 c0       	rjmp	.+78     	; 0xcf6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
     ca8:	c7 e8       	ldi	r28, 0x87	; 135
     caa:	da ef       	ldi	r29, 0xFA	; 250
     cac:	fb cf       	rjmp	.-10     	; 0xca4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x11e>
     cae:	c7 e8       	ldi	r28, 0x87	; 135
     cb0:	da ef       	ldi	r29, 0xFA	; 250
     cb2:	43 e0       	ldi	r20, 0x03	; 3
     cb4:	20 c0       	rjmp	.+64     	; 0xcf6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
     cb6:	c7 e8       	ldi	r28, 0x87	; 135
     cb8:	df ef       	ldi	r29, 0xFF	; 255
     cba:	41 e0       	ldi	r20, 0x01	; 1
     cbc:	1c c0       	rjmp	.+56     	; 0xcf6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
     cbe:	c6 e8       	ldi	r28, 0x86	; 134
     cc0:	db ef       	ldi	r29, 0xFB	; 251
     cc2:	41 e4       	ldi	r20, 0x41	; 65
     cc4:	18 c0       	rjmp	.+48     	; 0xcf6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
     cc6:	c7 e8       	ldi	r28, 0x87	; 135
     cc8:	da ef       	ldi	r29, 0xFA	; 250
     cca:	40 e0       	ldi	r20, 0x00	; 0
     ccc:	14 c0       	rjmp	.+40     	; 0xcf6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
     cce:	c2 e8       	ldi	r28, 0x82	; 130
     cd0:	d9 ed       	ldi	r29, 0xD9	; 217
     cd2:	fb cf       	rjmp	.-10     	; 0xcca <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x144>
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	1b c0       	rjmp	.+54     	; 0xd0e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x188>
     cd8:	c7 e8       	ldi	r28, 0x87	; 135
     cda:	df eb       	ldi	r29, 0xBF	; 191
     cdc:	4f e1       	ldi	r20, 0x1F	; 31
     cde:	0b c0       	rjmp	.+22     	; 0xcf6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
     ce0:	c7 e8       	ldi	r28, 0x87	; 135
     ce2:	df eb       	ldi	r29, 0xBF	; 191
     ce4:	47 e0       	ldi	r20, 0x07	; 7
     ce6:	07 c0       	rjmp	.+14     	; 0xcf6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
     ce8:	c7 e8       	ldi	r28, 0x87	; 135
     cea:	df ef       	ldi	r29, 0xFF	; 255
     cec:	4f e3       	ldi	r20, 0x3F	; 63
     cee:	03 c0       	rjmp	.+6      	; 0xcf6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
     cf0:	c7 e8       	ldi	r28, 0x87	; 135
     cf2:	df ef       	ldi	r29, 0xFF	; 255
     cf4:	4b e0       	ldi	r20, 0x0B	; 11
     cf6:	6a e2       	ldi	r22, 0x2A	; 42
     cf8:	c8 01       	movw	r24, r16
     cfa:	af de       	rcall	.-674    	; 0xa5a <_ZN7MCP251511setRegisterENS_8REGISTEREh>
     cfc:	4d 2f       	mov	r20, r29
     cfe:	69 e2       	ldi	r22, 0x29	; 41
     d00:	c8 01       	movw	r24, r16
     d02:	ab de       	rcall	.-682    	; 0xa5a <_ZN7MCP251511setRegisterENS_8REGISTEREh>
     d04:	4c 2f       	mov	r20, r28
     d06:	68 e2       	ldi	r22, 0x28	; 40
     d08:	c8 01       	movw	r24, r16
     d0a:	a7 de       	rcall	.-690    	; 0xa5a <_ZN7MCP251511setRegisterENS_8REGISTEREh>
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	df 91       	pop	r29
     d10:	cf 91       	pop	r28
     d12:	1f 91       	pop	r17
     d14:	0f 91       	pop	r16
     d16:	08 95       	ret

00000d18 <_ZN7MCP25159prepareIdEPhbm>:
     d18:	0f 93       	push	r16
     d1a:	1f 93       	push	r17
     d1c:	fb 01       	movw	r30, r22
     d1e:	44 23       	and	r20, r20
     d20:	b1 f0       	breq	.+44     	; 0xd4e <_ZN7MCP25159prepareIdEPhbm+0x36>
     d22:	03 83       	std	Z+3, r16	; 0x03
     d24:	12 83       	std	Z+2, r17	; 0x02
     d26:	89 01       	movw	r16, r18
     d28:	22 27       	eor	r18, r18
     d2a:	33 27       	eor	r19, r19
     d2c:	90 2f       	mov	r25, r16
     d2e:	9c 71       	andi	r25, 0x1C	; 28
     d30:	80 2f       	mov	r24, r16
     d32:	83 70       	andi	r24, 0x03	; 3
     d34:	48 e0       	ldi	r20, 0x08	; 8
     d36:	94 9f       	mul	r25, r20
     d38:	80 0d       	add	r24, r0
     d3a:	11 24       	eor	r1, r1
     d3c:	88 60       	ori	r24, 0x08	; 8
     d3e:	81 83       	std	Z+1, r24	; 0x01
     d40:	55 e0       	ldi	r21, 0x05	; 5
     d42:	16 95       	lsr	r17
     d44:	07 95       	ror	r16
     d46:	5a 95       	dec	r21
     d48:	e1 f7       	brne	.-8      	; 0xd42 <_ZN7MCP25159prepareIdEPhbm+0x2a>
     d4a:	00 83       	st	Z, r16
     d4c:	0d c0       	rjmp	.+26     	; 0xd68 <_ZN7MCP25159prepareIdEPhbm+0x50>
     d4e:	c8 01       	movw	r24, r16
     d50:	23 e0       	ldi	r18, 0x03	; 3
     d52:	96 95       	lsr	r25
     d54:	87 95       	ror	r24
     d56:	2a 95       	dec	r18
     d58:	e1 f7       	brne	.-8      	; 0xd52 <_ZN7MCP25159prepareIdEPhbm+0x3a>
     d5a:	80 83       	st	Z, r24
     d5c:	02 95       	swap	r16
     d5e:	00 0f       	add	r16, r16
     d60:	00 7e       	andi	r16, 0xE0	; 224
     d62:	01 83       	std	Z+1, r16	; 0x01
     d64:	13 82       	std	Z+3, r1	; 0x03
     d66:	12 82       	std	Z+2, r1	; 0x02
     d68:	1f 91       	pop	r17
     d6a:	0f 91       	pop	r16
     d6c:	08 95       	ret

00000d6e <_ZN7MCP251513setFilterMaskENS_4MASKEbm>:
     d6e:	8f 92       	push	r8
     d70:	9f 92       	push	r9
     d72:	af 92       	push	r10
     d74:	bf 92       	push	r11
     d76:	cf 92       	push	r12
     d78:	df 92       	push	r13
     d7a:	ef 92       	push	r14
     d7c:	ff 92       	push	r15
     d7e:	0f 93       	push	r16
     d80:	1f 93       	push	r17
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	00 d0       	rcall	.+0      	; 0xd88 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x1a>
     d88:	1f 92       	push	r1
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	de b7       	in	r29, 0x3e	; 62
     d8e:	7c 01       	movw	r14, r24
     d90:	d6 2e       	mov	r13, r22
     d92:	c4 2e       	mov	r12, r20
     d94:	48 01       	movw	r8, r16
     d96:	59 01       	movw	r10, r18
     d98:	f2 de       	rcall	.-540    	; 0xb7e <_ZN7MCP251513setConfigModeEv>
     d9a:	81 11       	cpse	r24, r1
     d9c:	19 c0       	rjmp	.+50     	; 0xdd0 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x62>
     d9e:	95 01       	movw	r18, r10
     da0:	84 01       	movw	r16, r8
     da2:	4c 2d       	mov	r20, r12
     da4:	be 01       	movw	r22, r28
     da6:	6f 5f       	subi	r22, 0xFF	; 255
     da8:	7f 4f       	sbci	r23, 0xFF	; 255
     daa:	c7 01       	movw	r24, r14
     dac:	b5 df       	rcall	.-150    	; 0xd18 <_ZN7MCP25159prepareIdEPhbm>
     dae:	dd 20       	and	r13, r13
     db0:	29 f0       	breq	.+10     	; 0xdbc <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x4e>
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	d8 12       	cpse	r13, r24
     db6:	0b c0       	rjmp	.+22     	; 0xdce <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x60>
     db8:	64 e2       	ldi	r22, 0x24	; 36
     dba:	01 c0       	rjmp	.+2      	; 0xdbe <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x50>
     dbc:	60 e2       	ldi	r22, 0x20	; 32
     dbe:	24 e0       	ldi	r18, 0x04	; 4
     dc0:	ae 01       	movw	r20, r28
     dc2:	4f 5f       	subi	r20, 0xFF	; 255
     dc4:	5f 4f       	sbci	r21, 0xFF	; 255
     dc6:	c7 01       	movw	r24, r14
     dc8:	5c de       	rcall	.-840    	; 0xa82 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	01 c0       	rjmp	.+2      	; 0xdd0 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x62>
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	0f 90       	pop	r0
     dd2:	0f 90       	pop	r0
     dd4:	0f 90       	pop	r0
     dd6:	0f 90       	pop	r0
     dd8:	df 91       	pop	r29
     dda:	cf 91       	pop	r28
     ddc:	1f 91       	pop	r17
     dde:	0f 91       	pop	r16
     de0:	ff 90       	pop	r15
     de2:	ef 90       	pop	r14
     de4:	df 90       	pop	r13
     de6:	cf 90       	pop	r12
     de8:	bf 90       	pop	r11
     dea:	af 90       	pop	r10
     dec:	9f 90       	pop	r9
     dee:	8f 90       	pop	r8
     df0:	08 95       	ret

00000df2 <_ZN7MCP25159setFilterENS_3RXFEbm>:
     df2:	8f 92       	push	r8
     df4:	9f 92       	push	r9
     df6:	af 92       	push	r10
     df8:	bf 92       	push	r11
     dfa:	cf 92       	push	r12
     dfc:	df 92       	push	r13
     dfe:	ef 92       	push	r14
     e00:	ff 92       	push	r15
     e02:	0f 93       	push	r16
     e04:	1f 93       	push	r17
     e06:	cf 93       	push	r28
     e08:	df 93       	push	r29
     e0a:	00 d0       	rcall	.+0      	; 0xe0c <_ZN7MCP25159setFilterENS_3RXFEbm+0x1a>
     e0c:	1f 92       	push	r1
     e0e:	cd b7       	in	r28, 0x3d	; 61
     e10:	de b7       	in	r29, 0x3e	; 62
     e12:	6c 01       	movw	r12, r24
     e14:	f6 2e       	mov	r15, r22
     e16:	e4 2e       	mov	r14, r20
     e18:	48 01       	movw	r8, r16
     e1a:	59 01       	movw	r10, r18
     e1c:	b0 de       	rcall	.-672    	; 0xb7e <_ZN7MCP251513setConfigModeEv>
     e1e:	81 11       	cpse	r24, r1
     e20:	34 c0       	rjmp	.+104    	; 0xe8a <_ZN7MCP25159setFilterENS_3RXFEbm+0x98>
     e22:	82 e0       	ldi	r24, 0x02	; 2
     e24:	f8 16       	cp	r15, r24
     e26:	a9 f0       	breq	.+42     	; 0xe52 <_ZN7MCP25159setFilterENS_3RXFEbm+0x60>
     e28:	8f 15       	cp	r24, r15
     e2a:	40 f0       	brcs	.+16     	; 0xe3c <_ZN7MCP25159setFilterENS_3RXFEbm+0x4a>
     e2c:	ff 20       	and	r15, r15
     e2e:	d1 f0       	breq	.+52     	; 0xe64 <_ZN7MCP25159setFilterENS_3RXFEbm+0x72>
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	f8 12       	cpse	r15, r24
     e34:	29 c0       	rjmp	.+82     	; 0xe88 <_ZN7MCP25159setFilterENS_3RXFEbm+0x96>
     e36:	44 e0       	ldi	r20, 0x04	; 4
     e38:	f4 2e       	mov	r15, r20
     e3a:	15 c0       	rjmp	.+42     	; 0xe66 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
     e3c:	84 e0       	ldi	r24, 0x04	; 4
     e3e:	f8 16       	cp	r15, r24
     e40:	71 f0       	breq	.+28     	; 0xe5e <_ZN7MCP25159setFilterENS_3RXFEbm+0x6c>
     e42:	f8 16       	cp	r15, r24
     e44:	48 f0       	brcs	.+18     	; 0xe58 <_ZN7MCP25159setFilterENS_3RXFEbm+0x66>
     e46:	85 e0       	ldi	r24, 0x05	; 5
     e48:	f8 12       	cpse	r15, r24
     e4a:	1e c0       	rjmp	.+60     	; 0xe88 <_ZN7MCP25159setFilterENS_3RXFEbm+0x96>
     e4c:	88 e1       	ldi	r24, 0x18	; 24
     e4e:	f8 2e       	mov	r15, r24
     e50:	0a c0       	rjmp	.+20     	; 0xe66 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
     e52:	38 e0       	ldi	r19, 0x08	; 8
     e54:	f3 2e       	mov	r15, r19
     e56:	07 c0       	rjmp	.+14     	; 0xe66 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
     e58:	20 e1       	ldi	r18, 0x10	; 16
     e5a:	f2 2e       	mov	r15, r18
     e5c:	04 c0       	rjmp	.+8      	; 0xe66 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
     e5e:	94 e1       	ldi	r25, 0x14	; 20
     e60:	f9 2e       	mov	r15, r25
     e62:	01 c0       	rjmp	.+2      	; 0xe66 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
     e64:	f1 2c       	mov	r15, r1
     e66:	95 01       	movw	r18, r10
     e68:	84 01       	movw	r16, r8
     e6a:	4e 2d       	mov	r20, r14
     e6c:	be 01       	movw	r22, r28
     e6e:	6f 5f       	subi	r22, 0xFF	; 255
     e70:	7f 4f       	sbci	r23, 0xFF	; 255
     e72:	c6 01       	movw	r24, r12
     e74:	51 df       	rcall	.-350    	; 0xd18 <_ZN7MCP25159prepareIdEPhbm>
     e76:	24 e0       	ldi	r18, 0x04	; 4
     e78:	ae 01       	movw	r20, r28
     e7a:	4f 5f       	subi	r20, 0xFF	; 255
     e7c:	5f 4f       	sbci	r21, 0xFF	; 255
     e7e:	6f 2d       	mov	r22, r15
     e80:	c6 01       	movw	r24, r12
     e82:	ff dd       	rcall	.-1026   	; 0xa82 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
     e84:	80 e0       	ldi	r24, 0x00	; 0
     e86:	01 c0       	rjmp	.+2      	; 0xe8a <_ZN7MCP25159setFilterENS_3RXFEbm+0x98>
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	0f 90       	pop	r0
     e8c:	0f 90       	pop	r0
     e8e:	0f 90       	pop	r0
     e90:	0f 90       	pop	r0
     e92:	df 91       	pop	r29
     e94:	cf 91       	pop	r28
     e96:	1f 91       	pop	r17
     e98:	0f 91       	pop	r16
     e9a:	ff 90       	pop	r15
     e9c:	ef 90       	pop	r14
     e9e:	df 90       	pop	r13
     ea0:	cf 90       	pop	r12
     ea2:	bf 90       	pop	r11
     ea4:	af 90       	pop	r10
     ea6:	9f 90       	pop	r9
     ea8:	8f 90       	pop	r8
     eaa:	08 95       	ret

00000eac <_ZN7MCP25155resetEv>:
     eac:	af 92       	push	r10
     eae:	bf 92       	push	r11
     eb0:	cf 92       	push	r12
     eb2:	df 92       	push	r13
     eb4:	ef 92       	push	r14
     eb6:	ff 92       	push	r15
     eb8:	0f 93       	push	r16
     eba:	1f 93       	push	r17
     ebc:	cf 93       	push	r28
     ebe:	df 93       	push	r29
     ec0:	cd b7       	in	r28, 0x3d	; 61
     ec2:	de b7       	in	r29, 0x3e	; 62
     ec4:	64 97       	sbiw	r28, 0x14	; 20
     ec6:	0f b6       	in	r0, 0x3f	; 63
     ec8:	f8 94       	cli
     eca:	de bf       	out	0x3e, r29	; 62
     ecc:	0f be       	out	0x3f, r0	; 63
     ece:	cd bf       	out	0x3d, r28	; 61
     ed0:	7c 01       	movw	r14, r24
     ed2:	0f dd       	rcall	.-1506   	; 0x8f2 <_ZN7MCP25158startSPIEv>
     ed4:	80 ec       	ldi	r24, 0xC0	; 192
     ed6:	06 dd       	rcall	.-1524   	; 0x8e4 <_ZN8SPIClass8transferEh>
     ed8:	c7 01       	movw	r24, r14
     eda:	44 dd       	rcall	.-1400   	; 0x964 <_ZN7MCP25156endSPIEv>
     edc:	6a e0       	ldi	r22, 0x0A	; 10
     ede:	70 e0       	ldi	r23, 0x00	; 0
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	a5 db       	rcall	.-2230   	; 0x630 <delay>
     ee6:	8e 01       	movw	r16, r28
     ee8:	0f 5f       	subi	r16, 0xFF	; 255
     eea:	1f 4f       	sbci	r17, 0xFF	; 255
     eec:	8e e0       	ldi	r24, 0x0E	; 14
     eee:	f8 01       	movw	r30, r16
     ef0:	11 92       	st	Z+, r1
     ef2:	8a 95       	dec	r24
     ef4:	e9 f7       	brne	.-6      	; 0xef0 <_ZN7MCP25155resetEv+0x44>
     ef6:	2e e0       	ldi	r18, 0x0E	; 14
     ef8:	a8 01       	movw	r20, r16
     efa:	60 e3       	ldi	r22, 0x30	; 48
     efc:	c7 01       	movw	r24, r14
     efe:	c1 dd       	rcall	.-1150   	; 0xa82 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
     f00:	2e e0       	ldi	r18, 0x0E	; 14
     f02:	a8 01       	movw	r20, r16
     f04:	60 e4       	ldi	r22, 0x40	; 64
     f06:	c7 01       	movw	r24, r14
     f08:	bc dd       	rcall	.-1160   	; 0xa82 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
     f0a:	2e e0       	ldi	r18, 0x0E	; 14
     f0c:	a8 01       	movw	r20, r16
     f0e:	60 e5       	ldi	r22, 0x50	; 80
     f10:	c7 01       	movw	r24, r14
     f12:	b7 dd       	rcall	.-1170   	; 0xa82 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
     f14:	40 e0       	ldi	r20, 0x00	; 0
     f16:	60 e6       	ldi	r22, 0x60	; 96
     f18:	c7 01       	movw	r24, r14
     f1a:	9f dd       	rcall	.-1218   	; 0xa5a <_ZN7MCP251511setRegisterENS_8REGISTEREh>
     f1c:	40 e0       	ldi	r20, 0x00	; 0
     f1e:	60 e7       	ldi	r22, 0x70	; 112
     f20:	c7 01       	movw	r24, r14
     f22:	9b dd       	rcall	.-1226   	; 0xa5a <_ZN7MCP251511setRegisterENS_8REGISTEREh>
     f24:	43 ea       	ldi	r20, 0xA3	; 163
     f26:	6b e2       	ldi	r22, 0x2B	; 43
     f28:	c7 01       	movw	r24, r14
     f2a:	97 dd       	rcall	.-1234   	; 0xa5a <_ZN7MCP251511setRegisterENS_8REGISTEREh>
     f2c:	24 e0       	ldi	r18, 0x04	; 4
     f2e:	47 e6       	ldi	r20, 0x67	; 103
     f30:	60 e6       	ldi	r22, 0x60	; 96
     f32:	c7 01       	movw	r24, r14
     f34:	cc dd       	rcall	.-1128   	; 0xace <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
     f36:	21 e0       	ldi	r18, 0x01	; 1
     f38:	47 e6       	ldi	r20, 0x67	; 103
     f3a:	60 e7       	ldi	r22, 0x70	; 112
     f3c:	c7 01       	movw	r24, r14
     f3e:	c7 dd       	rcall	.-1138   	; 0xace <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
     f40:	86 e0       	ldi	r24, 0x06	; 6
     f42:	e0 e0       	ldi	r30, 0x00	; 0
     f44:	f2 e0       	ldi	r31, 0x02	; 2
     f46:	de 01       	movw	r26, r28
     f48:	1f 96       	adiw	r26, 0x0f	; 15
     f4a:	01 90       	ld	r0, Z+
     f4c:	0d 92       	st	X+, r0
     f4e:	8a 95       	dec	r24
     f50:	e1 f7       	brne	.-8      	; 0xf4a <_ZN7MCP25155resetEv+0x9e>
     f52:	5e 01       	movw	r10, r28
     f54:	ff e0       	ldi	r31, 0x0F	; 15
     f56:	af 0e       	add	r10, r31
     f58:	b1 1c       	adc	r11, r1
     f5a:	c1 2c       	mov	r12, r1
     f5c:	d1 2c       	mov	r13, r1
     f5e:	f5 01       	movw	r30, r10
     f60:	61 91       	ld	r22, Z+
     f62:	5f 01       	movw	r10, r30
     f64:	41 e0       	ldi	r20, 0x01	; 1
     f66:	f1 e0       	ldi	r31, 0x01	; 1
     f68:	cf 16       	cp	r12, r31
     f6a:	d1 04       	cpc	r13, r1
     f6c:	09 f0       	breq	.+2      	; 0xf70 <_ZN7MCP25155resetEv+0xc4>
     f6e:	40 e0       	ldi	r20, 0x00	; 0
     f70:	00 e0       	ldi	r16, 0x00	; 0
     f72:	10 e0       	ldi	r17, 0x00	; 0
     f74:	98 01       	movw	r18, r16
     f76:	c7 01       	movw	r24, r14
     f78:	3c df       	rcall	.-392    	; 0xdf2 <_ZN7MCP25159setFilterENS_3RXFEbm>
     f7a:	81 11       	cpse	r24, r1
     f7c:	17 c0       	rjmp	.+46     	; 0xfac <_ZN7MCP25155resetEv+0x100>
     f7e:	8f ef       	ldi	r24, 0xFF	; 255
     f80:	c8 1a       	sub	r12, r24
     f82:	d8 0a       	sbc	r13, r24
     f84:	e6 e0       	ldi	r30, 0x06	; 6
     f86:	ce 16       	cp	r12, r30
     f88:	d1 04       	cpc	r13, r1
     f8a:	49 f7       	brne	.-46     	; 0xf5e <_ZN7MCP25155resetEv+0xb2>
     f8c:	00 e0       	ldi	r16, 0x00	; 0
     f8e:	10 e0       	ldi	r17, 0x00	; 0
     f90:	98 01       	movw	r18, r16
     f92:	41 e0       	ldi	r20, 0x01	; 1
     f94:	60 e0       	ldi	r22, 0x00	; 0
     f96:	c7 01       	movw	r24, r14
     f98:	ea de       	rcall	.-556    	; 0xd6e <_ZN7MCP251513setFilterMaskENS_4MASKEbm>
     f9a:	81 11       	cpse	r24, r1
     f9c:	07 c0       	rjmp	.+14     	; 0xfac <_ZN7MCP25155resetEv+0x100>
     f9e:	00 e0       	ldi	r16, 0x00	; 0
     fa0:	10 e0       	ldi	r17, 0x00	; 0
     fa2:	98 01       	movw	r18, r16
     fa4:	41 e0       	ldi	r20, 0x01	; 1
     fa6:	61 e0       	ldi	r22, 0x01	; 1
     fa8:	c7 01       	movw	r24, r14
     faa:	e1 de       	rcall	.-574    	; 0xd6e <_ZN7MCP251513setFilterMaskENS_4MASKEbm>
     fac:	64 96       	adiw	r28, 0x14	; 20
     fae:	0f b6       	in	r0, 0x3f	; 63
     fb0:	f8 94       	cli
     fb2:	de bf       	out	0x3e, r29	; 62
     fb4:	0f be       	out	0x3f, r0	; 63
     fb6:	cd bf       	out	0x3d, r28	; 61
     fb8:	df 91       	pop	r29
     fba:	cf 91       	pop	r28
     fbc:	1f 91       	pop	r17
     fbe:	0f 91       	pop	r16
     fc0:	ff 90       	pop	r15
     fc2:	ef 90       	pop	r14
     fc4:	df 90       	pop	r13
     fc6:	cf 90       	pop	r12
     fc8:	bf 90       	pop	r11
     fca:	af 90       	pop	r10
     fcc:	08 95       	ret

00000fce <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>:

MCP2515::ERROR MCP2515::readMessage(const RXBn rxbn, struct can_frame *frame)
{
     fce:	7f 92       	push	r7
     fd0:	8f 92       	push	r8
     fd2:	9f 92       	push	r9
     fd4:	af 92       	push	r10
     fd6:	bf 92       	push	r11
     fd8:	cf 92       	push	r12
     fda:	df 92       	push	r13
     fdc:	ef 92       	push	r14
     fde:	ff 92       	push	r15
     fe0:	0f 93       	push	r16
     fe2:	1f 93       	push	r17
     fe4:	cf 93       	push	r28
     fe6:	df 93       	push	r29
     fe8:	00 d0       	rcall	.+0      	; 0xfea <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x1c>
     fea:	1f 92       	push	r1
     fec:	1f 92       	push	r1
     fee:	cd b7       	in	r28, 0x3d	; 61
     ff0:	de b7       	in	r29, 0x3e	; 62
     ff2:	4c 01       	movw	r8, r24
     ff4:	5a 01       	movw	r10, r20
    const struct RXBn_REGS *rxb = &RXB[rxbn];

    uint8_t tbufdata[5];

    readRegisters(rxb->SIDH, tbufdata, 5);
     ff6:	24 e0       	ldi	r18, 0x04	; 4
     ff8:	62 9f       	mul	r22, r18
     ffa:	80 01       	movw	r16, r0
     ffc:	11 24       	eor	r1, r1
     ffe:	f8 01       	movw	r30, r16
    1000:	e7 5f       	subi	r30, 0xF7	; 247
    1002:	fd 4f       	sbci	r31, 0xFD	; 253
    1004:	25 e0       	ldi	r18, 0x05	; 5
    1006:	ae 01       	movw	r20, r28
    1008:	4f 5f       	subi	r20, 0xFF	; 255
    100a:	5f 4f       	sbci	r21, 0xFF	; 255
    100c:	61 81       	ldd	r22, Z+1	; 0x01
    100e:	fe dc       	rcall	.-1540   	; 0xa0c <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>

    uint32_t id = (tbufdata[MCP_SIDH]<<3) + (tbufdata[MCP_SIDL]>>5);
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	99 81       	ldd	r25, Y+1	; 0x01
    1014:	c8 2e       	mov	r12, r24
    1016:	d1 2c       	mov	r13, r1
    1018:	45 e0       	ldi	r20, 0x05	; 5
    101a:	d5 94       	asr	r13
    101c:	c7 94       	ror	r12
    101e:	4a 95       	dec	r20
    1020:	e1 f7       	brne	.-8      	; 0x101a <__EEPROM_REGION_LENGTH__+0x1a>
    1022:	e8 e0       	ldi	r30, 0x08	; 8
    1024:	9e 9f       	mul	r25, r30
    1026:	c0 0c       	add	r12, r0
    1028:	d1 1c       	adc	r13, r1
    102a:	11 24       	eor	r1, r1
    102c:	0d 2c       	mov	r0, r13
    102e:	00 0c       	add	r0, r0
    1030:	ee 08       	sbc	r14, r14
    1032:	ff 08       	sbc	r15, r15

    if ( (tbufdata[MCP_SIDL] & TXB_EXIDE_MASK) ==  TXB_EXIDE_MASK ) {
    1034:	83 ff       	sbrs	r24, 3
    1036:	20 c0       	rjmp	.+64     	; 0x1078 <__EEPROM_REGION_LENGTH__+0x78>
        id = (id<<2) + (tbufdata[MCP_SIDL] & 0x03);
    1038:	92 e0       	ldi	r25, 0x02	; 2
    103a:	cc 0c       	add	r12, r12
    103c:	dd 1c       	adc	r13, r13
    103e:	ee 1c       	adc	r14, r14
    1040:	ff 1c       	adc	r15, r15
    1042:	9a 95       	dec	r25
    1044:	d1 f7       	brne	.-12     	; 0x103a <__EEPROM_REGION_LENGTH__+0x3a>
        id = (id<<8) + tbufdata[MCP_EID8];
    1046:	83 70       	andi	r24, 0x03	; 3
    1048:	c8 0e       	add	r12, r24
    104a:	d1 1c       	adc	r13, r1
    104c:	e1 1c       	adc	r14, r1
    104e:	f1 1c       	adc	r15, r1
    1050:	fe 2c       	mov	r15, r14
    1052:	ed 2c       	mov	r14, r13
    1054:	dc 2c       	mov	r13, r12
    1056:	cc 24       	eor	r12, r12
        id = (id<<8) + tbufdata[MCP_EID0];
    1058:	8b 81       	ldd	r24, Y+3	; 0x03
    105a:	c8 0e       	add	r12, r24
    105c:	d1 1c       	adc	r13, r1
    105e:	e1 1c       	adc	r14, r1
    1060:	f1 1c       	adc	r15, r1
    1062:	fe 2c       	mov	r15, r14
    1064:	ed 2c       	mov	r14, r13
    1066:	dc 2c       	mov	r13, r12
    1068:	cc 24       	eor	r12, r12
    106a:	8c 81       	ldd	r24, Y+4	; 0x04
    106c:	c8 0e       	add	r12, r24
    106e:	d1 1c       	adc	r13, r1
    1070:	e1 1c       	adc	r14, r1
    1072:	f1 1c       	adc	r15, r1
        id |= CAN_EFF_FLAG;
    1074:	68 94       	set
    1076:	f7 f8       	bld	r15, 7
    }

    uint8_t dlc = (tbufdata[MCP_DLC] & DLC_MASK);
    1078:	8d 81       	ldd	r24, Y+5	; 0x05
    107a:	8f 70       	andi	r24, 0x0F	; 15
    107c:	78 2e       	mov	r7, r24
    if (dlc > CAN_MAX_DLEN) {
    107e:	f8 e0       	ldi	r31, 0x08	; 8
    1080:	f8 17       	cp	r31, r24
    1082:	10 f1       	brcs	.+68     	; 0x10c8 <__EEPROM_REGION_LENGTH__+0xc8>
        return ERROR_FAIL;
    }

    uint8_t ctrl = readRegister(rxb->CTRL);
    1084:	f8 01       	movw	r30, r16
    1086:	e7 5f       	subi	r30, 0xF7	; 247
    1088:	fd 4f       	sbci	r31, 0xFD	; 253
    108a:	60 81       	ld	r22, Z
    108c:	c4 01       	movw	r24, r8
    108e:	aa dc       	rcall	.-1708   	; 0x9e4 <_ZN7MCP251512readRegisterENS_8REGISTERE>
    if (ctrl & RXBnCTRL_RTR) {
    1090:	83 ff       	sbrs	r24, 3
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <__EEPROM_REGION_LENGTH__+0x98>
        id |= CAN_RTR_FLAG;
    1094:	68 94       	set
    1096:	f6 f8       	bld	r15, 6
    }

    frame->can_id = id;
    1098:	f5 01       	movw	r30, r10
    109a:	c0 82       	st	Z, r12
    109c:	d1 82       	std	Z+1, r13	; 0x01
    109e:	e2 82       	std	Z+2, r14	; 0x02
    10a0:	f3 82       	std	Z+3, r15	; 0x03
    frame->can_dlc = dlc;
    10a2:	74 82       	std	Z+4, r7	; 0x04

    readRegisters(rxb->DATA, frame->data, dlc);
    10a4:	a5 01       	movw	r20, r10
    10a6:	48 5f       	subi	r20, 0xF8	; 248
    10a8:	5f 4f       	sbci	r21, 0xFF	; 255
    10aa:	07 5f       	subi	r16, 0xF7	; 247
    10ac:	1d 4f       	sbci	r17, 0xFD	; 253
    10ae:	27 2d       	mov	r18, r7
    10b0:	f8 01       	movw	r30, r16
    10b2:	62 81       	ldd	r22, Z+2	; 0x02
    10b4:	c4 01       	movw	r24, r8
    10b6:	aa dc       	rcall	.-1708   	; 0xa0c <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>

    modifyRegister(MCP_CANINTF, rxb->CANINTF_RXnIF, 0);
    10b8:	20 e0       	ldi	r18, 0x00	; 0
    10ba:	f8 01       	movw	r30, r16
    10bc:	43 81       	ldd	r20, Z+3	; 0x03
    10be:	6c e2       	ldi	r22, 0x2C	; 44
    10c0:	c4 01       	movw	r24, r8
    10c2:	05 dd       	rcall	.-1526   	; 0xace <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>

    return ERROR_OK;
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	01 c0       	rjmp	.+2      	; 0x10ca <__EEPROM_REGION_LENGTH__+0xca>
        id |= CAN_EFF_FLAG;
    }

    uint8_t dlc = (tbufdata[MCP_DLC] & DLC_MASK);
    if (dlc > CAN_MAX_DLEN) {
        return ERROR_FAIL;
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    readRegisters(rxb->DATA, frame->data, dlc);

    modifyRegister(MCP_CANINTF, rxb->CANINTF_RXnIF, 0);

    return ERROR_OK;
}
    10ca:	0f 90       	pop	r0
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	0f 90       	pop	r0
    10d2:	0f 90       	pop	r0
    10d4:	df 91       	pop	r29
    10d6:	cf 91       	pop	r28
    10d8:	1f 91       	pop	r17
    10da:	0f 91       	pop	r16
    10dc:	ff 90       	pop	r15
    10de:	ef 90       	pop	r14
    10e0:	df 90       	pop	r13
    10e2:	cf 90       	pop	r12
    10e4:	bf 90       	pop	r11
    10e6:	af 90       	pop	r10
    10e8:	9f 90       	pop	r9
    10ea:	8f 90       	pop	r8
    10ec:	7f 90       	pop	r7
    10ee:	08 95       	ret

000010f0 <_ZN7MCP251511readMessageEP9can_frame>:

MCP2515::ERROR MCP2515::readMessage(struct can_frame *frame)
{
    10f0:	0f 93       	push	r16
    10f2:	1f 93       	push	r17
    10f4:	cf 93       	push	r28
    10f6:	df 93       	push	r29
    10f8:	ec 01       	movw	r28, r24
    10fa:	8b 01       	movw	r16, r22
    ERROR rc;
    uint8_t stat = getStatus();
    10fc:	01 dd       	rcall	.-1534   	; 0xb00 <_ZN7MCP25159getStatusEv>

    if ( stat & STAT_RX0IF ) {
    10fe:	80 ff       	sbrs	r24, 0
    1100:	03 c0       	rjmp	.+6      	; 0x1108 <_ZN7MCP251511readMessageEP9can_frame+0x18>
        rc = readMessage(RXB0, frame);
    1102:	a8 01       	movw	r20, r16
    1104:	60 e0       	ldi	r22, 0x00	; 0
    1106:	04 c0       	rjmp	.+8      	; 0x1110 <_ZN7MCP251511readMessageEP9can_frame+0x20>
    } else if ( stat & STAT_RX1IF ) {
    1108:	81 ff       	sbrs	r24, 1
    110a:	08 c0       	rjmp	.+16     	; 0x111c <_ZN7MCP251511readMessageEP9can_frame+0x2c>
        rc = readMessage(RXB1, frame);
    110c:	a8 01       	movw	r20, r16
    110e:	61 e0       	ldi	r22, 0x01	; 1
    1110:	ce 01       	movw	r24, r28
    } else {
        rc = ERROR_NOMSG;
    }

    return rc;
}
    1112:	df 91       	pop	r29
    1114:	cf 91       	pop	r28
    1116:	1f 91       	pop	r17
    uint8_t stat = getStatus();

    if ( stat & STAT_RX0IF ) {
        rc = readMessage(RXB0, frame);
    } else if ( stat & STAT_RX1IF ) {
        rc = readMessage(RXB1, frame);
    1118:	0f 91       	pop	r16
    111a:	59 cf       	rjmp	.-334    	; 0xfce <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>
    } else {
        rc = ERROR_NOMSG;
    }

    return rc;
}
    111c:	85 e0       	ldi	r24, 0x05	; 5
    111e:	df 91       	pop	r29
    1120:	cf 91       	pop	r28
    1122:	1f 91       	pop	r17
    1124:	0f 91       	pop	r16
    1126:	08 95       	ret

00001128 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    1128:	cf 93       	push	r28
  uint8_t sreg = SREG;
    112a:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    112c:	f8 94       	cli
  if (!initialized) {
    112e:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <_ZN8SPIClass11initializedE>
    1132:	81 11       	cpse	r24, r1
    1134:	23 c0       	rjmp	.+70     	; 0x117c <_ZN8SPIClass5beginEv+0x54>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    1136:	e1 e2       	ldi	r30, 0x21	; 33
    1138:	f2 e0       	ldi	r31, 0x02	; 2
    113a:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    113c:	eb ed       	ldi	r30, 0xDB	; 219
    113e:	f1 e0       	ldi	r31, 0x01	; 1
    1140:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    1142:	e8 2f       	mov	r30, r24
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	ee 0f       	add	r30, r30
    1148:	ff 1f       	adc	r31, r31
    114a:	e4 5b       	subi	r30, 0xB4	; 180
    114c:	fd 4f       	sbci	r31, 0xFD	; 253
    114e:	a5 91       	lpm	r26, Z+
    1150:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    1152:	ec 91       	ld	r30, X
    1154:	e9 23       	and	r30, r25
    1156:	19 f4       	brne	.+6      	; 0x115e <_ZN8SPIClass5beginEv+0x36>
      digitalWrite(SS, HIGH);
    1158:	61 e0       	ldi	r22, 0x01	; 1
    115a:	85 e3       	ldi	r24, 0x35	; 53
    115c:	95 db       	rcall	.-2262   	; 0x888 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    115e:	61 e0       	ldi	r22, 0x01	; 1
    1160:	85 e3       	ldi	r24, 0x35	; 53
    1162:	56 db       	rcall	.-2388   	; 0x810 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    1164:	8c b5       	in	r24, 0x2c	; 44
    1166:	80 61       	ori	r24, 0x10	; 16
    1168:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    116a:	8c b5       	in	r24, 0x2c	; 44
    116c:	80 64       	ori	r24, 0x40	; 64
    116e:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    1170:	61 e0       	ldi	r22, 0x01	; 1
    1172:	84 e3       	ldi	r24, 0x34	; 52
    1174:	4d db       	rcall	.-2406   	; 0x810 <pinMode>
    pinMode(MOSI, OUTPUT);
    1176:	61 e0       	ldi	r22, 0x01	; 1
    1178:	83 e3       	ldi	r24, 0x33	; 51
    117a:	4a db       	rcall	.-2412   	; 0x810 <pinMode>
    117c:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <_ZN8SPIClass11initializedE>
  }
  initialized++; // reference count
    1180:	8f 5f       	subi	r24, 0xFF	; 255
    1182:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <_ZN8SPIClass11initializedE>
    1186:	cf bf       	out	0x3f, r28	; 63
  SREG = sreg;
    1188:	cf 91       	pop	r28
}
    118a:	08 95       	ret

0000118c <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    118c:	08 95       	ret

0000118e <__tablejump2__>:
    118e:	ee 0f       	add	r30, r30
    1190:	ff 1f       	adc	r31, r31
    1192:	88 1f       	adc	r24, r24
    1194:	8b bf       	out	0x3b, r24	; 59
    1196:	07 90       	elpm	r0, Z+
    1198:	f6 91       	elpm	r31, Z
    119a:	e0 2d       	mov	r30, r0
    119c:	19 94       	eijmp

0000119e <_exit>:
    119e:	f8 94       	cli

000011a0 <__stop_program>:
    11a0:	ff cf       	rjmp	.-2      	; 0x11a0 <__stop_program>
