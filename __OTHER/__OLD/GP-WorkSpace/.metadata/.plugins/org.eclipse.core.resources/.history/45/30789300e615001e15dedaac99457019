#include <stdio.h>
#include <stdlib.h>
#include <cmath>
#include <queue>
#include <string.h>
#include <cstdlib>
#include <sstream>
#include <mutex>

#include <mosquitto.h>

using namespace std;

#define TOPIC_IMU					"sensors/imu"
#define TOPIC_SPEEDOMETER			"sensors/speedometer"
#define TOPIC_GPS					"sensors/gps"

constexpr double pi = 3.14159265358979323846;
constexpr double earthRadius = 6371000.0; // Earth's radius in meters

#define KMH_TO_MS(speed) 								(speed*1000.0/3600.0)
#define MILLISECONDS_TO_SECONDS(inputMilliseconds)		(inputMilliseconds / 1000)

struct GPSLocation {
	double latitude; // in degrees
	double longitude; // in degree
};

GPSLocation calculateDeadReckoningGPS(GPSLocation initialGPS, double distance, double bearing) {
	double lat1 = initialGPS.latitude * pi / 180.0; // convert to radians
	double lon1 = initialGPS.longitude * pi / 180.0;

	double heading = bearing * pi / 180.0; // convert to radians
	// Calculate new latitude using dead reckoning formula
	double lat2 = asin(
			sin(lat1) * cos(distance / earthRadius) + cos(lat1) * sin(distance / earthRadius) * cos(heading));
	// Calculate new longitude using dead reckoning formula
	double lon2 = lon1
			+ atan2(sin(heading) * sin(distance / earthRadius) * cos(lat1),
					cos(distance / earthRadius) - sin(lat1) * sin(lat2));

	// Convert back to degrees
	GPSLocation newGPS;
	newGPS.latitude = lat2 * 180.0 / pi;
	newGPS.longitude = lon2 * 180.0 / pi;
	return newGPS;
}

double calculateBearingAngle(GPSLocation fromGPS, GPSLocation toGPS) {
	double lat1 = fromGPS.latitude * pi / 180.0;
	double lon1 = fromGPS.longitude * pi / 180.0;
	double lat2 = toGPS.latitude * pi / 180.0;
	double lon2 = toGPS.longitude * pi / 180.0;

	double y = sin(lon2 - lon1) * cos(lat2);
	double x = cos(lat1) * sin(lat2) - sin(lat1) * cos(lat2) * cos(lon2 - lon1);
	double bearing = atan2(y, x);

	// Convert bearing to degrees
	return bearing * 180.0 / pi;
}

double calculateDegreeDifference(double start_angle, double end_angle) {
	double diff = fmod(end_angle - start_angle + 540, 360) - 180;
	if (diff < -180) {
		diff += 360;
	}
	return diff;
}

double calculateQueueDifference(queue<double> &angle_queue) {
	double start_angle = angle_queue.front();
	double end_angle = angle_queue.back();

	//Clear Queue
	while (!angle_queue.empty()) {
		angle_queue.pop();
	}

	return calculateDegreeDifference(start_angle, end_angle);
}

double sumQueue(queue<double> &q) {
	double sum = 0.0;

	int count = q.size();

	while (!q.empty()) {
		sum += q.front();
		q.pop();
	}

	if (count == 0) {
		return 0.0;
	}

	return sum;
}

void on_connect(struct mosquitto *mosq, void *obj, int rc) {

	if (rc) {
		printf("Error with result code: %d\n", rc);
		exit(-1);
	}

	mosquitto_subscribe(mosq, NULL, TOPIC_IMU, 0);
	mosquitto_subscribe(mosq, NULL, TOPIC_SPEEDOMETER, 0);
	mosquitto_subscribe(mosq, NULL, TOPIC_GPS, 0);

}

queue<double> queue_sensorReading_gyro;
mutex mutexQueue_sensorReading_gyro;

queue<double> queue_sensorReading_speedometer;
mutex mutexQueue_sensorReading_speedometer;

queue<GPSLocation> queue_sensorReading_gps;
mutex mutexQueue_sensorReading_gps;

enum outageStatus {
	OUTAGE, NO_OUTAGE
};

outageStatus currentOutageStatus;
mutex mutexCurrentOutageStatus;

void on_message(struct mosquitto *mosq, void *obj, const struct mosquitto_message *msg) {

	if (strcmp(msg->topic, TOPIC_IMU) == 0) {
		double currentGyroSample = strtod((char*) msg->payload, nullptr);

		unique_lock<mutex> lockMutexQueue_sensorReading_gyro(mutexQueue_sensorReading_gyro);
		queue_sensorReading_gyro.push(currentGyroSample);
	}
	else if (strcmp(msg->topic, TOPIC_SPEEDOMETER) == 0) {
		double currentSpeedSample = strtod((char*) msg->payload, nullptr);

		unique_lock<mutex> lockMutexQueue_sensorReading_speedometer(mutexQueue_sensorReading_speedometer);
		queue_sensorReading_speedometer.push(currentSpeedSample);
	}
	else if (strcmp(msg->topic, TOPIC_GPS) == 0) {
		GPSLocation currentGpsSample;

		char *token = strtok((char*) msg->payload, ",");
		currentGpsSample.latitude = atof(token);

		token = strtok(NULL, ",");
		currentGpsSample.longitude = atof(token);

		token = strtok(NULL, ",");

		unique_lock<mutex> lockMutexCurrentOutageStatus(mutexCurrentOutageStatus);
		if (strcmp(token, "1") == 0) {
			currentOutageStatus = OUTAGE;
		}
		else if (strcmp(token, "0") == 0){
			currentOutageStatus = NO_OUTAGE;
	}
	lockMutexCurrentOutageStatus.unlock();

	unique_lock<mutex> lockMutexQueue_sensorReading_gps(mutexQueue_sensorReading_gps);
	queue_sensorReading_gps.push(currentGpsSample);
}
}

int main() {
int rc;

mosquitto_lib_init();

struct mosquitto *mosq;

mosq = mosquitto_new(NULL, true, NULL);
mosquitto_connect_callback_set(mosq, on_connect);
mosquitto_message_callback_set(mosq, on_message);

rc = mosquitto_connect(mosq, "localhost", 1883, 10);
if (rc) {
	printf("Could not connect to Broker with return code %d\n", rc);
	return -1;
}

mosquitto_loop_start(mosq);

printf("Press Enter to quit...\n");
getchar();

mosquitto_loop_stop(mosq, true);

mosquitto_disconnect(mosq);
mosquitto_destroy(mosq);
mosquitto_lib_cleanup();

return 0;
}
