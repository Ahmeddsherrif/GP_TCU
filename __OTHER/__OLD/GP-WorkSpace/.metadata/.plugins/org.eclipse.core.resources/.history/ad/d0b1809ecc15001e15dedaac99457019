#include <stdio.h>
#include <mosquitto.h>

#include <iostream>
#include <chrono>
#include <thread>
#include <string>
#include <vector>

using namespace std;

#include "SensorFile.h"
#include "GPSSensor.h"
#include "GyroscopeSensor.h"
#include "SpeedometerSensor.h"

#define DATA_DIR "/home/pi/Desktop/Graduation-Project/Demo/Simulation-Control/Sensors-Data-Process/Actual Data/Full-Track/"

#define DATA_GPS_FILE				"Positionx.csv"
#define DATA_IMU_FILE				"Orientationx.csv"
#define DATA_SPEEDOMETER_FILE		"Speedx.csv"

int main() {
	int rc;
	struct mosquitto *mosq;

	mosquitto_lib_init();

	mosq = mosquitto_new(NULL, true, NULL);

	rc = mosquitto_connect(mosq, "localhost", 1883, 60);

	if (rc != 0) {
		printf("Client could not connect to broker! Error Code: %d\n", rc);
		mosquitto_destroy(mosq);
		return -1;
	}

	printf("We are now connected to the broker!\n");

	string gyroFileName = string(DATA_DIR) + string(DATA_IMU_FILE);
	GyroscopeSensor gyro(gyroFileName);
	int gyroSampleNumber = 0;
	const int maxGyroSampleNumber = gyro.getNumberOfSamples() - 1;
	string currentGyroSample;

	string speedometerFileName = string(DATA_DIR) + string(DATA_SPEEDOMETER_FILE);
	SpeedometerSensor speedometer(speedometerFileName);
	int speedometerSampleNumber = 0;
	const int maxSpeedometerSampleNumber = speedometer.getNumberOfSamples() - 1;
	string currentSpeedSample;

	string gpsFileName = string(DATA_DIR) + string(DATA_GPS_FILE);
	GPSSensor gps(gpsFileName);
	int gpsSampleNumber = 0;
	const int maxGpsSampleNumber = gps.getNumberOfSamples() - 1;
	string currentGpsSample;

	std::chrono::milliseconds imuPeriod(10);
	std::chrono::milliseconds speedometerPeriod(40);
	std::chrono::milliseconds gpsPeriod(1000);

	std::chrono::steady_clock::time_point lastTimeImu =
			std::chrono::steady_clock::now();
	std::chrono::steady_clock::time_point lastTimeSpeedometer =
			std::chrono::steady_clock::now();
	std::chrono::steady_clock::time_point lastTimeGps =
			std::chrono::steady_clock::now();

	while (true) {
		std::chrono::steady_clock::time_point currentTime =
				std::chrono::steady_clock::now();

		// Code block to execute every 10ms
		if (currentTime - lastTimeImu >= imuPeriod) {
			lastTimeImu = currentTime;
			// Insert your code here
			currentGyroSample = gyro.getYawRate(gyroSampleNumber);
			gyroSampleNumber++;

			if (gyroSampleNumber >= maxGyroSampleNumber) {
				break;
			}

			mosquitto_publish(mosq, NULL, "sensors/imu",
					currentGyroSample.length(), currentGyroSample.c_str(), 0,
					false);

		}

		// Code block to execute every 40ms
		if (currentTime - lastTimeSpeedometer >= speedometerPeriod) {
			lastTimeSpeedometer = currentTime;
			// Insert your code here
			currentSpeedSample = speedometer.getSpeed(speedometerSampleNumber);
			speedometerSampleNumber++;

			if (speedometerSampleNumber >= maxSpeedometerSampleNumber) {
				break;
			}

			mosquitto_publish(mosq, NULL, "sensors/speedometer",
					currentSpeedSample.length(), currentSpeedSample.c_str(), 0,
					false);

		}

		// Code block to execute every 1000ms
		if (currentTime - lastTimeGps >= gpsPeriod) {
			lastTimeGps = currentTime;
			// Insert your code here
			currentGpsSample = gps.getGPS(gpsSampleNumber);
			gpsSampleNumber++;

			if (gpsSampleNumber >= maxGpsSampleNumber) {
				break;
			}

			mosquitto_publish(mosq, NULL, "sensors/gps",
					currentGpsSample.length(), currentGpsSample.c_str(), 0,
					false);
		}

		std::this_thread::sleep_for(std::chrono::milliseconds(1));
	}

	mosquitto_disconnect(mosq);
	mosquitto_destroy(mosq);
	mosquitto_lib_cleanup();

	return 0;
}
