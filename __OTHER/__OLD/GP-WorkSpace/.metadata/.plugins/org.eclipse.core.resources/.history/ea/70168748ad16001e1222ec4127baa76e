#include "main.h"

bool isActive = false;
GPSReading currentGPSReading;

void on_connect(struct mosquitto *mosq, void *obj, int rc) {

	if (rc) {
		printf("Error with result code: %d\n", rc);
		exit(-1);
	}

	mosquitto_subscribe(mosq, NULL, TOPIC_ADR, 0);
	mosquitto_subscribe(mosq, NULL, TOPIC_CMD, 0);
}

void on_message(struct mosquitto *mosq, void *obj, const struct mosquitto_message *msg) {
	if (strcmp(msg->topic, TOPIC_CMD) == 0) {
		if (strcmp((char*) msg->payload, MESSAGE_START) == 0) {
			isActive = true;
		}
		else if (strcmp((char*) msg->payload, MESSAGE_KILL) == 0) {
			isActive = false;
		}
	}
}

int main() {

	int rc;

	mosquitto_lib_init();

	struct mosquitto *mosq;

	mosq = mosquitto_new(NULL, true, NULL);
	mosquitto_connect_callback_set(mosq, on_connect);
	mosquitto_message_callback_set(mosq, on_message);

	rc = mosquitto_connect(mosq, "localhost", 1883, 10);
	if (rc) {
		printf("Could not connect to Broker with return code %d\n", rc);
		return -1;
	}

	mosquitto_loop_start(mosq);

	while (isActive == false) {
		cout << "Waiting ..." << endl;
		std::this_thread::sleep_for(std::chrono::seconds(1));
	}

	Mobile myMobile;
	myMobile.begin();


	while (isActive == true) {



		std::this_thread::sleep_for(std::chrono::milliseconds(1));
	}

	mosquitto_loop_stop(mosq, true);

	mosquitto_disconnect(mosq);
	mosquitto_destroy(mosq);
	mosquitto_lib_cleanup();

	return 0;
}













