#include "main.h"

void on_connect(struct mosquitto *mosq, void *obj, int rc) {

	if (rc) {
		printf("Error with result code: %d\n", rc);
		exit(-1);
	}

	//mosquitto_subscribe(mosq, NULL, TOPIC_IMU, 0);

}

void on_message(struct mosquitto *mosq, void *obj, const struct mosquitto_message *msg) {

}

int main() {
	int rc;

	mosquitto_lib_init();

	struct mosquitto *mosq;

	mosq = mosquitto_new(NULL, true, NULL);
	mosquitto_connect_callback_set(mosq, on_connect);
	mosquitto_message_callback_set(mosq, on_message);

	rc = mosquitto_connect(mosq, "localhost", 1883, 10);
	if (rc) {
		printf("Could not connect to Broker with return code %d\n", rc);
		return -1;
	}

	mosquitto_loop_start(mosq);
	//mosquitto_publish(mosq, NULL, TOPIC_ADR, .length(), .c_str(), 0,false);

	bool isActive = true;
	string message;
	char userInput;

	while (isActive) {
		userInput = getchar();

		switch (userInput) {
			case 'o':
			case 'O': {
				message = MESSAGE_OUTAGE;

				break;
			}

			case 'e':
			case 'E': {
				message = MESSAGE_ECALL;

				break;
			}

			case 's':
			case 'S': {
				message = MESSAGE_START;
				mosquitto_publish(mosq, NULL, TOPIC_CONTROL, message.length(), message.c_str(), 0,false);
				break;
			}

			case 'x':
			case 'X': {
				message = MESSAGE_STOP;
				mosquitto_publish(mosq, NULL, TOPIC_CONTROL, message.length(), message.c_str(), 0,false);
				break;
			}

			case 'k':
			case 'K': {
				message = MESSAGE_KILL;
				mosquitto_publish(mosq, NULL, TOPIC_CONTROL, message.length(), message.c_str(), 0,false);
				isActive = false;
				break;
			}
			default: {

				break;
			}
		}
	}

	mosquitto_loop_stop(mosq, true);

	mosquitto_disconnect(mosq);
	mosquitto_destroy(mosq);
	mosquitto_lib_cleanup();

	return 0;
}
